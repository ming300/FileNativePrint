if (window.FR == null) {window.FR = {};}FR.servletURL = '/WebReport/ReportServer';FR.serverURL = 'http://localhost:8075';FR.server = 'http://localhost:8075/WebReport';FR.PROJECTNAME = '';FR.shouldSendHeartBeat = true;//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));
/*!
 * jQuery JavaScript Library v1.9.1
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2012 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-2-4
 */
(function( window, undefined ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//"use strict";
var
	// The deferred used on DOM ready
	readyList,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// Support: IE<9
	// For `typeof node.method` instead of `node.method !== undefined`
	core_strundefined = typeof undefined,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,
	location = window.location,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// [[Class]] -> type pairs
	class2type = {},

	// List of deleted data cache ids, so we can reuse them
	core_deletedIds = [],

	core_version = "1.9.1",

	// Save a reference to some core methods
	core_concat = core_deletedIds.concat,
	core_push = core_deletedIds.push,
	core_slice = core_deletedIds.slice,
	core_indexOf = core_deletedIds.indexOf,
	core_toString = class2type.toString,
	core_hasOwn = class2type.hasOwnProperty,
	core_trim = core_version.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

	// Used for splitting on whitespace
	core_rnotwhite = /\S+/g,

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	},

	// The ready event handler
	completed = function( event ) {

		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
			detach();
			jQuery.ready();
		}
	},
	// Clean-up method for dom ready events
	detach = function() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed, false );
			window.removeEventListener( "load", completed, false );

		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: core_version,

	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return String( obj );
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ core_toString.call(obj) ] || "object" :
			typeof obj;
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!core_hasOwn.call(obj, "constructor") &&
				!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for ( key in obj ) {}

		return key === undefined || core_hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );
		if ( scripts ) {
			jQuery( scripts ).remove();
		}
		return jQuery.merge( [], parsed.childNodes );
	},

	parseJSON: function( data ) {
		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		if ( data === null ) {
			return data;
		}

		if ( typeof data === "string" ) {

			// Make sure leading/trailing whitespace is removed (IE can't handle it)
			data = jQuery.trim( data );

			if ( data ) {
				// Make sure the incoming data is actual JSON
				// Logic borrowed from http://json.org/json2.js
				if ( rvalidchars.test( data.replace( rvalidescape, "@" )
					.replace( rvalidtokens, "]" )
					.replace( rvalidbraces, "")) ) {

					return ( new Function( "return " + data ) )();
				}
			}
		}

		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				core_trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				core_push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( core_indexOf ) {
				return core_indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}
		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return core_concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || type !== "function" &&
		( length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj );
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				args = args || [];
				args = [ context, args.slice ? args.slice() : args ];
				if ( list && ( !fired || stack ) ) {
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function() {

	var support, all, a,
		input, select, fragment,
		opt, eventName, isSupported, i,
		div = document.createElement("div");

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// Support tests won't run in some limited or non-browser environments
	all = div.getElementsByTagName("*");
	a = div.getElementsByTagName("a")[ 0 ];
	if ( !all || !a || !all.length ) {
		return {};
	}

	// First batch of tests
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px;float:left;opacity:.5";
	support = {
		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		getSetAttribute: div.className !== "t",

		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: div.firstChild.nodeType === 3,

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		style: /top/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: a.getAttribute("href") === "/a",

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.5/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
		checkOn: !!input.value,

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Tests for enctype support on a form (#6743)
		enctype: !!document.createElement("form").enctype,

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

		// jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode
		boxModel: document.compatMode === "CSS1Compat",

		// Will be defined later
		deleteExpando: true,
		noCloneEvent: true,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableMarginRight: true,
		boxSizingReliable: true,
		pixelPosition: false
	};

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<9
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	// Check if we can trust getAttribute("value")
	input = document.createElement("input");
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "checked", "t" );
	input.setAttribute( "name", "t" );

	fragment = document.createDocumentFragment();
	fragment.appendChild( input );

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
	// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP), test/csp.php
	for ( i in { submit: true, change: true, focusin: true }) {
		div.setAttribute( eventName = "on" + i, "t" );

		support[ i + "Bubbles" ] = eventName in window || div.attributes[ eventName ].expando === false;
	}

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, marginDiv, tds,
			divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

		body.appendChild( container ).appendChild( div );

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName("td");
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Support: IE8
		// Check if empty table cells still have offsetWidth/Height
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check box-sizing and margin behavior
		div.innerHTML = "";
		div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
		support.boxSizing = ( div.offsetWidth === 4 );
		support.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== 1 );

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// Fails in WebKit before Feb 2011 nightlies
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = div.appendChild( document.createElement("div") );
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";

			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		if ( typeof div.style.zoom !== core_strundefined ) {
			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.innerHTML = "";
			div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			div.style.display = "block";
			div.innerHTML = "<div></div>";
			div.firstChild.style.width = "5px";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

			if ( support.inlineBlockNeedsLayout ) {
				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}

		body.removeChild( container );

		// Null elements to avoid leaks in IE
		container = div = tds = marginDiv = null;
	});

	// Null elements to avoid leaks in IE
	all = select = fragment = opt = a = input = null;

	return support;
})();

var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

function internalData( elem, name, data, pvt /* Internal Use Only */ ){
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, ret,
		internalKey = jQuery.expando,
		getByName = typeof name === "string",

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			elem[ internalKey ] = id = core_deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		cache[ id ] = {};

		// Avoids exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		if ( !isNode ) {
			cache[ id ].toJSON = jQuery.noop;
		}
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( getByName ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var i, l, thisCache,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			for ( i = 0, l = name.length; i < l; i++ ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	} else if ( jQuery.support.deleteExpando || cache != cache.window ) {
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		// Do not set data on non-element because it will not be cleared (#8335).
		if ( elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9 ) {
			return false;
		}

		var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

		// nodes accept data unless otherwise specified; rejection can be conditional
		return !noData || noData !== true && elem.getAttribute("classid") === noData;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var attrs, name,
			elem = this[0],
			i = 0,
			data = null;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attrs = elem.attributes;
					for ( ; i < attrs.length; i++ ) {
						name = attrs[i].name;

						if ( !name.indexOf( "data-" ) ) {
							name = jQuery.camelCase( name.slice(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return jQuery.access( this, function( value ) {

			if ( value === undefined ) {
				// Try to fetch any internally stored data first
				return elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : null;
			}

			this.each(function() {
				jQuery.data( this, key, value );
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		hooks.cur = fn;
		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook,
	rclass = /[\t\r\n]/g,
	rreturn = /\r/g,
	rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i,
	rboolean = /^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	getSetInput = jQuery.support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}
					elem.className = jQuery.trim( cur );

				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}
					elem.className = value ? jQuery.trim( cur ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.match( core_rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			// Toggle whole class name
			} else if ( type === core_strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var ret, hooks, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val,
				self = jQuery(this);

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var values = jQuery.makeArray( value );

				jQuery(elem).find("option").each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
				});

				if ( !values.length ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attr: function( elem, name, value ) {
		var hooks, notxml, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === core_strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( notxml ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && notxml && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && notxml && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {

			// In IE9+, Flash objects don't have .getAttribute (#12945)
			// Support: IE9+
			if ( typeof elem.getAttribute !== core_strundefined ) {
				ret =  elem.getAttribute( name );
			}

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( core_rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( rboolean.test( name ) ) {
					// Set corresponding property to false for boolean attributes
					// Also clear defaultChecked/defaultSelected (if appropriate) for IE<8
					if ( !getSetAttribute && ruseDefault.test( name ) ) {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					} else {
						elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	propFix: {
		tabindex: "tabIndex",
		readonly: "readOnly",
		"for": "htmlFor",
		"class": "className",
		maxlength: "maxLength",
		cellspacing: "cellSpacing",
		cellpadding: "cellPadding",
		rowspan: "rowSpan",
		colspan: "colSpan",
		usemap: "useMap",
		frameborder: "frameBorder",
		contenteditable: "contentEditable"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				return ( elem[ name ] = value );
			}

		} else {
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				return elem[ name ];
			}
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				var attributeNode = elem.getAttributeNode("tabindex");

				return attributeNode && attributeNode.specified ?
					parseInt( attributeNode.value, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						undefined;
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	get: function( elem, name ) {
		var
			// Use .prop to determine if this attribute is understood as boolean
			prop = jQuery.prop( elem, name ),

			// Fetch it accordingly
			attr = typeof prop === "boolean" && elem.getAttribute( name ),
			detail = typeof prop === "boolean" ?

				getSetInput && getSetAttribute ?
					attr != null :
					// oldIE fabricates an empty string for missing boolean attributes
					// and conflates checked/selected into attroperties
					ruseDefault.test( name ) ?
						elem[ jQuery.camelCase( "default-" + name ) ] :
						!!attr :

				// fetch an attribute node for properties not recognized as boolean
				elem.getAttributeNode( name );

		return detail && detail.value !== false ?
			name.toLowerCase() :
			undefined;
	},
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};

// fix oldIE value attroperty
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return jQuery.nodeName( elem, "input" ) ?

				// Ignore the value *property* by using defaultValue
				elem.defaultValue :

				ret && ret.specified ? ret.value : undefined;
		},
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return ret && ( name === "id" || name === "name" || name === "coords" ? ret.value !== "" : ret.specified ) ?
				ret.value :
				undefined;
		},
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			return name === "value" || value === elem.getAttribute( name ) ?
				value :
				undefined;
		}
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		get: nodeHook.get,
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		});
	});
}


// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !jQuery.support.hrefNormalized ) {
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			get: function( elem ) {
				var ret = elem.getAttribute( name, 2 );
				return ret == null ? undefined : ret;
			}
		});
	});

	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	});
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			get: function( elem ) {
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			}
		};
	});
}
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	});
});
var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = core_hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		event.isTrigger = true;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = core_slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					var obj = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler );
					if(obj.apply){
						ret = obj.apply( matched.elem, args );
					}

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur != this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			}
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== document.activeElement && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === document.activeElement && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Even when returnValue equals to undefined Firefox will still show alert
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{ type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === core_strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});
/*!
 * Sizzle CSS Selector Engine
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://sizzlejs.com/
 */
(function( window, undefined ) {

var i,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	hasDuplicate,
	outermostContext,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsXML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,
	sortOrder,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	support = {},
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Array methods
	arr = [],
	pop = arr.pop,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},


	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	operators = "([*^$|!~]?=)",
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*" ),
	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"NAME": new RegExp( "^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rsibling = /[\x20\t\r\n\f]*[+~]/,

	rnative = /^[^{]+\{\s*\[native code/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rescape = /'|\\/g,
	rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = /\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,
	funescape = function( _, escaped ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		return high !== high ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Use a stripped-down slice if we can't use a native one
try {
	slice.call( preferredDoc.documentElement.childNodes, 0 )[0].nodeType;
} catch ( e ) {
	slice = function( i ) {
		var elem,
			results = [];
		while ( (elem = this[i++]) ) {
			results.push( elem );
		}
		return results;
	};
}

/**
 * For feature detection
 * @param {Function} fn The function to test for native support
 */
function isNative( fn ) {
	return rnative.test( fn + "" );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var cache,
		keys = [];

	return (cache = function( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	});
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return fn( div );
	} catch (e) {
		return false;
	} finally {
		// release memory in IE
		div = null;
	}
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( !documentIsXML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getByClassName && context.getElementsByClassName ) {
				push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && !rbuggyQSA.test(selector) ) {
			old = true;
			nid = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results, slice.call( newContext.querySelectorAll(
						newSelector
					), 0 ) );
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsXML = isXML( doc );

	// Check if getElementsByTagName("*") returns only elements
	support.tagNameNoComments = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if attributes should be retrieved by attribute nodes
	support.attributes = assert(function( div ) {
		div.innerHTML = "<select></select>";
		var type = typeof div.lastChild.getAttribute("multiple");
		// IE8 returns a string for some attributes even when not present
		return type !== "boolean" && type !== "string";
	});

	// Check if getElementsByClassName can be trusted
	support.getByClassName = assert(function( div ) {
		// Opera can't find a second classname (in 9.6)
		div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
		if ( !div.getElementsByClassName || !div.getElementsByClassName("e").length ) {
			return false;
		}

		// Safari 3.2 caches class attributes and doesn't catch changes
		div.lastChild.className = "e";
		return div.getElementsByClassName("e").length === 2;
	});

	// Check if getElementById returns elements by name
	// Check if getElementsByName privileges form controls or returns elements by ID
	support.getByName = assert(function( div ) {
		// Inject content
		div.id = expando + 0;
		div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
		docElem.insertBefore( div, docElem.firstChild );

		// Test
		var pass = doc.getElementsByName &&
			// buggy browsers will return fewer than the correct 2
			doc.getElementsByName( expando ).length === 2 +
			// buggy browsers will return more than the correct 0
			doc.getElementsByName( expando + 0 ).length;
		support.getIdNotName = !doc.getElementById( expando );

		// Cleanup
		docElem.removeChild( div );

		return pass;
	});

	// IE6/7 return modified attributes
	Expr.attrHandle = assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
			div.firstChild.getAttribute("href") === "#";
	}) ?
		{} :
		{
			"href": function( elem ) {
				return elem.getAttribute( "href", 2 );
			},
			"type": function( elem ) {
				return elem.getAttribute("type");
			}
		};

	// ID find and filter
	if ( support.getIdNotName ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
				var m = context.getElementById( id );

				return m ?
					m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
						[m] :
						undefined :
					[];
			}
		};
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.tagNameNoComments ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Name
	Expr.find["NAME"] = support.getByName && function( tag, context ) {
		if ( typeof context.getElementsByName !== strundefined ) {
			return context.getElementsByName( name );
		}
	};

	// Class
	Expr.find["CLASS"] = support.getByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && !documentIsXML ) {
			return context.getElementsByClassName( className );
		}
	};

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21),
	// no need to also add to buggyMatches since matches checks buggyQSA
	// A support test would require too much code (would include document ready)
	rbuggyQSA = [ ":focus" ];

	if ( (support.qsa = isNative(doc.querySelectorAll)) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explictly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// IE8 - Some boolean attributes are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Opera 10-12/IE8 - ^= $= *= and empty values
			// Should not select anything
			div.innerHTML = "<input type='hidden' i=''/>";
			if ( div.querySelectorAll("[i^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\"\"|'')" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = isNative( (matches = docElem.matchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.webkitMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = new RegExp( rbuggyMatches.join("|") );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = isNative(docElem.contains) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {
		var compare;

		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		if ( (compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b )) ) {
			if ( compare & 1 || a.parentNode && a.parentNode.nodeType === 11 ) {
				if ( a === doc || contains( preferredDoc, a ) ) {
					return -1;
				}
				if ( b === doc || contains( preferredDoc, b ) ) {
					return 1;
				}
				return 0;
			}
			return compare & 4 ? -1 : 1;
		}

		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	// Always assume the presence of duplicates if sort doesn't
	// pass them to our comparison function (as in Google Chrome).
	hasDuplicate = false;
	[0, 0].sort( sortOrder );
	support.detectDuplicates = hasDuplicate;

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	// rbuggyQSA always contains :focus, so no need for an existence check
	if ( support.matchesSelector && !documentIsXML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && !rbuggyQSA.test(expr) ) {
		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	var val;

	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	if ( !documentIsXML ) {
		name = name.toLowerCase();
	}
	if ( (val = Expr.attrHandle[ name ]) ) {
		return val( elem );
	}
	if ( documentIsXML || support.attributes ) {
		return elem.getAttribute( name );
	}
	return ( (val = elem.getAttributeNode( name )) || elem.getAttribute( name ) ) && elem[ name ] === true ?
		name :
		val && val.specified ? val.value : null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

// Document sorting and removing duplicates
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		i = 1,
		j = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		for ( ; (elem = results[i]); i++ ) {
			if ( elem === results[ i - 1 ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && ( ~b.sourceIndex || MAX_NEGATIVE ) - ( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

// Returns a function to use in pseudos for input types
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

// Returns a function to use in pseudos for buttons
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

// Returns a function to use in pseudos for positionals
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[4] ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeName ) {
			if ( nodeName === "*" ) {
				return function() { return true; };
			}

			nodeName = nodeName.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
			};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifider
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsXML ?
						elem.getAttribute("xml:lang") || elem.getAttribute("lang") :
						elem.lang) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector( tokens.slice( 0, i - 1 ) ).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && !documentIsXML &&
					Expr.relative[ tokens[1].type ] ) {

				context = Expr.find["ID"]( token.matches[0].replace( runescape, funescape ), context )[0];
				if ( !context ) {
					return results;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, slice.call( seed, 0 ) );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		documentIsXML,
		results,
		rsibling.test( selector )
	);
	return results;
}

// Deprecated
Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Easy API for creating new setFilters
function setFilters() {}
Expr.filters = setFilters.prototype = Expr.pseudos;
Expr.setFilters = new setFilters();

// Initialize with the default document
setDocument();

// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
var runtil = /Until$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	isSimple = /^.[^:#\[\.,]*$/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var i, ret, self,
			len = this.length;

		if ( typeof selector !== "string" ) {
			self = this;
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		ret = [];
		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, this[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = ( this.selector ? this.selector + " " : "" ) + selector;
		return ret;
	},

	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false) );
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true) );
	},

	is: function( selector ) {
		return !!selector && (
			typeof selector === "string" ?
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				rneedsContext.test( selector ) ?
					jQuery( selector, this.context ).index( this[0] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			cur = this[i];

			while ( cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11 ) {
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;
				}
				cur = cur.parentNode;
			}
		}

		return this.pushStack( ret.length > 1 ? jQuery.unique( ret ) : ret );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( jQuery.unique(all) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

jQuery.fn.andSelf = jQuery.fn.addBack;

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

		if ( this.length > 1 && rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

	// Can't pass null or undefined to indexOf in Firefox 4
	// Set to 0 to skip string check
	qualifier = qualifier || 0;

	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem ) {
			return ( elem === qualifier ) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
	});
}
function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, false, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, false, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length > 0 ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem ) );
				}

				if ( elem.parentNode ) {
					if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
						setGlobalEval( getAll( elem, "script" ) );
					}
					elem.parentNode.removeChild( elem );
				}
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function( value ) {
		var isFunc = jQuery.isFunction( value );

		// Make sure that the elements are removed from the DOM before they are inserted
		// this can help fix replacing a parent with child elements
		if ( !isFunc && typeof value !== "string" ) {
			value = jQuery( value ).not( this ).detach();
		}

		return this.domManip( [ value ], true, function( elem ) {
			var next = this.nextSibling,
				parent = this.parentNode;

			if ( parent ) {
				jQuery( this ).remove();
				parent.insertBefore( elem, next );
			}
		});
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {

		// Flatten any nested arrays
		args = core_concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, table ? self.html() : undefined );
				}
				self.domManip( args, table, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				table = table && jQuery.nodeName( first, "tr" );
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call(
						table && jQuery.nodeName( this[i], "table" ) ?
							findOrAppend( this[i], "tbody" ) :
							this[i],
						node,
						i
					);
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Hope ajax is available...
								jQuery.ajax({
									url: node.src,
									type: "GET",
									dataType: "script",
									async: false,
									global: false,
									"throws": true
								});
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

function findOrAppend( elem, tag ) {
	return elem.getElementsByTagName( tag )[0] || elem.appendChild( elem.ownerDocument.createElement( tag ) );
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	var attr = elem.getAttributeNode("type");
	elem.type = ( attr && attr.specified ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !jQuery.support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( jQuery.support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			core_push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( manipulation_rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !jQuery.support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== core_strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						core_deletedIds.push( id );
					}
				}
			}
		}
	}
});
var iframe, getStyles, curCSS,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
	elemdisplay = { BODY: "block" },

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	// isHidden might be called from jQuery#filter function;
	// in that case, element will be second argument
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			var len, styles,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		var bool = typeof state === "boolean";

		return this.each(function() {
			if ( bool ? state : isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

// NOTE: we've included the "window" in window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return window.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, _computed ) {
		var width, minWidth, maxWidth,
			computed = _computed || getStyles( elem ),

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
			style = elem.style;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret;
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, _computed ) {
		var left, rs, rsLeft,
			computed = _computed || getStyles( elem ),
			ret = computed ? computed[ name ] : undefined,
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {
			// Use the already-created iframe if possible
			iframe = ( iframe ||
				jQuery("<iframe frameborder='0' width='0' height='0'/>")
				.css( "cssText", "display:block !important" )
			).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
			doc.write("<!doctype html><html><body>");
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}

// Called ONLY from within css_defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
		display = jQuery.css( elem[0], "display" );
	elem.remove();
	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				if ( computed ) {
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Work around by temporarily setting element display to inline-block
					return jQuery.swap( elem, { "display": "inline-block" },
						curCSS, [ elem, "marginRight" ] );
				}
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						computed = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( computed ) ?
							jQuery( elem ).position()[ prop ] + "px" :
							computed;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
			(!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function(){
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !manipulation_rcheckableType.test( type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.hover = function( fnOver, fnOut ) {
	return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
};
var
	// Document location
	ajaxLocParts,
	ajaxLocation,
	ajax_nonce = jQuery.now(),

	ajax_rquery = /\?/,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
	jQuery.fn[ type ] = function( fn ){
		return this.on( type, fn );
	};
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": window.String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// If successful, handle type chaining
			if ( status >= 200 && status < 300 || status === 304 ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 ) {
					isSuccess = true;
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					isSuccess = true;
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					isSuccess = ajaxConvert( s, response );
					statusText = isSuccess.state;
					success = isSuccess.data;
					error = isSuccess.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	}
});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields;

	// Fill responseXXX fields
	for ( type in responseFields ) {
		if ( type in responses ) {
			jqXHR[ responseFields[type] ] = responses[ type ];
		}
	}

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {
	var conv2, current, conv, tmp,
		converters = {},
		i = 0,
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice(),
		prev = dataTypes[ 0 ];

	// Apply the dataFilter if provided
	if ( s.dataFilter ) {
		response = s.dataFilter( response, s.dataType );
	}

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	// Convert to each sequential dataType, tolerating list modification
	for ( ; (current = dataTypes[++i]); ) {

		// There's only work to do if current dataType is non-auto
		if ( current !== "*" ) {

			// Convert response if prev dataType is non-auto and differs from current
			if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split(" ");
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.splice( i--, 0, current );
								}

								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s["throws"] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}

			// Update prev for next iteration
			prev = current;
		}
	}

	return { state: "success", data: response };
}
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});
var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
var xhrCallbacks, xhrSupported,
	xhrId = 0,
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject && function() {
		// Abort all pending requests
		var key;
		for ( key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	};

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject("Microsoft.XMLHTTP");
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
xhrSupported = jQuery.ajaxSettings.xhr();
jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = jQuery.support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var handle, i,
						xhr = s.xhr();

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( err ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, responseHeaders, statusText, responses;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occurred
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					if ( !s.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var end, unit,
				tween = this.createTween( prop, value ),
				parts = rfxnum.exec( value ),
				target = tween.cur(),
				start = +target || 0,
				scale = 1,
				maxIterations = 20;

			if ( parts ) {
				end = +parts[2];
				unit = parts[3] || ( jQuery.cssNumber[ prop ] ? "" : "px" );

				// We need to compute starting value
				if ( unit !== "px" && start ) {
					// Iteratively approximate from a nonzero starting point
					// Prefer the current property, because this process will be trivial if it uses the same units
					// Fallback to end or a simple constant
					start = jQuery.css( tween.elem, prop, true ) || end || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*
						// Use a string for doubling factor so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );

					// Update scale, tolerating zero or NaN from tween.cur()
					// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
				}

				tween.unit = unit;
				tween.start = start;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;
			}
			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

function createTweens( animation, props ) {
	jQuery.each( props, function( prop, value ) {
		var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( collection[ index ].call( animation, prop, value ) ) {

				// we're done with this property
				return;
			}
		}
	});
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	createTweens( animation, props );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var value, name, index, easing, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	/*jshint validthis:true */
	var prop, index, length,
		value, dataShow, toggle,
		tween, hooks, oldfire,
		anim = this,
		style = elem.style,
		orig = {},
		handled = [],
		hidden = elem.nodeType && isHidden( elem );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";

			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !jQuery.support.shrinkWrapBlocks ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}


	// show/hide pass
	for ( index in props ) {
		value = props[ index ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ index ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {
				continue;
			}
			handled.push( index );
		}
	}

	length = handled.length;
	if ( length ) {
		dataShow = jQuery._data( elem, "fxshow" ) || jQuery._data( elem, "fxshow", {} );
		if ( "hidden" in dataShow ) {
			hidden = dataShow.hidden;
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( index = 0 ; index < length ; index++ ) {
			prop = handled[ index ];
			tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );
			orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Remove in 2.0 - this supports IE8's panic based approach
// to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );
				doAnimation.finish = function() {
					anim.stop( true );
				};
				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.cur && hooks.cur.finish ) {
				hooks.cur.finish.call( this );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) ) {
		jQuery.fx.start();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, win,
		box = { top: 0, left: 0 },
		elem = this[ 0 ],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== core_strundefined ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	return {
		top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
		left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
	};
};

jQuery.offset = {

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.documentElement;
			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || document.documentElement;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Limit scope pollution from any deprecated API
// (function() {

// })();
// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
	define( "jquery", [], function () { return jQuery; } );
}

})( window );
/*!
 * jQuery Migrate - v1.1.1 - 2013-02-16
 * https://github.com/jquery/jquery-migrate
 * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors; Licensed MIT
 */
(function( jQuery, window, undefined ) {
// See http://bugs.jquery.com/ticket/13335
// "use strict";


var warnedAbout = {};

// List of warnings already given; public read only
jQuery.migrateWarnings = [];

// Set to true to prevent console output; migrateWarnings still maintained
// jQuery.migrateMute = false;

// Show a message on the console so devs know we're active
if ( !jQuery.migrateMute && window.console && console.log ) {
	console.log("JQMIGRATE: Logging is active");
}

// Set to false to disable traces that appear with warnings
if ( jQuery.migrateTrace === undefined ) {
	jQuery.migrateTrace = true;
}

// Forget any warnings we've already given; public
jQuery.migrateReset = function() {
	warnedAbout = {};
	jQuery.migrateWarnings.length = 0;
};

function migrateWarn( msg) {
	if ( !warnedAbout[ msg ] ) {
		warnedAbout[ msg ] = true;
		jQuery.migrateWarnings.push( msg );
		if ( window.console && console.warn && !jQuery.migrateMute ) {
			console.warn( "JQMIGRATE: " + msg );
			if ( jQuery.migrateTrace && console.trace ) {
				console.trace();
			}
		}
	}
}

function migrateWarnProp( obj, prop, value, msg ) {
	if ( Object.defineProperty ) {
		// On ES5 browsers (non-oldIE), warn if the code tries to get prop;
		// allow property to be overwritten in case some other plugin wants it
		try {
			Object.defineProperty( obj, prop, {
				configurable: true,
				enumerable: true,
				get: function() {
					migrateWarn( msg );
					return value;
				},
				set: function( newValue ) {
					migrateWarn( msg );
					value = newValue;
				}
			});
			return;
		} catch( err ) {
			// IE8 is a dope about Object.defineProperty, can't warn there
		}
	}

	// Non-ES5 (or broken) browser; just set the property
	jQuery._definePropertyBroken = true;
	obj[ prop ] = value;
}

if ( document.compatMode === "BackCompat" ) {
	// jQuery has never supported or tested Quirks Mode
	migrateWarn( "jQuery is not compatible with Quirks Mode" );
}


var attrFn = jQuery( "<input/>", { size: 1 } ).attr("size") && jQuery.attrFn,
	oldAttr = jQuery.attr,
	valueAttrGet = jQuery.attrHooks.value && jQuery.attrHooks.value.get ||
		function() { return null; },
	valueAttrSet = jQuery.attrHooks.value && jQuery.attrHooks.value.set ||
		function() { return undefined; },
	rnoType = /^(?:input|button)$/i,
	rnoAttrNodeType = /^[238]$/,
	rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
	ruseDefault = /^(?:checked|selected)$/i;

// jQuery.attrFn
migrateWarnProp( jQuery, "attrFn", attrFn || {}, "jQuery.attrFn is deprecated" );

jQuery.attr = function( elem, name, value, pass ) {
	var lowerName = name.toLowerCase(),
		nType = elem && elem.nodeType;

	if ( pass ) {
		// Since pass is used internally, we only warn for new jQuery
		// versions where there isn't a pass arg in the formal params
		if ( oldAttr.length < 4 ) {
			migrateWarn("jQuery.fn.attr( props, pass ) is deprecated");
		}
		if ( elem && !rnoAttrNodeType.test( nType ) &&
			(attrFn ? name in attrFn : jQuery.isFunction(jQuery.fn[name])) ) {
			return jQuery( elem )[ name ]( value );
		}
	}

	// Warn if user tries to set `type`, since it breaks on IE 6/7/8; by checking
	// for disconnected elements we don't warn on $( "<button>", { type: "button" } ).
	if ( name === "type" && value !== undefined && rnoType.test( elem.nodeName ) && elem.parentNode ) {
		migrateWarn("Can't change the 'type' of an input or button in IE 6/7/8");
	}

	// Restore boolHook for boolean property/attribute synchronization
	if ( !jQuery.attrHooks[ lowerName ] && rboolean.test( lowerName ) ) {
		jQuery.attrHooks[ lowerName ] = {
			get: function( elem, name ) {
				// Align boolean attributes with corresponding properties
				// Fall back to attribute presence where some booleans are not supported
				var attrNode,
					property = jQuery.prop( elem, name );
				return property === true || typeof property !== "boolean" &&
					( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?

					name.toLowerCase() :
					undefined;
			},
			set: function( elem, value, name ) {
				var propName;
				if ( value === false ) {
					// Remove boolean attributes when set to false
					jQuery.removeAttr( elem, name );
				} else {
					// value is true since we know at this point it's type boolean and not false
					// Set boolean attributes to the same name and set the DOM property
					propName = jQuery.propFix[ name ] || name;
					if ( propName in elem ) {
						// Only set the IDL specifically if it already exists on the element
						elem[ propName ] = true;
					}

					elem.setAttribute( name, name.toLowerCase() );
				}
				return name;
			}
		};

		// Warn only for attributes that can remain distinct from their properties post-1.9
		if ( ruseDefault.test( lowerName ) ) {
			migrateWarn( "jQuery.fn.attr('" + lowerName + "') may use property instead of attribute" );
		}
	}

	return oldAttr.call( jQuery, elem, name, value );
};

// attrHooks: value
jQuery.attrHooks.value = {
	get: function( elem, name ) {
		var nodeName = ( elem.nodeName || "" ).toLowerCase();
		if ( nodeName === "button" ) {
			return valueAttrGet.apply( this, arguments );
		}
		if ( nodeName !== "input" && nodeName !== "option" ) {
			migrateWarn("jQuery.fn.attr('value') no longer gets properties");
		}
		return name in elem ?
			elem.value :
			null;
	},
	set: function( elem, value ) {
		var nodeName = ( elem.nodeName || "" ).toLowerCase();
		if ( nodeName === "button" ) {
			return valueAttrSet.apply( this, arguments );
		}
		if ( nodeName !== "input" && nodeName !== "option" ) {
			migrateWarn("jQuery.fn.attr('value', val) no longer sets properties");
		}
		// Does not return so that setAttribute is also used
		elem.value = value;
	}
};


var matched, browser,
	oldInit = jQuery.fn.init,
	oldParseJSON = jQuery.parseJSON,
	// Note this does NOT include the #9521 XSS fix from 1.7!
	rquickExpr = /^(?:[^<]*(<[\w\W]+>)[^>]*|#([\w\-]*))$/;

// $(html) "looks like html" rule change
jQuery.fn.init = function( selector, context, rootjQuery ) {
	var match;

	if ( selector && typeof selector === "string" && !jQuery.isPlainObject( context ) &&
			(match = rquickExpr.exec( selector )) && match[1] ) {
		// This is an HTML string according to the "old" rules; is it still?
		if ( selector.charAt( 0 ) !== "<" ) {
			migrateWarn("$(html) HTML strings must start with '<' character");
		}
		// Now process using loose rules; let pre-1.8 play too
		if ( context && context.context ) {
			// jQuery object as context; parseHTML expects a DOM object
			context = context.context;
		}
		if ( jQuery.parseHTML ) {
			return oldInit.call( this, jQuery.parseHTML( jQuery.trim(selector), context, true ),
					context, rootjQuery );
		}
	}
	return oldInit.apply( this, arguments );
};
jQuery.fn.init.prototype = jQuery.fn;

// Let $.parseJSON(falsy_value) return null
jQuery.parseJSON = function( json ) {
	if ( !json && json !== null ) {
		migrateWarn("jQuery.parseJSON requires a valid JSON string");
		return null;
	}
	return oldParseJSON.apply( this, arguments );
};

jQuery.uaMatch = function( ua ) {
	ua = ua.toLowerCase();

	var match = /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
		/(webkit)[ \/]([\w.]+)/.exec( ua ) ||
		/(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
		/(msie) ([\w.]+)/.exec( ua ) ||
		ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
		[];

	return {
		browser: match[ 1 ] || "",
		version: match[ 2 ] || "0"
	};
};

// Don't clobber any existing jQuery.browser in case it's different
if ( !jQuery.browser ) {
	matched = jQuery.uaMatch( navigator.userAgent );
	browser = {};

	if ( matched.browser ) {
		browser[ matched.browser ] = true;
		browser.version = matched.version;
	}

	// Chrome is Webkit, but Webkit is also Safari.
	if ( browser.chrome ) {
		browser.webkit = true;
	} else if ( browser.webkit ) {
		browser.safari = true;
	}

	jQuery.browser = browser;
}

// Warn if the code tries to get jQuery.browser
migrateWarnProp( jQuery, "browser", jQuery.browser, "jQuery.browser is deprecated" );

jQuery.sub = function() {
	function jQuerySub( selector, context ) {
		return new jQuerySub.fn.init( selector, context );
	}
	jQuery.extend( true, jQuerySub, this );
	jQuerySub.superclass = this;
	jQuerySub.fn = jQuerySub.prototype = this();
	jQuerySub.fn.constructor = jQuerySub;
	jQuerySub.sub = this.sub;
	jQuerySub.fn.init = function init( selector, context ) {
		if ( context && context instanceof jQuery && !(context instanceof jQuerySub) ) {
			context = jQuerySub( context );
		}

		return jQuery.fn.init.call( this, selector, context, rootjQuerySub );
	};
	jQuerySub.fn.init.prototype = jQuerySub.fn;
	var rootjQuerySub = jQuerySub(document);
	migrateWarn( "jQuery.sub() is deprecated" );
	return jQuerySub;
};


// Ensure that $.ajax gets the new parseJSON defined in core.js
jQuery.ajaxSetup({
	converters: {
		"text json": jQuery.parseJSON
	}
});


var oldFnData = jQuery.fn.data;

jQuery.fn.data = function( name ) {
	var ret, evt,
		elem = this[0];

	// Handles 1.7 which has this behavior and 1.8 which doesn't
	if ( elem && name === "events" && arguments.length === 1 ) {
		ret = jQuery.data( elem, name );
		evt = jQuery._data( elem, name );
		if ( ( ret === undefined || ret === evt ) && evt !== undefined ) {
			migrateWarn("Use of jQuery.fn.data('events') is deprecated");
			return evt;
		}
	}
	return oldFnData.apply( this, arguments );
};


var rscriptType = /\/(java|ecma)script/i,
	oldSelf = jQuery.fn.andSelf || jQuery.fn.addBack;

jQuery.fn.andSelf = function() {
	migrateWarn("jQuery.fn.andSelf() replaced by jQuery.fn.addBack()");
	return oldSelf.apply( this, arguments );
};

// Since jQuery.clean is used internally on older versions, we only shim if it's missing
if ( !jQuery.clean ) {
	jQuery.clean = function( elems, context, fragment, scripts ) {
		// Set context per 1.8 logic
		context = context || document;
		context = !context.nodeType && context[0] || context;
		context = context.ownerDocument || context;

		migrateWarn("jQuery.clean() is deprecated");

		var i, elem, handleScript, jsTags,
			ret = [];

		jQuery.merge( ret, jQuery.buildFragment( elems, context ).childNodes );

		// Complex logic lifted directly from jQuery 1.8
		if ( fragment ) {
			// Special handling of each script element
			handleScript = function( elem ) {
				// Check if we consider it executable
				if ( !elem.type || rscriptType.test( elem.type ) ) {
					// Detach the script and store it in the scripts array (if provided) or the fragment
					// Return truthy to indicate that it has been handled
					return scripts ?
						scripts.push( elem.parentNode ? elem.parentNode.removeChild( elem ) : elem ) :
						fragment.appendChild( elem );
				}
			};

			for ( i = 0; (elem = ret[i]) != null; i++ ) {
				// Check if we're done after handling an executable script
				if ( !( jQuery.nodeName( elem, "script" ) && handleScript( elem ) ) ) {
					// Append to fragment and handle embedded scripts
					fragment.appendChild( elem );
					if ( typeof elem.getElementsByTagName !== "undefined" ) {
						// handleScript alters the DOM, so use jQuery.merge to ensure snapshot iteration
						jsTags = jQuery.grep( jQuery.merge( [], elem.getElementsByTagName("script") ), handleScript );

						// Splice the scripts into ret after their former ancestor and advance our index beyond them
						ret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );
						i += jsTags.length;
					}
				}
			}
		}

		return ret;
	};
}

var eventAdd = jQuery.event.add,
	eventRemove = jQuery.event.remove,
	eventTrigger = jQuery.event.trigger,
	oldToggle = jQuery.fn.toggle,
	oldLive = jQuery.fn.live,
	oldDie = jQuery.fn.die,
	ajaxEvents = "ajaxStart|ajaxStop|ajaxSend|ajaxComplete|ajaxError|ajaxSuccess",
	rajaxEvent = new RegExp( "\\b(?:" + ajaxEvents + ")\\b" ),
	rhoverHack = /(?:^|\s)hover(\.\S+|)\b/,
	hoverHack = function( events ) {
		if ( typeof( events ) !== "string" || jQuery.event.special.hover ) {
			return events;
		}
		if ( rhoverHack.test( events ) ) {
			migrateWarn("'hover' pseudo-event is deprecated, use 'mouseenter mouseleave'");
		}
		return events && events.replace( rhoverHack, "mouseenter$1 mouseleave$1" );
	};

// Event props removed in 1.9, put them back if needed; no practical way to warn them
if ( jQuery.event.props && jQuery.event.props[ 0 ] !== "attrChange" ) {
	jQuery.event.props.unshift( "attrChange", "attrName", "relatedNode", "srcElement" );
}

// Undocumented jQuery.event.handle was "deprecated" in jQuery 1.7
if ( jQuery.event.dispatch ) {
	migrateWarnProp( jQuery.event, "handle", jQuery.event.dispatch, "jQuery.event.handle is undocumented and deprecated" );
}

// Support for 'hover' pseudo-event and ajax event warnings
jQuery.event.add = function( elem, types, handler, data, selector ){
	if ( elem !== document && rajaxEvent.test( types ) ) {
		migrateWarn( "AJAX events should be attached to document: " + types );
	}
	eventAdd.call( this, elem, hoverHack( types || "" ), handler, data, selector );
};
jQuery.event.remove = function( elem, types, handler, selector, mappedTypes ){
	eventRemove.call( this, elem, hoverHack( types ) || "", handler, selector, mappedTypes );
};

jQuery.fn.error = function() {
	var args = Array.prototype.slice.call( arguments, 0);
	migrateWarn("jQuery.fn.error() is deprecated");
	args.splice( 0, 0, "error" );
	if ( arguments.length ) {
		return this.bind.apply( this, args );
	}
	// error event should not bubble to window, although it does pre-1.7
	this.triggerHandler.apply( this, args );
	return this;
};

jQuery.fn.toggle = function( fn, fn2 ) {

	// Don't mess with animation or css toggles
	if ( !jQuery.isFunction( fn ) || !jQuery.isFunction( fn2 ) ) {
		return oldToggle.apply( this, arguments );
	}
	migrateWarn("jQuery.fn.toggle(handler, handler...) is deprecated");

	// Save reference to arguments for access in closure
	var args = arguments,
		guid = fn.guid || jQuery.guid++,
		i = 0,
		toggler = function( event ) {
			// Figure out which function to execute
			var lastToggle = ( jQuery._data( this, "lastToggle" + fn.guid ) || 0 ) % i;
			jQuery._data( this, "lastToggle" + fn.guid, lastToggle + 1 );

			// Make sure that clicks stop
			event.preventDefault();

			// and execute the function
			return args[ lastToggle ].apply( this, arguments ) || false;
		};

	// link all the functions, so any of them can unbind this click handler
	toggler.guid = guid;
	while ( i < args.length ) {
		args[ i++ ].guid = guid;
	}

	return this.click( toggler );
};

jQuery.fn.live = function( types, data, fn ) {
	migrateWarn("jQuery.fn.live() is deprecated");
	if ( oldLive ) {
		return oldLive.apply( this, arguments );
	}
	jQuery( this.context ).on( types, this.selector, data, fn );
	return this;
};

jQuery.fn.die = function( types, fn ) {
	migrateWarn("jQuery.fn.die() is deprecated");
	if ( oldDie ) {
		return oldDie.apply( this, arguments );
	}
	jQuery( this.context ).off( types, this.selector || "**", fn );
	return this;
};

// Turn global events into document-triggered events
jQuery.event.trigger = function( event, data, elem, onlyHandlers  ){
	if ( !elem && !rajaxEvent.test( event ) ) {
		migrateWarn( "Global events are undocumented and deprecated" );
	}
	return eventTrigger.call( this,  event, data, elem || document, onlyHandlers  );
};
jQuery.each( ajaxEvents.split("|"),
	function( _, name ) {
		jQuery.event.special[ name ] = {
			setup: function() {
				var elem = this;

				// The document needs no shimming; must be !== for oldIE
				if ( elem !== document ) {
					jQuery.event.add( document, name + "." + jQuery.guid, function() {
						jQuery.event.trigger( name, null, elem, true );
					});
					jQuery._data( this, name, jQuery.guid++ );
				}
				return false;
			},
			teardown: function() {
				if ( this !== document ) {
					jQuery.event.remove( document, name + "." + jQuery._data( this, name ) );
				}
				return false;
			}
		};
	}
);


})( jQuery, window );
/*
(c) Copyrights 2007 - 2008

Original idea by by Binny V A, http://www.openjs.com/scripts/events/keyboard_shortcuts/

jQuery Plugin by Tzury Bar Yochay
tzury.by@gmail.com
http://evalinux.wordpress.com
http://facebook.com/profile.php?id=513676303

Project's sites:
http://code.google.com/p/js-hotkeys/
http://github.com/tzuryby/hotkeys/tree/master

License: same as jQuery license.

USAGE:
    // simple usage
    $(document).bind('keydown', 'Ctrl+c', function(){ alert('copy anyone?');});

    // special options such as disableInIput
    $(document).bind('keydown', {combi:'Ctrl+x', disableInInput: true} , function() {});

Note:
    This plugin wraps the following jQuery methods: $.fn.find, $.fn.bind and $.fn.unbind
*/

(function (jQuery){
    // keep reference to the original $.fn.bind, $.fn.unbind and $.fn.find
    jQuery.fn.__bind__ = jQuery.fn.bind;
    jQuery.fn.__unbind__ = jQuery.fn.unbind;
    jQuery.fn.__find__ = jQuery.fn.find;

    var hotkeys = {
        version: '0.7.9',
        override: /keypress|keydown|keyup/g,
        triggersMap: {},

        specialKeys: { 27: 'esc', 9: 'tab', 32:'space', 13: 'enter', 8:'backspace', 145: 'scroll',
            20: 'capslock', 144: 'numlock', 19:'pause', 45:'insert', 36:'home', 46:'del',
            35:'end', 33: 'pageup', 34:'pagedown', 37:'left', 38:'up', 39:'right',40:'down',
            109: '-',
            112:'f1',113:'f2', 114:'f3', 115:'f4', 116:'f5', 117:'f6', 118:'f7', 119:'f8',
            120:'f9', 121:'f10', 122:'f11', 123:'f12', 191: '/'},

        shiftNums: { "`":"~", "1":"!", "2":"@", "3":"#", "4":"$", "5":"%", "6":"^", "7":"&",
            "8":"*", "9":"(", "0":")", "-":"_", "=":"+", ";":":", "'":"\"", ",":"<",
            ".":">",  "/":"?",  "\\":"|" },

        newTrigger: function (type, combi, callback) {
            // i.e. {'keyup': {'ctrl': {cb: callback, disableInInput: false}}}
            var result = {};
            result[type] = {};
            result[type][combi] = {cb: callback, disableInInput: false};
            return result;
        }
    };
    // add firefox num pad char codes
    //if (jQuery.browser.mozilla){
    // add num pad char codes
    hotkeys.specialKeys = jQuery.extend(hotkeys.specialKeys, { 96: '0', 97:'1', 98: '2', 99:
        '3', 100: '4', 101: '5', 102: '6', 103: '7', 104: '8', 105: '9', 106: '*',
        107: '+', 109: '-', 110: '.', 111 : '/'
        });
    //}

    // a wrapper around of $.fn.find
    // see more at: http://groups.google.com/group/jquery-en/browse_thread/thread/18f9825e8d22f18d
    jQuery.fn.find = function( selector ) {
        this.query = selector;
        return jQuery.fn.__find__.apply(this, arguments);
	};

    jQuery.fn.unHotbind = function (type, combi, fn){
        if (jQuery.isFunction(combi)){
            fn = combi;
            combi = null;
        }
        if (combi && typeof combi === 'string'){
            var selectorId = ((this.prevObject && this.prevObject.query) || (this[0].id && this[0].id) || this[0]).toString();
            var hkTypes = type.split(' ');
            for (var x=0; x<hkTypes.length; x++){
                delete hotkeys.triggersMap[selectorId][hkTypes[x]][combi];
            }
        }
        // call jQuery original unbind
        return  this.__unbind__(type, fn);
    };

    jQuery.fn.hotbind = function(type, data, fn){
        // grab keyup,keydown,keypress
        var handle = type.match(hotkeys.override);

        if (jQuery.isFunction(data) || !handle){
            // call jQuery.bind only
            return this.__bind__(type, data, fn);
        }
        else{
            // split the job
            var result = null,
            // pass the rest to the original $.fn.bind
            pass2jq = jQuery.trim(type.replace(hotkeys.override, ''));

            // see if there are other types, pass them to the original $.fn.bind
            if (pass2jq){
                result = this.__bind__(pass2jq, data, fn);
            }

            if (typeof data === "string"){
                data = {'combi': data};
            }
            if(data.combi){
                for (var x=0; x < handle.length; x++){
                    var eventType = handle[x];
                    var combi = data.combi.toLowerCase(),
                        trigger = hotkeys.newTrigger(eventType, combi, fn),
                        selectorId = ((this.prevObject && this.prevObject.query) || (this[0].id && this[0].id) || this[0]).toString();

                    //trigger[eventType][combi].propagate = data.propagate;
                    trigger[eventType][combi].disableInInput = data.disableInInput;

                    // first time selector is bounded
                    if (!hotkeys.triggersMap[selectorId]) {
                        hotkeys.triggersMap[selectorId] = trigger;
                    }
                    // first time selector is bounded with this type
                    else if (!hotkeys.triggersMap[selectorId][eventType]) {
                        hotkeys.triggersMap[selectorId][eventType] = trigger[eventType];
                    }
                    // make trigger point as array so more than one handler can be bound
                    var mapPoint = hotkeys.triggersMap[selectorId][eventType][combi];
                    if (!mapPoint){
                        hotkeys.triggersMap[selectorId][eventType][combi] = [trigger[eventType][combi]];
                    }
                    else if (mapPoint.constructor !== Array){
                        hotkeys.triggersMap[selectorId][eventType][combi] = [mapPoint];
                    }
                    else {
                        hotkeys.triggersMap[selectorId][eventType][combi][mapPoint.length] = trigger[eventType][combi];
                    }

                    // add attribute and call $.event.add per matched element
                    this.each(function(){
                        // jQuery wrapper for the current element
                        var jqElem = jQuery(this);

                        // element already associated with another collection
                        if (jqElem.attr('hkId') && jqElem.attr('hkId') !== selectorId){
                            selectorId = jqElem.attr('hkId') + ";" + selectorId;
                        }
                        jqElem.attr('hkId', selectorId);
                    });
                    result = this.__bind__(handle.join(' '), data, hotkeys.handler)
                }
            }
            return result;
        }
    };
    jQuery.fn.codeToString = function(event){
    	var code = event.which,
    	special = hotkeys.specialKeys[code],
    	character = !special && String.fromCharCode(code).toLowerCase(),
    	shift = event.shiftKey,
        ctrl = event.ctrlKey,
        alt = event.altKey || event.originalEvent.altKey;
        var result = special || character;
        var modif = '';
    	if(alt) modif +='alt+';
        if(ctrl) modif+= 'ctrl+';
        if(shift) modif += 'shift+';
        return modif + result;
    };
    // work-around for opera and safari where (sometimes) the target is the element which was last
    // clicked with the mouse and not the document event it would make sense to get the document
    hotkeys.findElement = function (elem){
        if (!jQuery(elem).attr('hkId')){
            if (jQuery.browser.opera || jQuery.browser.safari){
                while (!jQuery(elem).attr('hkId') && elem.parentNode){
                    elem = elem.parentNode;
                }
            }
        }
        return elem;
    };
    // the event handler
    hotkeys.handler = function(event) {
        var target = hotkeys.findElement(event.currentTarget),
            jTarget = jQuery(target),
            ids = jTarget.attr('hkId');

        if(ids){
            ids = ids.split(';');
            var code = event.which,
                type = event.type,
                special = hotkeys.specialKeys[code],
                // prevent f5 overlapping with 't' (or f4 with 's', etc.)
                character = !special && String.fromCharCode(code).toLowerCase(),
                shift = event.shiftKey,
                ctrl = event.ctrlKey,
                // patch for jquery 1.2.5 && 1.2.6 see more at:
                // http://groups.google.com/group/jquery-en/browse_thread/thread/83e10b3bb1f1c32b
                alt = event.altKey || event.originalEvent.altKey,
                mapPoint = null;
            for (var x=0; x < ids.length; x++){
                if (hotkeys.triggersMap[ids[x]][type]){
                    mapPoint = hotkeys.triggersMap[ids[x]][type];
                    break;
                }
            }
            //find by: id.type.combi.options
            if (mapPoint){
                var trigger;
                // event type is associated with the hkId
                if(!shift && !ctrl && !alt) { // No Modifiers
                    trigger = mapPoint[special] ||  (character && mapPoint[character]);
                }
                else{
                    // check combinations (alt|ctrl|shift+anything)
                    var modif = '';
                    if(alt) modif +='alt+';
                    if(ctrl) modif+= 'ctrl+';
                    if(shift) modif += 'shift+';
                    // modifiers + special keys or modifiers + character or modifiers + shift character or just shift character
                    trigger = mapPoint[modif+special];
                    if (!trigger){
                        if (character){
                            trigger = mapPoint[modif+character]
                                || mapPoint[modif+hotkeys.shiftNums[character]]
                                // '$' can be triggered as 'Shift+4' or 'Shift+$' or just '$'
                                || (modif === 'shift+' && mapPoint[hotkeys.shiftNums[character]]);
                        }
                    }
                }
                if (trigger){
                    var result = false;
                    for (var x=0; x < trigger.length; x++){
                        if(trigger[x].disableInInput){
                            // double check event.currentTarget and event.target
                            var elem = jQuery(event.target);
                            if (jTarget.is("input") || jTarget.is("textarea") || jTarget.is("select")
                                || elem.is("input") || elem.is("textarea") || elem.is("select")) {
                                return true;
                            }
                        }
                        // call the registered callback function
                        result = result || trigger[x].cb.apply(this, [event]);
                    }
                    return result;
                }
            }
        }
    };
    // place it under window so it can be extended and overridden by others
    window.hotkeys = hotkeys;
    return jQuery;
})(jQuery);
/**
 * web端拖拽的实现
 */
(function($){
	function drag(e){
		var state = $.data(e.data.target, 'draggable');
		var opts = state.options;
		var proxy = state.proxy;

		var dragData = e.data;
		var left = dragData.startLeft + e.pageX - dragData.startX;
		var top = dragData.startTop + e.pageY - dragData.startY;

		if (proxy){
			if (proxy.parent()[0] == document.body){
				if (opts.deltaX != null && opts.deltaX != undefined){
					left = e.pageX + opts.deltaX;
				} else {
					left = e.pageX - e.data.offsetWidth;
				}
				if (opts.deltaY != null && opts.deltaY != undefined){
					top = e.pageY + opts.deltaY;
				} else {
					top = e.pageY - e.data.offsetHeight;
				}
			} else {
				if (opts.deltaX != null && opts.deltaX != undefined){
					left += e.data.offsetWidth + opts.deltaX;
				}
				if (opts.deltaY != null && opts.deltaY != undefined){
					top += e.data.offsetHeight + opts.deltaY;
				}
			}
		}

		if (e.data.parent != document.body) {
			left += $(e.data.parent).scrollLeft();
			top += $(e.data.parent).scrollTop();
		}

		if (opts.axis == 'h') {
			dragData.left = left;
		} else if (opts.axis == 'v') {
			dragData.top = top;
		} else {
			dragData.left = left;
			dragData.top = top;
		}
	}

	function applyDrag(e){
		var state = $.data(e.data.target, 'draggable');
		var opts = state.options;
		var proxy = state.proxy;
		if (!proxy){
			proxy = $(e.data.target);
		}
		proxy.css({
			left:e.data.left,
			top:e.data.top
		});
		$('body').css('cursor', opts.cursor);
	}

	function doDown(e){
		$.fn.draggable.isDragging = true;
		var state = $.data(e.data.target, 'draggable');
		var opts = state.options;

		var droppables = $('.droppable').filter(function(){
			return e.data.target != this;
		}).filter(function(){
			var accept = $.data(this, 'droppable').options.accept;
			if (accept){
				return $(accept).filter(function(){
					return this == e.data.target;
				}).length > 0;
			} else {
				return true;
			}
		});
		state.droppables = droppables;

		var proxy = state.proxy;
		if (!proxy){
			if (opts.proxy){
				if (opts.proxy == 'clone'){
					proxy = $(e.data.target).clone().insertAfter(e.data.target);
				} else {
					proxy = opts.proxy.call(e.data.target, e.data.target);
				}
				state.proxy = proxy;
			} else {
				proxy = $(e.data.target);
			}
		}

		proxy.css('position', 'absolute');
		drag(e);
		applyDrag(e);

		opts.onStartDrag.call(e.data.target, e);
		return false;
	}

	function doMove(e){
		var state = $.data(e.data.target, 'draggable');
		drag(e);
		if (state.options.onDrag.call(e.data.target, e) != false){
			applyDrag(e);
		}

		var source = e.data.target;
		state.droppables.each(function(){
			var dropObj = $(this);
			if (dropObj.droppable('options').disabled){return;}

			var p2 = dropObj.offset();
			if (e.pageX > p2.left && e.pageX < p2.left + dropObj.outerWidth()
					&& e.pageY > p2.top && e.pageY < p2.top + dropObj.outerHeight()){
				if (!this.entered){
					$(this).trigger('_dragenter', [source]);
					this.entered = true;
				}
				$(this).trigger('_dragover', [source]);
			} else {
				if (this.entered){
					$(this).trigger('_dragleave', [source]);
					this.entered = false;
				}
			}
		});

		return false;
	}

	function doUp(e){
		$.fn.draggable.isDragging = false;
		doMove(e);

		var state = $.data(e.data.target, 'draggable');
		var proxy = state.proxy;
		var opts = state.options;
		if (opts.revert){
			if (checkDrop() == true){
				$(e.data.target).css({
					position:e.data.startPosition,
					left:e.data.startLeft,
					top:e.data.startTop
				});
			} else {
				if (proxy){
					var left, top;
					if (proxy.parent()[0] == document.body){
						left = e.data.startX - e.data.offsetWidth;
						top = e.data.startY - e.data.offsetHeight;
					} else {
						left = e.data.startLeft;
						top = e.data.startTop;
					}
					proxy.animate({
						left: left,
						top: top
					}, function(){
						removeProxy();
					});
				} else {
					$(e.data.target).animate({
						left:e.data.startLeft,
						top:e.data.startTop
					}, function(){
						$(e.data.target).css('position', e.data.startPosition);
					});
				}
			}
		} else {
			$(e.data.target).css({
				position:'absolute',
				left:e.data.left,
				top:e.data.top
			});
			checkDrop();
		}

		opts.onStopDrag.call(e.data.target, e);

		$(document).unbind('.draggable');
		setTimeout(function(){
			$('body').css('cursor','');
		},100);

		function removeProxy(){
			if (proxy){
				proxy.remove();
			}
			state.proxy = null;
		}

		function checkDrop(){
			var dropped = false;
			state.droppables.each(function(){
				var dropObj = $(this);
				if (dropObj.droppable('options').disabled){return;}

				var p2 = dropObj.offset();
				if (e.pageX > p2.left && e.pageX < p2.left + dropObj.outerWidth()
						&& e.pageY > p2.top && e.pageY < p2.top + dropObj.outerHeight()){
					if (opts.revert){
						$(e.data.target).css({
							position:e.data.startPosition,
							left:e.data.startLeft,
							top:e.data.startTop
						});
					}
					$(this).trigger('_drop', [e.data.target]);
					removeProxy();
					dropped = true;
					this.entered = false;
					return false;
				}
			});
			if (!dropped && !opts.revert){
				removeProxy();
			}
			return dropped;
		}

		return false;
	}

	$.fn.draggable = function(options, param){
		if (typeof options == 'string'){
			return $.fn.draggable.methods[options](this, param);
		}

		return this.each(function(){
			var opts;
			var state = $.data(this, 'draggable');
			if (state) {
				state.handle.unbind('.draggable');
				opts = $.extend(state.options, options);
			} else {
				opts = $.extend({}, $.fn.draggable.defaults, options || {});
			}
			var handle = opts.handle ? (typeof opts.handle=='string' ? $(opts.handle, this) : opts.handle) : $(this);

			$.data(this, 'draggable', {
				options: opts,
				handle: handle
			});

			if (opts.disabled) {
				$(this).css('cursor', '');
				return;
			}

			handle.unbind('.draggable').bind('mousemove.draggable', {target:this}, function(e){
				if ($.fn.draggable.isDragging){return}
				var opts = $.data(e.data.target, 'draggable').options;
				if (checkArea(e)){
					$(this).css('cursor', opts.cursor);
				} else {
					$(this).css('cursor', '');
				}
			}).bind('mouseleave.draggable', {target:this}, function(e){
				$(this).css('cursor', '');
			}).bind('mousedown.draggable', {target:this}, function(e){
				if (checkArea(e) == false) return;
				$(this).css('cursor', '');

				var position = $(e.data.target).position();
				var offset = $(e.data.target).offset();
				var data = {
					startPosition: $(e.data.target).css('position'),
					startLeft: position.left,
					startTop: position.top,
					left: position.left,
					top: position.top,
					startX: e.pageX,
					startY: e.pageY,
					offsetWidth: (e.pageX - offset.left),
					offsetHeight: (e.pageY - offset.top),
					target: e.data.target,
					parent: $(e.data.target).parent()[0]
				};

				$.extend(e.data, data);
				var opts = $.data(e.data.target, 'draggable').options;
				if (opts.onBeforeDrag.call(e.data.target, e) == false) return;

				$(document).bind('mousedown.draggable', e.data, doDown);
				$(document).bind('mousemove.draggable', e.data, doMove);
				$(document).bind('mouseup.draggable', e.data, doUp);
			});

			function checkArea(e) {
				var state = $.data(e.data.target, 'draggable');
				var handle = state.handle;
				var offset = $(handle).offset();
				var width = $(handle).outerWidth();
				var height = $(handle).outerHeight();
				var t = e.pageY - offset.top;
				var r = offset.left + width - e.pageX;
				var b = offset.top + height - e.pageY;
				var l = e.pageX - offset.left;

				return Math.min(t,r,b,l) > state.options.edge;
			}

		});
	};

	$.fn.draggable.methods = {
		options: function(jq){
			return $.data(jq[0], 'draggable').options;
		},
		proxy: function(jq){
			return $.data(jq[0], 'draggable').proxy;
		},
		enable: function(jq){
			return jq.each(function(){
				$(this).draggable({disabled:false});
			});
		},
		disable: function(jq){
			return jq.each(function(){
				$(this).draggable({disabled:true});
			});
		}
	};

	$.fn.draggable.defaults = {
		proxy:null,	// 'clone' or a function that will create the proxy object,
					// the function has the source parameter that indicate the source object dragged.
		revert:false,
		cursor:'move',
		deltaX:null,
		deltaY:null,
		handle: null,
		disabled: false,
		edge:0,
		axis:null,	// v or h

		onBeforeDrag: function(e){},
		onStartDrag: function(e){},
		onDrag: function(e){},
		onStopDrag: function(e){}
	};

	$.fn.draggable.isDragging = false;
})(jQuery);
/**
 * web端拖拽接收
 */
(function($){
	function init(target){
		$(target).addClass('droppable');
		$(target).bind('_dragenter', function(e, source){
			$.data(target, 'droppable').options.onDragEnter.apply(target, [e, source]);
		});
		$(target).bind('_dragleave', function(e, source){
			$.data(target, 'droppable').options.onDragLeave.apply(target, [e, source]);
		});
		$(target).bind('_dragover', function(e, source){
			$.data(target, 'droppable').options.onDragOver.apply(target, [e, source]);
		});
		$(target).bind('_drop', function(e, source){
			$.data(target, 'droppable').options.onDrop.apply(target, [e, source]);
		});
	}

	$.fn.droppable = function(options, param){
		if (typeof options == 'string'){
			return $.fn.droppable.methods[options](this, param);
		}

		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'droppable');
			if (state){
				$.extend(state.options, options);
			} else {
				init(this);
				$.data(this, 'droppable', {
					options: $.extend({}, $.fn.droppable.defaults, options)
				});
			}
		});
	};

	$.fn.droppable.methods = {
		options: function(jq){
			return $.data(jq[0], 'droppable').options;
		},
		enable: function(jq){
			return jq.each(function(){
				$(this).droppable({disabled:false});
			});
		},
		disable: function(jq){
			return jq.each(function(){
				$(this).droppable({disabled:true});
			});
		}
	};

	$.fn.droppable.defaults = {
		accept:null,
		disabled:false,
		onDragEnter:function(e, source){},
		onDragOver:function(e, source){},
		onDragLeave:function(e, source){},
		onDrop:function(e, source){}
	};
})(jQuery);
/**
 * web端拖动调整大小
 */
(function($){
	$.fn.resizable = function(options, param){
		if (typeof options == 'string'){
			return $.fn.resizable.methods[options](this, param);
		}

		function resize(e){
			var resizeData = e.data;
			var options = $.data(resizeData.target, 'resizable').options;
			if (resizeData.dir.indexOf('e') != -1) {
				var width = resizeData.startWidth + e.pageX - resizeData.startX;
				width = Math.min(
							Math.max(width, options.minWidth),
							options.maxWidth
						);
				resizeData.width = width;
			}
			if (resizeData.dir.indexOf('s') != -1) {
				var height = resizeData.startHeight + e.pageY - resizeData.startY;
				height = Math.min(
						Math.max(height, options.minHeight),
						options.maxHeight
				);
				resizeData.height = height;
			}
			if (resizeData.dir.indexOf('w') != -1) {
				var width = resizeData.startWidth - e.pageX + resizeData.startX;
				width = Math.min(
							Math.max(width, options.minWidth),
							options.maxWidth
						);
				resizeData.width = width;
				resizeData.left = resizeData.startLeft + resizeData.startWidth - resizeData.width;
			}
			if (resizeData.dir.indexOf('n') != -1) {
				var height = resizeData.startHeight - e.pageY + resizeData.startY;
				height = Math.min(
							Math.max(height, options.minHeight),
							options.maxHeight
						);
				resizeData.height = height;
				resizeData.top = resizeData.startTop + resizeData.startHeight - resizeData.height;
			}
		}

		function applySize(e){
			var resizeData = e.data;
			var t = $(resizeData.target);
			t.css({
				left: resizeData.left,
				top: resizeData.top
			});
			if (t.outerWidth() != resizeData.width){t._outerWidth(resizeData.width)}
			if (t.outerHeight() != resizeData.height){t._outerHeight(resizeData.height)}
		}

		function doDown(e){
			$.fn.resizable.isResizing = true;
			$.data(e.data.target, 'resizable').options.onStartResize.call(e.data.target, e);
			return false;
		}

		function doMove(e){
			resize(e);
			if ($.data(e.data.target, 'resizable').options.onResize.call(e.data.target, e) !== false){
				applySize(e)
			}
			return false;
		}

		function doUp(e){
//			isResizing = false;
			$.fn.resizable.isResizing = false;
			resize(e, true);
			applySize(e);
			$.data(e.data.target, 'resizable').options.onStopResize.call(e.data.target, e);
			$(document).unbind('.resizable');
			$('body').css('cursor','');
//			$('body').css('cursor','auto');
			return false;
		}

		return this.each(function(){
			var opts = null;
			var state = $.data(this, 'resizable');
			if (state) {
				$(this).unbind('.resizable');
				opts = $.extend(state.options, options || {});
			} else {
				opts = $.extend({}, $.fn.resizable.defaults, options || {});
				$.data(this, 'resizable', {
					options:opts
				});
			}

			if (opts.disabled === true) {
				return;
			}

			// bind mouse event using namespace resizable
			$(this).bind('mousemove.resizable', {target:this}, function(e){
//				if (isResizing) return;
				if ($.fn.resizable.isResizing){return}
				var dir = getDirection(e);
				if (dir == '') {
					$(e.data.target).css('cursor', '');
				} else {
					$(e.data.target).css('cursor', dir + '-resize');
				}
			}).bind('mouseleave.resizable', {target:this}, function(e){
				$(e.data.target).css('cursor', '');
			}).bind('mousedown.resizable', {target:this}, function(e){
				var dir = getDirection(e);
				if (dir == ''){ return;}

				function getCssValue(css) {
					var val = parseInt($(e.data.target).css(css));
					if (isNaN(val)) {
						return 0;
					} else {
						return val;
					}
				}

				var data = {
					target: e.data.target,
					dir: dir,
					startLeft: getCssValue('left'),
					startTop: getCssValue('top'),
					left: getCssValue('left'),
					top: getCssValue('top'),
					startX: e.pageX,
					startY: e.pageY,
					startWidth: $(e.data.target).outerWidth(),
					startHeight: $(e.data.target).outerHeight(),
					width: $(e.data.target).outerWidth(),
					height: $(e.data.target).outerHeight(),
					deltaWidth: $(e.data.target).outerWidth() - $(e.data.target).width(),
					deltaHeight: $(e.data.target).outerHeight() - $(e.data.target).height()
				};
				$(document).bind('mousedown.resizable', data, doDown);
				$(document).bind('mousemove.resizable', data, doMove);
				$(document).bind('mouseup.resizable', data, doUp);
				$('body').css('cursor', dir+'-resize');
			});

			// get the resize direction
			function getDirection(e) {
				var tt = $(e.data.target);
				var dir = '';
				var offset = tt.offset();
				var width = tt.outerWidth();
				var height = tt.outerHeight();
				var edge = opts.edge;
				if (e.pageY > offset.top && e.pageY < offset.top + edge) {
					dir += 'n';
				} else if (e.pageY < offset.top + height && e.pageY > offset.top + height - edge) {
					dir += 's';
				}
				if (e.pageX > offset.left && e.pageX < offset.left + edge) {
					dir += 'w';
				} else if (e.pageX < offset.left + width && e.pageX > offset.left + width - edge) {
					dir += 'e';
				}

				var handles = opts.handles.split(',');
				for(var i=0; i<handles.length; i++) {
					var handle = handles[i].replace(/(^\s*)|(\s*$)/g, '');
					if (handle == 'all' || handle == dir) {
						return dir;
					}
				}
				return '';
			}


		});
	};

	$.fn.resizable.methods = {
		options: function(jq){
			return $.data(jq[0], 'resizable').options;
		},
		enable: function(jq){
			return jq.each(function(){
				$(this).resizable({disabled:false});
			});
		},
		disable: function(jq){
			return jq.each(function(){
				$(this).resizable({disabled:true});
			});
		}
	};

	$.fn.resizable.defaults = {
		disabled:false,
		handles:'n, e, s, w, ne, se, sw, nw, all',
		minWidth: 233,
		minHeight: 149,
		maxWidth: 10000,//$(document).width(),
		maxHeight: 10000,//$(document).height(),
		edge:5,
		onStartResize: function(e){},
		onResize: function(e){},
		onStopResize: function(e){}
	};

	$.fn.resizable.isResizing = false;

})(jQuery);
(function($){
    var eventNames,
        pluginName = 'sortable',
        containerDefaults = {
            // If true, items can be dragged from this container
            drag: true,
            // If true, items can be droped onto this container
            drop: true,
            // Exclude items from being draggable, if the
            // selector matches the item
            exclude: "",
            // If true, search for nested containers within an item
            nested: true,
            // If true, the items are assumed to be arranged vertically
            vertical: true
        }, // end container defaults
        groupDefaults = {
            // This is executed after the placeholder has been moved.
            // $closestItemOrContainer contains the closest item, the placeholder
            // has been put at or the closest empty Container, the placeholder has
            // been appended to.
            afterMove: function ($placeholder, container, $closestItemOrContainer) {
            },
            // The exact css path between the container and its items, e.g. "> tbody"
            containerPath: "",
            // The css selector of the containers
            containerSelector: "ol, ul",
            // Distance the mouse has to travel to start dragging
            distance: 0,
            // Time in milliseconds after mousedown until dragging should start.
            // This option can be used to prevent unwanted drags when clicking on an element.
            delay: 0,
            // The css selector of the drag handle
            handle: "",
            // The exact css path between the item and its subcontainers
            itemPath: "",
            // The css selector of the items
            itemSelector: "li",
            // Check if the dragged item may be inside the container.
            // Use with care, since the search for a valid container entails a depth first search
            // and may be quite expensive.
            isValidTarget: function ($item, container) {
                return true
            },
            // Executed before onDrop if placeholder is detached.
            // This happens if pullPlaceholder is set to false and the drop occurs outside a container.
            onCancel: function ($item, container, _super, event) {
            },
            // Executed at the beginning of a mouse move event.
            // The Placeholder has not been moved yet.
            onDrag: function ($item, position, _super, event) {
                $item.css(position)
            },
            // Called after the drag has been started,
            // that is the mouse button is beeing held down and
            // the mouse is moving.
            // The container is the closest initialized container.
            // Therefore it might not be the container, that actually contains the item.
            onDragStart: function ($item, container, _super, event) {
                $item.css({
                    height: $item.height(),
                    width: $item.width()
                })
                $item.addClass("dragged")
                $("body").addClass("dragging")
            },
            // Called when the mouse button is beeing released
            onDrop: function ($item, container, _super, event) {
                $item.removeClass("dragged").removeAttr("style")
                $("body").removeClass("dragging")
            },
            // Called on mousedown. If falsy value is returned, the dragging will not start.
            // If clicked on input element, ignore
            onMousedown: function ($item, _super, event) {
                if (event.target.nodeName != 'INPUT' && event.target.nodeName != 'SELECT') {
                    event.preventDefault()
                    return true
                }
            },
            // Template for the placeholder. Can be any valid jQuery input
            // e.g. a string, a DOM element.
            // The placeholder must have the class "placeholder"
            placeholder: '<li class="placeholder"/>',
            // If true, the position of the placeholder is calculated on every mousemove.
            // If false, it is only calculated when the mouse is above a container.
            pullPlaceholder: true,
            // Specifies serialization of the container group.
            // The pair $parent/$children is either container/items or item/subcontainers.
            // Note that this default method only works, if every item only has one subcontainer
            serialize: function ($parent, $children, parentIsContainer) {
                var result = $.extend({}, $parent.data())

                if(parentIsContainer)
                    return $children
                else if ($children[0]){
                    result.children = $children
                    delete result.subContainer
                }

                delete result.sortable

                return result
            },
            // Set tolerance while dragging. Positive values decrease sensitivity,
            // negative values increase it.
            tolerance: 0
        }, // end group defaults
        containerGroups = {},
        groupCounter = 0,
        emptyBox = {
            left: 0,
            top: 0,
            bottom: 0,
            right:0
        }
    eventNames = {
        start: "touchstart.sortable mousedown.sortable",
        drop: "touchend.sortable touchcancel.sortable mouseup.sortable",
        drag: "touchmove.sortable mousemove.sortable",
        scroll: "scroll.sortable"
    }

    /*
     * a is Array [left, right, top, bottom]
     * b is array [left, top]
     */
    function d(a,b) {
        var x = Math.max(0, a[0] - b[0], b[0] - a[1]),
            y = Math.max(0, a[2] - b[1], b[1] - a[3])
        return x+y;
    }

    function setDimensions(array, dimensions, tolerance, useOffset) {
        var i = array.length,
            offsetMethod = useOffset ? "offset" : "position"
        tolerance = tolerance || 0

        while(i--){
            var el = array[i].el ? array[i].el : $(array[i]),
            // use fitting method
                pos = el[offsetMethod]()
            pos.left += parseInt(el.css('margin-left'), 10)
            pos.top += parseInt(el.css('margin-top'),10)
            dimensions[i] = [
                pos.left - tolerance,
                pos.left + el.outerWidth() + tolerance,
                pos.top - tolerance,
                pos.top + el.outerHeight() + tolerance
            ]
        }
    }

    function getRelativePosition(pointer, element) {
        var offset = element.offset()
        return {
            left: pointer.left - offset.left,
            top: pointer.top - offset.top
        }
    }

    function sortByDistanceDesc(dimensions, pointer, lastPointer) {
        pointer = [pointer.left, pointer.top]
        lastPointer = lastPointer && [lastPointer.left, lastPointer.top]

        var dim,
            i = dimensions.length,
            distances = []

        while(i--){
            dim = dimensions[i]
            distances[i] = [i,d(dim,pointer), lastPointer && d(dim, lastPointer)]
        }
        distances = distances.sort(function  (a,b) {
            return b[1] - a[1] || b[2] - a[2] || b[0] - a[0]
        })

        // last entry is the closest
        return distances
    }

    function ContainerGroup(options) {
        this.options = $.extend({}, groupDefaults, options)
        this.containers = []

        if(!this.options.parentContainer){
            this.scrollProxy = $.proxy(this.scroll, this)
            this.dragProxy = $.proxy(this.drag, this)
            this.dropProxy = $.proxy(this.drop, this)
            this.placeholder = $(this.options.placeholder)

            if(!options.isValidTarget){
                this.options.isValidTarget = undefined
            }
        }
    }

    ContainerGroup.get = function  (options) {
        if( !containerGroups[options.group]) {
            if(options.group === undefined){
                options.group = groupCounter ++
            }
            containerGroups[options.group] = new ContainerGroup(options)
        }
        return containerGroups[options.group]
    }

    ContainerGroup.prototype = {
        dragInit: function  (e, itemContainer) {
            this.$document = $(itemContainer.el[0].ownerDocument)

            if(itemContainer.enabled()){
                // get item to drag
                this.item = $(e.target).closest(this.options.itemSelector)
                this.itemContainer = itemContainer

                if(this.item.is(this.options.exclude) ||
                    !this.options.onMousedown(this.item, groupDefaults.onMousedown, e)){
                    return
                }

                this.setPointer(e)
                this.toggleListeners('on')
            } else {
                this.toggleListeners('on', ['drop'])
            }

            this.setupDelayTimer()
            this.dragInitDone = true
        },
        drag: function  (e) {
            if(!this.dragging){
                if(!this.distanceMet(e) || !this.delayMet){
                    return
                }
                this.options.onDragStart(this.item, this.itemContainer, groupDefaults.onDragStart, e)
                this.item.before(this.placeholder)
                this.dragging = true
            }

            this.setPointer(e)
            // place item under the cursor
            this.options.onDrag(this.item,
                getRelativePosition(this.pointer, this.item.offsetParent()),
                groupDefaults.onDrag,
                e)

            var x = e.pageX,
                y = e.pageY,
                box = this.sameResultBox,
                t = this.options.tolerance

            if(!box || box.top - t > y || box.bottom + t < y || box.left - t > x || box.right + t < x){
                if(!this.searchValidTarget()){
                    this.placeholder.detach()
                }
            }

        },
        drop: function  (e) {
            this.toggleListeners('off')

            this.dragInitDone = false

            if(this.dragging){
                // processing Drop, check if placeholder is detached
                if(this.placeholder.closest("html")[0]){
                    this.placeholder.before(this.item).detach()
                }else{
                    this.options.onCancel(this.item, this.itemContainer, groupDefaults.onCancel, e)
                }
                this.options.onDrop(this.item, this.getContainer(this.item), groupDefaults.onDrop, e)

                // cleanup
                this.clearDimensions()
                this.clearOffsetParent()
                this.lastAppendedItem = this.sameResultBox = undefined
                this.dragging = false
            }
        },
        searchValidTarget: function  (pointer, lastPointer) {
            if(!pointer){
                pointer = this.relativePointer || this.pointer
                lastPointer = this.lastRelativePointer || this.lastPointer
            }

            var distances = sortByDistanceDesc(this.getContainerDimensions(),
                    pointer,
                    lastPointer),
                i = distances.length

            while(i--){
                var index = distances[i][0],
                    distance = distances[i][1]

                if(!distance || this.options.pullPlaceholder){
                    var container = this.containers[index]
                    if(!container.disabled){
                        if(!this.$getOffsetParent()){
                            var offsetParent = container.getItemOffsetParent()
                            pointer = getRelativePosition(pointer, offsetParent)
                            lastPointer = getRelativePosition(lastPointer, offsetParent)
                        }
                        if(container.searchValidTarget(pointer, lastPointer)){
                            return true
                        }
                    }
                }
            }
            if(this.sameResultBox){
                this.sameResultBox = undefined
            }
        },
        movePlaceholder: function  (container, item, method, sameResultBox) {
            var lastAppendedItem = this.lastAppendedItem
            if(!sameResultBox && lastAppendedItem && lastAppendedItem[0] === item[0]){
                return;
            }

            item[method](this.placeholder)
            this.lastAppendedItem = item
            this.sameResultBox = sameResultBox
            this.options.afterMove(this.placeholder, container, item)
        },
        getContainerDimensions: function  () {
            if(!this.containerDimensions){
                setDimensions(this.containers, this.containerDimensions = [], this.options.tolerance, !this.$getOffsetParent())
            }
            return this.containerDimensions
        },
        getContainer: function  (element) {
            return element.closest(this.options.containerSelector).data(pluginName)
        },
        $getOffsetParent: function  () {
            if(this.offsetParent === undefined){
                var i = this.containers.length - 1,
                    offsetParent = this.containers[i].getItemOffsetParent()

                if(!this.options.parentContainer){
                    while(i--){
                        if(offsetParent[0] != this.containers[i].getItemOffsetParent()[0]){
                            // If every container has the same offset parent,
                            // use position() which is relative to this parent,
                            // otherwise use offset()
                            // compare #setDimensions
                            offsetParent = false
                            break;
                        }
                    }
                }

                this.offsetParent = offsetParent
            }
            return this.offsetParent
        },
        setPointer: function (e) {
            var pointer = {
                left: e.pageX,
                top: e.pageY
            }

            if(this.$getOffsetParent()){
                var relativePointer = getRelativePosition(pointer, this.$getOffsetParent())
                this.lastRelativePointer = this.relativePointer
                this.relativePointer = relativePointer
            }

            this.lastPointer = this.pointer
            this.pointer = pointer
        },
        distanceMet: function (e) {
            return (Math.max(
                Math.abs(this.pointer.left - e.pageX),
                Math.abs(this.pointer.top - e.pageY)
            ) >= this.options.distance)
        },
        setupDelayTimer: function () {
            var that = this
            this.delayMet = !this.options.delay

            // init delay timer if needed
            if (!this.delayMet) {
                clearTimeout(this._mouseDelayTimer);
                this._mouseDelayTimer = setTimeout(function() {
                    that.delayMet = true
                }, this.options.delay)
            }
        },
        scroll: function  (e) {
            this.clearDimensions()
            this.clearOffsetParent()
        },
        toggleListeners: function (method, events) {
            var that = this
            events = events || ['drag','drop','scroll']

            $.each(events,function  (i,event) {
                that.$document[method](eventNames[event], that[event + 'Proxy'])
            })
        },
        clearOffsetParent: function () {
            this.offsetParent = undefined
        },
        // Recursively clear container and item dimensions
        clearDimensions: function  () {
            this.containerDimensions = undefined
            var i = this.containers.length
            while(i--){
                this.containers[i].clearDimensions()
            }
        },
        destroy: function () {
            // TODO iterate over subgroups and destroy them
            // TODO remove all events
            containerGroups[this.options.group] = undefined
        }
    }

    function Container(element, options) {
        this.el = element
        this.options = $.extend( {}, containerDefaults, options)

        this.group = ContainerGroup.get(this.options)
        this.rootGroup = this.options.rootGroup || this.group
        this.parentContainer = this.options.parentContainer
        this.handle = this.rootGroup.options.handle || this.rootGroup.options.itemSelector

        var itemPath = this.rootGroup.options.itemPath,
            target = itemPath ? this.el.find(itemPath) : this.el

        target.on(eventNames.start, this.handle, $.proxy(this.dragInit, this))

        if(this.options.drop){
            this.group.containers.push(this)
        }
    }

    Container.prototype = {
        dragInit: function  (e) {
            var rootGroup = this.rootGroup

            if( !rootGroup.dragInitDone &&
                e.which === 1 &&
                this.options.drag) {
                rootGroup.dragInit(e, this)
            }
        },
        searchValidTarget: function  (pointer, lastPointer) {
            var distances = sortByDistanceDesc(this.getItemDimensions(),
                    pointer,
                    lastPointer),
                i = distances.length,
                rootGroup = this.rootGroup,
                validTarget = !rootGroup.options.isValidTarget ||
                    rootGroup.options.isValidTarget(rootGroup.item, this)

            if(!i && validTarget){
                var itemPath = this.rootGroup.options.itemPath,
                    target = itemPath ? this.el.find(itemPath) : this.el

                rootGroup.movePlaceholder(this, target, "append")
                return true
            } else
                while(i--){
                    var index = distances[i][0],
                        distance = distances[i][1]
                    if(!distance && this.hasChildGroup(index)){
                        var found = this.getContainerGroup(index).searchValidTarget(pointer, lastPointer)
                        if(found){
                            return true
                        }
                    }
                    else if(validTarget){
                        this.movePlaceholder(index, pointer)
                        return true
                    }
                }
        },
        movePlaceholder: function  (index, pointer) {
            var item = $(this.items[index]),
                dim = this.itemDimensions[index],
                method = "after",
                width = item.outerWidth(),
                height = item.outerHeight(),
                offset = item.offset(),
                sameResultBox = {
                    left: offset.left,
                    right: offset.left + width,
                    top: offset.top,
                    bottom: offset.top + height
                }
            if(this.options.vertical){
                var yCenter = (dim[2] + dim[3]) / 2,
                    inUpperHalf = pointer.top <= yCenter
                if(inUpperHalf){
                    method = "before"
                    sameResultBox.bottom -= height / 2
                } else{
                    sameResultBox.top += height / 2
                }
            } else {
                var xCenter = (dim[0] + dim[1]) / 2,
                    inLeftHalf = pointer.left <= xCenter
                if(inLeftHalf){
                    method = "before"
                    sameResultBox.right -= width / 2
                } else{
                    sameResultBox.left += width / 2
                }
            }
            if(this.hasChildGroup(index)){
                sameResultBox = emptyBox
            }
            this.rootGroup.movePlaceholder(this, item, method, sameResultBox)
        },
        getItemDimensions: function  () {
            if(!this.itemDimensions){
                this.items = this.$getChildren(this.el, "item").filter(":not(.placeholder, .dragged)").get()
                setDimensions(this.items, this.itemDimensions = [], this.options.tolerance)
            }
            return this.itemDimensions
        },
        getItemOffsetParent: function  () {
            var offsetParent,
                el = this.el
            // Since el might be empty we have to check el itself and
            // can not do something like el.children().first().offsetParent()
            if(el.css("position") === "relative" || el.css("position") === "absolute"  || el.css("position") === "fixed"){
                offsetParent = el
            }
            else{
                offsetParent = el.offsetParent()
            }
            return offsetParent
        },
        hasChildGroup: function (index) {
            return this.options.nested && this.getContainerGroup(index)
        },
        getContainerGroup: function  (index) {
            var childGroup = $.data(this.items[index], "subContainer")
            if( childGroup === undefined){
                var childContainers = this.$getChildren(this.items[index], "container")
                childGroup = false

                if(childContainers[0]){
                    var options = $.extend({}, this.options, {
                        parentContainer: this,
                        rootGroup: this.rootGroup,
                        group: groupCounter ++
                    })
                    childGroup = childContainers[pluginName](options).data(pluginName).group
                }
                $.data(this.items[index], "subContainer", childGroup)
            }
            return childGroup
        },
        enabled: function () {
            return !this.disabled && (!this.parentContainer || this.parentContainer.enabled())
        },
        $getChildren: function (parent, type) {
            var options = this.rootGroup.options,
                path = options[type + "Path"],
                selector = options[type + "Selector"]

            parent = $(parent)
            if(path){
                parent = parent.find(path)
            }

            return parent.children(selector)
        },
        _serialize: function (parent, isContainer) {
            var that = this,
                childType = isContainer ? "item" : "container",

                children = this.$getChildren(parent, childType).not(this.options.exclude).map(function () {
                    return that._serialize($(this), !isContainer)
                }).get()

            return this.rootGroup.options.serialize(parent, children, isContainer)
        },
        clearDimensions: function  () {
            this.itemDimensions = undefined
            if(this.items && this.items[0]){
                var i = this.items.length
                while(i--){
                    var group = $.data(this.items[i], "subContainer")
                    if(group){
                        group.clearDimensions()
                    }
                }
            }
        }
    }

    var API = {
        enable: function  (ignoreChildren) {
            this.disabled = false
        },
        disable: function  (ignoreChildren) {
            this.disabled = true
        },
        serialize: function () {
            return this._serialize(this.el, true)
        },
        destroy: function () {
            this.rootGroup.destroy()
        }
    }

    $.extend(Container.prototype, API)

    /**
     * jQuery API
     *
     * Parameters are
     *   either options on init
     *   or a method name followed by arguments to pass to the method
     */
    $.fn[pluginName] = function(methodOrOptions) {
        var args = Array.prototype.slice.call(arguments, 1)

        return this.map(function(){
            var $t = $(this),
                object = $t.data(pluginName)

            if(object && API[methodOrOptions]){
                return API[methodOrOptions].apply(object, args) || this
            }
            else if(!object && (methodOrOptions === undefined ||
                typeof methodOrOptions === "object")){
                $t.data(pluginName, new Container($t, methodOrOptions))
            }

            return this
        });
    };
})(jQuery);
if (window.FR == null) {
    window.FR = {};
}

$.extend(FR, {
    /**
     * 这里添加一些必须要使用中文的键值对，然后通过FR.plainText(key)进行调用
     */
    chinese : {

    },

    i18n: {"FR-Engine_ConditionB-is_less_than_or_equal_to":"小于或等于","FR-Designer_Certificate_Path":"证书路径","Select_Mail_Column":"选择邮箱对应列","BindColumn-Have_Up_Parent_Cell":"有上父格","FS-Generic-Simple_Transferring":"迁移中...","MConfig-BorderTitle":"图片","ChartF-Radar":"雷达图","FR-Chart-Help_UpdateOnline":"在线更新","Page-Attribute":"分页页面属性","ChartF-Interval":"间隔定义","Icon_And_Text_Cannot_Be_Empty_In_The_Same_Time":"图标和文本不能同时为空","FS-Setting-Theme_Config":"主题","FS-Schedule-End_If_Executed":"任务执行一次后即结束","Schedule-Hourly":"每小时","FS-Mobile-Mobile_Dev_Binding":"移动平台","Chart_Legend_Is_Visible":"图例可见","TrueRunInterval":"正确的运行间隔时间单位","Platform-DB_Connection_Create_Failure":"数据库连接创建失败","FS-Schedule_Output_Way":"输出方式","B-PrintSetup":"打印设置(P)","FR-Chart-Map_NameAlreadyExist":"该地图名已存在","Export_Setting":"导出配置","FS-Generic-System_Status":"系统状态","FR-Plugin_Error_PluginAlreadyForbidden":"插件已经被禁用","Selection":"选择","FR-Chart-Map_Xining":"西宁市","turn":"转向","High-Low-Line":"高低线","FS-Monitor-Page":"分页浏览","FS-Reg-Export_Info":"导出注册信息","Plugin-ChartF_Map_Image_RootName":"自定义图片","FS-Monitor-Log_Clean_One_Month_Ago":"一个月前","FR-Designer_Unit_CM":"厘米","FS-Report-Choose_ViewType":"请选择预览类型！","HTML-Write_Content_Save_Successfully":"填写内容保存成功","FS-BakRestore_Plugin_Backup":"插件","ChengduCity":"成都市","Directory":"目录","Dismenber":"分隔符","Chart-In_Pie":"饼图内","FR-Engine_Excel_Export_Error_For_Overlap":"存在报表块或图表重叠，导出失败。","Center":"居中","Drag_To_Move":"点此拉动","FR-Chart-Type_Range":"全距图","FS-Plugin_UpdateOnline_Specification":"相关说明","FR-Plugin-Store_Chart":"图表","DBCP_MAX_WAIT":"最大等待时间","Schedule-Edit_Start_Time":"编辑起始时间","Red":"红色","M-Open_Report":"打开...","ReportServerP-Report_server_parameter":"报表服务器参数","Widget-Comb_Widget_Config":"组合控件","Please_enter_the_export_file_name":"请输入导出文件名","Plugin-ChartF_LimitAreaSize":"限制区域大小","FS-Plugin-Store_Expired":"","Template_Parameters":"模板参数","FS-MOBILE-SETTING-THEME-CONFIG":"主题","FS-System-Phone_Not_Match_User":"手机未与该账号绑定","M_Format-Add_Column_After":"在后面添加列(L)","Add":"增加","Email-Sending":"正在发送邮件","FR-Chart-Data_OnlyUseBefore":"只使用前","Prev_Month":"上一月","Chart_Relief":"浮雕","FS-Schedule_Retain_Latest":"保留最近","FR-Engine_FS_End_Time":"结束时间","FR-Base_Sche_Friday":"星期五","BackgroundTexture-Stationery":"信纸","FR-Designer-Plugin_Duplicate_ID":"该插件和已安装的插件id重复","FS-System-Config_Sure_To_Restore":"确认还原?","Search_Result":"搜索结果","Register_failed":"提示：当前应用的WEB-INF/resources路径下未发现服务器授权文件！请尽快导入授权文件并完成","ParameterD-The_Other":"其它","FR-Engine_Excel_To":"至","Performance-plugin_apply":"生效","FS-Generic-Privilege_Keep_Login_State":"保持登录状态","CellWrite-Including_Current_Cell":"包括当前格子","FR-Engine_FangSong":"仿宋","FR-App-Template_Save":"保存","FS-Admin-Enter_New_Password":"设置新密码","Max-Files_Length":"最多上传文件数","FR-Engine-Page_Setup_Landscape":"横向","Cannot_Parse_Template_File":"无法解析模板文件","FR-Chart-Map_Corresponding_Fields":"区域对应字段","FR-Engine_Equal_Proportions_Adaptivity":"等比例自适应","FS-BakRestore_Clear":"清理","Chart-Trend_Line":"趋势线","Plugin-Chart_Delete_Line":"删除行","BindColumn-Summary_Parameters":"汇总参数","PageSetup-Left_to_right":"先行后列","FR-Chart-Choose_Style":"样式选择","Chart_TrendLine":"趋势线","Utils-Activate_Designer":"激活设计器","Form":"表单","ECP_error_pwd":"密码错误","FS-Msg-Update_Chosen":"插件已被更新,重启服务器后生效","Warning-Template_Do_Not_Exsit":"模板不存在","Form-Basic_Properties":"基本属性","FR-Engine_Auto_Match":"自动匹配","FR-Chart-Type_Gantt":"甘特图","Plugin-Chart_File_Name":"文件名","I-RadarChartStyle_Marker":"数据点雷达图","Custom_Icon_RemoveIcon":"移除图标","M_Server-Public_Datasource_Manager":"公有数据源管理器(D)","FS-Generic-Simple_Closed":"已关闭","FS-Generic-Simple_No_Dept_Staff":"无部门人员","Present":"形态","FS-Schedule_Run_Type":"运行类型","HJS-Subject":"主题","FR-Designer-Dependence_Install_Online":"在线安装依赖环境","FR-Chart-Series_Config":"系列设置","FR-Engine_WritePreview":"填报预览","FS-Schedule_Process_Type":"处理方式","FR-Engine_Over-Sheet":"跨sheet计算","Milliseconds":"毫秒","Plugin-Memory_Alarm_DS_Max_Count":"单数据集最大行数","FR-Engine_Tip_Equal_Area_Adaptivity":"提示：保持面积相等，横向压缩，纵向放大，最大高度为屏幕显示区域的80%","Form-All_Files":"全部文件","FR-Plugin-Store_User_Not_Exist":"用户名不存在","FR-Engine_ExecuteOneTime":"执行一次","FS-Setting-Homepage_URL_Pad":"平板","Plugin-ChartF_Preview_Bubble":"预览气泡图","Plugin-ChartF_CategoryLabel":"分类标签","Version-does-not-support":"您当前使用的lic不支持远程设计功能，请升级您的lic","BackgroundTexture-RecycledPaper":"再生纸","FR-Engine-Condition_Begin_With":"开头是","Flash/PdfInstallSet_Message":"文件不能在\u2018WEB-INF\u2019文件夹下，也不能在web应用目录外。","FR-Designer_FS_Close_Other_Templates":"关闭其他模版","FR-Plugin_Error_BeyondSystem":"插件版本过高，需升级系统","FR-Plugin-Store_Forgot_Password":"忘记密码","FR-Engine-Condition_Not_Contains":"不包含","StyleAlignment-Bottom":"靠下","FS-Schedule_Send_Failed_Prompt":"尊敬的管理员，{R1}于{R2}运行失败，请知晓","FS-Generic-Simple_Pause":"暂停","Plugin-ChartF_New_Map":"新建地图","parameter_name_exist":"该参数名已存在","ConditionB-does_not_equal_to":"不等于","Fujian":"福建省","Dic-Set_Key_And_Value":"设定键值和数值","SQLWizard-add_subquery":"增加子查询","FR-Engine_Event_beforedelete":"删除行前","Chart-Stock_Check_Data":"请检查您的数据","FR-Designer-Undo_All_Authority_Operations":"撤销前一次权限编辑的所有操作","PageSetup-Predefined":"预定义","M_Insert-Barcode":"条形码","FR-Chart-Province_Map":"省市地图","ReportColumns-Columns_after":"超过","FS-Monitor-Visits_Template":"模板访问次数","DashBoard-Online_Document":"在线文档","HF-New_Line":"换行符","NS_export_wordPageSize":"错误代码:11100014 导出Word不支持多Sheet下的不同页面设置","FS-Monitor-Menu_Intelligent_Detection":"智能检测","Short-Sep":"九","FR-Engine_Please_Install":"请安装","FS-System-Config_SMS_Setting":"设置","Column_Cell":"横格","Form-Top_Align":"顶部对齐","FS-System-Dialog_Title":"提示","Sure_To_Close_Synch_Data_Sets":"确定要关闭同步数据集","FS-Schedule-Execute_By_Expression":"表达式设定","Plugin-Memory_Alarm_Msg_Head":"当内存占用","FR-Custom_styles_lost":"自定义样式已丢失","FS-Plugin_updateOnline_WaitForCheck":"请等待版本检测完成","FS-Generic-Mobile_Phone":"手机","contact_info":"联系信息(选填)","Utils-OpenDemoEnv":"产品演示，需要自动切换至工作目录：","FR-Base-Time_Day":"天","Plugin-ChartF_Preview_TreeMap":"预览矩形树图","FS-Setting-Input_Homepage_Name":"请设置首页名","FR-Designer_Message":"信息","Type-Parameter":"<html> <body> 您可以键入${abc}作为一个参数，这里abc是参数的名称。例如：<br>","FS-Monitor-Model_Unused":"未使用","FS-Plugin-Store_Developer":"","Plugin-ChartF_HeatPoint":"热力点","Plugin-ChartF_Flash_Animation":"闪烁动画","DS-Embedded_TableData":"内置数据集","FR-Designer_WorkBook":"工作簿","RowTo":"行至第","FS-Schedule_Mobile-Push-Custom-Link":"自定义链接","Form-Change_Widget_Name_Discription":"请输入一个新的控件名","FR-Designer-Widget_Settings":"控件设置","FR-Base_February":"二月","Plugin-ChartF_Preview_Stack_ColumnType_Radar":"预览堆积柱形雷达图","FS-System-Reportlets_root_directory_name":"网络报表根目录名","FS-Setting-Color_Custom":"自定义","FS-System-Single_Login":"单一登录","All":"所有","FR-Engine_Select_FS_Roles":"选择平台角色","Change_To_LayerReport":"转换成层式报表","ChartF-Pie_Depth":"饼图厚度","M_File-Export-Word":"Word格式","FS-User-Ldap_Suffix":"用户名后缀","Password_Changed_Successfully":"密码修改成功","FS-Setting-Add_Home_Page":"新建首页","Chart_Average_Value":"平均值","FR-Chart-Large_Data_Model":"大数据","Show_Icon":"显示按钮图标","Write_Preview":"填报预览","FR-Engine-Export_Print_Not_Support":"当前版本不支持打印导出, 请升级您的lic","FR-Engine_Excel_Requied_Remark":"必填，如果无标题则都填0","Datasource-SQL_Query":"SQL查询","FR-Engine_Event_beforetoimage":"导出图片前","SQL":"SQL","WF-Junior":"下级","Plugin-ChartF_Preview_StackColumn_Line_Custom":"预览堆积柱形折线组合图","Datasource-User_Defined":"自定义","Bright-Style":"明亮","FR-Chart-Design_ChartModule":"设计器图表模块","FR-Engine_Please_Select_Step":"请选择步长！","And":"且","SQLWizard-wait":"稍候","FR-Engine_Mobile_Chart_Adaptivity":"移动端图表自适应","Chart_Null_Value_Continue":"跳过","FR-Base_March":"三月","FR-Engine_Current_Node_Staff":"本节点人员","FR-Chart-Chart_Text":"测","Row":"行","FR-Plugin-Designer_Msg_Wrong_Path":"文件不存在","BindColumn-Select":"列表","Utils-Unregistered_Version":"未授权版本(包含全部功能,不允许用于商业目的)","FR-Engine_Season":"季","FR-Engine_Please_Select_Sort_Rule":"请选择排序规则","Show_Grid_Line":"显示网格线","FR-Designer-Basic_Restart_Designer_Later":"稍后重启","Default_ParameterWindow_CountPerRow":"每行参数个数","FR-Plugin-Store_Private_Message":"私人消息","FS-BakRestore_Three_Months_Before":"3月前","CellWrite-Suppress_If_Duplicated(Used_in_Group_Report)":"纵向合并内容相同的单元格(分组报表使用)","Function":"函数","Form-Same_Width":"等宽","FR-Chart-Map_Yunnan":"云南","Plugin-ChartF_NewCustom_ColumnArea":"柱形图-面积图","Form-Empty":"空值","FR-ReportletList_Generated_Time":"生成时间","Cache-Local_Disk_Cache-Setting":"本地磁盘缓存设置","Create_Time":"创建时间","Plugin-ChartF_Gauge_Pointer180":"多指针的仪表盘180度","ReportServerP-FormToolBar":"表单工具栏","BindColumn-Even_Selected_(2,4,6...)":"选择了偶数集(2,4,6...)","FR-Chart-Type_Column":"柱形图","FR-Designer_Utils-Move_Up":"上移","FR-Designer_Certificate_Pass":"https秘钥","FR-Base_Value":"值","FR-Chart-Color_Subject":"主题","FR-Engine_ConditionB-is_greater_than":"大于","FR-Engine_This_Template_Has_Exist":"这个模板已经存在","FS-Schedule_CPR":"快照生成","FR-Engine_Applet_Print":"Applet打印","FS-Base-User_Not_Login":"未登录用户","BindColumn-Bottom_N":"后N个","FR-Engine_Failed":"失败","FS-Schedule_Hour":"时","Cursor_to_next_row":"光标移到下一行","FS-Generic-Simple_Fri":"五","FR-Designer_Font":"字体","Widget-Load_Type":"加载","NS_export_excelHtml":"错误代码:11100011 导出Excel不支持Html中部分标签","M-Print_Report":"打印报表(P)","FlowLayout-Right":"右","FR-Designer-Widget-Style_Preview":"预览","FS-Monitor-Tpl_Name":"模板名称","Oracle_All_Tables":"所有表","Chart-Link_Reportlet":"网络报表","FS-System-Task_Completed":"该任务已处理完成","SummaryFields":"汇总字段","FR-Action_Sort":"排序","Hyperlink-Features":"特征","Form-RoleTableTree":"角色表格树","Sort-Descending":"降序","Insert-Formula_Edit":"公式编辑","FS-Setting-Homepage_URL_Mobile":"手机","FR-Engine_ConditionB-Parameter_name_cannot_be_null":"参数名字不能为空","FS-Reg-Engine-Version":"引擎版本","Uping_File":"正在上传文件","FS-Schedule-Execute_Once":"只执行一次","ServerM-Define_Styles":"","RP_Pass":"通过","ReportServerP-Write_Processor":"填报处理器","Plugin-ChartF_Down_Head_Table":"下层表头","FR-Engine_Export":"导出","ExpandD-Expandable":"可伸展性","Group":"分组","ReportServerP-Printers(Server)":"打印机(服务器)","Export-Word":"Word格式","Vertical-SplitPane":"左右分割布局面板","Datasource-Query_Type":"查询类型","FR-Plugin-Store_Update":"更新","Widget-Sizing":"大小调整","Chart-Map_Cancel":"取消","BackgroundTexture-PinkTissuePaper":"粉色砂纸","Plugin-Memory_Alarm_Setting":"设置","must_choose_one_report":"必须选择一张报表！","FS-BakRestore_Value_not_Valid":"输入参数无效，请输入正整数！","FR-Engine_ConditionB-OR":"或(OR)","M_Report-Report_Interface":"参数界面(I)","ChartF-Axis":"坐标轴","FR-Engine_ConditionB-null":"为空","FR-Engine-Export_Excel_LargeData_Page_Info":"请耐心等待文件的生成，所花费的时间将视数据量的大小而定，在此过程中请勿关闭当前页面或浏览器。","Has_been_gone":"  已丢失，是否增加该样式？","Datasource-Data_Map_Source":"数据字典来源","FS-BakRestore_Backup_Frequency_Onemonth":"1月","Run":"运行","FS-Schedule-Enter_Correct_Run_Times":"请输入正确的运行次数","REPORT_XML":"报表内容传输","Chart_Move_Average":"移动平均","Add_summary_fields":"添加汇总字段","alert_word":"选择不固定行高导出时, 编辑导出的word, 单元格行高会随着内容自动拉伸, 此情况下导出结果分页位置与预览结果可能会不再一致.","FR-Plugin_Error_NetworkAnomaly":"网络异常","FS-System-Current-Login-First":"后登录踢出先登录","FR-Engine_Utils_PDF_Print[Client]":"打印[客户端]","Performance-plugin_description":"描述","FR-Base-Song_TypeFace":"宋体","FS-Admin-Account_Has_Set":"已经设置过了管理员及密码，请与您的管理员联系","M_Insert-Formula":"插入公式","Chart-LngFirst":"经度在前","FR-Designer_Component_Scale":"组件缩放","SyncSuccess":"同步数据集成功","EX-IP_Address_Overflow":"IP地址数量超过限制","FR-Engine_Image-Export":"导出图片","I-RadarChartStyle_FillwithMarker":"数据点填充雷达图","FR-Designer-LayerPageReport_CustomCountQuery":"自定义SQL获取数据集总行数","Search":"搜索","Plugin-ChartF_Weekend_Tooltip":"周末提示","FR-Engine_Event_beforetoword":"Word导出前","FS-Generic-Simple_October":"十月","GroupReport-Set_Page_Footer_Of_Last_Page_Under_Report_Footer":"最后一页页表脚置于报表脚下方","FR-Engine_Select_FS_Users":"选择平台用户","FR-Base-Time_Year":"年","FS-Generic-Schedule_Template":"模板名称","Plugin-ChartF_Border_Width":"边框宽度","RoleName_Can_Not_Be_Null":"角色名不允许为空且不能重复","FR-Chart-Table_Data":"数据集","FR-Engine_Interactive-chart":"图表联动","FS-Mobile-User_Limit_Tip_Right":"用户使用移动应用","FS-Report-Do_Select_Dir":"请选择目录","FR-Engine_Form":"表单","Data_Rollback_Failed":"数据回滚失败","FS-BakRestore_Unsupported_Restore_Transferred":"当前已经是迁移后的环境，该备份不支持还原！","FR-Engine_Repeat":"重复","FR-Designer_Dropdown-More-Preview":"下拉获取更多预览方式","ChartF-Series_Name_From":"系列名使用","FS-System-Email_Or_Phone_Wrong_Format":"邮箱或手机格式不正确","FS-Msg-Delete_YES_NO":"确定删除此插件?","Dictionary-Dynamic_SQL":"动态SQL","FS-Process-Limit":"限制","FS-Report-BI_Data_Settings":"BI数据配置","FS-Monitor-Live_Session":"存活会话数","FR-Engine_Param_Template_Cannot_Empty":"名称不能为空","FS-Generic-Simple_September":"九月","Select_DataColumn":"选择数据列","UpBarBorderStyleAndColor":"涨柱样式","FS-Schedule_Every_Week":"每周","Preference-Horizontal_Scroll_Bar_Visible":"水平滚动条可见","Chart_Not_Zero":"不为零","INFO-End_Converting_ReportPage_To_Html":"报表页转Html结束","Schedule-Unspecified_Report_File_Prefix":"未指定报表文件前缀","FS-Shop_Resource_Install_Failed":"插件商店资源安装失败","ExpandD-Data_Column":"数据列","Form-Events":"事件","Others":"其它","FormulaD-Invalid_SQL":"非法的SQL语句","FR-Chart-Category_Gap":"分类间隔","FS-Reg-How":"如何注册？","FR-Chart-Stock_Close":"收盘","FS-BI-Dezi_Report_Location":"模板位置","FS-Schedule_Minute":"分","M-Cell":"单元格","FR-WriteEnhance_select_all":"全选","FS-System-Cache_Principle":"缓存原则","WF-Reportlet_Field":"来自网络报表指定区域","FR-Engine_Schedule-Monthly":"每月","Preference-Is_Drag_Permited":"支持拖拽","FS-Monitor-New_Session":"近10分钟内新增会话数","FR-Engine_Hana-TableData":"Hana数据集","FR-Engine-Err-The_value_must_be_number":"值必须是一个数字","FR-Engine_Schedule-Template_Parameter":"模板参数","FS-Schedule_Current_Task_Is_Executing":"当前任务正在执行，请稍后再试","FR-Engine_Function_Form_Widget_Edit_Toolbar":"表单组件编辑(工具栏)","FS-Plugin-Store_Permanent":"","FR-Basic_Failed":"失败","ChartDrawSet":"绘图设置","FS-System-Please_Input_Username":"请输入用户名","ChartF-Legend":"图例","Utils-Column_Width":"列宽","server_disconnected":"连接已断开","Shared_To_Me":"分享给我的","FS-Admin-Passwords_Not_Match":"您两次输入的新密码不一致，请确认","FR-Engine_Specified_Pages_Not_Exist":"页面没找到","Enter_Analysis_Name":"请输入分析名称！","FR-Designer-FRFont_Size":"大小","Frozen":"冻结","FR-Hyperlink_Dialog":"对话框","FR-App-Export_png":"PNG格式","Refresh_Successfully":"刷新成功","ContentDisplay":"显示方式","Chart-Map_ContinuePolyline":"点击以继续画线","FR-Engine_Event_aftersubmit":"提交后","M_Edit-Unmerge_Cell":"取消合并单元格","Help":"帮助","Rename_Column":"重命名列","FR-Chart-Map_Zhengzhou":"郑州市","Chart-Map_CancelDrawing":"取消绘制","Plugin-ChartF_Range":"区间","FR-Base_RWA-Key":"主键","add_schedule_task":"添加定时任务","FS-Schedule-New_Task":"添加任务","Export":"输出","Utils-The-Form":"表单","FR-Engine_Task_List_Chosen":"已选任务列表","CellWrite-InsertRow_DEFAULT":"默认值","column_and_row":"行列","FormulaD-Math_&_Trig":"数学和三角函数","FR-Designer_Chart_Field_Name":"字段名","ParameterD-New_parameter_name":"新参数的名字","Short-Apr":"四","FS-Generic-Minute_Wrong":"执行时间的分钟填写错误","Type":"类型","Page-Setup-Scale-Units":"页面设置标尺单位","Plugin-Memory_Alarm_Queue_Wait":"排队等待","FS-Setting-Top_Navigation":"顶部导航栏","FS-Plugin_UpdateOnline_Upgrade_Compatible":"兼容并升级","FR-Engine_Not_limited_IP":"不限并发","I-xyScatterStyle_LineMarker":"折线散点图","Style-Right_Indent":"右缩进","Send":"发送","The_file_name_already_exists_,_override_it_?":"该文件名已存在，要覆盖它吗？","Chart-Map_StartPolyline":"点击开始画线","Interactive-chart":"图表联动","FR-Designer-Widget-Style_Alpha":"不透明度","Unfrozen":"解冻","FS-Generic-Parameter_String":"字符串","Hyperlink-Height_Of_New_Window":"新窗口高度","FR-Designer-Widget-Style_Border_Line":"边框粗细","FR-Engine_EDIT_REPORT_XML":"在线编辑报表内容传输","Repeat-Block_Name":"此块名已经存在","FS-Plugin_upOnline":"在线更新","FR-Chart-Stock_High":"盘高","FS-User_Import_User":"导入用户","FR-Engine_Error-Solution":"解决方案","Sat":"六","Writer-ShortCuts_Setting":"填报快捷键设置","Plugin-ChartF_Reversal":"翻转","FR-Designer_Alignment-Style":"对齐方式","FS-System-Email_Port":"端口","Short-Aug":"八","FR-Designer-All_MSBold":"微软雅黑","FR-Engine_Event_afterverifywrite":"校验提交后","FS-System_Simple_Email":"邮箱","Utils-Need_to_select_a_datasource_file":"需要选择一个数据源文件","FS-CutomStyle_Toast_OK":"知道了","RWA-NotChange_Unmodified":"未修改不更新","Utils-PDF_Print[Client]":"PDF打印[客户端]","Schedule-Select_Path":"选择目录","FS-System-Config_SMS_Mobile_Receiver":"接收手机号","SecondGraduationLineStyle":"次要刻度线类型","FS-Admin-Admin_Password":"管理员密码","Syn-transfer":"转换","Standerd":"标准","FR-Designer-Plugin_Env_Expired":"该插件只支持FineReport9.0","Docking-Docked_Mode":"停靠模式","FS-Generic-Simple_Wed":"三","Session":"会话","FR-Plugin_Error_PluginRunningError":"运行过程出错","FS-CustomStyle_Toast_Exist_alert":"样式已经存在","FS-Generic-Simple_Ge":"个","Inc_All_rights_Reserved":"保留所有权利。","FS-Schedule_Add_Para_Group":"添加参数组合","ChartF_Stock_Close":"收盘","FR-Engine_Excel_Horizon":"横向导入Excel","GroupReport-Make_Up_Blank_Detail_Area":"补足空白的主体区域","FR-Engine_Software":"软件","RP_Task_Created_By_Me":"我创建的任务","M_Insert-Slope_Line":"插入斜线","Popup":"弹出","SAP-Transfer_type_relation_setting":"转换类型以及关系","FR-mobile_html_analysis":"HTML5解析","FS-BI-Dezi_Report_Name":"模板名称","Schedule-Handle_Type":"处理方式","Space":"空格","FS-Mobile-Report_Cover_Upload_ToolTip":"提示：自定义目录封面图片建议尺寸为 240*168px","Schedule-Save_To":"保存位置","FormulaD-Data_Fields":"数据项","Server_Name":"服务器名称","FR-App-All_Auto":"自动","FS-System-Connection_Description":"数据连接","FS-Error-URL-Msg":"请选用以https://开头的网址","CSS_warning":"  相对报表工程目录如WebReport,如WebReport\\css下有引用的css文件test.css，则相对路径为css/test.css","Cancel_Repeat_Attributes":"取消重复行列","WF-ID":"编号","The_initial_background_of_the_button":"按钮的初始背景","Null_Value_Show":"空值显示","FR-Engine-Data_Submit_Error":"数据提交出错","FS-System-Config_Restore_Complete":"还原完成，请重启","Function-New_Function_Name":"新函数名","Plugin-ChartF_Each_Layer_Data_Special":"各层级分别指定","FS-Plugin_updateTo":"更新到","Ser":"第","FS-BakRestore_Restoring":"正在还原...","Set":"设置","FS-Setting-Login_Background":"设置登录背景图片","BackgroundTexture-Parchment":"羊皮纸","FRFont-Family":"名字","FS-User-Default_Encryption":"默认加密(SHA)","M-Close_Template":"关闭模板(C)","FR-Plugin-Store_Official":"官方(帆软)","RP_System_Message":"系统消息","FR-Engine_RP_Task_List":"任务列表","Schedule-Yearly":"每年","Ecp_Success":"加密成功","FR-Plugin_Downloading_Plugin":"下载插件中","FS-Generic-Simple_De":"的","Two_Rows_Of_Two_Grid":"两行两列的格子","Parameter-Boolean":"布尔型","I-LineStyle_Line":"折线图","FS-Setting-Custom_Icon":"自定义图标","Printer-Are_you_sure_to_delete_this_alias":"确定删除该别名","FS-User-Simple_Department":"部门","ChartB-Caculates_the_summary_of_field":"计算汇总列","I-BarStyle_3D":"三维簇状柱形图","FR-Engine_Error-Code-PdfPrint":"错误代码\\:11100021 PDF打印只支持IE内核浏览器,其他浏览器将导出PDF文件","Large-pitch-based":"大间距","FS-Reg-Part_Success_TipB":"的应用工程名不符&#59请尽快重新申请","FS-Setting-Homepage_URL":"主页URL","FS-Reg-Part_Success_TipA":"服务器授权文件绑定的应用工程名与服务器","Event_Type":"事件类型","FS-System-Config_Remind_PermMaxSize":"MaxPermSize={R1}M ，即JVM初始分配的最大非堆内存为{R2}M，可能存在宕机风险，请参照文档修改初始内存:{R3}","DataColumn":"数据列","Plugin-ChartF_Delete":"删除","OriginalImage":"原图","Custom_FS_Roles":"自定义角色","FR-Failed-License_Not_Match":"证书信息与本地不匹配","Organization_User":"组织用户","FR-Chart_Gis-Map":"Gis地图","FR-Designer-StyleAlignment_Left":"靠左","SQL-View":"视图","FR-Engine_REPORTLETS":"访问多张模板的路径的参数","FS-BakRestore_Delete_Backup":"删除","HourWrong":"执行时点的小时填写错误","Page_ToolBar_Event":"页面工具栏和事件","Docking-Dock":"停靠","Double_Click_Edit_OR_Clear":"双击进行编辑或清除","FR-Chart-Map_Haerbin":"哈尔滨市","FR-Engine-Condition_End_With":"结尾是","DecimalNumber_Out":"小数位过多","Plugin-ChartF_End":"终点","Schedule-Excute_Type":"生成类型","Chart_Not_Visible":"不可见","FS-Generic-Synchronize_Now":"立即同步","FS-Max-Connect":"最大连接数","FR-Action_Copy":"复制","ExpandD-Select_Datasource":"选择数据源","FR-Plugin-Designer_Submit_FTP":"上传至FTP","ChartF-Units":"单位","Selected-Index":"初始选中项","Chart-Series_AllData":"所有系列数据","Default_View":"默认视图布局","FR-Chart-Style_Transparent":"透明","DBTableData_Not_Get_RowCount":"不能取得总行数","FS-System-Time":"时间","FR-Engine_Excel_Foot_Tip":"共{R1}行数据{R2}","FS-Reg-Plugin-Count":"个插件未注册","Schedule-Start_at":"首次执行","FS-User-Duplicated_Username":"存在同名用户","ReportGUI-Print_Background":"打印/导出报表背景","Printer-Define_Printer_Group":"定义的打印机组","FR-Plugin-Designer_FTP_Site_Password":"密码:","Form-CheckBox":"复选框","Plugin-ChartF_NewTreeMap":"矩形树图（新特性）","FS-Plugin_updateOnline_Want_to_leave":"升级或还原尚未完成，确定离开此页面吗？","Mobile_Terminal":"移动端","FS-Generic-Simple_Favorite":"收藏夹","HF-Insert_Text":"插入文本","FS-Plugin_UpdateOnline_Downloading":"正在下载","Executing_Report":"报表计算中","FR-Chart-Data_Summary":"汇总方式","Utils-The-PolyReport":"聚合报表","FS-Generic-Simple_Remove":"删除","December":"十二月","Plugin-RH_Iframe_Name":"网页框","FS-Plugin_updateOnline_Deleted_Failed":"删除失败","FR-Engine_NativePrint_Invalid_Para":"参数不足, 请从浏览器端点击打印!","get-uuid-failed":"请以root身份运行web服务器","FR-Plugin_Error_PluginNotInstalled":"未安装该插件","Plugin-ChartF_NULL_Value_Color":"空值颜色","Allow_Blank":"允许为空","Plugin-ChartF_Save_Error":"保存失败","FS-Schedule_Result_Workbook_Num":"套结果文件","FS-System-Please_Input_Email_Or_Phone":"请输入邮箱或手机","Basic_Config":"基本配置","JavaScript-Parameter_Refresh":"","FuzhouCity":"福州市","FS-Generic-Simple_OK":"确定","M-Template":"模板","FR-Chart-Map_Rename":"重命名","FS-Module-User_Manager":"用户管理","FS-Generic-Simple_No":"否","ChartF-Increment":"增量","ChartF-Chart_Shallow":"图表阴影","RP_Add_SimpleNode":"添加普通节点","FS-Schedule_Default_User_Group":"默认用户组","BindColumn-Expansion_Direction":"扩展方向","FR-Engine_Sort_Horizontal":"排序（横向）","NS_exception_readExcelError":"错误代码:11300006 文件解析出错","FR-Chart-Axis_Choose":"坐标轴选择","FR-Plugin-Store_No_Account_Tip":"还没有账号? | ","Re-all-server-mac":"服务器所有mac地址","Form-Widget_Property_Table":"属性表","FS-Schedule-Simple_Execute_Time_Unit_Hour":"时","FR-Plugin-Function_Description":"插件功能描述","ChartB-Group_Options":"分组选项","BindD-Should_select_a_datasource":"需要选择一个数据源","HefeiCity":"合肥市","According_Cell_Set_Size":"根据选中的单元格的大小动态设置渐变色的区域","Form-Hierarchy_Tree":"结构树","StyleAlignment-TextAndImage":"文本与图片","FR-Chart-Chart_Module":"图表模块","FR-Engine_Excel_start":"开始导入sheet:","Plugin_Link":"链接","Utils-submitAll":"批量提交","HF-Defined":"已定义","ChartF-Transparency":"透明","Datasource-The_name_of_datasource_cannot_be_null":"数据查询的名字不能为空","FS-Plugin-Store_Category":"","Options_Sources":"备选项来源","Form-Delimiter":"分隔符","Previous_Node_Staff":"上节点人员","FS-Frame-Close_All":"关闭全部","Plugin-ChartF_NewHeatMap":"热力地图(新特性)","FS-Login_SMS_Verfication_Config":"登录验证设置","WF-Assigned_Role":"指定角色","FS-Plugin_UpdateOnline_Compatible_Process":"兼容处理","M_Report-Report_Footer":"报表页脚","Son":"子","Plugin-ChartF_Name":"名称","Plugin-ChartF_Circle":"圆形","FS-MOBILE-SETTING-CHANGE-THEME-SUCCESS":"更换主题成功","ExpandD-Horizontal_Extendable":"横向可伸展","Cannot_Found_Result_File":"没有找到结果文件","FS-System-Edit_Personal_Email":"修改邮箱","FR-Basic_Offline-Connect_Failed":"无法连接到服务器。请确认本机的网络连接状况和服务器的工作状态后重试。","FS-System-Simple_Sending":"发送中","FR-mobile_analysis_annotation":"注释: 可以通过该属性控制报表在APP中的解析方式，只支持分页预览，填报预览时属性无效.","Indent-Character":"字符","FR-Base-Time_Back_In_Time":"时光倒流","Plugin-ChartF_ValueAxis":"数值坐标轴","Chart-Map_DrawRectangle":"画矩形","Template":"模版","HF-The_Page_Number":"页码","FR-Engine_RP_Task_Status":"任务状态","FR-Engine__Column":"列","M_Edit-Send_Backward":"下移一层(B)","RP_Unlimited":"不限","Tree-Height":"高度","Plugin-Chart_Map_Editor":"地图配置","FR-Designer_Auto-Build":"自动构建","Come_True":"实现","ChartF-Pie":"饼图","chartDesignerModule":"设计器图表模块","FR-Engine_Process_RP_To_Report":"待上报","ChartB-of":"of","DataFunction_Percent":"占比","ParameterD-Show_Window":"显示窗口","UploadFileTip":"提示：上传图片尺寸请参照移动设备分辨率","FS-BakRestore_Template_Backup":"模板","FS-User-Edit_User":"编辑用户","FS-System-Unlock_Gzip":"Gzip压缩","FS-Plugin_updateOnline_NotSupportJetty":"暂不支持jetty服务器","Re-Multi-privilege":"多级权限配置","FR-Engine_Prepare_Export":"开始导出，请稍候","Choose_DS-Server_TableData":"选择服务器数据集","SessionID":"sessionID是当前访问模板的会话标识参数。","Datasource-Original_Charset":"原始编码","Default-Browser":"默认浏览器","FS-Monitor-Triggering_Conditions_Msg_Head":"内存高于","Chart-Condition_Attributes":"条件属性","FS-System-Send_Verification_Code_Admin_Email":"无法验证身份：平台未设置服务器邮箱，无法接收验证消息。您可删除路径WebRreport\\\\WEB-INF\\\\resources下的privilege.xml文件后重置账号信息","Collect-User_Information_DES":"激活码只是用来收集使用者信息的，只要点击上面的\"获取激活码\"按钮，就会弹出一个新的浏览器窗体，登录到产品官方网站获得这个激活码，整个过程只需要3分钟，只需要操作一次，而且完全免费。","Plugin-ChartF_Preview_HeatMap":"预览热力地图","FR-Plugin_Error_RemoteServiceNotStarted":"远程服务未开启","FS-System-ServletMapping_name":"Servlet路径名","Privilege-No_Privilege":"没有权限查看此页面","Utils_UnDelete_Column":"撤销删除列","start_immidiately":"立刻开始","FS-Monitor-End_Success":"结束会话成功","Clear":"清除","Env-Remote_Server":"远程服务器","Custom_FS_Users":"自定义用户","RESTART":"重启","ChartF-Start_From_Zero":"零起点","Finish":"完成","RP_Everyday":"每日","Simplified_Chinese_Language":"简体中文","ConditionB-ends_with":"结尾是","FR-Engine_Select_the_repeated_row_and_column":"选择需要重复的行列","FS-Report-Input_Cpt_Path":"请选择报表路径","M-Form_Preview":"表单预览","FS-Generic-Export_And_Output":"导出","FR-Engine_File-Editor":"文件控件","FR-Engine_CLUSTER_REDIRECT_SHEAR":"集群重定向参数","ECP_input_pwd":"请输入密码:","Cell_Group":"单元格组","FS-Monitor-Save_Failed":"保存失败","Set-Parent-Directory":"点击相应图标设置各浏览器所在的文件夹","WF-Router_Task_Node":"路由任务节点","M_Edit-Merge_Cell":"合并单元格","FR-Chart-State_Map":"国家地图","Vertical":"垂直","Privilege-The_Url_Must_Be_Specified":"必须指定URL","Owner":"主","FR-Plugin-Store_Data_Interface":"数据接口","NS_browser_lang":"错误代码:11100019 未找到当前浏览器语言对应的国际化文件,将以中文作为默认语言","Plugin-ChartF_SameArcPie_Title":"等弧玫瑰图","FR-Plugin_Error_NoInstallPackageFound":"未找到安装包","CLUSTER_REDIRECT":"集群重定向参数","FS-Monitor-Error_Time":"发生错误的时间","EX-Reportlets_Count_Overflow":"reportlets下模板的数目超出注册数","Print":"打印","FR-Chart-Gantt_Chart":"甘特图","LIC-Support_Source_Relation":"多数据源关联","INFO-Reset_Webapp":"重置应用服务器","HF-Right_Section":"右区域","FR-Engine_SetPrinterOffset":"打印机偏移","Grouping_Report":"分组报表","FR-Designer-FRFont_Family":"名字","FS-Plugin-Store_Probation":"","fs_process_delete_tip":"删除流程的操作不可逆，您确定要删除此流程吗？","OverLap":"重叠","Sun":"日","M_Server-Scheduled_Task_Manager(T)":"定时任务管理器(T)","Plugin-ChartF_TreeMapChart":"矩形树图","ReportServerP-Email_Receiver":"邮件接收人","ChartF-Cross":"交叉","RWA-Smart_Add_Cell_Group":"智能添加单元格组","Surport_String_To_Formula":"支持字符串编辑为公式","Utils-Current_Value":"当前值","FR-Designer_Integer":"整数","FS-Privilege-No_Post":"没有职务","Plugin-ChartF_NormalLine":"普通","Default_Parameter_Attribute_Setting":"默认参数页面属性设置","SingleName":"名","Utils-Report_Header":"报表眉","Logout":"退出","Chart_Alert_Right":"居右","Schedule-Save_As":"另存为","FR-Designer-Plugin_Read_Plugin_List_Error":"去读插件列表时发生错误","Plugin-ChartF_SlotBackground":"刻度槽","FR-Engine_Can_not_create_connection":"错误代码:31300012 创建数据连接失败","FR-Chart-Type_Stock":"股价图","Chart-Use_LatLng":"经纬度","WF-Transition":"迁移","FS-Reg-App_Name":"应用工程名","Hebei":"河北省","ReportServerP-From_Email_Address":"发件人地址","FS-Plugin-Store_Login":"","BindD-Bind_Data":"绑定数据","Event":"事件","FS-Plugin-Store_Authorize":"","Crimson":"深红","FR-Engine_Page_Total":"共","FS-Privilege-Need_Input_Url_Key":"请输入签名密钥地址","ReportServerP-Choose_Printer":"选择打印机","FS-Frame-Saved_successfully":"保存成功","Verify-Verify":"数据校验","CustomLoginPage":"自定义登录网页","FR-Chart-Area_Name":"区域名","FS-Generic-HJS_Send_Successfully":"发送成功","Utils-Delete_Record":"删除记录","FR-Designer_Present":"形态","Cannot_Found_Template_File":"没有找到模板文件","Plugin-ChartF_Pyramid":"金字塔","Utils-Delete_Column":"删除列","Use_Default_ToolBar":"使用默认工具栏","CellWrite-Show_As_Image":"用图片显示内容","FS-System-Config_SMS_Test_Fee_Tip":"每条测试短信收费0.06元","Plugin-ChartF_Line_Map_Animation":"流向动画","FS-Monitor-Save_Success":"保存成功","FR-Plugin_Register_Error_Mac_Not_Match":"证书中绑定的mac地址与本机不符，绑定的mac地址为:{R1}","Plugin-ChartF_ClockWise":"顺时针","You_are_using_unregisted_function":"错误代码:11100016 您使用了未注册的功能","Sche-Hour":"时","FR-Chart-Dialog_Cancle":"取消","TianjinInCity":"天津市区","FS-Report-Add_Cpt":"添加模板","FR-Engine_Get_Registration_Code_Url":"http://www.finereporthelp.com/help/9/11.html","ColumnSpan":"列跨度","FR-Share_Module_OK":"组件安装成功","Schedule-File_Prefix":"文件前缀","Plugin-ChartF_Gauge_Ring_Title":"圆环仪表盘","FieldBinding":"绑定字段","Server_FlashInstallPath":"Flash安装文件路径","FR-Engine_Plugin_Expire_Dialog_Title":"插件过期","FS-Generic-Simple_Warning":"警告","FR-WriteEnhance_no_select":"不选","FR_Designer_Attr_Horizontal_Adaptive":"横向自适应","Options":"选项","Widget-Date_Selector_Return_Type":"返回值类型","Plugin-ChartF_Project_Index":"项目序号","Dic-Data_Query":"数据查询","Time":"时间","HF-Left_Section":"左区域","Parameters_use_default_formula":"使用默认的参数公式值","FS-Report-Input_Folder_Name":"请输入文件夹名字","Form-EC_heightpercent":"手机显示最大高度","FR-Base_Format":"格式","Utils-New_name_cannot_be_null":"新名字不允许为空字符串","China":"中国","Plugin-ChartF_CustomMap":"组合地图","FR-Designer_Set_Submit_Event":"设置提交事件","I-xyScatterStyle_Line":"无数据点折线散点图","FR-Designer-Plugin_Shop_Need_Install":"您还没有插件商店的资源,是否下载?","Form-Newline":"换行符","FR-Plugin_Error_ResourceConflict":"资源冲突","FR-Designer_Unit_PT":"磅","FS-Schedule-Please_Select_Execute_Month":"请选择执行月","BarCodeD-Define_BarCode":"定义条形码","RWA-Free_SQL":"自由SQL","FR-Engine-Condition_Not_Begin_With":"开头不是","Every":"每","Whether_Query_Result_When_Paging_Preview_Timer":"分页预览是否查询定时器结果","Start_Print":"开始打印","FS-System-Config_SMS_Balance_Warning":"余额不足十元,请尽快充值!","FR-App-All_Warning":"警告","FS-Error-Number-Msg":"\"请输入数字\"","FR-Basic_File_Not_Allow_To_Upload":"是禁止上传的文件类型","FS-BakRestore_Success":"成功","FR-Plugin_Has_Been_Actived":"插件已被启用","NS_export_excelFormula":"错误代码:11100010 导出Exel不支持该公式","Style-Spacing":"间距","Datasource-Are_you_sure_to_delete_the_selected_hibernate_datasource":"你确定删除选中的Hibernate数据源吗","Add_Browser":"添加浏览器","HF-Odd_Page":"奇数页","Ecp_Start":"开始加密","Xianggang":" 香港特别行政区","FS-System-Config_Backup_Frequency_Oneday":"1天","Data_Type":"数据格式","FS-Setting-BG_Upload_ToolTip":"提示：为使显示效果较佳，请选择尺寸不小于1024*768的图片，支持PNG、JPG格式","Capacity":"容量","Drag_the_selected_field":"字段列表(尝试拖拽)","Present-No_Present":"取消形态设置","FR-Engine_Param_Template_Save":"保存为常用组合","CancelJSShow":"取消动态展示","FR-Chart-Gantt_Progress":"完成百分比","FS-Msg-View_All":"查看消息","MakeSureOfCloseSyncDataSet":"您确认要关闭数据集同步吗？您还可以通过\"开启数据集同步\"按钮来启用它。","FS-Monitor-Form_Action":"操作","FR-Engine_Parameter-Boolean":"布尔型","DataFunction-Average":"平均","LayerPageReport_PageEngine":"使用按页运算分段执行报表","FS-System-Send_Verification_Code_Failed":"发送失败","ReportColumns-Begin_at_Column":"开始分栏列序号","FR-Engine_Excel_Import_Repeat":"多次导入[Excel]","FR-Engine_Event_afterwrite":"填报后","FR-Base_Short_Jun":"六","FR-Base_Short_Jul":"七","RP_Task_Type":"任务类型","ReportServerP-Browser_Background":"浏览器背景","DS-Report_DataList":"报表数据链","LIC-Support_Meter_Chart":"仪表盘","FS-Plugin-Store_Pay":"","FS-Web-Plugin_Connect_Server_Error":"插件下载失败","FS-Local-MAC-Address":"本机MAC地址：","FS-Reg-Version_Number":"版本号","Image-Extend":"拉伸","FS-Schedule_Start_Run_Once":"{R1}开始执行一次","FS-Report-Add_Directory":"添加目录","FS-Schedule_Link_Open_In_Platform":"定时结果链接在平台内打开","Dictionary_Name_Exsited_Next_Choose_ReportDictionary":"服务器数据字典命名与报表数据字典命名有重复，下次打开默认选择同名报表数据字典。","Save_Or_Not":"是否保存","FR-Engine_Custom":"自定义","Plugin-ChartF_Preview_Percent_Stack_Area":"预览百分比堆积面积图","FS-Generic-Process_Manager":"流程管理","FR-Engine_Buy_Or_Change":"购买或者更换","Plugin-ChartF_NewScatter_LargerData":"大数据散点图","Cross_Report":"交叉报表","Plugin-ChartF_Longitude":"经度","FR-Engine_Choose_All_Or_None":"全选/全不选","FS-Schedule_Support_Formula_Input":"支持公式输入","FR-Chart-Mode_Custom":"自定义","ES_Role_Instruction1":"请配置角色权限，编辑角色请登录数据决策系统","FS-Generic-Simple_Preview":"预览","ES_Role_Instruction2":"您没有使用服务器数据集身份验证，请添加角色并配置权限","About_The_Column":"关于此列","FS-System-Logined-First":"已登录禁止再登录","FR-Base_October":"十月","Platform-DB_Connection_Create_Successful":"数据库连接创建成功","ES_Role_Instruction3":"您使用的是服务器数据集身份验证，请配置角色权限","FR-Chart-Map_Shaanxi":"陕西","Plugin-Memory_Alarm_Trigger":"触发内存警告!","ChartB-Should_select_an_on_change_column":"需要至少选择一个变化列","Privilege-Select_Organization":"选择组织","TrueFormatIs":"正确格式为","FR-Utils_Submit":"提交","Write-Custom_Css_Style_Path":"自定义样式表相对路径","Static_Setting":"统计设置","FR-Engine_STKaiTi":"华文楷体","FR-Basic_NS_mail_config":"错误代码:11200004 邮件配置参数不正确","Cursor":"游标","Show_Demo_Connection":"显示默认demo连接","Privilege-The_Url_Can_Not_Be_Null":"认证地址不能为空","Classpath":"类路径","Plugin-ChartF_Define_Size":"指定大小","FR-Engine_Fit-Default":"默认","FS-Mobile-Authorized_Devices":"已授权设备","Widget-Settings":"控件设置","Add_Column":"添加列","FR-Engine_Printing":"正在打印","DS-Dictionary":"数据字典","FR-Engine_RP_NO_Privilege":"没有操作权限","FR-Engine_Error":"错误","FR-Import-Export_PDF":"PDF格式","Chart-Legend_Is_Visible":"图例可见","FR-Engine_RP_System_Message":"系统消息","RP_Overtime":"超时","FR-Engine_Paper":"纸张","FR-Chart-Map_Tianjing":"天津市","FR-Plugin_Error_NeedUninstallDependingPluginFirst":"需要先卸载依赖该插件的其他插件","FS-BakRestore_Restore_Complete":"还原完成","FR-Engine_Month_Count":"月","Read_Map_Use_Time":"读取地图耗时:","BindColumn-NoSort":"无排序","Plugin-ChartF_NewForceBubble":"力学气泡图","FR-Plugin_Install_Dependence":"是否安装依赖插件","FS-Schedule-Simple_Execute_Time_Unit_Day":"执行日","Verify-Message":"错误信息","FRFont-italic":"倾斜","Chart-Unit_Billion":"十亿","Plugin-ChartF_Inside":"内侧","Load-Pull_Up":"向上拉动加载更多数据","Datasource-Are_you_sure_to_delete_the_selected_SAP_datasource":"你确定删除选中的SAP数据源吗","Chart_Negative_Bubble":"负气泡","FR-Plugin-Store_Quick_Login":"快捷登录:","Image-Adjust":"适应","FR-Plugin-Plugin_Is_Damaged":"插件损坏，请卸载后下载完整版重新安装.","FS-Monitor-Life_Cycle":"生命周期","Column":"列","RCodeErrorCorrect":"纠错","FR-Chart-Map_Huhehaote":"呼和浩特市","February":"二月","Tree-Mutiple_Selection_Or_Not":"多选","FR-Engine_Excel_Will_Be_Imported":"行数据执行导入","Support-Current_Auto_Complete_Shortcut":"当前快捷键","Widget_Cascade":"级联","FR-Designer_Layout-Padding":"内边距","FS-Schedule_Active_SMS":"开启短信功能","SetEndTime":"设定结束时间","PrintP-Print":"打印(T)","FR-Engine_Value":"值","Grouping_Report_Wizard":"分组报表向导","Change":"改变","HJS-Send_Successfully":"发送成功","Chart_In_Pie":"饼图内","List-Need_Head":"需要列表头","FR-Engine_ReportServerP-First":"首页","Sorting":"排序中","Donot_Repeat_Data":"数据重复","StartFailed":"启动失败","FS-Schedule_Day":"日","FR-Chart-Field_Name":"字段名","FS-System-Please_Input_Phone":"请输入手机号","Next_Month":"下一月","FS-MOBILE-SETTING-DIRECTORY-CONFIG":"目录","Delete":"删除","RP_Timed_Write":"限时填报","FR-Engine-NS_exception_readExcelError":"错误代码:11300006 文件解析出错","Docking-Views_Menu":"视图菜单","Server":"服务器","Pointer-A-Tick-Order":"指针值及刻度值数量级","Corre_parameter":"对应参数","FR-Engine_-None_Lic":"证书文件不存在或不正确","Repeat":"重复","PageSetup-Horizontally":"水平居中","FS-Generic-Simple_Week":"周","FR-Engine_RP_Task_Created_By_Me":"我创建的任务","Current_Preview_Rows":"当前预览行数","ChartF-Tick_Label_Property":"标签属性","Chart-Map_ClickToRemove":"点击一个层级来删除","Plugin-ChartF_Zoom_Layer":"缩放等级","FR-Chart-Gantt_Step":"步骤","GIVE-NAME":"命名","Plugin-ChartF_Map_Area_RootName":"区域边界","M-SwitchWorkspace":"切换工作目录","FR-Engine_ReportServerP-Next":"下一页","Utils-Report_Runtime_Env":"报表工作目录","FR-Engine_Offline":"离线","Plugin-ChartF_Layer_Satellite":"卫星","FS-Mobile-Report_Cover_Reset":"重置封面","ExpandD-Extend":"向下延伸","FR-Engine_PageSetup-Page":"页面","FS-Generic-Simple_Pagination":"分页","Chart_Alpha_Int":"透明度","Plugin-ChartF_Preview_Pointer_Semi_Gauge":"预览多指针180度仪表盘","EditFailed":"编辑失败","Chart-Map_ClickCancel":"点击取消来撤销更改","FS-Frame-Button_Star":"收藏","DashBoard-AdhocSetting":"B/S设计器工具","FS-System-Error_Phone":"该手机尚未绑定过账号","Utils-Last_Page":"最后一页","FS-Schedule_Start_Time":"开始时间","FS-Report-Simple_Device":"展示终端","FS-System-Config_SMS_Test_Remain":"可免费测试短信条数：","At":"在","FR-Chart-Map_Taibei":"台北市","Schedule-Generate_Parameters":"生成参数","FR-Engine_Style_Name":"格式名","Registration-User_Name":"用户名","Thu":"四","ChartF-High":"盘高","Chart-Map_DrawPolygon":"画多边形","FS-System-Visit_Template":"访问报表","FS-System-Single_Login_Set":"单一登录设置","LIC-Support_Online_Edit":"在线实时编辑器","RWA-Remove_Field":"移除字段","Designer_Language":"设计器语言","Chart_Legend_Area":"图例区","FS-User-User_Can_Not_Be_Null":"用户名不能为空","Allow_Decimals":"允许小数","Zhongxi":"中西区","FR-Basic-Email_Subject":"主题","FR-Designer-Plugin_Version_Is_Lower_Than_Current":"升级包的插件版本没有比当前的高","Plugin-Memory_Alarm_Queue_Percent":"内存占用达到此值是介入排队机制(%):","FS-Plugin_UpdateOnline_FineReport_Version":"FineReport版本","Select_Export_Log_Directory":"选择导出目录","FS-Schedule-Skip_Execute":"不满足执行条件，跳过！","FR-Chart-Map_Xian":"西安市","FR-Chart-Bar_Van":"条形图(新特性)","Chart-Interactive_Tab":"交互属性","Flash_Print":"Flash打印","FR-Base_Short_Jan":"一","Default_ParameterWindow_Attribute_Setting":"默认参数窗口属性设置","FR-Plugin-Store_Form_Components":"表单组件","FS-Schedule_File_Custom_Process_Type_Cannot_Be_Null":"自定义处理类型不能为空！","RadioField":"单选框","Utils-Print[Server]":"打印[服务]","Plugin-Chart_GIS_LAYER_NAME":"GIS层名称","FS-BakRestore_Not_Privilege_Backup":"非权限配置备份","DS-Server_TableData":"服务器数据集","FS-Privilege-Template_Role":"角色权限控制","FR-Chart-Type_Line":"折线图","De":"的","Liaoning":"辽宁省","M_Edit-Paste":"粘贴(P)","FS-Process-Param_Display_Name":"显示名字","FR-Engine_Mon":"一","FR-Chart-Map_Heilongjiang":"黑龙江","Marker":"标记","FR-Engine-Report-Write_Attributes_Msg":"没有设置填报属性","Plugin-ChartF_DisplayNegative":"展示负气泡","FS-Monitor-Suggestion_Of_Global_Style":"的全局样式，或者修改模板，取消使用该全局样式","HJS-Mail_to":"收件人","FS-BakRestore_Log_Function":"功能点记录","Ecp_Being":"正在加密\u2026\u2026","FR-Engine_Step":"步长：","FS-Generic-Simple_Running":"运行中","The_Num":"第","FS-Generic-Simple_Mobile_Number":"手机号码","UseTreeWillRemoveUser":"使用树数据集会清空已有用户数据","FS-Schedule_Nothing_to_Delete":"没有待删除的项","FS-System-Please_Input_Old_Pwd":"请输入旧密码","Set_Certification":"认证配置","Multi-Excel-Import":"批量Excel数据导入","Show_Text":"显示按钮名字","Condition":"条件","ChartF-Category":"分类","I-AreaStyle_Stack":"面积图","FS-Privilege_Reuse_Warnning_Tip":"权限复用后,当前{R1}的权限将被下面所勾选{R2}权限的并集所替代,请谨慎操作!","Plugin-ChartF_DataType":"数据格式","ReportServerP-Last":"末页","CellWrite-Show_As_HTML":"用HTML显示内容","CellWrite-Print_Content":"打印/导出单元格内容","FS-Admin-Name_Can_Not_Be_Null":"姓名不能为空","FS-Prompt_Need_Admin_Privilege":"提示代码：2103 只有系统管理员拥有此权限","FS-System-Config_SMS_Model_Private":"我的模板","Ge":"个","FR-Engine_Word":"Word","FS-System-Verification_Code_Invalid":"验证码已失效","Click-Get_Default_URL":"点击此按钮获得默认URL","FR-Chart-Chart_3D":"三维","ChartF_IsFilled":"填充","TopDownShade":"上下渐变","JSShow":"动态展示","Privilege-No_Such_Authority":"没有权限设计模板","FS-Generic-Shared_To_Me":"分享给我的","English_Language":"英语","ID":"序号","Chart_Gantt_Error_Check":"请检查您的数据!","Plugin-ChartF_AxisLabel_Format":"轴标签格式","Utils-Move_To":"移到","FR-Designer-Basic_More_Color":"更多颜色","FR-Designer_Verify-Message":"错误信息","Light_Orange":"浅橘黄","I-HBarStyle_3DPercentageStack":"三维百分比堆积条形图","FR-Designer_open-new-form-tip":"当前模板为711以下版本制作，无法兼容，不能打开。假如想打开修改此表单，请使用对应版本设计器打开。","FS-Generic-Simple_Tue":"二","FS-Generic-Simple_Transfer_Failed":"迁移失败","Chart-LatLngOrder":"经纬度顺序","Plugin_RH_Iframe_Url":"网络路径","Top":"上","Plugin-ChartF_Thumb":"拇指","DS-Relation_TableData":"关联数据集","ChartF-Interval_Label":"间隔标签","Plugin-ChartF_Time_Axis":"时间轴","Utils-This_name_has_been_existed":"此名已经存在","Preference-Support_Default_Parent_Calculate":"默认父格计算","Plugin-ChartF_FillColor":"填充颜色","Task_Name_Exist":"任务名称已经存在","BindColumn-Specify_Rows":"指定行","Plugin-ChartF_Layer_Midnight":"午夜","FR-Designer_Allow_Blank":"允许为空","Should_select_an_Excel_file":"需要选择一个Excel文件来源","WEB-Pagination_Setting":"分页预览设置","FS-Plugin_UpdateOnline_Advise_Check_Upgrade_Info":"建议您在升级前查看兼容性说明","Max_Value":"最大值","Refresh":"刷新","FS-User-Retrieve_Location_As_BaseDN":"不将检索位置作为BaseDN","Hyperlink-Web_link":"网页链接","I-RadarChartStyle_LineMarker":"数据点带线雷达图","FR-Plugin_Error_HasHigherPluginWhenInstall":"已经安装了更高的版本","Chart-Unit_Million":"百万","FS-Generic-Simple_Username":"用户名","FS-Monitor-Sure_End_Session":"确定结束会话","FR-Designer_ChartF-Transparency":"透明","Chart-Series_Index":"系列序号","FRFont-Foreground":"颜色","Reverse-Scale-Value":"逆序刻度值","Property":"属性","FR-Engine_Event_afterverify":"校验后","RP_View_Task":"查看任务","FR-Engine_Event_writefailure":"填报失败","Unit_Ten_Million":"千万","Widget-Custom_Widget_Config":"自定义控件","FR-Engine_Quiet_Print_Confirm_Tip":"保存客户端习惯后，打印设置窗口不再弹出，以后打印时，按本次保存的打印设置进行打印。确定保存吗？","Function-Function_Class_Name":"函数类名","ChartF-Data-Field_Value_AS_Series":"字段值作为图例项(系列)名称","Chart-Category_Index":"分类序号","ISEMPTY":"为空","Image-Select_Picture":"选择图片","Adaptive_Full_Area":"充满展现区域","FS-BakRestore_Log_Print":"打印","FR-Plugin_Error_PreTaskRunFailed":"存在失败的前置任务","ReportServerP-Congratulation_Email_Test_Success":"恭喜您！您的邮件服务器已经配置成功","FS-User-Empty_Department":"部门名称不能为空","Plugin-ChartF_Node":"节点","Reg_Max_Length":"最大长度","FR-Chart-Type_Comb":"组合图","Datasource-Datasource-name":"数据源名","Chart_Discard_Null_Cate":"分类为空时,不显示该分类","Plugin-ChartF_Vertical_Table":"纵向表头","FS-BakRestore_Cleanup_Complete":"清理完成","Datasource-Whole":"完全读取","Form-Edit_Text":"编辑文本","Plugin-Chart_Style":"风格","FR-Designer_Form-Object":"表单对象","Chart-Map_FinishPolyline":"点击最后一个点完成绘制形状","FS-User-Add_Position_Failure":"职位添加失败，该职位名已被占用","ChartF-PIE":"饼形","Plugin-ChartF_AxisLabel_Position":"轴标签位置","NoLimit":"无限期","Hgap":"水平间隙","DoSelectPosition":"请选择职位","Output_Word":"Word输出","FS-Privilege_Reuse":"权限复用","Widget-Array":"数组","FR-Engine_RP_Last_Node":"上一节点：","Record-Number":"记录数","Preference-Pagination_Line_Color":"分页线颜色","Banner-And-Title":"主页和横幅","Plugin-ChartF_Preview_Custom_Custom":"预览自定义组合图","SQLWizard-edit_condition":"编辑条件","FR-Engine_Height":"高","Attach_File":"附件","NO":"否","Default_ParameterWindow_TextWidth":"参数文本宽度","FR-Engine_Fail_To_Select_A_Data_Field":"选取数据字段失败","feedback_tip":"请输入不超过400个字的问题描述","Data_range_configuration":"数据区间配置","Plugin-ChartF_Continuity":"连续性","Rename-Block":"重命名块","Formula_Dictionary_Display_Example":"实际值范围为 Function-Rename_Function=重命名函数","Phone":"电话","FS-Generic-Simple_URL":"链接","Record":"记录","OK":"确定","FS-User-Same_Department":"添加部门失败，同一部门下不能有相同名称的部门","Plugin-ChartF_CustomDrillMap":"自定义地图","FS-Generic-Simple_Wrong":"出错了","Registration-Basic_Edition":"基本版","No":"否","FR-Basic-Email_Sending":"正在发送邮件","Tue":"二","Button-Hotkeys":"快捷键","fs_process_one_time_task_tip":"任务开始后只执行一次","Plugin-ChartF_Color":"颜色","ReportServerP-Browser":"使用此浏览器预览","FS-Reg_Registration_Decrypt_Failed":"证书与当前密钥不匹配","FR-Engine_Task_Name":"任务名称","ThreeD_Column_Chart_Horizontal":"三维条形图(横向)","FR-Engine-Value_Not_Match":"值不匹配","FR-Designer_Values-Editor":"值编辑器","Application_name":"应用","Layer_Corresponding_Map":"钻取对应地图","FR-Plugin-Designer_File_Upload":"文件上传","Utils-Move_Up":"上移","FS-Schedule-Simple_Execute_Time_Unit_Minute":"分","FS-Generic-Server_Address":"服务器地址","Plugin-ChartF_MinDiameter":"最小直径","FS-Schedule-Output_Different_Content_By_Different_User":"根据用户选择不同的内容","ProcessName":"流程名称","Tree_Data_Field":"树数据字段","Or":"或","Privilege-Selected_None_Of_Any_Items":"没有选中任何一项","ExpandD-Father_Cell_Setting":"父格设置","Utils-Beyond_the_top_side_of_Border":"超出上边界","Chart-Interact":"相互","DashBoard-DashBoard":"显示欢迎界面","Parameter-Dealwith_Parameter_Result":"参数预处理","FR-Engine_Bottom":"下","schedule_email_tip_first":"启用该选项需在","Plugin-ChartF_Level_Number":"层级数","FR-Engine_PDFPrint":"PDF打印","FS-Generic-Simple_Transfer_SuccessFully":"迁移成功","BindColumn-Have_Left_Parent_Cell":"有左父格","Chart_Null_Value_Diaplay":"空值显示","FR-Engine_Cpt_Backup_Sure":"备份模板可以防止数据丢失，您确定不备份吗？","no-alternatives":"没有选择项","FR-Chart-Data_Filter":"数据筛选","ChartF-SecondAxis":"次坐标轴","FR-Engine_Event_aftertopdf":"PDF导出后","ChartF-Category_Axis":"分类轴","SyncFailed":"同步数据集失败，请检查您的数据集","FS-Module-Look_And_Feel_Config":"外观配置","Utils-Append_Column":"添加行","Chart_Gantt_ErrorTip1":"甘特图必须要有:","FS-Report-Input_Link_URL":"请输入链接路径","FR-Chart-Map_Shijiazhuang":"石家庄市","Privilege-The_Role_Config_Can_Not_Be_Null":"角色配置不能为空","FR-Base_September":"九月","FR-Engine_Plugin_Finerest_Addon":"帆软应用中心","Plugin-Chart_Reset":"重置","RP_Pass_After_All_Operations":"该节点所有操作人员完成后流转","Plugin-ChartF_ZoomType":"缩放方向","FR-Engine_Short-Apr":"四","FS-Generic-Simple_Layout":"位置","Unload_Check_Msg":"有数据没有提交","Plugin-ChartF_Custom_Height":"自定义背景高度","FS-Reg-Function_List":"功能列表","Writer_ShortCuts_Setting":"填报快捷键设置","FR-Chart-Map_Xianggang":"香港","Set_Row_Title_Start":"设置重复标题行","Title_Start_ColumnOrRow":"重复行列起始","FR-Engine_Event_writesuccess":"填报成功","FR-Engine_Event_beforeedit":"编辑前","Need_Min_Value":"需要最小值","File_Is_Being_Used":"文件正在使用","HF-Are_you_sure_to_delete_it":"你确实想删除这个元素吗","RP_Report_Deadline":"填报时限","FR-Designer_Covered_All":"全部覆盖","Privilege-The_Authentication_Can_Not_Be_Null":"认证不能为空","FR-Chart-Axis_labelWrap":"换行","Plugin-ChartF_ZoomGesture":"手势缩放","Other":"其他","FR-Plugin_UpdateOnline_Version_Feature":"9.0版本特性","FR-Engine_Export-Excel-Simple":"原样导出","Label":"标签","FS-Schedule-Please_Enter":"请输入","Delay":"延迟","FR-Designer_Quarter":"季度","FS-Schedule-Restart_Policy":"任务重启","BindD-Define_Datasource":"定义数据源","INFO-Time_Taken":"耗时","PageSetup-Top_to_bottom":"先列后行","FS-Schedule-Output_Attach_Type":"附件类型","To":"到","FS-Report-Input_Cpt_Path_And_Name":"请输入链接路径和名称","M_Edit-Clear_Contents":"内容(C)","FileNameForDownload":"下载文件名","FS-Frame-Button_Unstar":"取消","Alignment-Style":"对齐方式","ShanghaiInCity":"上海市区","Free":"免费","FS-Privilege-Simple_Setting":"权限配置","FS-User-Reset_Password_As":"将密码重置为123456","ReportD-Export_Hided_Column":"导出隐藏列","BackgroundTexture-Walnut":"胡桃","Up":"上","PageSetup-Orientation":"方向","FS-System-Config_Auto_Backup_Once":"自动备份一次","ChartF-Size":"大小","FS-Setting-Image_Only":"仅使用图片","FS-System-Use_Resource_Server":"使用资源服务器","Preview_ToolTips":"预览提示","FS-System-Verification_Code":"验证码","System":"系统","ChartF-Descriptor":"描述","Chart-Map_DrawMarker":"画标记点","Chart-Property_Table":"图表属性表","Tree-Select_Leaf_Only":"只返回叶子节点","Utils-The_private_table_has_been_existed":"此私有数据表已经存在","Zhejiang":"浙江省","Utils-Available_Columns":"可选列","Chongqing":"重庆市","ClassName":"类名","M-Help":"帮助","SUMMARY_MODE":"汇总","Utils-Available_DataSets":"可用数据集","Chart-Map_StartPolygon":"点击并开始","Set_Legend_Sytle":"设置图例格式","FR-Engine_Short-Aug":"八","Plugin-ChartF_Series_New_Line":"系列换行","Printer-Defined_Printer_Groups":"已定义的打印机组","fs_initDragBar_subpro_tip":"子流程任务:此任务可以选择其他流程作为当前流程的任务来处理。","FR-Plugin-Store_Installed":"已安装","Widget-Form_Widget_Config":"表单控件","Utils-Current_Sheet":"当前Sheet","Scope":"范围","Filter":"过滤","Print_copy":"打印份数","RP_Send_Time":"发送时间","FR-Engine_Event_afteremail":"Email后","FR-Engine_Number":"数字","FS-System-Config_backup_Frequency_Sixmonths":"6月","FS-Report-Link_Path":"链接路径","Utils-User_Definition":"用户自定义","FS-PSqlInj-Custom_Forbid_Word":"自定义关键字","Err-The_number_is_less_than_the_minimum_value":"值小于允许输入的最小值","FS-BakRestore_Auto_Backup_Once":"自动备份一次","Performance-plugin_save_fail":"保存失败","BindColumn-Results_Filter":"结果集筛选","Plugin-ChartF_NotLimit":"不限制","Usable_ParameterList":"可用参数列表","FS-Authority-Successfully":"认证成功","ChangChunCity":"长春市","Datasource-SQL":"由SQL创建","Chart_Current_Value":"当前值","Plugin-ChartF_Large_Model":"大数据模式","Blow_set":"以下设置","FS_Table_Rename":"重命名","Display_Modes":"显示模式","FS-Generic-Simple_Previous":"上一步","D-HotHyperlink":"热链接","Plugin-ChartF_StepLine":"垂直","HF-Center_Section":"中间区域","Traditional_Chinese_Language":"繁体中文","FR-Chart-Radar_Van":"雷达图(新特性)","FR_FS-Task_Has_Been_Closed":"这个任务已经关闭","FR-Designer-Plugin_Install_Successful":"该插件将在重新启动设计器及服务器时被启用，服务器需手动重启","Widget-Load_By_Complete":"完全加载","PLEASE":"请","FR-Chart-Data_Use":"使用","FS-System-Edit_Personal_Password":"修改密码","MainGraduationUnit":"主要刻度单位","Always":"默认执行该操作","RP_Authority_Edit":"权限编辑","Define_Filter":"定义字段过滤","FS-System-Time_To_Idle_Seconds":"最大空闲时间","FR-Plugin_Error_PluginAlreadyRunning":"插件正在运行","FS-Reg-Version_Info":"版本信息","ThreeD_Percent_Stacked_Column_Chart":"三维百分比堆积条形图","FR-Chart-Map_Normal":"普通地图","FS-Setting-Background_Img":"背景图片","Offline-ReadMe":"打开html文件进行离线填报，数据将实时保存在本地。\r\n联网后可以将本地数据提交至服务器端。\r\n若要移动文件，请拷贝整个文件夹。\r\n注：手动清除浏览器缓存(Cookie)会导致数据丢失。","FR-Engine-NS_export_excelFormula":"错误代码:11100010 导出Exel不支持该公式","FR-Engine_RP_Timed_Write":"限时填报","FS-System-Send_Test_Mail":"发送测试邮件","Brown_Orange":"棕黄","Cannot_Do_This_Command_When_You_Choose_One_More_Areas":"不能对多重选定区域使用此命令","Utils-Global_Parameters":"","Chart-Stock_Open":"开盘","FS-CustomStyle_Toast_Restart":"重启服务器后样式生效","FR-Plugin-Store_Register":"注册","Utils-Beyond_the_left_side_of_Border":"超出左边界","FR-Plugin_Error_PluginAlreadyEnabled":"插件已经启用","FR-ConditionB_Operator":"操作符","NS_exception_noTemplate":"错误代码:11300004 没有找到模板文件","FS-BakRestore_Backup":"备份","FR-Engine_Close":"关闭","FR-Engine_Frozen":"冻结","Schedule-Template_File":"模板文件","Day":"天","FR-Designer-Plugin_Manager":"插件管理","FR-Engine_Style":"样式","FS-Generic-Simple_Day":"天","Form-Height_Des":"设计表单设计窗口的高度","Attributes":"属性","DashBoard-NewTemplate":"模板","FS-Monitor-Average_Memory":"平均内存","Plugin-ChartF_Line":"线","FS-Generic-Simple_Expression":"表达式","Plugin-ChartF_Link":"连线","Plugin-ChartF_Preview_Custom_Area":"预览自定义面积图","FR-Engine-Verify_Verifying":"校验中","Performance-Monitor_Memory_Warning_Info":"服务器压力过大,触发保护机制,请重新操作","Hyperlink-Self_Window":"当前窗口","HighLightChart":"高亮","timePoint":"时点","FS-Generic-Simple_Schema":"主题","FR-Base_Widget_Error_Mark_Text":"找不到控件类型","Widget-Data_URL":"数据URL","NanningCity":"南宁市","FR-Engine_Function_RemoteDesign":"远程设计","FR-Engine-Verify-Verify_Success":"校验成功","Email_sentEmail":"发送邮件","QRCode_Config":"二维码配置","PageSetup-Overlap_Content":"重复内容","ConditionB-OR":"或(OR)","TrueExtraRunTimes":"正确的额外执行次数","FR-Engine_RP_Process_Created_By_Me":"我创建的流程","Widget-Comb_Widget_Report_Path":"组合控件模板路径","Layout_Container":"布局容器","Edit-Row_Count":"行数","FR-Engine-Import_Again":"重新导入","Plugin-ChartF_After_Period":"后推","FS-Mobile-Add_Device_With_Whitespace":"添 加","FR-Engine-Tip_Tooltips":"提示","FS-Generic-Email_Can_Preview_Report_Content":"正文预览报表内容","Plugin-ChartF_Alpha":"不透明度","Message":"信息","FS-BakRestore_Retain_Recent":"保留近","Poly":"聚合报表","FR-Engine_RP_Execute_Month":"执行月","ChartF-Up":"增长","Sche-Monday":"星期一","RWA-Smart_Add_Cells":"智能添加单元格","Openning":"打开中","Layer_Report_Warnning_info":"<html>行式引擎适用于大数据量情形下。<br/>使用此引擎很多报表特性将不再支持，<br/>详细内容请查看文档相关章节。<\/html>","Report-Write_Attributes_Msg":"没有设置填报属性","FR-Chart-Map_Nanjing":"南京市","FS-Generic-Sign_In":"登录","Utils-Current_Cell":"当前格子","Until":"至","zeroMarginWarn":"由于打印机存在物理边距<br>报表的页边距设置过小可<br>能会出现内容打印不全.<br>&nbsp","HF-Insert_Time":"插入时间","FR-Engine_EXPORT_PDF_EMBED":"导出PDF是否内嵌显示","Plugin-ChartF_Project_Axis":"项目轴","From":"从第","Plugin-ChartF_Hinge":"枢纽","Deploy-Help":"帮助文档","Connectionline":"连线模式","FR-Engine_Event_beforetopdf":"PDF导出前","Plugin-ChartF_Task_Link":"任务关联","FR-Base_Help":"帮助","Summary":"汇总","TableData_Query":"数据查询","Idle_Connection_Size":"空闲连接数","FR-Chart-Custom_Map":"自定义地图","Gansu":"甘肃省","FS-Plugin-Store_User_Not_Exist":"","FR-Engine_Fit-Bidirectional":"双向自适应","NOT_NULL_Des":"不能为空","Hubei":"湖北省","Parent-Directory":"设置浏览器父目录","FR-Designer_layerIndex":"依赖的层数","FS_Start_Date":"起始日期","Parameters":"参数","Default_Data_Connect":"默认数据连接","MConfig-User_Defined_Designer":"配置个性模板设计器","Saving":"保存中","FR-Engine_RP_Everyday":"每日","Form-Change_Widget_Name":"更改控件名","BindColumn-Have_Father_Cell":"有父格","Plugin-ChartF_Preview_Area_Map":"预览区域地图","FRFont-Pick_A_Color":"选择颜色","Database_User":"数据库用户","ServerdatasourceSameWarning":"服务器数据集中有数据集名字和其他数据集名字一样，请修改！","SQLWizard-unpack_all_entities":"最大化所有实体","FR-Plugin_Install_Success":"插件安装成功","FR-Please_Rename":"请重命名","check_communication":"请检查网络通讯是否正常及服务器是否正常运行","Chart-White_Black":"白底黑字","FR-Chart-Bit_Map":"位图","NO_Border_Line":"无框线","Function-Function_Name_is_Null":"函数名不能为空","Form-NameWidget-Invalid":"预定义控件缺失","Plugin-ChartF_Show_Data_Sheet":"显示数据表","formDesignerModule":"设计器表单模块","FR-Chart-Add_Series_Setting":"添加系列设置","FR-Plugin-Designer_FileName_Repeat":"同名文件覆盖","FR-Plugin_Error_ReadXmlError":"读取Plugin.xml失败","FS_Report_Type":"类型","DashBoard-ChartRecord":"零客户端表单录入","FS-User-LDAP_Authentification":"LDAP认证","Platform-Table_Create_Failure":"数据库表创建失败","ChartF-Close":"收盘","Plugin-ChartF_Auto_Adjust":"自动调整","FS-BakRestore_Log_Template_Params":"模板参数","FR-Designer-Beyond_Tablayout_Bounds":"超出或者小于tablayout边界，不能调整大小","FS-System-Simple_Deal":"处理","Plugin-ChartF_Cabin":"小屋","FS-Generic-Hour_Wrong":"执行时间的小时填写错误","FR-Plugin_Error_InnerError":"内部未知错误","Plugin-ChartF_CustomFloatPosition":"自定义悬浮位置","Plugin-ChartF_Horizontal_Proportion":"横向占比","FR-Designer_Form-Widget_Name":"控件名","RP_All_Tasks":"所有任务","Report_Query_Result_AS":"报表搜索结果如下","Chart-Map_DrawPolyline":"画多边形","FR-Designer_Is_Share_DBTableData":"共享数据集","FR-Chart-Map_Changsha":"长沙市","Plugin-ChartF_Marker":"标记点","FR-Engine_DEFAULT":"默认","FS-Connect-Failed":"服务器连接失败，请检查网络设置","M_Window-Unfrozen_WindowGrid":"取消冻结窗格(F)","FR-Engine_RP_Overtime":"超时","FormulaD-Reserve_when_export-edit_result":"导出/编辑结果时,保留公式","Datasource-Public_Datasource_Manager":"公有数据源管理器","Father":"父","ServerM-Predefined_Styles":"预定义样式","ExpandD-Not_Expand":"不扩展","FS-BakRestore_DB_Transfer_Tip":"提示:当使用了平台数据迁移功能后，平台设置不支持备份和还原、日志清理不支持备份、整体工程中的finedb和logdb不支持备份和还原","FR-Chart-TimeUnit_Day":"日","Port":"端口","has_saved":"以保存","FS-Monitor-Menu_Memory_Manager":"内存管理","FR-Engine_Minute":"分","Form-RadioButton":"单选按钮","FR-Engine-Condition_Less_Than":"小于","Call_Back_Function":"回调函数","Adaptive":"自适应","Chart-Series_SingleData":"单个系列数据","FS-Report-Folder_Already_Exist":"的文件夹已经存在！","FR-Engine_Short-Sep":"九","FR-Engine-Utils-Import_Excel_Data_Customized":"自定义导入Excel行列","eg":"例如","ECP_re_input":"密码错误, 请重新输入","Delete_Button":"删除此按钮","Block_extended":"","HJS-Print_Failed":"打印失败","FR-Engine-Year_Value_Not_Match":"只能输入正整数","FS-Plugin_updateOnline_AlreadyLatestVersion":"已是最新版本","Chart-SetSecondGridStyle":"设置次要网格线格式","Widget-Parameter-Name":"您可以点击下拉按钮选择参数名作为控件名字","formModule":"表单模块","Reportlet-Parameter_Type":"参数传递方式","DS-Real_Name_<->_Display_Name":"实际名字 <-> 显示名字","FS-Schedule-Task_Name":"任务名称","FR-Designer_Name_has_Colon":"名称","FS-Plugin_UpdateOnline_New_Version":"新版本FineReprot 9.0已上线!","ECP_encode_failed":"加密失败, 请联系管理员检查密码文件是否损坏","MultiFileUpload":"多文件上传","FR-Export_SVG":"SVG格式","FS-Plugin-Store_Enable":"","Schedule-Duplicate_Task_Name":"任务名重复","Show_Blank_Row":"补充空白行","FR-Engine_Rename":"重命名","Number":"数字","Plugin-Memory_Alarm_Msg_Foot1":"分钟前会话","FR-Engine_Filter":"筛选...","LayerPageReport_WN_CellPage":"按页运算引擎不支持单元格分页属性","FR-Engine_ViewPreview":"数据分析","FR-Plugin-Designer_Trial":"试用:","FS-Reg-Simple_Deadline":"过期时间","Corresponding_Layer":"对应层级","Post":"职务","FR-Base_Sun":"日","ChartF-Meter_Angle":"角度","Plugin-ChartF_Preview_Funnel":"预览漏斗图","FR-Engine-NS_export_wordPageSize":"错误代码:11100014 导出Word不支持多Sheet下的不同页面设置","Can_not_find_Data_Connection":"错误代码:31300013 找不到数据连接","FR-Designer_Form-CheckBox":"复选框","FS-Report-Edit_BI":"编辑BI","ConditionB-is_greater_than_or_equal_to":"大于或等于","FS-BakRestore_EachModule_Auto_Backup":"各模块可自动备份","FS-Schedule-CPR_SUCCESS":"快照生成：成功","Form-Object":"表单对象:","FR-Engine_Role_Source":"角色来源","FR-Plugin-Store_Unexpected_Error":"未知错误","Plugin-ChartF_Link_Line":"关联线","FS-Admin-My_Info":"我的信息","Sche-Second":"秒","triggered":"被触发","FS-Plugin_updateOnline_CheckNewVersion":"正在检测新版本......","M_Format_A-Cell_Attributes":"其他属性","Chart-Interactive-Tab":"交互属性","Auto_Adjust_Size":"自动调整","Chart-Plan_End":"计划结束","Plugin-ChartF_Width":"宽","File_Display_Name":"文件显示名","PopChart":"悬浮窗图表","Please_Input_The_Key":"请输入对应地图使用的key","FR-Engine_ConditionB-in":"包含于","Chart-Use_Local":"本地","Log_Level_WARNING":"警告级别,显示警告信息","FR-Engine_RP_Process_Type":"流程类型","Position":"位置","Plugin-ChartF_LineMap":"流向地图","is":"为","FS-Generic-Simple_Cancel":"取消","FS-Plugin-Store_Not_Official":"","Undo":"撤销","APP_LAUNCHING":"APP启动画面","Plugin-ChartF_StartAngle":"起始角度","Unregistered":"未注册","Server-version-warging":"\"您当前打开的模板文件是由更高版本的设计器制作的，继续打开会有出错或者丢失原有模板属性的风险。  请确保您设计的模板的设计器版本低于部署的服务器版本。\"","FS-Frame-System_Menu":"系统菜单","Chart-Area_Value":"区域值","FR-Engine_Total":"全部","FS-User-Password_Reseted":"密码已重置为123456","Plugin-ChartF_Radial_Structure":"发散框架图","FR-Base_Error_Input_Value":"错误的输入值","ChartF-Units_And_Needle":"单位与指针","M_Format-Remove_Row":"删除行(R)","FR-Engine_ConditionB-Conditions":"依条件选择","M_Report-GroupReport_Attributes":"分组报表属性(G)","FS-BakRestore_Log_Clear":"日志清理","FS-Plugin-Store_Password":"","FS-Generic-Simple_Info":"信息","Plugin-ChartF_fullScreenOpen":"全屏展示","FS-Module-MobilePush_SureIGT":"确认使用个推？","FS-System-Resources_root_directory_name":"报表资源根目录名","sending":"正在发送...","HJS-All_Pages":"所有页","TaskEndWhenOneTime":"任务执行一次后即结束","Top_And_Thick_Bottom_Border_Line":"上框线和粗下框线","FS-Module-Plugin-Register":"插件注册","FS-Privilege-User_View":"用户权限查看","Use":"使用","FS-Schedule-Output_Attach_Class_Name":"自定义类名","Chart_OffSetPecent":"偏移量百分比(相对于X轴宽度的1/12)","Plugin-Memory_Alarm_Time_Dead":"超时时间","FR-Base_sure_remove_item":"你确实决定删除选中的项","FS-PSqlInj-Forbid_Word_Error":"因使用了禁用的特殊关键字，怀疑进行SQL注入攻击，有特殊需要请联系系统管理员。","FR-Engine_Receiver":"收件人","Email_Des":"可以使用分号来区分多个email地址","Plugin-ChartF_Preview_Custom_Drill_Map":"预览自定义钻取地图","Chart_Light":"光效","Schedule-New_Task":"添加任务","FR-Plugin-Store_Switch_Account":"切换账户","FR-Designer_Undo":"撤销","FR-Base_Sche_Sunday":"星期日","Hyperlink-Use_CJK_to_encode_parameter":"使用CJK处理参数","Unit":"单位","Re-version-in-lic":"lic中版本号","Read":"读取","ReportColumns-Begin_at_Row":"开始分栏行序号","Web_Preview_Message":"请将模板文件保存在当前运行环境目录下","Real":"实际","FS-Generic-Simple_Skip":"跳过","Utils-Append_Row":"添加行","FS-Reg-Second":"重新注册","MConfig-CompanyName":"公司名称","Plugin-ChartF_Preview_Stack_Bar":"预览堆积条形图","Form-Double_quotes":"双引号","Dictionary_Name_Has_Exsited":"数据字典名已经存在","FR-Engine-Condition_In":"包含于","FS-BakRestore_Store":"保存","Plugin-ChartF_Map_Data":"地图数据","FR-Engine_Remove":"删除","Utils-Report_Name":"报表名","FS-Report_Batch_Add_Cpt":"批量添加模板","FR-Engine_Offline-Write":"离线填报","Utils-Click_the_left_plus_button_to_add_item":"点击左边的加号按钮来添加项目","Load_Resource_File":"加载配置文件","Form-Cut":"剪切","FR-Engine_RP_To_Check":"待审核","FS-Privilege_Title":"身份验证","Chart_Alert_Tip":"提示文字","FR-Engine_Get_Lock":"加锁","PageSetup-Resolution(PPI-Pixel_Per_Inch)":"分辨率(PPI-每英寸像素数)","FR-Engine_RP_Send_Offline_Report":"发送离线报表","Layer-Generated_Pages":"已生成的页数","Widget-Widget_JS_Path":"JavaScript路径","FS-Login_SMS_Verfication_Open":"开启短信功能","Date_Time_Attention":"格式必须为MM/dd/yyyy HH:mm:ss","DashBoard-Dateunfurl":"数据展示","Chart_DiscardOtherCate":"不保留其他分类","Utils-has_been_existed":"已存在","FR-Base_Margin":"边距","FR-Engine_Upload_Progress":"上传进度","FR-Chart-Meter_Field":"分段区域","This_ScheduleAction_Cannot_Be_Viewed":"这个定时动作无法查看","Chart-Chart-Title":"新建图表标题","FR-Engine_Event_beforeemail":"Email前","Numbers":"数目","Perspective":"视窗","FS-Schedule-Start_Time":"开始时间","Service_Phone":"服务电话：","Plugin-ChartF-Custom":"自定义","HF-Undefined":"没有定义","FR-Engine_Excel_Submit_Rights_Assignment":"权限分配","Click_To_Shrink_Panel":"点击收缩面板","ExpressionSet":"表达式设定","Plugin-ChartF_Map_Init_Status":"初始状态","Local_offset":"本机偏移","Gradation":"层次","PM-Privilege_Setting":"权限设置","Utils-Font_Not_Found":"未找到字体","Image-Layout":"布局","Plugin-ChartF_Preview_Gantt":"预览甘特图","FS-System-Config_SMS_Send_Result":"运行信息","FS-Monitor-Visited_Report":"被访问报表","Selection-Filter":"条件筛选","Chart-DataFunction_Percent":"占比","FR-Base_Sat":"六","HotHyperlink-No_Hot_Hyperlink":"没有热点链接","FS-Report_Management-Directory":"管理目录","Plugin-ChartF_OpenLargeDataModel":"开启大数据优化","px":"像素","FS-Plugin-Store_Jar_Damaged":"","PageSetup-Start_Column":"起始列","FineReport_Embbeded_Report_Server":"FineReport的内置服务器","FS-System-Please_Input_Confirm_Pwd":"请再次输入新密码","FR-Designer_Form-CheckBoxGroup":"复选框组","FR-Engine_Param_Template_Name":"组合名称","Actual_Value":"实际值","FR-Designer-Plugins_Year_Name":"年份","FR-Engine_RP_Sender":"发送人","January":"一月","DBCP_INITIAL_SIZE":"初始化连接数","Plugin-ChartF_Preview_Line_Map":"预览流向地图","Guangdong":"广东省","FR-Plugin-Designer_Expired":"到期","FR-Basic-File_Uping_File":"正在上传文件","Utils-Flash_Print[Client]":"Flash打印[客户端]","ParameterD-Parameter_Interface":"参数界面","FR-Chart-TimeUnit_Hour":"小时","Plugin-ChartF_Marker_Time":"里程碑时间","Indent-Pixel":"像素","FR-Engine_Cell":"单元格","FR-Engine_Func-Print-Export":"打印导出","Unit_Million":"百万","Server_Charset":"服务器编码","FR-Widget_Mobile_Terminal":"移动端","Optionns":"备选项","Filed":"区域","LIC-Support_Parameter_Interface":"参数查询界面","FR-Plugin_Error_InvalidInstallZip":"无效的安装包","ExpandD-Rules_to_Find_Default_Father_Cell":"默认父格寻找规则","ChartF-Background_Color":"背景色","Anhui":"安徽省","FR-Engine_Export_Excel_PageToSheet":"分页分Sheet导出","FR-Base-Plugin_Error_Message":"插件 [{R1}] 出现错误，已禁用该插件，请重试并及时更新该插件。","FS-Reg-Machine_Code":"机器码：","FS-System-Report_Message":"上报消息","Embed_User":"内置用户","Datasource-The_name_of_database_cannot_be_null":"数据库的名字不能为空","FS-Schedule-Define_Class_Name_Not_Null":"自定义类名不能为空","ConditionB-begins_with":"开头是","Datasource-Rename_remedy_datasource":"重命名Remedy数据源","Loading":"正在加载","Is-Cache":"启用缓存","FS-BakRestore_EachModule_Backup_Occupancy":"各模块自动备份可占内存","email":"邮箱","Plugin-ChartF_Sort":"排序","Re-binding-mac":"lic中已绑定的mac地址","StyleFormat-None":"常规","Platform_Roles_Has_Changed":"平台角色已修改，是否重新载入？","Preference-Support_Cell_Editor_Definition":"支持单元格编辑器","Show_Grid_Row":"显示格子行","Short-Oct":"十","Chart_Second_Plot_Pie":"第二绘图区包含所有小于该百分比的值","FS-Privilege-Already_Set":"已有对该部门以及职位的权限设置，请不要重复设置，本次操作不予保存","I-AreaStyle_Normal":"面积图","NS_LayerReport_present":"错误代码:11100003 行式引擎不支持形态","Plugin-ChartF-FirstShowLegend":"优先显示图例区域","FS-Reg-Local":"本地机器信息认证","FS-Mobile-Need_User_Name_And_Mac_Address":"请输入用户名和MAC地址！","WuhanCity":"武汉市","SingleMulti":"多","writeModule":"填报预览模块","FS-Schedule-Output_Attach_Class_Deal":"自定义附件处理","Registration-Company_Name":"公司名称","CheckBoxField":"复选框","Set_data_fields":"设置数据字段","BorderLayout":"边界布局","Formula_Dictionary_Display_Examples":" 实际值范围为 X-Coordinate=横坐标","FS-Admin-Simple_Account":"管理员账号","Use_Current_Configuration":"使用的是当前配置","ConditionB-not_null":"不为空","FR-Plugin_Install_Failed":"安装失败","Layer_Report":"层式报表","FS-Plugin-Store_Integrate_Deployment":"","ProcessStartedBySelf":"我开始的流程","FR-Plugin-Store_Enable":"启用","EditRC-Entire_row":"整行(R)","Polyblock-Fixed_Height":"固定聚合块高度","FR-Chart-CopyJS_Message":"JS内容已复制到粘贴板中","Plugin-ChartF_Non_Adjustment":"不可调整","StyleAlignment-Right":"靠右","FS-Monitor-Templet_Lifecycle":"模板生命周期","FR-Engine_Deselect_All":"不选","FR-Designer_Utils-Available_Columns":"可选列","Currency_Line":"金额线","ChartF-Default_Style":"默认样式","Form-Same_Height_Des":"将选中的控件的高度设置为和第一个选中的控件一样的高度","FS-Schedule_Use_Attach":"使用附件","FS-System-Send_Verification_Code_Admin_Both":"无法验证身份：平台未开启短信服务和设置服务器邮箱，无法接收验证消息。您可删除路径WebRreport\\\\WEB-INF\\\\resources下的privilege.xml文件后重置账号信息","FS-Reg-Cloud":"私有云认证","SingleLayer":"单层","FR-Designer-LayerPageReport_Define_CustomCountQuery":"定义获取数据集总行数SQL","FR-Designer-Basic_Cancel":"取消","FS-Login_SMS_Verfication_Btn":"验证","Plugin-Chart_GIS_LAYER":"GIS背景","Plugin-ChartF_Time_Zoom":"时间缩放","Deploy-Official-Website":"官方网址","FS-Schedule_Attach_Not_clear":"不清理","Export-Template(embedded_data)":"模板(内置数据)","FR-Designer_Form-RadioGroup":"单选按钮组","Ecp_Pwd_Long":"密码长度过长","FS-Monitor-Email_Alert":"邮件提醒","FS-System-Messages":"消息","FR-Engine_Excel_Clean_Failed_Tip":"excel文件缓存清除失败,下次导入之前请刷新模板","Integer":"整数","DashBoard-ReportShowPlatform":"报表展示平台","StyleFormat-Date":"日期型","FS-Schedule-Frequency_Label_Width":"50","Importing":"导入中","System_Status":"系统状态","FS-Monitor-Visit_Path":"物理路径","FS-Frame-Full_Screen_Tip":"浏览器不支持全屏API或已被禁用","FR-Engine_Year":"年","Multiline":"多行编辑","Import2":"导入","FR-Basic-File_Upload":"文件上传","Datasource-Add_DataConnection":"添加数据连接","Compart":"分隔","FR-Designer_Https_Enable":"启用https","ChartF-TheActualStart":"实际开始","Create_Cross_Report":"创建交叉报表","FR-Chart-Map_Kunming":"昆明市","Chart_Show_Data_Sheet":"显示数据表","ChartF-Interval_Range":"间隔范围","CacheValidateTime":"报表缓存有效时间","CellWrite-Hide_Column_If_Null":"当空值时隐藏当前列","ChartF-Range_Axis_Increment":"坐标轴增量","FR-Engine_Abnormal_Communication":"通信异常","FS-Privilege_Report_Tool_Margin":"10","LIC-Support_Advanced_Chart":"复杂统计图","FS-BakRestore_Backup_Fail":"备份失败","FS-Monitor-Intelligent_Warning":"智能预警","FS-Schedule_Multiple_Email_Receiver_Tip":"提示：支持填写多个收件人，以 , 隔开","FR-Designer_DisplayNothingBeforeQuery":"点击查询前不显示报表内容","ChartF-Label_Count":"标签数","FS-Schedule_User_Group_Help_Detail_Infos":"1.通过用户组快捷设置通知对象\n2.通过用户组生成不同的结果文件\n","No_Processor":"没有处理器","HF-Edit_Footer":"编辑页脚","DBCP_TIME_BETWEEN_EVICTIONRUNSMILLIS":"空闲连接回收器休眠时间","SQLWizard-add_where_condition":"增加WHERE条件","Plugin-ChartF_Preview_Line":"预览折线图","Show":"显示","FR-Engine-Excel_formula_error":"导出公式解析错误","FR-Chart-Axis_labelInterval":"间隔","FR-Chart-Map_LayerData":"底层数据","LOG-Is_Being_Openned":"正在打开","M-Open_Recent":"最近打开的","FS-Plugin_UpdateOnline_Canel":"取消","FS-Schedule_Mobile-Push-Recipient":"接收人","FR-Engine_Please_Enter":"请输入","Report_Engine":"报表引擎","Plugin-ChartF_NewMultiPie":"多层饼图（新特性）","FR-Engine_Show_All_Remaining_Values":"显示所有剩余的值","FS-Generic-Simple_Upload":"上传","Chart-Manage_Chart_Type":"管理图表类型","Widget-Disabled":"不可用","Hyperlink-Width_Of_New_Window":"新窗口宽度","ChartF-Down":"减少","Table":"表","FR-Remote_File_is_Locked":"您所要打开的报表正在被其他人编辑，请稍候打开","FR-Engine_Block_unextended":"不可扩展块：","Custom":"自定义","RP_Add_MultiNode":"添加联合填报节点","FS-Schedule_Everyday":"每日","ConditionB-in":"包含于","FS-Generic-QRCode_Config":"二维码配置","Switch-Form-Mode":"切换为表单设计模式","Model":"模式","FS-Monitor-Templet_name":"名称","FS-System-Edit_Email_Success":"邮箱修改成功","FR-Chart-Map_Chengdu":"成都市","FS-BakRestore_Copies":"份","FR-Chart-Map_Shenyang":"沈阳市","FR-App-Privilege_No":"没有权限","VerticalBoxLayout":"垂直盒子布局","ConditionB-does_not_begin_with":"开头不是","FR-Plugin-Store_Plugins_Count":"个插件","Printer":"打印机","FR-Chart-ThreeD_Custom_Chart":"自定义三维组合图","Datasource-Datasource":"数据源","Log_Declare_Head_Res_Read":"文件读取中","FS-BakRestore_BackupFreq":"备份频率","chartModule":"图表模块","Hyperlink-New_Window":"新窗口","PaperSize_Rotate":"旋转","Privilege-Your_Authentication_Can_Not_Access_The_Reportlet":"你的认证无权访问该目录","FS-System-Resource_Server":"资源服务器地址","FS-Monitor-Visit_Start_Time":"访问开始时间","I-BarStyle_3DStack":"三维堆积柱形图","M_File-Export-Text":"文本文件(制表符分隔)","FR-Engine_PageSetup-Orientation":"方向","Character":"文字","Basic_Information":"基本信息","BindColumn-Control":"控制","FS-Plugin_updateOnlineInPlate":"决策平台更新升级","FR-Chart-Use_Name":"名字","DBCP_MIN_IDLE":"最小空闲连接数","FR-Base_Sche_Hour":"时","FR-Engine_SQLWizard-would_you_like_to_continue":"是否想继续","FS-CustomStyle_Module":"自定义样式","Meter_Single":"单指针仪表盘","Preference-Setting_Visible":"可见设置","FR-Engine_Seriously":"严重","Plugin-ChartF_Car":"汽车","FR-Designer-Plugin_Update_Successful":"插件升级成功，重启服务器以生效","Schedule-Rename_Task":"重命名任务","FR-Engine_Database":"数据库","StyleAlignment-Vertical_Text":"文字竖排","ChartDataLabelOutSide":"数据标签外","Export-Excel-PageToSheet":"分页分Sheet导出","Sche-Saturday":"星期六","FS-System-New_Pwd_Not_Same":"两次输入的新密码不一致","FR-Engine_NS_print_flashPaperSetting":"错误代码:11100018 Flash打印不支持将页面设置传递给打印机","This_Parameter_Is_Not_Exist":"此参数不存在","ReportColumns-Columns_horizontally":"行分栏","Chart-PreStyle":"图表预定义配色","Plugin-ChartF_NotLimitAreaSize":"不限制大小","Utils-Column_Serial_Number":"列序号","Performance-plugin_state_out_of_date":"该功能的版本低于系统要求，请升级性能插件","ReportD-Excel_Export":"模板导出属性","FS-Schedule_Link_Open_Outside_Platform":"定时结果链接在平台外打开","pageModule":"分页预览模块","Web_Preview_Port_Setting":"端口设置","Privilege":"权限","StyleAlignment-Text_Rotation":"文本方向","FR-Engine_ConditionB-AND":"与(AND)","DBCP_VALIDATION_QUERY":"SQL验证查询","FR-Chart-Map_ShowWay":"地图展现方式","FS-Schedule-Server_Address_Not_Null":"FTP服务器地址不能为空","FR-Chart-Map_Column":"柱形图地图","Form-No_Selected_Will_Be":"未选中将把值作为","WLayout-Border-LayoutContainer":"拥有中部和北部两块的边界布局容器,其中北部块可以根据需要调整高度","SQLWizard-add_to_group_by":"添加到group by子句中","RP_Send_Offline_Report":"发送离线报表","FS-Report_Choose_Remove_Item":"请选择要删除的内容","FR-Engine_Mobile_BI":"移动决策平台","ReportletParameterTip":"当参数值为Category时对应图表中的分类名, 同理: Series, Value 分别对应系列名和系列值","Mail-Copy_Adress":"抄送地址","FS-Schedule_Mobile-Push-Schedule-Result-Link":"定时结果链接","Performance-plugin_submitbatch_error":"批量提交错误","FS-Plugin-Store_Plugins_Count":"","Percent_Stacked_Bar_Chart":"百分比堆积柱形图","Plugin-ChartF_Gauge_Ring":"百分比圆环仪表盘","FS-Reg-Concurrent_Ip":"同时访问模板IP个数","FS-Setting-Login_Option":"登录方式","FR-Engine_Cannot_Found_Template_File":"没有找到模板文件","ManagerSystem":"管理系统","Plugin-ChartF_Mid_Tree_Map":"居中","FR-Designer-Basic_Copy_Build_NO":"双击构建版本号可复制到剪贴板","Query_Type":"查询方式:","FR-Base_Tue":"二","Related":"联动","Error_With_Non_Template":"非模板触发错误","FR-Engine_Whether_Query_Result_When_Paging_Preview_Timer":"分页预览是否查询定时器结果","FS-SMS_Service_Apply":"申请开通短信服务","Function-Function_Manager":"函数管理器","RP_Add_Task":"添加任务","Plugin-ChartF_Layer_Map_Type":"展示类型","Event_Name":"事件名","Forbid_Drag_into_Para_Pane":"该对象不能拖入参数面板","FrequencySet":"明细频率设置","FR-Base_Post_Meridian":"下午","File-Default_URL":"默认文件上传地址","InnerRadis":"内径大小","I_Created":"我创建的","FS-System-Single_Login_Failed3":"登录失败提示：您的账号已在其他平台登录。","FS-System-Single_Login_Failed2":"，以确保账号安全","FR-Base_Sche_Wednesday":"星期三","FR-Designer_JavaScript":"JavaScript脚本","Plugin-ChartF_Html":"使用html解析文本内容","ImportMap":"导入地图","Axis_Title":"轴标题","Note_Normal-Formula":"普通分组只能处理简单的分组，公式分组可以在复杂情况下使用程序（公式，函数）进行分组。","FS-Generic-Server_Name":"服务器名称","Chart_Main_Grid":"主要网格线","FS-BakRestore_Global_Config":"全局配置","Chart-Map_FinishPolygon":"点击第一个点完成绘制形状","FS-Monitor-Alarm-Mode":"预警方式","Printing":"正在打印","SetLoginPage":"设置登录网页","Plugin-Chart_Character":"字符","I-HBarStyle_NormalStack":"堆积条形图","Plugin-ChartF_Gauge_Slot":"百分比刻度槽型仪表盘","ShijiazhuangCity":"石家庄市","FR-Engine_PageLayerReport":"分页行式引擎","FS-System-Forget_Password_Tip2":"2.服务器开启短信服务，且用户绑定手机后，可使用短信认证","FS-System-Forget_Password_Tip1":"1.服务器设置邮箱，且用户绑定邮箱后，可使用邮箱验证","D-Step":"步骤","INFO-Try_to_set_the_port_of_the_server_to":"设置服务器端口为","FS-Setting-Color_Scheme":"配色","Plugin-ChartF_Automatic":"自动","Start":"开始","Apply":"应用","Plugin-ChartF_XYAxis":"XY轴","FR-Designer-Plugin_Please_Update_Jar":"请更新Jar包至:","FS-Generic-Simple_November":"十一月","FS-BakRestore_Cleanup_Fail":"清理失败","Datatype":"数据类型","StyleAlignment-between_-90_and_90":"在-90和90之间","FS-PSqlInj-Remove_Custom_FW":"删除关键字","CLUSTER_REDIRECT_SHEAR":"集群重定向参数","MostTimeRestart":"尝试重新启动最多次数","Chart_Trend":"趋势","Dialog":"对话框","Chart-DataFunction_None":"无","FS-Schedule-Execute_Repeat_Simply":"简单重复执行","Plugin-ChartF_AntiClockWise":"逆时针","FR-Engine_Detail-Message":"详细信息","SQL-Table":"表","FS-System-Email_Encrypt_SSL":"SSL 加密","FR-Designer_Utils-Move_Down":"下移","FS-Reg-FR-JAR":"JAR：","FS-System-Config_SMS_Using_Platform":"使用短信平台","Add_Position":"添加职位","FS-Generic-Simple_Run":"运行","Report_Show_Location":"报表显示位置","State":"省市","Select-Color":"选择颜色","Function-The_class_must_inherit":"该类必须继承","External":"外部","FS-Registered-Done":"已注册","Utils-File_name":"文件名","FS-Login_SMS_Verfication_Bind_Mobile":"绑定手机号","FS-BakRestore_All":"所有","M_Server-Server_Config_Manager":"服务器配置","Chart_LinePlot_Should_Select_One_In_Line_Or_Marker":"折线和标记需要至少选择显示一个","Saved_Connection_Count":"保存的连接数","FR-WriteEnhance_not_support_function":"不支持此函数","FR-Engine_Event_success":"成功","FR-Engine_PrivilegeControl":"权限细粒度","Parameter-String":"字符串","Plugin-ChartF_MonitorModel":"监控模式","X_Axis":"X轴","FR-Engine_Set_Margin_When_Printing":"打印时可设置打印边距","Plugin-ChartF_Node_Name":"节点名称","ParameterD-Parameter_name_cannot_be_null":"参数的名字不可以为空","I-PieStyle_3D":"三维饼图","Utils-Template_File":"模板文件","FS-System-FlashP_Need_Settings":"需要Flash打印机属性设置窗口","FS-Monitor-New_Write":"新填报浏览","Min_Value":"最小值","FR-Base_SimSun_Not_Found":"无法找到宋体, 请选择当前系统下默认语言作为设计器字体.","FS-User-Add_User":"添加用户","Form-Url":"地址","Report":"报表","Admin":"管理员","FS-Schedule-Start_Date":"从","Plugin-ChartF_AxisVerticalZero":"0值","FS-User-Authorized_Users":"已授权用户","Guangxi":"广西壮族自治区","Report_Path":"报表路径","FS_BI":"决策平台","Aomen":"澳门特别行政区","Collect-Successfully":"收集成功","FR-Basic_About_No_Build":"不是安装版本","Values-Editor":"值编辑器","FR-Plugin-Store_Report_Write":"填报","Values":"值","FR-Designer_Email":"邮件","RP_Alert_Setting":"预警设置","Enter_Login_Page_URL":"请输入登录页面url","FR-Chart-Map_Use_Field":"地图字段","Plugin-ChartF_Preview_MultiPie":"预览多层饼图","SQLWizard-pack":"最小化","Enter_Task_Name":"请输入任务名称","Form-Widget_Name":"控件名","Mail-Send_Adress":"发送地址","PageSetup-Start_Row":"起始行","Privilege-Post_List":"职位列表","Utils-Column_Name":"列名","Chart-Layout_Position":"位置","Form-Split_Horizontal":"水平分割","Plugin-ChartF_Preview_Custom_Column":"预览自定义柱形图","CanNotBigger":"不能大于","FS-Report-RP_MyTask":"我的上报任务","FR-Chart-Map_Beijing":"北京市","Colors":"颜色","Utils-Can't_Paste_to_Uneditable_Area":"不允许剪切到不可编辑的区域","Chart_Curve":"光滑曲线","Build_Tree_Accord_Marked_Filed_Length":"依赖所选数据集的标记字段的长度构建树","I-HBarStyle_PercentageStack":"百分比堆积条形图","Layer_Report_alert_info":"注意！您正在使用行式引擎，此引擎下一些报表特性将不再支持。","Finally":"最后","Hide":"隐藏","FS-User-Synchronized_DataSet":"用户同步数据集","Organization":"组织","CellWrite-Print_Border":"打印边框","ConditionB-Conditions":"依条件选择","Choose_columns":"选择列","FR-Engine_Excel_Import":"Excel导入","Plugin-ChartF_Horizontal_Table":"横向表头","Plugin-ChartF_AxisProportion":"坐标轴区域最大占比","XML_XPath_Message":"点击左侧树节点选择","FS-Setting-Homepage_Exists":"的首页已存在","GridLayout":"格子布局","Datasource-Connection_successfully":"连接成功","M_Insert-Serial_Number":"编号(S)","FR-Base_Right":"右","FS-Module-Server_Setting":"系统管理","ReportColumns-Columns":"分栏","FS-System-Please_Input_Realname":"请输入姓名","FR-Base_Remove":"删除","FS-Monitor-Model_Process_Export":"导出近一个月数据","FR-Designer-Plugin_Has_Been_Installed":"插件已安装，若想更新插件，请切换至插件更新","Default":"默认","FS-Generic-Simple_February":"二月","FS-Generic-Create_QRCode":"生成二维码","Plugin-ChartF_JiangSu":"江苏省","M_Edit-Cut":"剪切(T)","Dic-Only_Can_Rename_DataDictionary":"只能重命名数据字典","FS-Report-Edit_Cpt":"编辑模板","D-DataSeries":"数据序列","Email-Can_Preview_Report_Content":"正文预览报表内容","Schedule-Reportlet_Group":"网络报表组","PageSetup-inches":"英寸","DashBoard-Potence":"权限","fs_initDragBar_circle_tip":"结束任务:此任务触发时整个流程立刻结束,单击编辑属性。","Performance-plugin_performance_name":"去图片js去部分logo","Plugin-ChartF_AxisLineStyle":"轴线样式","FS-BakRestore_Cleanup_Backup":"内存已满，请清除部分备份","Plugin-ChartF_fullScreenClose":"关闭全屏展示","FR_Chart-Data_Range_Configuration":"数据区间配置","Docking-Pinned_Mode":"固定模式","FR-Base_Top":"上","FS-Privilege-Department_And_Post":"部门职位","ConditionB-equals":"等于","M_Insert-TextBox":"文本框(B)","Datasource-Add_Directory_of_hibernate.cfg.xml_to_Classpath":"把hibernate.cfg.xml文件加到Classpath下","About-Version":"版本","Datasource-Text_datasource":"文本数据","FR-Engine_By-PageSize-False":"横向不分页","Selection-Background":"选中项背景色","Text_IsVertical":"竖排","ChartF-Alert-Line":"警戒线","Chart_Test":"测","ExecuteOneTime":"执行一次","FS-Monitor-Write":"填报浏览","Event_Set":"事件设置","FS-Schedule-Output_Push_Message":"推送消息","Chart-Chart_Title":"新建图表标题","DashBoard-Adhoc":"即席报表","FR-Engine_NoLimit":"无限期","FS-Schedule_Run_Failed_Prompt":"运行失败提醒","FS-Generic-Simple_SMS":"短信","FS-Process-colon":"：","M_Insert-Cell":"单元格元素","DBCP_MAX_IDLE":"最大空闲连接数","Field_Filtration":"字段过滤","Auto":"自动","Sche-Month":"月份","FR-Engine_Closed":"已关闭","Plugin-ChartF_Auto_Tooltip":"自动数据提示","ParameterD-DClick_Edit":"双击修改","FR-Engine_RP_Page_Write":"页面填报","The_file_is_already_slected.":"该文件已选择","FR-Chart-Dialog_OK":"确定","FR-Engine_Excel_Sheet_Import":"导入sheet","FR-Engine_WriteModule":"填报预览模块","Add_summary_info":"将汇总信息加入报表中","High":"高","ExecuteFrequency":"执行频率","FR-Plugin-Designer_Left":"剩余","Dic-Choose_Database_And_Table":"选择数据库和表","LogarithmicValue":"对数刻度值","Chart-Link_Mail":"邮箱","Report_Is_Being_Openned":"正在打开报表","Web-The_selected_directory_must_be_named_WEB-INF":"","FS-Schedule_Mobile-Push":"客户端通知","Image-Titled":"平铺","PrintFile":"打印生成的文件","FS-Generic-Turn_Off":"关闭","Plugin-ChartF_CategoryAxis":"分类坐标轴","FormulaD-Invalid_Formula":"非法的公式","FR-Plugin_Preview":"预览效果","FS-Generic-Simple_Role_Management":"角色管理","Parent_Marked_Field":"父标记字段","FS-PSqlInj-Remove_Custom_SC":"删除字符","LIC-Support_Dynamic_Chart":"H5动态图表","FR-Engine_Event_aftertoexcel":"Excel导出后","FS-Plugin_update":"更新中...","Chart-Stock_High":"盘高","FR-Engine_Black-Font":"黑体","Background-Over":"鼠标悬浮背景","JavaScrit-Asynch":"异步","Select_sort_order":"选择排列顺序","Reportlet":"网络报表","FS-Reg_Version_Registration":"版本注册","Chart-Data_Resource":"数据来源","FS-Plugin-Register_Left_Days":"授权在{R1}天后到期","FS-Privilege-Digital_Sign":"数字签名认证","Plugin-ChartF_XiZang":"西藏自治区","FS-Schedule_Edit_Detail_Frequency":"编辑明细频率","FS-Schedule-Trans_SUCCESS":"数据同步转换成功","FR-Engine_RP_Timing_Issue":"定时下发","FS-Generic-Simple_DB_Platform":"平台数据库","FS-Generic-Face_Write":"填报","Disk_File":"磁盘文件","Plugin-ChartF_Preview_Thermometer_Gauge":"预览试管型仪表盘","Running":"运行中","FR-Engine_Click_To_Get_Registration_Code":"点击获取注册码","FR-Chart-Version_Lasted":"最新版本","ChartF-CHORD":"弦形","InColumn":"列(L)","JavaScript_Set":"JS设置","FR-Base-Time_Second":"秒","Plugin-ChartF_TextRotation":"文本旋转","Datasource-Add_Database":"添加数据库","ReportServerP-PDF":"PDF","RestartByCondition":"如果任务中断按以下频率重新启动","FS-Plugin-Store_Day":"","FR-Designer-Plugin_Install":"安装","Chart-Use_Zoom":"图表缩放","plugin-ChartF_FloatColor":"悬浮颜色","FS-Setting-Navi_Upload_Tool_Tip":"提示：上传图标尺寸为42*42","System_default":"系统将默认","FS_End_Date":"结束日期","FR-Engine_Excel_Help_Msg":"默认导入除标题行外的所有数据;<br>只填起始行,则导入该行及其后所有数据;<br>只填结束行,则导入该行及其之前的数据;","HTML-Write_Insert_Data_Successfully":"数据插入成功","Window":"窗口","Plugin-ChartF_Gradual_Light":"渐浅","Gradient":"渐变","FS-CustomStyle_Toast_Error":"错误","Trillion":"兆","Connection":"连接","Chart_Log_Base":"底数","M_Edit-Send_to_Back":"置于底层(K)","Formula_Dictionary_Display":"对于上面实际值范围内的每个值($$$)，其显示值为","Data-Check":"数据监控","FR-Engine_Import_Failed":"导入失败","SingleOne":"单","FR-Designer-Support":"支持","Reportlet-Schedule-Action":"定时生成","FS-System-First_Login_Info":"服务器尚未设置邮箱，系统成员无法用过邮件接收通知、验证等信息。为了更方便，安全的使用系统，建议立即设置服务器邮箱。","FS-Plugin-Store_Form_Components":"","ReportD-Report_Export_Attributes":"报表属性","FS-Server-Error-Msg":"服务器信息错误，请重新填写验证！","Row-Fields":"行字段","I-PieStyle_Normal":"饼图","FR-Engine_ECP_encode_failed":"加密失败, 请联系管理员检查密码文件是否损坏","FS-Cloud-Unbind":"解除绑定","Cache-Disk_Memory_Page_Size":"磁盘缓存分页大小","T_Insert-Float":"插入悬浮元素","Sort-Original":"不排序","FR-Chart-Map_Hefei":"合肥市","Report_Template":"报表模板","M_Window-Title_Horizontal(H)":"水平平铺(H)","FS-Web-Plugin_Jar_Expired":"Jar包过旧","FS-Generic-Task_Name_Exist":"任务名称已经存在","Web-Please_input_parameter_vlaues":"","ChartF-Percentages_Format":"百分比格式","FR-Designer-Plugins_Year_End":"结束年份","Form-Copy":"复制","FR-Designer_ChooseOneButton":"请选择一个控件后再添加","FR-Base_Thu":"四","FR-Engine_Func-SMS":"短信平台","FR-Designer-Widget_Size":"控件大小","ChartF-Marker":"标记","FR-Engine_RP_Unfinished_Task_Name":"未处理任务","Select_Data_Set":"选择数据集","FR-Designer_filedChosen":"依赖的字段","FS-Process-Package":"包","M-Save_As":"另存为","Is_Share_DBTableData":"共享数据集","StyleAlignment-Degrees":"度数","FS-Plugin_updateOnline_update":"jar包更新","Brown":"褐色","FS-System-Simple_Settings":"设置","Env-Configure_Workspace":"配置工作目录","FS-Report-Simple_Named":"名称为","Plugin-ChartF_Drill_Dir":"钻取目录","FS-BakRestore_Backup_Frequency_Oneday":"1天","FR-Designer_Env-Des1":"请选择报表服务器所在的WEB-INF目录","FS-BakRestore_Cube_Backup":"Cube备份","FR-Engine_RP_After_Use":"后，使用","Chart_HorialTimeAxis":"水平(时间)轴","Performance-plugin_functionname":"功能名称","FS-System-Phone_Can_Not_Be_Null":"手机不能为空","FR-Report_Invalid_Cell":"无效的单元格","Password":"密码","Page_Setup":"页面设置","Compile_Success":"编译成功","FR-Engine_ConditionB-does_not_end_with":"结尾不是","FS-Generic-Simple_Open":"打开","Continent":"洲际","Privilege-The_User_Service_Can_Not_Be_Null":"用户服务不能为空","FR-Designer_Form-Password":"密码","Border-Style-Radius":"圆角边框","I-PieStyle_3D_Seperate":"三维分离饼图","FS-Schedule-Please_Select_Weekly_Execute_Time":"请选择周执行时间","FS-Plugin-Store_No_Plugins":"","HF-Insert_Image":"插入图片","schedule_email_tip_second":"中填写","FR-Action_Remove":"删除","FR-Engine_Create_Time":"创建时间","GroupReport-Set_Page_Footer_To_Page_Bottom":"页表脚放在一页最下面","FS-Plugin_UpdateOnline_Compatible_Info":"兼容性说明","PageSetup-Title_Start_Column":"重复标题列","Preference-Setting_Grid":"网格设置","Plugin-ChartF_WidgetBoundary":"控件边界","Plugin-ChartF_Default_Interval":"默认间隔","FS-Schedule-Select_True_Interval":"请选择正确的运行间隔时间单位","FR-Plugin_Error_InvalidBBSCode":"未登录","ChartF-Show_values":"显示数值","FS-Schedule-Output_Mount_Virtual_Directory":"挂载虚拟目录","Form-Button":"按钮","RWA-Submit":"提交","FS-Monitor-Menu_Backup_Restore":"备份还原","Group_name":"组名","NS_LayerReport_MultiDs":"错误代码:11100001 行式引擎不支持多数据源展示","FR-Designer-Plugin_Plugin":"插件","FR-Chart-Map_Changchun":"长春市","FR-Engine_NameWidget-Invalid":"预定义控件缺失","DashBoard-BeautyReport":"形象美观的图表","FS-Setting-Login_Style_Plugin":"登录页面插件","Chart_Project_ID":"","Web":"网络","FS-Plugin-Store_Quick_Login":"","Wed":"三","Chart_Interval_Back":"间隔背景","FS-Report-RP_InputName":"请输入上报名称","BindColumn-Choose_The_Display_Type_of_Column":"选择列显示类型","Plugin-ChartF_Location_With_AreaName":"区域名匹配","FS-System-Connection_List":"数据连接","FR-Engine_Excel_uc_list":"不定行导入单元格为:","FS-Report-RP_EditLabel":"编辑上报标签","Operating-Parameters":"不同操作的参数。","FS-Generic-Simple_Sat":"六","M_Insert-Sub_Report":"插入子报表","DataList-Set_Value_Of_DataList":"设置数据链的值","HohhotCity":"呼和浩特市","FR-Chart-Map_Guangzhou":"广州市","FR-Plugin-Store_Authorize":"授权:","Report-Title":"报表标题","Title_End_ColumnOrRow":"重复行列结尾","FS-Schedule-Restart_Number_Of_Times_Must_Be_Number":"重启次数必须为数字","FR-Engine_Event_startload":"加载起始","FS-System-Memory_Cache":"缓存","FR-Designer_Add":"增加","Exception_StackTrace":"错误异常堆栈信息","Parameter-Design":"参数设计","Chart-Map_PolylineError":"图形不能交叉","Plugin-Memory_Alarm_Update_Failure":"保存失败","Chart-Style_Name":"样式","FR-Engine-Should_Select_An_Excel_File":"需要选择一个Excel文件来源","FR-Base_Sche_Saturday":"星期六","Report-Body":"报表主体","FS-Report-Edit_Link":"编辑链接","Chart_Title_Is_Visible":"标题可见","Bubble-Width":"气泡宽度","SQLWizard-add_to_order_by":"添加到order by子句中","Plugin-ChartF_Filled_With_Image":"用图片填充","FR-Engine_Print_Margin":"打印边距","Plugin-Chart_Create_Image_Map":"创建自定义图片地图","FS-Generic-Simple_Failed":"失败","ChartF_Stock_Open":"开盘","Detail-Information":"详细信息","FS-System-Email_Or_Phone_Cannot_Empty":"邮箱或手机不能为空","Background_Settings":"背景设置","Chart_Acc_Set":"精确设置","Datasource-JNDI_DES":"注意:需要把包含INITIAL_CONTEXT_FACTORY类的.jar文件复制到软件安装目录下的/lib目录下.","FR-Designer-Plugin_Has_Been_Actived":"插件已被启用，重启设计器及服务器生效，服务器需手动重启","Schedule-Monthly":"每月","FS-System-Logined_First":"已登录禁止再登录","Pitch_Percentage":"间距百分比","Formula":"公式","Datasource-Procedurewaring":"系统不能自动获取该存储过程的参数，请手动添加!","FR-Engine_RP_Have_Come_To_You_For":"已经到你这里","FR-Designer_WaterMark":"水印","FR-Engine_Function_Mobile_Template_Cpt":"移动端模版（cpt）","FS-Generic-DS_Server_TableData":"服务器数据集","FR-Engine-Err-The_Value_Cannot_Be_Negative":"不能为负数","FS-Generic-Register_Version":"注册版本","File-Auto_Upload":"自动上传","This_program_is_protected_by_international_copyright_laws":"本软件受中国版权法及国际版权公约保护","DashBoard-QucikAccidence":"快速入门(推荐) >>","BackgroundTexture-BrownMarble":"棕色大理石","Second_Axis":"次坐标轴","loadedTreeModel":"加载失败,请检查后重试","PrintP-Previous":"上一页(P)","ChartF-Stock-Volume-Axis":"成交量坐标轴","ExecuteSimpleRepeat":"简单重复执行","Short-Nov":"十一","FR-Engine_ReportServerP-Last":"末页","Chart-Change_Pie_Size":"将饼图大小缩放为","TopNavigation":"顶部导航栏","Default_ParameterWindow_EditorWidth":"参数编辑器宽度","FR-Designer-Widget-Style_Title_Format":"标题格式","Privilege-Password_Can_Not_Be_Null":"密码不能为空","Utils-Set_Default":"设置为默认","Invalid_Cell":"无效的单元格","Face-Outlook_Structure":"Outlook结构","FR-Plugin-Designer_Upload_Path":"上传路径","PaperSize_ML":"加大","Plugin-ChartF_Hyperlink":"超链","GisTableDataError":"Gis地图数据集数据错误","FR-Engine_Function_Undefined":"功能点未定义","FR-Chart-Mode_Auto":"自动","FS-System_View_Detail":"查看明细","Only":"只","FS-User-No_Encryption":"不设置密码加密","FR-Chart-Style_Present":"形态","FS-Monitor-Global_Properties_detection":"全局属性检测","ChartF-Low":"盘低","FR-Remote_Connect2Server_Again":"连接中断，是否重新连接服务器?","FS-Report-Select_Path":"选择路径","FR-Plugin-Designer_FTP_Setting":"FTP设置","Shortcut_Set":"快捷键设置","Border-Color":"边框颜色","Cursor_to_next_column":"光标移到下一列","RP_Review":"审核","Schedule-Weekly":"每周","Chart-Interactive_AxisTooltip":"坐标提示","RelatedChart":"图表联动","BindColumn-This_Condition_has_been_existed":"此条件已经存在","Format_explan":"格式说明","Left":"左","M-Chart_Preview":"图表预览","FS-Admin-Old_Password":"旧密码","Plugin-ChartF_Connecting_WMP":"连接中","FR-Engine_Utils-Print[Client]":"打印[客户端]","Form-CheckBoxGroup":"复选框组","NoticeAndSave":"通知与存档","FR-Chart-Map_Google":"谷歌地图","Design":"设计","Single_Close":"关","Export-Excel":"Excel格式","ThreeD_Percent_Stacked_Bar_Chart":"三维百分比堆积柱形图","Template_Path":"模板路径","ServletMapping_msg":"实现修改需要相应修改\"(报表运行环境)://web.xml\"文件中的url-pattern属性","CellWrite-Preview_Border":"预览边框","Add_TableData":"增加数据集","Chart-Data_Import":"数据导入","HarbinCity":"哈尔滨市","RP_Sure_to_delete_process":"删除该流程，将同时删除绑定该流程的任务。是否删除该流程","Utils-Open_File":"打开文件","PrintP-Print_Preview":"打印预览","Bounds":"边界","FR-Designer-Plugin_Illegal_Plugin_Zip_Cannot_Be_Install":"不可识别的插件，无法安装","FR-Engine_RP_Creator":"创建人","Parameter-Float":"单精度型","FR-Engine_RP_Exist_Null_Node":"该节点中存在未填写项","M-Write_Preview":"填报预览","FS-Module-Platform_Manager":"平台管理","M-Window":"窗口(N)","Week":"周","f#Created":"","FR-Plugin_Register_Error_LicDamaged":"证书不匹配，证书中对应的插件ID为:{R1}","Chart_Cell":"图表超链-联动单元格","ReportServerP-Show_Toolbar":"显示工具栏","FR-Engine_ConditionB-equals":"等于","FR-Designer-Plugin_Detecting_Update":"正在检测更新","Datasource-JDBC_Datasource":"JDBC数据源","X_offset":"X方向偏移","FR-Engine_Excel_uc_failed":"不定行匹配失败单元格:","FS-System-Config_Restore":"还原","Server-Start":"启动","ChartD-Chart_DefinitionStep3":"图表向导步骤三","ChartD-Chart_DefinitionStep2":"图表向导步骤二","Cursor_to_previous_column":"光标移到上一列为：","ChartD-Chart_DefinitionStep1":"图表向导步骤一","Simple_general":"简单通用查询","Plugin-ChartF_NewBubble":"气泡图（新特性）","Plane3D":"平面3D","Hyperlink-Show_Status":"显示状态栏","FS-Monitor_Clean_Successfully":"清理成功","Left_Margin":"左边距","FR-Engine_Multi-Privilege":"多级权限","HotHyperlink-Bring_Parameter_Automatically":"自动生成参数","FR-Designer_Hyperlink":"超级链接","ConditionB-is_less_than_or_equal_to":"小于或等于","Chart_Time_Interval":"间隔时间","FR-Base-EX-IP_Address_Overflow":"IP地址数量超过限制","FS-Generic-Simple_User":"用户","BindColumn-The_Conditions_of_FatherCell":"父格条件","ConditionB-Operator":"操作符","Form-List":"列表","FS-BakRestore_Backuping":"正在备份...","Printer-Are_you_sure_to_delete_the_selected_printer_group":"确定删除选中打印机组","Or-you":"或者您","User_Already_Logged":"用户已在别处登录","FR-Chart-Style_GradientHighlight":"渐变高光","Printer-Save_Current_Work":"是否保存现有工作","Chart-Map_DrawCircle":"画圆","ReportWebAttr-General_Css":"一般自定义样式表","Custom_Button_Message":"自定义button具体使用方法请参考帮助文档","FR-Engine-Write_Stash":"暂存","FR-Designer_Finish_Export":"导出完毕","FS-User-Depart_Post_Together":"部门和职位必须同时选择或者不选","FS-Generic-Simple_Print":"打印","I-AreaStyle_PercentStack3D":"三维百分比堆积面积图","Plugin-ChartF_TopValue":"顶边值","FR-Chart-Server_disconnected":"连接已断开","FR-Engine_Event_beforeflashprint":"Flash打印前","Encoding_Type":"编码类型","Server-version-tip":"您当前连接的服务器版本低于您使用的设计器版本号，继续连接，您编辑的一些属性可能无法有效保存。  假如需要连接请将您的设计器版本与服务器版本保持一致","Chart-Map_DeleteLast":"删除上一个画的点","Plugin-ChartF_Preview_Ring_Gauge":"预览百分比圆环仪表盘","FR-Chart_TrendLine":"趋势线","FR-Engine_Combination":"组合","FS-Schedule_Edit_Para_Group":"编辑组合","FR-Engine_RP_Operator":"操作人员","FR-Engine_Error-Tip":"非常抱歉，出错啦。","Re-not-start-in-jar":"您使用的版本不是通过JAR包启动.","Language":"语言","Utils-Design-Action_Cancel":"取消","FS-System-Old_New_Pwd_Cannot_Same":"新密码与原密码不能相同","FS-Schedule-Execute_Condition_Custom_Class":"自定义类判断","FS-System-Max_Shared_Datasets":"共享数据集最大个数","FS-BakRestore_Backup_And_Cleanup":"清理备份","DisplayUnit":"显示单位","INFO-Current_Role":"当前角色","BindColumn-Top_N":"前N个","M-Popup_ChartData":"图表数据","FS-Plugin_restoreTo":"还原到","FR-Chart-Style_Fresh":"清新","Hyperlink-Des1":"利用超级链接可以指向另一张报表，在B\\S环境下，动态实现数据的钻取效果。","BackgroundTexture-Canvas":"画布","Password_Has_Been_Reset_To":"该用户的密码已经重置为","ChartF-TheActualEnd":"实际结束","ReportServerP-PDF2-INFO":"仅在LINUX/UNIX下未安装中文字体时使用","FS-Schedule_Attach_Store":"附件存档","FS-Generic-Simple_Sun":"日","FR-Base_Sche_Minute":"分","Set_Role_Authorized":"角色权限配置","FR-Designer_Gradation":"层次","Plugin-ChartF_Add":"添加","Fri":"五","Multi_nam_formula":"  数据集名:                       数据集条件:","FS-Web-Error_Cannot_Delete_In_War_Or_Cluster":"War包或集成部署下不支持此功能.","Summary_Method":"汇总方式","FS-Monitor-Visitor_User":"访问用户","ExpandD-Left_Father_Cell":"左父格","Plugin-Memory_Alarm_Message":"警报提示","FS-Plugin-Store_Disabled":"","FR-Engine-Not_In_List":"不在列表中","FR-Engine_sure_to_delete":"确认删除","FR-Plugin-Install_Dependence_Success":"依赖插件安装成功","FS-Schedule_Template_Parameter":"模板参数","FS-Schedule-Restart_Time_Gap_Must_Be_Number":"重启时间间隔必须为数字","CellWrite-Page_Before_Row":"行前分页","Institution":"机构部门","Chart_Needle_Max_Range":"指针活动范围","FS-Plugin_Picture":"图片控件","Continuum":"相邻连续","FS-Module-Look_And_Feel":"外观配置","FR-Server-Design_template_unopened":"无法打开模版","RP_Deliver":"分发","FR-Designer_WidgetDisplyPosition":"控件显示位置","FS-Setting-Simple_Style":"平台样式","Get_Lock":"加锁","Taiwan":"台湾省","Mail-Contacts":"通讯录","FR-Engine_Native_Print_Loading_Tip":"正在启动本地打印软件，请稍后...","Widget-NeedSubmit":"需要提交","Plugin-Memory_Alarm_Operation_For_High_Memory":"高内存处理","FS-Schedule_Unable_to_Delete_Regular_Cal":"无法删除定时计算！","SpecifiedG-Leave_in_their_own_groups":"留在各自的组内","Advanced":"高级","Docking-Pin":"固定","Right":"右","Plugin-Chart_Descriptor":"描述","FS-Generic-Simple_Every":"每","I-HBarStyle_3DStack":"三维堆积条形图","tick-and-value":"刻度和配色","FS-System-Platform_Messages":"消息","Server-Always_Reload_Template":"总是重新读取模板","FR-Plugin_Error_HasLowerPluginWhenInstall":"已经安装了低版本的插件","Classpath-Add_Folder_to_Classpath":"添加文件夹到Classpath","Plugin-ChartF_AxisTop":"上方","FS-Setting-Login_URL":"设置登录网页","Datasource-Column_Name":"列名","Plugin-ChartF_RangeNum":"区间数值","Chart-Map_ContinuePolygon":"点击以继续绘制","Utils-Check_Data_Consistency":"数据一致性校验","Title_Name":"标题名","Cannot_Set_Duplicate_Role_Name":"不能设置重复的角色名","Chart-Link_Cell":"图表超链-联动单元格","Superio":"上级","FR-Engine_ReportServerP-PDF":"PDF","Chart-Black_White":"黑底白字","Chart_Step_Name":"步骤名","Plugin-ChartF_Tooltip":"数据点提示","trigger":"触发","CellWrite-Hide_Column_Row":"隐藏行列","FS-System-Date_Time":"时间","FS-Monitor-Memory_Size":"内存大小","FR-Engine_Total_Page_Number_X":"总计：{R1}页","FR-Chart-Type_Meter":"仪表盘","FS-Generic-Simple_August":"八月","Utils-Group_Detail":"","FS-Admin-Remember_Username_Password":"请牢记您的用户名和密码","FS_Task_End":"内截止","Plugin-ChartF_ShowAllSeries":"显示所有系列","ChartData-Tooltip":"数据点提示","FR-Engine_Page":"页面","Schedule-Please_select_a_directory":"请选择一个目录","Chart-Bubble_Value":"气泡值","FR-Designer_Root":"根节点","FS-Monitor-Error_When_Read_Template":"读取模板时发生错误，模板文件有损坏，可能是XML文件开始/结束标签不匹配","Using_Global_Offset":"使用全局偏移设置","DashBoard-OpenRecentReport":"打开最近的文件","FR-Engine_RP_Execute_Time":"执行时间","Hyperlink-Configuration_Of_New_Window":"新窗口配置信息","FR-Chart-Drill_Setting":"下层钻取设置","I_Want_To_Set_Single":"为该模板单独设置","ModifiedColumnName":"修改后列名","BindColumn-Increase":"增加","Verify_Error":"校验出错","Build":"生成","FR-Engine_Short-May":"五","FS-System-Send_Verification_Code_Both":"无法验证身份：平台未开启短信服务和设置服务器邮箱，无法接收验证消息。您可联系管理员帮助重置密码","can_not_include_underline":"不能包含\"_\"","Plugin-ChartF_AxisBottom":"下方","Xizang":"西藏自治区","ReportServerP-Import_Css":"引用Css","FS-Generic-HF_First_Page":"首页","Plugin-ChartF_Word_Name_Index":"词序号","Records":"条记录","Edit-Browser-List":"编辑浏览器列表","FR-Plugin-Store_Expired":"过期","FS-System-Verification_Code_Timeout":"验证码已失效","FR-Engine_Short-Mar":"三","InterfaceStyle":"风格","Layer-Build":"分层构建","FS-Schedule-Enter_Correct_Extra_Run_Times":"请输入正确的额外执行次数","FS-Schedule_Copy_Task":"复制任务","FR-Plugin-Store_Jar":"jar包","Edit-Column_Count":"列数","StyleAlignment-The_value_of_rotation_must_between_-90_and_90_degrees":"旋转值必须在负90度到90度","ExpandD-Vertical_Extendable":"纵向可伸展","CellWrite-Page_After_Row":"行后分页","NS_LayerReport_adFormula":"错误代码:11100006 行式引擎不支持层次坐标","Chart_PIE_TYPE":"半圆形","Plugin-ChartF_Preview_WordCloud":"预览词云","Format-Error":"输入的值格式不正确","M_Help-Tutorial":"学习教程","Visibility":"可见性","FR-Engine_SetStartTime":"设定开始时间","FS-Privilege-Department_or_Roles":"可管理部门/角色","ChartF-Data-Resource":"数据来源","FS-System-Email_Encrypt_TLS":"TLS 加密","Chart-Stock_Low":"盘低","ChartF-No_Style":"没有样式","FR-Engine_Tooltips":"提示","FS-System-Last_Logined_Info_Popup":"上次登录信息","FR-Chart-Map_Lanzhou":"兰州市","Utils-Report_Footer":"报表脚","Plugin-ChartF_Level_Name":"层级名","FS-Schedule_Mount_Name_Not_NULL":"挂载名称不能为空!","LayerPageReport_WN_RepeatCR":"按页运算引擎暂只支持重复标题行列","Plugin-Memory_Memory_Release":"释放内存","FR-Base-Time_Milliseconds":"毫秒","Chart_AxisArrow_IsVisible":"显示坐标轴箭头","M_Edit-DeleteRow":"删除光标所在行","FR-Plugin_Error_PluginAlreadyInstalled":"插件已经安装","ReportServer-Frozen_Column":"冻结列","FS-Setting-Logo_Upload_ToolTip":"提示：请上传 Logo 图片","Chart-Layout_And_Style":"布局及风格","M_Insert-BindValue":"绑定数值(B)","Performance-plugin_datasourcepool_name":"并行数据集取数","FS-Report-Edit_File":"编辑文件","FR-Designer-Dependence_Not_Found":"","FS-Schedule-Notification_Email":"邮件通知","FR-Basic_Clear":"清除","ChartF-Series":"系列","Next_Year":"下一年","FS-Report-Devices_Tablet":"平板","Chart-USe_NewLine":"换行符","Chart_Out_Pie":"饼图外","FR-Chart-Text_Rotation":"旋转","Widget-Widget_Css_Path":"CSS样式表路径","select_data_set":"请选择需要合并的数据集","SQLWizard-join":"联合","Staff":"人员","FR-Designer_Show_in_Containing_Folder":"打开所在文件夹","FR-Engine_Export_Excel_Page":"分页导出","FR-Engine-Tab_Layout_Height":"高度","FR-Chart-Type_Stacked":"堆积","ConditionB-is_not_empty":"不为空","Parameter-Current":"当前数值","Unknown":"未知","BorderLayout-Constraints":"位置","RP_Email":"邮件提醒","RWA-Help":"设置未修改不更新后，填报预览报表，记录所在单元格没有被编辑修改，则此记录不会进行更新；\n在大数据量记录查询并回填情况下，启用该设置，可以提高填报提交性能。","ChartF-Series_Index":"样式序列","FS-Schedule_Add_Result_Link_In_Text":"正文加上结果链接","All_Border_Line":"所有框线","Chart_Plan":"计划","FS-System_Backup_Restore":"","FS-Admin-Account_Setting":"账号设置","Chart-IsRoundBorder":"圆角边框","Chart_Field_Name":"字段名","Background":"背景","FR-Engine_Title":"标题","FS-Generic-Attenchments_By_Receiver":"根据收件人不同生成不同附件","FS-System-Email_Send_Error":"请检查邮件服务器配置，确认SMTP邮件服务器以及用户名密码和收件人地址填写正确，并确保网络畅通。","FR-Chart-Map_ImagePoint":"图片标记","FS-Schedule-Reporting_Action":"定时填报","Short-May":"五","FS-Plugin_UpdateOnline_Alternative":"替代方案","FR-Plugin_Dependence-Not-Found":"","FR-Engine_PagePreview":"分页预览","Short-Mar":"三","Plugin-ChartF_ToolBar":"工具栏","newNode":"新增节点","FS-SMS_Signature_Message_Platform":"信息平台","del_schedule_task":"删除定时任务","Not_In_List":"值不在下拉列表内","FR-Plugin-Store_Mobile_Terminal":"移动端","FR-Engine_Data-upload":"数据多级上报","PageSetup-Page_Order":"打印顺序","CellWrite-InsertRow_Policy":"插入行策略","SingleNew":"新","RP_Add_Note":"添加备注","FS-System-Dialog_Ok":"确定","Chart-Change_Bar_SIze":"将柱形图大小缩放为","FR-Engine_No_Priviledege":"没有权限","CellWrite-Support_Smart_Delete":"支持智能删除行","M-Insert":"插入","FR-Engine_Operating-Parameters":"不同操作的参数。","FS-Generic-Simple_Receiver":"收件人","FS-Reg-Support_Or_Not":"是否支持","FR-Engine_New":"新建","FR-Designer-Plugin_Will_Be_Delete":"插件将被删除，需重启设计器及服务器，服务器需手动重启","Plugin-ChartF_InnerPaneBackground":"内底盘背景","FR-Designer_Edit_String_To_Formula":"是否将字符串编辑为公式","Host_Name":"主机名","Parameter-Design_DES":"没有参数界面,是否需要使用默认的","FR-Engine_SessionID":"sessionID是当前访问模板的会话标识参数。","FR-Plugin_Error_JustConvertToNewStructure":"该插件在lib中存在遗留jar包，无法进行热更新，请重启后更新","Report-Write_Attributes":"报表填报属性","After":"结束","Out_Thick_Border_Line":"粗匣框线","Plugin-ChartF_PercentStacked":"百分比堆积","FS-PSqlInj-SC_Edit_Title":"字符管理","Applet_Print":"Applet打印","FS-Generic-Simple_Management":"管理","Need_Max_Value":"需要最大值","FS-Generic-Mobile_Pad":"平板","FS-Generic-Simple_Moment":"时刻","Support_QQ":"技术QQ","FS-Setting-Customize_Login_Style":"登录风格","FS-System-Report_Visit_Detail":"报表访问明细","Datasource-Other_Attributes":"其他属性","FR-Plugin-Store_Category":"类别","FS-Schedule_Formula_Not_Supported":"暂不支持公式","FS-System-Phone_Cannot_Equal_With_Old":"该手机已与账号绑定","FS-BakRestore_Fail":"失败","Chart-Use_Items":"项目","INFO-End_Reading_XML":"结束XML读取","FS-Chinese-Not-Null":"请输入英文字符","FS-Generic-Simple_Thu":"四","Plugin-ChartF_Legend_Gradual":"渐变色","After_Changed_Some_Attributes_Are_Different":"转换后报表的某些属性会发生改变，是否继续","Report-Design-Ruler-Units":"报表设计标尺单位","FR-Engine_RP_Leapfrog_Back_Tip":"只有直线流程，才能使用越级回退功能，且每个节点只有一个用户或一个角色","Poly-Block_Attr":"陈瑜","FR-Engine_NS_register_sense":"错误代码:11200005 加密狗读取失败","Save_Definition":"保存定义","TaskName":"任务名称","Plugin-ChartF_Start_And_End":"起始点和到达点","FR-Engine_Please_Select_Report_Path":"请选择报表路径","FS-Report-Create_Home_Page_Dialog_Label_width":"58","Border":"边框","FS-Reg-Version":"版本号：","Implement-Description":"没有实现接口SubmitJob","schedule_email_notice_tip_first":"邮件属性配置可在","FR-Plugin_Error_CycleDependencyFound":"发现循环依赖","Import_Failed":"导入失败","RP_AllProcesses":"所有流程","FR-Engine-Import_Failed":"导入失败","FS-Schedule-Output_File_Name":"文件名称","SpecifiedG-Force_Group":"强制分组","Plugin-ChartF-Tooltip":"提示","WaterMark":"水印","FR-Plugin-Update_Log":"更新日志","FR-Engine_Inform_Appending":"　","FR-Designer_Foreground":"前景","Plugin-ChartF_Layer_Custom":"自定义tileLayer","ExpandD-Sort_After_Expand":"扩展后","EX-Can_not_create_WorkBook_from_Reportlets":"无法从网络报表集生成工作簿","Schedule-Index":"编号","Plugin-ChartF_Large_Data":"大数据","Privilege-Select_Organizations":"选择组织","FS-System-Edit_Personal_Username":"修改用户名","Plugin-Chart_Data_Sheet":"数据表","Docking-Floating_Mode":"浮动模式","FR-Engine_Tabpane_Position_Right":"右侧","feedback_info":"欢迎您提出宝贵的意见和建议，请将信息填写得尽量详细，我们会尽快联系您","HJS-Print_Successfully":"打印成功","FS-Generic-Page_Total":"共","RP_Remove_Process":"删除流程","ExcelImport_Write_Match_Error_Info":"匹配模板失败，请确认文件格式是否与模板一致！","CellWrite-Print_Background":"打印/导出单元格背景","FR-Engine_Exporting":"正在导出","FS-Schedule-Template_Name_Not_Null":"模板名称不能为空","FR-Plugin-Store_My_FR_Plugins":"我的插件","Plugin-ChartF_Map_Point":"地图点","Max-Mem-Row-Count":"缓存至磁盘当记录数大于","ServerM-SapSync_Manager":"SAP数据同步","Chart_Data_Sheet":"数据表","Server_Address":"服务器地址","Privilege-Invalid_User_Or_Password":"用户名或密码错误","Plugin-ChartF_Custom_Width":"自定义背景宽度","FS-Privilege-Department_All":"所有部门","FR-Chart-Use_Percent":"百分比","FR-Engine_Equal_Area_Adaptivity":"等面积自适应","FS-System-Forget_Password_Set":"忘记密码设置","FR-Plugin_Error_NeedDealWithPluginDependency":"需要安装或更新依赖或的插件","Datasource-Add_TableData":"添加数据集","Three_Rows_Of_Three_Grid":"三行三列的格子","GoogleMap":"谷歌地图","FR-Engine-Data_Type":"数据类型","Plugin-ChartF_Preview_Percent_Stack_Column":"预览百分比堆积柱形图","FS-Schedule-Export_Settings":"输出设置","FS-Schedule-Execute_Frequency":"执行频率","NS_export_excelCellBg":"错误代码:11100012 导出Excel单元格背景只支持纯色","FS-Report-Parameter_Binding":"参数绑定","Date_Attention":"格式必须为MM/dd/yyyy","List-Filter":"列表筛选","Get":"获取","LayerPageReport_WN_Float":"按页运算引擎暂不支持悬浮元素","FR-Basic_Fail_Location":"失败","Chart-LatLng_Order":"经纬度顺序","Plugin-ChartF_NewBubble_LargerData":"大数据气泡图","FS-Setting-Customize_Login":"自定义登录页","FR-Engine-Type_Date":"日期","FR-Engine_RP_Report":"上报","Description":"描述","FR-Base_TurnOn":"开启","FS-Reg-Simple_Register_Failed":"注册失败","Config_Servlet":"配置远程服务器","FR-Plugin-Store_Not_Null":"用户名或密码不能为空","Re-mac-match":"Mac地址匹配","Xinjiang":"新疆维吾尔自治区","Meter_More":"多指针仪表盘","Plugin-ChartF_BottomValue":"底边值","FR-Engine_Month":"月","FR-Engine-Loading_Data":"正在加载数据","FR-Chart_Map_Second_Title":"第二标题","Chart-Out_Pie":"饼图外","FRFont-plain":"常规","FS-Monitor-Visit_Template":"模板名称","SQLWizard-add_condition":"增加条件","FS-Schedule_File_Process":"文件处理","FR-Engine_ConditionB-is_greater_than_or_equal_to":"大于或等于","FS-Failed-Version-Reason":"失败原因：注册版本号与本机不匹配","FS-Module-Privilege_Manager":"权限管理","PageSetup-Page":"页面","FR-Engine-Restart_Browser_After_Installation":"安装之后请重启浏览器","FailPass_ImproveYourVersion":"当前版本无此功能，请使用高级版本。","FR-Designer-Tree_Width":"宽度","RP_Deal_With_It_As_Soon_As_Possible":"请尽快处理","FR.Chart-Series_Name":"系列","Log_Declare_Head_Web_Write":"页面写出中","Plugin-Chart_Supported_Format":"支持格式:.gif/.jpg/.png/.bmp","Pagination":"分页","FR-Chart-Shape_Line":"折线","Chart_Polynomial":"多项式拟合","Chart-Step_Name":"步骤","FS-Mobile_User_Limit_Tip_Left":"当前许可文件仅支持","FS-System_Finish":"完成","Not_Logged_In":"未登录","FR-Base_Short_Oct":"十","FR-Designer_Enter-New-FileName":"请输入新的文件名","Chart_Axis_AutoCount":"自动计算","FR-Designer-Widget-Style_Shadow":"阴影","Web_Apply":"WEB应用","FR-Engine-Tab_Text_Horizontal":"横排","FR-WriteEnhance_please_select_a_cell":"请选择一个单元格","FR-Engine-No_Element_Need_Append":"没有元素需要插入于","ConditionB-is_empty":"为空","FR-Base-Error_Statement_Is":"错误的描述为","FS-Register-Status":"注册状态","FS-Monitor-Memory_Low":"服务器内存太小","Plugin-ChartF_Change_Style":"切换方式","Content":"内容","Chart_Stock_Error_Data_Order":"错误数据!","Plugin-ChartF_Start_Task_ID":"起始任务id","FR-Designer_Error":"错误","FR-Chart-World_Map":"世界地图","Chart-AddMainGrid":"添加主要网格线","FS-Reg-Bind_Info":"详细绑定信息","FR-Engine_Event_afterflashprint":"Flash打印后","Plugin-ChartF_Start":"起点","Backup":"备份","FR-Engine_Week":"周","Chart-Series_Value":"值","Plugin-ChartF_EndAngle":"终结角度","FS-Schedule_Message_Notification":"短信通知","FR-Plugin-Store_Free":"免费","FS-Schedule_Auto_Match":"自动匹配","paper":"纸张","HF-Number_of_Page":"总页数","FR-Engine_Show_in_Containing_Folder":"打开所在文件夹","TrueRunTimes":"正确的运行次数","FS-Reg-Warn-Msg":"未注册版本同时可访问模板IP个数限制为2个！","CloseAuthConfirm":"是否取消分级权限控制","FS-System-Edit_Personal_Phone":"修改手机","Plugin-ChartF_Common":"通用","RP_Execute_Day":"执行日","BackgroundTexture-BlueTissuePaper":"蓝色砂纸","ChartF-EndOfTheProject":"计划结束","Chart-Map_SimpelShape":"'松开鼠标完成绘制'","FR-Engine_Left":"左","Plugin-ChartF_Legend_Form":"形态","BindColumn-Setting_Data":"设置数据","WF-Start_Node":"开始节点","FR-Engine_Func-AI":"智能运维","FS-User-Reset_Password":"重置密码","FR-Engine_RP_To_Report":"待上报","Save_Path":"保存路径","FS-Login_SMS_Verfication_Sure_Bind":"已绑定手机号","M_Insert-Chart":"插入图表","ServerM-Workflow_Manager":"工作流管理","FR-Chart-Gannt_PlanEndTime":"计划结束时间","FS-BakRestore_Rename_Success":"重命名成功","Parameters_name":"参数名称","FS-Schedule_Platform":"平台","String":"字符串","Participants":"参与者","Refresh_Database":"刷新数据库","FS-PSqlInj-Custom_Special_Char":"自定义字符","ChartF-FirstStartAngle":"第一扇区起始角度","Plugin-ChartF_Heat_Map_Radius":"渲染半径","FR-Engine_Parameter_Setting":"参数设置","WF-End_Node":"结束节点","ChartF_Stock_High":"盘高","Plugin-ChartF_toImage":"导出","Thick_Bottom_Border_Line":"粗底框线","FR-Engine_Task_List_To_Choose":"可选任务列表","Re-appname-in-lic":"lic中的AppName","Edit_Position":"编辑职位","Chart-Time_Interval":"时间间隔","M_Close_Current":"关闭","Privilege-Can_Not_Find_The_User_With_The_Name":"找不到用户名","Set_CallBefore_Function":"设置前置函数","Chart_Alert_Left":"居左","FR-Designer_Form-ComboCheckBox":"下拉复选框","FS-Upload-Lic-File":"上传lic文件","FS-Schedule_Link":"定时任务结果链接","FR-Engine_No_Back_Target":"no back target","Poly-Report_Block":"报表类型聚合块","Registration-Please_Purchase":"报表系统尚未注册, 请购买","Set_Column_Title_Start":"设置重复标题列","FS-Msg-No_Message":"没有消息","FS-System-Phone_Wrong_Format":"手机格式不正确","Submit_Style":"提交方式","FS-Generic-Simple_Label":"标签","FS-Auth-AppName":"认证工程名：","Background-Click":"鼠标点击背景","FR-Engine_Event_beforeimportexcel":"Excel导入前","FR-Chart-Gap_Category":"分类间隔","FR-Engine-JavaScript-Commit_to_Database":"提交入库","FR-Engine-PageSetup_Paper_Size":"纸张大小","FS-Generic-PDF_Print":"PDF打印","ReportColumns-Columns_to":"分栏成","FR-Engine_RP_Sure_to_delete_process":"确认删除","Chart-Map_EditLayers":"编辑层级","Form-RadioGroup":"单选按钮组","ParameterD-Custom_Parameter":"自定义参数","FS-Generic-Simple_Formula":"公式","FS-Setting-Simple_Title":"平台标题","Shanxi":"山西省","FR-Engine_This_Name_Has_Exist":"该名称已存在","Plugin-ChartF_Background_Area":"背景区域","Plugin-ChartF_Process":"进度","Re-first-mac":"服务器首个mac地址","schedule_email_notice_tip_third":"里进行配置与查看。","FR-Engine_Data_Rollback_Failed":"数据回滚失败","Path":"路径","max_undo_limit":"最大撤销次数","FS-Generic-WF_Name":"名称","Chart-Chart_Name":"图表","Plugin-ChartF_Preview_Area_Drill_Map":"预览区域钻取地图","FR-Engine_Delete_Column_Row":"删除列行","Choose-Key-point":"选择关键节点","Chart-Use_Auto":"自动","Unit_Billion":"十亿","FS-Plugin_UpdateOnline_Upgrade_To":"升级至","Interface":"接口","NotAllow":"不合法","fs_initDragBar_rect_tip":"表单任务:此任务可以设置报表或者表单用于展现所需数据,单击编辑属性，双击可以改名。","Email":"邮件","ChartF-Category_Axis_Range":"分类轴区域","FS-Schedule-Execute_By_Frequency":"明细频率设置","FS-BakRestore_One_Day_Before":"一天前","Plugin-ChartF_Radar_Y_Axis":"极径轴","FS-Schedule_Copy":"副本","FS-Plugin_UpdateOnline_Network_Error":"网络连接失败，请访问文档****下载jar包，手动替换后重启完成版本升级","Polyblock-Fixed_Width":"固定聚合块宽度","ServerM-Widget_Manager":"控件管理","Form-Single_quote":"单引号","FS-Plugin-Name":"插件名称","ALL_WORK":"所有事务","ParameterD-Rename_parameter":"重命名参数","ChartF-Data-Field_Name_AS_Series":"字段名作为图例项(系列)名称","FS-Ecp_New_Password":"新密码","EXPORT_PDF_EMBED":"导出PDF是否内嵌显示","Protected":"保护","Sche-Tuesday":"星期二","Printer-New_Printer_Group":"新建打印机组","FS_Table_Share":"分享","Plugin-ChartF_Preview_Slot_Gauge":"预览百分比刻度槽型仪表盘","Layout_Constraints":"位置和大小","WLayout-Card-ToolTip":"卡片式布局，该布局容器中可以添加多个其它组件。","FS-Generic-Already_Pause":"已暂停","FR-Engine_Excel-Export":"导出Excel","CheckBox":"复选框","FR-Engine_ConditionB-Add_bracket":"添加括号","getDataFromCache":"从共享数据集缓存中获取数据","FR-Engine_Not_Imported":"尚未导入","FR-Base_Get_Machine_Info_Prompt":"提示代码：12400001 使用{R1}获取机器信息来验证是否注册","FS-Module-Access_Info":"访问统计","Datasource-Datasoure_File":"数据源文件","Polybolck":"聚合块","FS-System-Mail_Host(SMTP)":"邮件服务器(SMTP)","PageSetup-Page_Setup":"页面设置","Plugin-ChartF_Preview_Large_Scatter":"预览大数据散点图","Chart-Link_Form":"当前决策报表对象","FS-System-Config_Backup_Config":"配置备份","Plugin-Memory_Alarm_Mode_Production":"生产模式","FS-Report-Using_Templates":"使用模板","This_product_is_licensed_to":"本软件使用权属于","Plugin-ChartF_AlertLine":"警戒线","Locked":"（已锁定）","WF-Description":"描述","undo":"撤销","FS-Plugin_updateOnline_RestartServer":"服务器重启后生效","FS-Plugin_UpdateOnline_Complete":"完成","FS-Mobile-Device_Bind_Close":"","FR-Engine_Param_Template_Already_Existed":"参数组合名称已存在","FR-Engine_Task_Name_Repeat":"任务名重复","FS-Error-Port-Msg":"\"请输入端口号\"","Des-Private_Data_Source":"所有定义的这些数据源,将保存在Report报表对象里面,只供当前报表使用","FS-Plugin-Store_App":"","Cell_Data":"单元格数据","ChartF-SeperateType":"独立型","Down":"下","Add-all":"全部添加","Plugin-ChartF_Map_Area_And_Point":"地图边界/点","ChartF-Custom_the_value_range":"自定义值范围","FS-User-Edit_Department":"编辑部门","FR-Designer-Widget-Style_Render_Style":"渲染风格","Info":"信息","FS-Monitor-Memory_Warning":"内存预警","FS-Schedule_Multiple_SMS_Receiver_Tip":"提示：支持填写多个号码，以 , 隔开","FR-Base_Ante_Meridian":"上午","FR-Engine-Err-The_Value_Must_Be_Integer":"必须为整数","FS-User-Personnel_Management":"人员管理","Username":"用户名","Chart_ValueIntPercent":"值所占比率","FR-Engine_ECP_error_pwd":"密码错误","ChartF-Tick_Label_Color":"标签颜色","HTML-Write_Content_Save_Failed":"填写内容保存失败","FS-Schedule_Schedule_Cycle":"调度周期","FS-Failed-MAC-Reason":"失败原因：注册MAC地址与本机不匹配","Forum":"论坛","FS-Failed-Connect-Reason":"失败原因","AllRotationType":"旋转型","FR-Engine_Excel_uc_to_location":"不定行导入失败, 直接位置匹配","Chart-Layout_Left":"左侧","Plugin-ChartF_NewGantt":"甘特图（新特性）","FR-Engine_Tabpane_Position_Top":"顶部","LayerPageReport_PageQuery":"分页查询","Utils-Right_to_Left":"从右到左","PageSetup-Finis_Start_Column":"重复结尾列","FR-Chart-Delimiter_Symbol":"分隔符","Not_Set_Verify_Attribute":"没有设置校验属性","FR-Chart-TimeUnit_Minute":"分钟","FR-Plugin_Error_UpdateParameterError":"升级指定的参数错误","ChartF-Edit_Background":"编辑背景","FS-System-Email_Cannot_Equal_With_Old":"该邮箱已与账号绑定","Plugin-Memory_Alarm_Title_Big_Temp":"大模板限制","FS-Button_OK":"知道了","FR-Designer_Text":"文本","Level_Setting":"级别设置","FR-Engine_RP_Edit_Process":"编辑流程","FR-Chart-Map_Pie":"饼图地图","HangzhouCity":"杭州市","FR-Engine_Delimiter":",","M_Window-Title_Vertical":"垂直平铺(V)","Select_Fields":"选择字段","FS-Generic-Parameter_Double":"双精度型","FR-Plugin-Store_Probation":"试用:","Support-Auto_Complete_Shortcut":"自动补全快捷键","Plugin-ChartF_ShowAllLevel":"显示所有层级","Plugin-ChartF_Preview_Force_Bubble":"预览力学气泡图","Plugin-ChartF_NewArea":"面积图（新特性）","FS-Report-Need_Input_Name":"请输入名称","Body-Background":"主体背景","FR-Designer_Row-Axis":"行轴","Hyperlink-Form_link":"当前决策报表对象","local":"本地","FS-Admin-Password_Modify":"密码修改","FS-Monitor-Simple_Problem":"问题","M_Insert-Float":"悬浮元素","FR-Plugin-Plug-trial_Expired":"插件已经超过试用期，插件ID是：","ErrorHandlerTemplate":"出错模板定义","ECP_decode_failed":"解密失败, 请联系管理员检查密码文件是否存在","Table_name":"表的名称","FR-Basic_File_Should_Select_Excel_File":"需要选择一个Excel文件来源","Chart_Title_Area":"标题区","FR-Chart-Bubble_Van":"气泡图(新特性)","WF-Communion_Task_Node":"交互任务节点","Column-Axis":"列轴","Plugin-ChartF_MaxProportion":"最大占比","FR-BaseFile-Cancel":"取消","Chart-Unit_Hundred":"百","DBCP_MIN_EVICTABLE_IDLE_TIMEMILLIS":"保持空闲最小时间值","FR-Plugin-Designer_Submit_ServerPath":"上传至服务器","M-New_ChartBook":"新建图表","FS-Schedule_None":"无","FR-Designer_ConditionB-Operator":"操作符","FS-User-Simple_Staff":"人员","Transition":"分支","Widget-Report_Widget":"微型报表","FR-Plugin-Designer_File_Path":"文件路径:","Page_Layout":"页面布局","FS-System-Send_Verification_Code_Email":"无法验证身份：平台未设置服务器邮箱，无法接收验证消息。您可联系管理员帮助重置密码","FR-Chart-Map_Aomenbandao":"澳门","Export-Offline-Html":"输出离线html报表","FR-Designer-Min_Width":"最小宽度","Layer_Authentication":"验证","FR-Base_Sche_Tuesday":"星期二","FR-Plugin_API-Need-Update":"插件依赖的API有更新.","Image-Specified_Size":"指定尺寸","Column_Does_Not_Exsit":"列不存在","FR-Engine_ES_Role_Instruction1":"请配置角色权限，编辑角色请登录数据决策系统","Chart_AxisAlignZeroValueLine":"和值轴的0刻度线对齐","ChooseContentByUser":"根据用户选择不同的内容","FS-Setting-Preset_Theme_2":"典雅","FR-Base_April":"四月","FR-Chart-Map_Gansu":"甘肃","FS-Setting-Preset_Theme_1":"海水","FS-Setting-Preset_Theme_4":"薄荷","FS-Setting-Preset_Theme_3":"夜空","FR-Plugin-Dependence_Service_Not_Found":"未找到依赖的服务文件","ReportColumns-Columns_Style_vertically":"列分栏样式","FS-Report-BI_Analysis":"BI分析","ConditionB-null":"为空","ExpandD-Insert_Cell":"插入单元格","Plugin-ChartF_CurveLine":"曲线","BiasD-From-upper_left_to_lower_right":"从左上到右下发散","FR-Designer-FRFont_Bold":"加粗","FS-Privilege-No_Schedule_Result_Privilege":"错误代码：11300011 结果报表无权限访问","Verify-Verify_Success":"校验成功","April":"四月","FS-User-Ldap_Referral":"转诊","FR-Engine_RP_Pass_After_All_Operations":"该节点所有操作人员完成后流转","FR-Engine_RP_Email":"邮件提醒","Not_Appendable":"不可扩展","FS-Schedule_Mount_Name":"挂载名称","Preview-Assign_Margin":"调整边距","Skip":"跳过","FR-Engine_RP_Start_Node":"开始节点：","LIC-Support_Dynamic_Meter_Chart":"","FS-System-Single_Login_Failed":"登录失败提示：您的账号已在其他平台登录，如非本人操作，建议立刻","Stacked_Bar_Chart":"堆积柱形图","FR-Designer-Plugin_Delete":"删除","Visit":"访问","FR-Base_Short_Nov":"十一","FR-Engine_Unregistered":"未注册","redo":"重做","Chart_Power":"幂拟合","FS-Generic-Parameter_Formula":"公式","FS-Generic-Upload_File_Tip":"提示：上传图片尺寸请参照移动设备分辨率","HotHyperlink-Des1":"利用热点链接可以指向另一张报表，在B\\S环境下，动态实现图表的数据数据的钻取效果。","Format":"格式","PageSetup-Portrait":"纵向","FS-Local-Machine-Code":"本机机器码：","Old-Style":"复古","FS-Monitor-Model_Process":"功能进度","FS-System-Old_Pwd_Wrong":"原密码不正确","FR-Plugin_Error_NoPluginToUpdate":"没有找到对应的插件","FS-BakRestore_Backup_Every":"每隔","Datasource-New_Charset":"新编码","FS-System-Verification_Email_Text":"您最近申请了邮箱验证，您的验证码如下","FR-Designer-Plugin_Active":"启用","FS-Msg-New_Message":"新消息","Env_Des":"如果登录环境中的报表工程启用了权限,用户名和密码的填写必须对应登陆环境的用户和密码。","Series_Use_Default":"系列默认使用","FS-Schedule-Start_Policy_At_Time":"设定开始时间","Plugin-ChartF_Preview_Custom_Map":"预览组合地图","Muiti_In":"多层钻取","Utils_UnDelete_Row":"撤销删除行","FS-BakRestore_Auto_Backup":"自动备份","FR-Chart-Shape_Fill":"填充","Return-Value":"返回值","FS-System-Last_Logined_Info_Set":"上次登录信息提示设置","FR-Plugin-Store_Commodity_Description":"商品|版本号|说明","FS-Generic-Simple_Data_Transferring":"正在迁移数据","HaikouCity":"海口市","FS-Setting-Logo_Style":"Logo 样式","Chart-Unit_Thousand":"千","ThereIs_No_keyword_Named":"没有查询到关键字为","Tianjin":"天津","ChartF-High-Low-Close":"盘高-盘低-收盘","JavaScript-Form_Submit":"表单提交","Follow":"附属","Chart-Data":"数据","FS-Plugin-Store_BBS_Account_Login":"","FR-Import-Export_Word":"Word格式","FR-Plugin-Designer_File_Download":"文件下载","FR-Designer_Show_Blank_Column":"补充空白列","fs_process_user_pane_tip":"为当前活动选择可执行人员","LatLng":"经纬度","ColumnTo":"列至第","Registration-Error_Registration_Information":"错误的注册信息","FS-Generic-Simple_Edit":"编辑","FR-Engine-Tab_Layout_Widget_Size":"控件大小","Delete_Column":"删除列","Plugin-ChartF_Image_Map_Data":"自定义图片","FR-Chart-Map_Single":"单层地图","FS-Plugin-Store_Forgot_Password":"","ExpandD-Fill_Cell":"覆盖单元格","Plugin-ChartF_Plus_Color":"","ChartF-Interval_Color":"间隔颜色","FR-Engine_PDF-Export":"导出PDF","Plugin-ChartF_SecondGraduationLine":"次要刻度线","FS-User-No_Department":"没有部门","FR-Chart-Map_GoogleMap":"谷歌地图","FR-Chart-Direction_Vertical":"纵向","Open":"打开","FR-Engine_Fit-Horizontal":"横向自适应","FS-Admin-Confirm_Password":"确认密码","FR-Engine_Excel_Data_Cols":"数据列","FS-System-Login_Set":"登录","FR-Chart-Data_Records":"条记录","Set_Role":"角色设置","FS-Generic-Simple_Calculating":"处理中","FS-Plugin-Store_Login_By_QQ":"","Output_PDF":"PDF输出","FR-Hyperlink_Reportlet":"网络报表","Execute_Report_by_Layer_Engine":"用行式的引擎来执行报表","FR-Engine_RP_Authority_Edit":"权限编辑","FR-Designer_Number":"数字","FR-WriteEnhance_format_error":"数据格式不正确","FrameStyle":"框架样式","FR-Chart-Map_Fujian":"福建","Plugin-ChartF_Preview_Stack_Line":"预览堆积折线图","Choose":"选择","Plugin-ChartF_sort":"排序","M-Server":"服务器","Has":"拥有","FR-Designer-Dependence_Connect_Server_Error":"无法连接服务器，请稍后再试","FS-System-Error_Email":"该邮箱尚未绑定过账号","MConfig-SaveButton":"保存","Filter_Conditions":"过滤条件","Chart-Use_Show":"显示","Any_Result":"的任何结果","Last_Day":"最后一天","Pick_One_Column_And_Present_To_Display_Value":"选一列作为实际值及形态转换为显示值","Datasource-Context":"上下文","BarInside":"柱子内侧","Processor_Parameter":"处理器参数","FR-Designer-StyleAlignment_Center":"居中","Hyperlink-Link_Opened_in":"链接打开于","ChartF-Draw_Border":"画边框","More-Field_Name":"多个字段的名","Des-MapManager":"服务器数据字典将保存到\"WEB-INF\\resources\\datasource.xml\"文件里面，是共享的，供所有的模板调用。","FS-System-war_deploy":"压缩部署","Performance-Plugin_dz_start_emptyfile":"设计器空文件启动","plugin-ChartF_OpenShadow":"开启阴影","LIC-Support_Advanced_Formula":"增强分析统计模块","Do_not_remind":"下次提醒","WF-Name":"名称","FR-Engine_Setting":"选项","FR-Designer_Save_As_Params_Template":"保存为常用参数组合","FR-Engine_Creating_Group":"创建组...","FR-Engine_Cluster-Close":"未开启新集群","Background-Null":"没有背景","PrintP-PageSetup":"页面设置(S)","Yes":"是","M_Insert-Shape_Isosceles_Triangle":"等腰三角形(I)","FS-Schedule-End_At_Time":"设定结束时间","Chart-Map_Name":"区域名","FS-Generic-Parameter_Boolean":"布尔型","Preference-Vertical_Scroll_Bar_Visible":"竖直滚动条可见","Plugin-ChartF_Flow":"流向","Chart-Use_Space":"空格","Utils-Beyond_the_right_side_of_Border":"超出右边界","FR-Engine_ErrorCode-Prefix":"错误代码","FS-User-Simple_Position":"职位","FR-Designer-Tree_Height":"高度","Form-Password":"密码","FR-Chart-Drill_Map":"钻取对应地图","Chart-Legend_Count":"图例个数","Plugin-ChartF_Vertical_Structure":"纵向框架图","Not_Support_This_Method":"不支持该方法","SelfDefineAttachmentDeal":"自定义附件处理","FS-Schedule-Execute_Period_Time_Unit_Week":"每周","Plugin-ChartF_Custom_Image":"自定义图片","FS-Generic-Enter_True_Time_Format":"请输入正确格式的时间","FR-Engine_ReportServerP-Print[Server]":"打印[服务器]","Alert":"警告","DashBoard-FindDashBorad":"以后启动将不再显示，您可以在窗口选项栏中重新设置它","Green":"青绿","FR-Engine_Short-Nov":"十一","Email-Can-Preview_JForm_Content":"正文预览表单内容","Center-Cannnot_Be_Null":"边界布局的中间组件不能为空","FR-Engine_Please_Enter_New_Group_Name":"请输入新组的名字","FS-User-Post_Management":"职位管理","FRFont-bolditalic":"加粗倾斜","Privilege-The_User_Service_Must_Be_LDAPUserService":"必须是LDAP用户","FS-System-Current_Number_of_Users_Online":"当前系统在线人数","Database":"数据库","Schedule-Daily":"每天","FS-Schedule_Customize":"自定义","Utils-The-Chart":"图表","FS_Close_Other_Templates":"关闭其他模板","FS-User-Retrieve_Location":"检索位置","FR-Utils_Label":"标签","BeijingInCity":"北京市区","AffairToHandle":"待处理事务","FR-Base_Left":"左","Server-Stop":"停止","FS-Monitor-Templet_State":"当前状态","FR-Chart_Layout":"布局","clickToRefresh":"是否继续？点击是刷新","Line_Width":"线宽","FS-Plugin-Store_Disconnected":"无法连接应用中心","FR-Engine_Repeat-Freeze":"重复与冻结设置","FR-Chart_Bubble_Size":"值","FR-Chart-Style_Category":"分类","User_Information":"用户信息","one_record_exists_in_many_groups":"一个记录可以存在于多个组中","Shape":"图形","FR-Plugin-Store_Install":"安装","Utils-Top_to_Bottom_a":"从上往下","FR-Engine_Event_beforeverifywrite":"校验提交前","FS-System-Forget_Password_Tip":"提示：","Privilege-The_User_Config_Can_Not_Be_Null":"用户配置不能为空","Sche-Friday":"星期五","SQLWizard-union":"并操作","FS-Schedule_Relative_User":"相关用户","FR-Basic_File_Upload":"文件上传","I-LineStyle_VerticalLine":"垂直折线图","Plugin-ChartF_Area_Map_Data":"区域边界","Minute":"分钟","ChartF-Area":"面积图","EmailPane-BCC":"密送","FS-Generic-Simple_Template":"模板","Ratio":"比率","Env-Invalid_User_or_Password":"用户名或密码错误","Join_Product_improve":"加入产品改良计划","FS-Admin-Modify_Secret_Will_Remove_User":"修改加密方式会清空已有用户数据","Utils-Now_create_connection":"正在建立数据连接","FR-Engine_RP_End":"结束","FR-Engine_Width":"宽","FR-Plugin-Store_Login":"登录","Chart-MSBold":"微软雅黑","Plugin-ChartF_AreaMap":"区域地图","FS-Report-Devices_PC":"PC","FR-Engine_Finish_Export":"导出完毕","KeyWord":"关键字","Plugin-ChartF_Curve":"曲线","FR-Engine_ConditionB-contains":"包含","New_offset":"新建偏移","Data-Get_Data_Error":"获取数据时发生错误","Chart-Area-Tittle":"区域标题","M_Format-Add_Column_Before":"在前面添加列(O)","FS-Generic-Simple_Copy":"复制","FR-Engine_Error_With_Non_Template":"非模板触发错误","FS-Report-Need_Select_BI":"请选择分析结果","Utils-Source_File":"源文件","Left_Border_Line":"左框线","Collect-The_user_information_code_is_invalid":"这个激活码是无效的, 请到官网申请","FS-Privilege-Simple_Design":"设计","FR-Engine_Exception_Column":"异常列号: ${N}","Covered_All":"全部覆盖","PageSetup-Margin":"页边距","FR-Engine_Event_afterload":"加载结束","Plugin-ChartF_LegendMaxProportion":"图例区域最大占比","Adaptive_Layout":"自适应布局","FR-Plugin-Store_Not_Official":"非官方","Chart_Text_Axis":"文本坐标轴","Select-Folder":"请选择浏览器所在的文件夹","FR-Engine-PageSetup_Orientation":"方向","FR-Engine_Sort_Vertical":"排序（纵向）","FS-System-Simple_LRU":"最近使用","FR-Chart-Chart_Label":"标签","Hyperlink-No_Hyperlink":"没有超级链接","Cache-Message1":"0表示无限","Err-The_number_is_larger_than_the_maximum_value":"值大于允许输入的最大值","FS-System-Task_Expired":"该任务已过期","Chart_Border_Light":"边框光影","ParameterD-The_First_List":"第一个列表","Function-Source_Code":"如果必要的话将class对应的java源文件也放置到该目录下方便编辑和查看","EmailNotice":"邮件通知","FR-Export_PDF":"PDF格式","Authrized":"授权","Chart_F_Radar_Axis":"值轴","FR-Designer-Basic_Activation_Key":"设计器编号：","Plugin-ChartF_Time_Interval":"时间间隔","FS-Msg-Failed-Alert":"FanRuan.lic上传失败，请重试或联系我们!","FR-Base_Not_Appendable":"不可扩展","FS-Monitor-Platform_Msg":"平台消息","FS-Generic-Simple_None":"无","FS-Generic-Turn_On":"开启","Execute":"执行","FS-Generic-Simple_Storage_Location":"存储位置","File-File_Too_Big":"文件过大，上限为","Utils-Enter_reportlet_name_prefix_or_pattern":"输入报表模板前缀或者模式","FS-Process-Input_A_Name":"请输入一个名字","FS-System-NS_mail_config":"错误代码:11200004 邮件配置参数不正确","FS-System-Email_Has_Send_To":"邮件已发送至","FS-Generic-Simple_Content":"内容","FS-Plugin_UpdateOnline_Download_New_JAR":"下载最新JAR包","Axis":"轴","FR-Engine_Excel_Submit_Add_Task":"新建任务","FR-Engine_Need_Registration_Code_Or_Exceed_Limited_Number":"你需要一个注册码或者该报表服务器的使用人数超过了注册限制的数量。","original":"原始","FR-Designer-Widget-Style_Frame":"框架","Click_this_button":"点击此按钮进行路径选择","FS-Schedule-Interval_Execute_Interval":"每隔","Links":"链接","SQL-Procedure":"过程","M_File-Excel_Import":"Excel输入(I)","FS-Plugin_updateOnline_WaitForCheckCompleted":"","FR-Engine_Function_Mobile_Template_Frm":"移动端模版（frm）","Chart-Use_Unit":"单位","M_Insert-Columns":"列(C)","FS-Monitor-Log_Clean_One_Month_Auto":"每一个月自动清理一次","FR-Designer-Widget-Style_Title_Content":"标题内容","Widget":"控件","Black":"黑色","Chart-Category_Name":"分类名","FS-Generic-Simple_Execute":"执行","ThreeD_Stacked_Bar_Chart":"三维堆积柱形图","FR-Engine_NativePrint_Invalid_Index":"页面索引不正确.","ExpandD-Expand_Attribute":"扩展属性","RP_Process_Select":"流程选择","Border-Style-Normal":"直角边框","FR-Designer-Widget-Style_Body_Background":"主体背景","FR-Share_Module_Error":"组件安装失败","EX-Can_not_create_WorkBook_from_Reportlet":"无法从网络报表生成工作簿","FS-Plugin_UpdateOnline_Auto_Backup_Project":"升级过程中自动将原工程备份并处理兼容问题","FS-BakRestore_Can_Auto_Backup":"可自动备份","NS_print_pdf":"错误代码:11100021 PDF打印只支持IE内核浏览器,其他浏览器将导出PDF文件","RP_Rollback_To":"回退到","FR-Chart_All_Normal":"正常","FS-System-Send_Verification_Code_Email_Phone":"无法验证身份：平台未设置服务器邮箱，无法接收邮箱验证消息。您可尝试使用手机进行验证。","FS-Generic-Simple_July":"七月","NS_LayerReport_sheets":"错误代码:11100008 行式引擎不支持Sheet间运算","FS-Generic-True_Extra_Run_Times":"正确的额外执行次数","FS-System-Resource_Path_invalid":"资源服务器地址不合法","Chart-Lng_First":"经度在前","ChartB-Sort_Order":"排列顺序","FR-Import-Export_Text":"文本文件(制表符分隔)","the_target_cell_is_at":"计算的目标格子在","Utils-Row_Height":"行高","FS-BI-Dezi_Real_Time_Report":"实时报表","FR-Base_StyleFormat_Sample":"示例","Server_Language":"服务器语言","FS-Module-System_Exam":"系统检测","FS-Generic-NOT_NULL_Des":"不能为空","FR-Plugin-Store_Developer":"开发者","ReportServerP-User_concurrency":"用户并发数","License-Your_license_is_not_support_multiple_connection":"当前License不支持多数据连接","FR-Engine_Sure_To_Remove_This_Role":"你确定删除该角色吗","ConditionB-does_not_in":"不包含于","Unit_MM":"毫米","FR-Base_Short_Mar":"三","FR-Basic_Calculating":"处理中","LayerData":"底层数据","BindColumn-Custom_Data_Appearance":"自定义显示","FS-Privilege-Username_And_Password":"仅认证用户名密码","RP_Exist_Null_Node":"该节点中存在未填写项","FR-Engine_Event_cardchange":"Tab切换事件","FR-Base_Short_May":"五","Selected":"已选中","Unit_PT":"磅","FS-Plugin-Store_Cost":"","FormulaD-Define_Execute_Script":"定义运行期脚本","fs_process_log_tip":"简单时报，日报，周报设置","FS-Generic-Simple_Driver":"驱动器","Remove_Button_ToolBar":"移除按钮所在工具栏","ChartF-Tick":"刻度","FR-Designer_Sytle-FRFont":"字体","FS-Monitor-End_Failed":"结束会话失败。","CellWrite-Hide_on_Print":"在打印时候隐藏单元格","ReportD-Report_Web_Attributes":"报表Web属性","FR-Engine_Search_Task_Name":"搜索任务","Utils-This_file_has_been_existed":"此文件已经存在","FR-Chart-Map_Jiangsu":"江苏","BackgroundTexture-Bouquet":"花束","Cell-Cell_Attributes":"单元格属性","Cannot-Find":"没有找打","Schedule-The_selected_file_must_be_end_with_'.xls'":"选择的文件必须以.xls结尾","Hyperlink":"超级链接","Verify-Verify_Result":"校验结果","FR-Engine_Successfully":"成功","ChartF-Shape":"图形","FS-Privilege-Simple_Preview":"浏览","Exist_The_Same":"已经有同名参数，请重新添加","NS-exception_readError":"错误代码:11300005 模板文件解析出错","chart-PreStyle":"图表预定义配色","Layer-Wake_Up_Thread_For_Calculating":"唤醒计算线程","Printer-Remove_Printer_Group":"删除打印机组","FR-Engine_FS_Report_Type":"类型","FormulaD-Check_Valid":"检查合法性","ChartB-On_change_of":"变化的列","detail_description":"详细描述","Set_Default_Data_Connect":"是否将其设置为默认数据连接","FR-Designer-FRFont_Foreground":"颜色","StartProcess":"开始流程","INFO-Start_Executing_Report":"开始计算报表","FS-Schedule-Output_Upload_By_FTP":"FTP上传附件","SAP-System_Number":"System Number","choose_schedule_type":"请选择定时任务的类型","WF-Select_Field":"选择区域","PaperSize_XL":"特大","Chart_Table_Data_Not_Found":"图表数据集没有找到","FS-Process-Selected_None_Of_Any_Items":"没有选中任何一项","performanceModule":"性能模块","FS-Plugin-Store_Install":"","M_Edit-FormatBrush":"格式刷(B)","FR-Chart-Muiti_In":"多层钻取","FR-Base_Formula_Plugin":"插件函数","D-ChartStyle_Info":"介绍","FR-Plugin-Update_Dependence_Failed":"依赖插件更新失败","Chart-Interactive":"交互属性","Report-Subtitle":"报表副标题","Chart-Map_RemoveDisable":"没有可删除的层级","DS-Server_Dictionary":"服务器数据字典","FS-Template_Refresh_Parameter":"刷新参数","Widget-Visible":"可见","FR-Designer_Set_Submit_Condition":"设置提交条件","Collect-Enter_your_user_information_code(It's_free_to_get_from_product's_official_website)":"请输入您的激活码(它是免费从产品的官方网站获得的)","SingleAfter":"后","Mail-BCopy_Adress":"密送地址","Privilege-Select_User":"选择用户","FS-Generic-Simple_June":"六月","FS-Reg-Simple_Unregistered":"未注册","Chart_Second_Plot":"第二绘图区","FS-BakRestore_Manual_Backup":"手动备份","FS-PSqlInj-Add_Custom_FW":"添加关键字","Server-Embedded_Server":"內置的服务器","ParameterD-Delay_Playing":"点击查询前不显示报表内容","ConditionB-Parameter_name_cannot_be_null":"参数名字不能为空","FR-Chart-Map_Jiangxi":"江西","Utils-Import_Excel_Data":"导入[Excel]","current_not_support":"当前预览方式不支持条件属性设置形态","FS-Plugin_UpdateOnline_Del_Reason":"删除原因","single_choice":"单项选择","ChangshaCity":"长沙市","Style-Line_Spacing":"行间距","Horizontal_Layout":"水平布局","FR-Chart-Gantt_RealStart":"实际开始时间","FR-Engine_Offline_Html_Info":"很抱歉的告知您，目前IE9及I9+浏览器暂时不支持离线填报功能，请使用其他浏览器打开！","FR-Engine-Condition_Operator":"操作符","FS-System-After_Login":"后自动登录","FS-Msg_Disable":"插件已被禁用,重启服务器后生效","FS-Submit-Authority":"提交认证","FS-Schedule-Task_Manage":"任务管理","Import":"输入","FR-Server-All_Error":"错误","FS-PSqlInj-Use_Forbid_Word":"禁用","Indent-Indentation_Value":"缩进值","Des-Remove_WorkSheet":"要删除的表可能存在数据,如果要永久删除这些数据,请按'确定'按钮.","FR-Hyperlink_Please_Select_Reportlet":"请选择网络报表","FR-Engine_Create_One_Group_For_Remaining_Values":"将所有剩余值创建为一个新组","ChartF-Y_Axis":"Y轴","FR-Engine-Error_Input_Value":"错误的输入值","Seriously":"严重","Utils-Delete_Row":"删除行","Plugin-ChartF_Initial_Level":"初始等级","TODO_WORK":"待办事务","FS-Plugin_updateOnline_ConnectFailed":"无法连接服务器","FS-Schedule_User_Group_Must_Choose":"用户组必须选择！","Widget-Multi_Report_Widget":"报表控件","Datasource-SAP_datasource_name_cannot_be_null":"SAP 数据源名不能为空","BindColumn-Odd_Selected_(1,3,5...)":"选择了奇数集(1,3,5...)","PageSetup-Saving_current_settings_to_server":"保存当前设置到服务器","RCodeDrawPix":"像素","Re-appname-match":"AppName匹配","FR-Base_January":"一月","Polyblock-Attribute":"聚合块属性","Error_Cell":"错误的格子","FS-Admin-Account_Is":"您的管理员账号为","FR-Designer_Datasource-Stored_Procedure":"存储过程","Reg_Expressions":"正则表达式","FR-Engine-NS_export_excelHtml":"错误代码:11100011 导出Excel不支持Html中部分标签","FR-Engine_ProcessName":"流程名称","Condition_Attributes":"条件属性","StyleAlignment-Horizontal":"水平对齐","FR-Chart-Waring_Please_Input_The_Key":"请输入对应地图使用的key","Embed":"内嵌","FR-Engine_Restart_Browser_After_Installation":"安装之后请重启浏览器.","cycle":"周期","EX-Image_stored_is_broken":"保存的图片被破坏了","FR-Chart-Format_PDF":"PDF格式","ChartF-Donut":"圆环图","FR-Engine-PageSetup_Margin":"页边距","TimesSum":"次数","FR-Designer_Border":"边框","FS-Setting-Select_Theme":"使用主题","FS-Monitor-Log_Level":"日志级别","Privilege-The_Response_Is_Not_Instanceof_HttpServletResponse":"该响应不是HTTP响应","FR-Engine_Short-Oct":"十","Chart-Value_Conversion":"转化率","Chart-Plan_Start":"计划开始","FR-Export_Excel":"Excel格式","HF-Delete_it":"删除","FR-Engine_All_Pages":"所有页","FR-Engine_Excel_import_cost":"导入Excel成功, 耗时(毫秒):","FS-Schedule_Message_Template_Content":"您好，${taskname}于${time}运行成功运行。","Customs":"定制","BindColumn-Summary(Including_SUM_,_AVERAGE_,_MAX_,_MIN_And_So_On)":"汇总(包括求和，取平均数，最大值和最小值等)","Panel":"面板","FS-User-Add_Department":"添加部门","FS-Plugin-Store_Designer":"","FR-Chart-App_UpdateProgress":"更新进度","Layout-Padding":"内边距","Show_in_Containing_Folder":"打开所在文件夹","FS-BakRestore_All_Backup":"整体工程","Form-DataTable":"数据表","Plugin-ChartF_SeriesColor":"系列色","Plugin-ChartF_Layer_Zoom_Level":"对应缩放等级","Form-Center_Align":"中间对齐","FS-Generic-Simple_Task":"任务","SingleMan":"者","FS-Admin-Super_Manager":"超级管理员","No_Wanted_Result":"没有满足条件的结果","FS-Admin-First_Set_FS":"您是第一次使用数据决策系统，请先配置您的管理员用户名和密码","Invert_Selection":"反向选定","FS-PSqlInj-Forbid_Word_Input_Hint":"支持正则表达式","FS-Generic-Simple_File":"文件","Schedule-Are_you_sure_to_delete_the_selected_task":"确认删除所选任务","Role_List":"角色列表","FR-Plugin-Store_BBS_Account_Login":"帆软通行证登录","Chart_Area":"面积","Deselect_All":"不选","Receiver":"收件人","FR-Engine_Excel_Import_Cover":"覆盖导入","FR-Basic_Plugin_Version_Warning":"插件版本过低,请升级插件,当前插件将无法加载","Classifier-Ge":"个","Double":"小数","Plugin-ChartF_HingeBackground":"枢纽背景","FS-Report-Add_Set_Config":"设置模板","PrepareExpression":"预置表达式","FR-Designer-Widget-Style_Title":"标题","ParameterD-Background":"参数窗体背景","Tooltips":"提示","FR-Engine-INFO-End_Converting_ReportPage_To_Html":"报表页转Html结束,耗时","FR-Engine-Condition_Not_Equals":"不等于","FR-Plugin_Update_Success":"插件更新成功","Chart-Black_Font":"黑体","Second_Value_Axis":"次值轴","FS-System-Login-Set":"登录","FR-Base_Fri":"五","ChartF-HorizontalDrawBar":"横向排列","FR-Designer_Seriously":"严重","FR-Engine-PageSetup_Predefined":"预定义","Chart-Switch":"图表切换","Chart-Map_Save":"保存","FS-Plugin_UpdateOnline_Calculate_Backup_Size":"正在计算备份文件的大小...","Registration-Use_Authorization_File":"使用授权文件","SpecifiedG-Specified_Group":"自定义分组","FS-BakRestore_Clear_Freq":"清理频率","FS-Generic-End_Time":"结束时间","FS-Schedule-Output_Push_Content":"消息内容","WF-Superior":"上级","FR-Designer-Plugin_Has_Been_Disabled":"插件已被禁用，重启设计器及服务器生效，服务器需手动重启","D-ChartValues":"图表数值","Chart-Actual_Start":"实际开始","SQLWizard-choose_function":"选择一个函数","XMLA_Explain":"在使用多维数据集取数前，您首先需要一个可成功连接的多维数据库连接。\n设置完数据连接后，查询数据时,有两种不同的取数手段。\n1.简单通用查询：\n简单通用查询适用于FineBI及其他多维数据库。\n使用简单通用查询，FR将自动读取选择cube的层次结构，您可以直接选择所需的度量值及维度，并添加筛选条件，FR会根据您的选择自动查询数据。\n简单通用查询仅支持维度及度量值两个轴的查询。\n在度量值及维度设置中，目前您只能选择所需维度，无法手动修改。\n过滤条件采用OPEN SQL语法，您可以键入${abc}作为一个参数，用法同数据库数据集。\n2.自定义MDX查询：\n使用自定义MDX查询，您可以自定义MDX语句查询所需结果。\n注意，自定义MDX查询也只支持两个轴的查询。\n您可键入${abc}做为一个参数，用法同数据库数据集。\nFineBI的cube不支持MDX查询。","Hyperlink(failure)":"超级链接（失败时）","FS-Schedule-Output_Push_New_Message":"您有新的消息","Data_Fields_can_be_used":"可用的数据字段","BindColumn-Group(Merger_the_Items_Which_Have_The_Same_Value_in_Column)":"分组(将数据列中相同内容的值进行合并)","Plugin-ChartF_Polygonal":"多边形","FR-Chart-Map_Fuzhou":"福州市","FS-System-Email_Can_Not_Be_Null":"邮箱不能为空","Datasource-Table_Name":"表名","RP_Page_Write":"页面填报","Finish_Save":"保存完毕","FR-Engine_Example":"例如","Verify-Expression":"校验公式","FR-Engine_RestartAfterSet":"配置结束立刻开始","Plugin-ChartF_Save_Edit":"是否保存本次修改?","Preference-Choose_Configuration_File":"选择配置文件","FR-Designer_Year":"年","Plugin-ChartF_ZoomWidget":"缩放控件","Re-Group-edition":"集团版","DownBarBorderStyleAndColor":"跌柱样式","Chart-Gantt_ErrorTip":"甘特图必须要有","Plugin-ChartF_OpenAxisReversed":"开启轴逆序","FS-Generic-Simple_Password":"密码","Schedule-Select_Report_File_Directory":"选择报表目录","Plugin-ChartF_Bubble":"气泡","FS-Generic-Simple_Submit":"提交","ReportColumns-Repeat_Column":"复制列序列","Plugin-ChartF-Automatic":"自动","Release_Lock":"解锁","Ecp_Input_Oldpwd":"请输入旧密码","Plugin-ChartF_Gauge_Slot_Title":"刻度仪表盘","FR-Chart-Map_Anhui":"安徽","Form-ToolBar":"表单工具栏","Plugin-ChartF_End_Task_ID":"结束任务id","FS-Monitor-Log_Clean_One_Week_Ago":"一周前","FS-Schedule_No_Attach_Generate":"无附件生成","FR-Chart-Property_Table":"图表属性表","I-HBarStyle_Normal":"簇状条形图","Utils-The_data_dictionary_is_not_exist":"数据字典不存在","BarCodeD-Drawing_Text":"显示条形码的文本","Golden":"金色","FS-Plugin-Store_Key_Word":"","FS-User_Login2FS":"登录到数据决策系统","FR-Chart-Map_ImageArea":"图片区域","FR-Engine_RP_Add_MultiNode":"添加联合填报节点","FR-Chart-Marker_Type":"标记类型","Cover_None":"全不覆盖","Chart-Change_Bar_Size":"将柱形图大小缩放为","Plugin-ChartF_Border":"边框","Plugin-ChartF_Select_Color":"选中色","ScheduleCycle":"调度周期","FormulaD-Custom_Function":"自定义函数","LIC-Support_Advanced_DataSource":"增强数据源模块","Please_Drag_ParaPane":"","Schedule-Template_Parameter":"模板参数","Plugin-ChartF_Legend_Section":"区域段","FS-Generic-Simple_Opened":"已开启","M_Server-Platform_Manager":"报表平台管理","FS-BakRestore_Log_Message":"短信","FR-Engine_Custom_Sort_Rule":"自定义排序规则...","M_Edit-Copy":"复制(C)","FS-Generic-Simple_Add":"添加","FS-System-Email_Encrypt_None":"不加密","FR-Engine_Word-Export":"导出Word","FS-System-Forget-Password":"忘记密码","FR-Engine_ConditionB-begins_with":"开头是","FS-Setting-Colorful_FS":"缤纷","Plugin-ChartF_GanttChart":"甘特图","FS-Plugin-Store_Report_Write":"","PageSetup-mm":"毫米","FR-Chart-Color_Color":"颜色","TurnOn":"开启","FR-Engine_DS-TableData":"数据集","Hyperlink-Show_Scrollbars":"显示窗口滚动条","CONTINUUM_MODE":"相邻连续分组","Import-Excel2007_Source":"Excel2007源文件","Plugin-ChartF_Layer_Black":"黑色","Modify_Column_Attibute":"修改列属性","Add_Analysis":"添加数据分析","FR-Engine_Please_Enter_Correct_Date_Step":"请输入正确的日期步长！","FR-Engine_Offline_Html_Error":"很抱歉的告知您，目前IE9及I9+浏览器暂时不支持离线填报功能，下载的离线html报表请使用其他浏览器打开！","Top_Margin":"上边距","FR-Chart-Map_Ningxia":"宁夏","Columns_choosed":"选择的列","BackgroundTexture-PurpleMesh":"紫色网格","FR-Engine_Image":"图片","FR-Chart-Format_Image":"图片格式","Unit_CM":"厘米","FR-Utils_Background":"背景","M_Edit-DeleteColumn":"删除光标所在列","Custom_Define_Types":"自定义类型","FS-System-Event_Submitsuccess":"提交成功","Log_Level_SEVERE":"严重级别,显示错误信息","Privilege-Name_Not_Match_Password":"用户名和密码不匹配","Utils-Show_View":"视图","FS-Before-Authority":"认证中\u2026","FS-Module-MobilePush_IOS_IsDevelop":"iOS是开发环境","Tree-Grade":"层","ExpandD-Define_Father_Cell":"定义父格","FS-Schedule_DataSet":"数据集","Parameter-Double":"双精度","Plugin-ChartF_End_Time":"结束时间","RP_Invalid_Task_Or_Process":"任务名称或流程名称不符合规范","OpenAuthConfirm":"是否启用分级权限控制","ExpandD-Rename_Datasource":"重命名数据源","FR-Engine_PrintPreview":"打印预览","Utils-Exit_Designer":"退出设计器","FR-Chart-Map_Chongqing":"重庆市","ConditionB-does_not_end_with":"结尾不是","FR-Designer_Sytle-Indentation":"缩进","NS_print_plugin":"错误代码:11200001 当前浏览器未安装打印所需插件","ProcedureSameWarning":"存储过程中有数据集名字和其他数据集名字一样，请修改！","Orange":"橘黄","Err-The_value_cannot_be_negative":"不能为负数","FR-Designer_Alert":"警告","GroupReport-Page_Break_After_Detail_Repeat_Times":"主体部分循环指定次数后强制分页","FR-Engine_RP_Pass":"通过","FR-Engine_REPORTLET":"访问模板的路径的参数。","FR-Engine_overflow":"系统并发数已满","Function-J2EE_server":"J2EE服务器","FS-User-User_Can_Not_Same":"新用户名与原用户名不能相同","Test_Value":"示例数据","Chart_Second_Grid":"次要网格线","FS-Plugin-Store_Update":"","Verify-Data_Verify":"数据校验","FR-Plugin_Error_None":"成功","FR-Plugin_Error_InvalidLevel":"需升级插件","FS_Name":"数据决策系统","FS-User-Simple_Unselected":"未被选人员","FS-Monitor-Operation_Count_One_Month":"近1个月操作次数","Plugin-ChartF_ZoomOutTitle":"缩小","FR-Engine_Please_Enter_Start_Value":"请输入起始值，不选择默认为最小值","Preference-Column_Header_Visible":"列标题可见","Para-Body":"参数界面","BindColumn-Select(Regardless_of_Having_the_Same_Value,Display_all_Item_in_Column)":"列表(数据列中的所有数据记录展示出来，无论数据是否重复)","FR-Engine_PageSetup-Portrait":"纵向","FR-Engine_No-tableData":"没有返回数据集","No_Editor_Property_Definition":"该编辑器没有属性定义","Chart-StyleAlignment_Left":"靠左","plugin-ChartF_positionX":"x方向","plugin-ChartF_positionY":"y方向","FR-Designer-Widget-Style_Custom":"自定义","Chart_Change_Bubble_Size":"将气泡大小缩放为","NNormal":"正常","FS-Privilege-Grade_Authority_Manager":"分级权限管理","FR-Engine_ConditionB-is_not_empty":"不为空","HJS-Server_Printer":"服务器端的打印机","State-Toggle":"状态切换","FR-Report-Write_Offline-Verify_ToolTips":"提交校验中包含离线状态无法执行的校验规则，继续将忽略这些校验规则，但是在联网提交时会被重新执行，是否继续校验？","Chart_Project":"项目","FS-User-Username_Can_Not_Be_Null":"用户名不能为空","FR-Engine_RP_Finished_Task":"已处理任务","FS-Web-PluginLicense_Check_Failed":"没有可用的许可证","FR-Engine_FORMLET":"访问不同表单的路径的参数","Select_Create_Role":"请先选择角色或新建角色","FR-Plugin-Designer_Encode_Type":"编码类型:","FS-Schedule-Subject_Not_Null":"主题不能为空","JavaScript-Dynamic_Parameters":"动态参数","FS-Frame-Simple_Subscribed":"已收藏","Offline-Connect_Failed":"无法连接到服务器。请确认本机的网络连接状况和服务器的工作状态后重试。","Function-Content_Function":"内容函数","Data_Filter":"数据筛选","ChartDemo":"示意图","FS-User-All_Users":"所有用户","FR-Chart-Versions_Lasted":"当前版本已经是最新版本","FS-System-Config_SMS_Model_Public":"公共模板","Block_unextended":"","Not_use_a_cell_attribute_table_editing":"您不可以用单元格属性表编辑","FR-Designer-Plugin_Search":"搜索","ChartF-Y2_Axis":"Y2轴","FR-Base_November":"十一月","Create_Grouping_Report":"创建分组报表","FS-Privilege-No_Privilege":"没有权限","FR-Engine_add":"添加","Selected_Dictionary":"当前数据字典","Form-Widget_Property_Value":"属性值","LayerPageReport_WN_Hierarchy":"按页运算引擎不支持层次坐标","Sure_To_Remove_This_Role":"你确定删除该角色吗","FormulaD-Function_category":"函数类型","Privilege-Authority_Must_Be":"权限必须是","Server-version-info":"您当前打开的模板文件是由更高版本的设计器制作的，打开会有出错或者丢失原有模板属性的风险。  假如需要打开此模板请您将您的设计器升级至","Datasource-Rename_class_datasource":"重命名程序数据源","FR-Engine_RP_All_Tasks":"所有任务","FR-Base_Wed":"三","FR-Designer_DS-Dictionary":"数据字典","FS-System-Simple_Detail":"明细","LOG-Please_Wait":"请稍候","FR-Base_NOT_NULL_Des":"不能为空","Chart_Scatter":"散点","FR-Engine_Utils-Submit":"提交","Use_ToolBar":"使用工具栏","DS-Report_TableData":"模板数据集","Form-Widget_Scrollable":"滚动条","SQLWizard-all_Rows_From":"所有的表来自{0}","ExpandD-Repeat_Row_Height_Or_Column_Width":"重复行高或者列宽","Are_You_Sure_To_Delete_The_Data":"确定删除选中数据吗","FS-System-Visit_IP":"访问IP","FR-Engine_Poly":"聚合报表","Reg_Min_Length":"最小长度","Single_Open":"开","User":"用户","Privilege_Form":"表单","Error_Statement_Is":"错误的描述为","FS-Schedule_List_File_404":"错误代码：11300014 找不到结果报表","Plugin-ChartF_Deploy":"配置","FS-Msg-My_Message":"我的消息","Plugin-ChartF_NewMap":"地图（新特性）","RP_Process_View":"任务流程查看","FR-Engine_Face_View":"查看","Plugin-ChartF_UseDiffSlantAngle":"不连续","FS-Privilege-Data_Connection_Control":"数据连接控制","Refresh_Parameter_In_SQL":"是否刷新SQL中的参数","HJS-Message":"内容","Plugin-ChartF_AutoSort":"自动排序","FS-Setting-Style_Config":"样式","FS-System-Please_Check_Email_Attr":"请检查用户名密码，收件人地址以及邮件服务器是否填写正确，并确保网络畅通。","Management":"管理","FS-BakRestore_Cannot_Be_Null":"配置不能为空","LIC-Support_Advanced_Online_Writer":"多源填报","Already_exists_not_add_repeat":"已经存在，请不要重复添加","Mail_Setting":"邮件设置","Pick_Two_Columns_As_Actual_And_Display_Value":"选两列作为实际值和显示值","Prev_Year":"上一年","Input_Rule":"填写规则","Welcome":"欢迎","FS-Privilege_ForgedUser_Tip_Tab":"在此处可单独配置用户在部门职位和角色以外的权限","FR-Designer_Thanks-To":"鸣谢","FS-Monitor-Use_Detail":"使用情况","Start_Process":"发起流程","FS-Schedule-Please_Select_Monthly_Execute_Time":"请选择月执行时间","FR-Engine_None":"无","Choose_Role_Create":"选择角色(请先设置角色)","Custom_Processor":"自定义处理器","Chart_TrendLine_Backward":"倒推","FS-Schedule-Execute_Condition":"执行条件","Plugin-ChartF_Period":"预测","PageSetup-Shrink_to_fit_content":"根据单元格内容自动调整","Double_Bottom_BorderLine":"双底框线","Form-Middle_Align":"中线对齐","JSON-Error":"没有生成正确的JSON数组","Registration-CPU_Number":"处理器数目","Click_RadioButton_Change_Semantic":"点击单选按钮更改语义层的设置","M_Edit-Undo":"撤销","Plugin-ChartF_Default_Map":"中国","RenderStyle":"渲染风格","M_Edit-Order":"叠放次序(O)","FR-Engine_RP_View_Task":"查看任务","Chart-Switch_Selected_Chart":"切换选中图表","FR-Engine_Param_Template_Content_Existed":"该参数组合内容已保存于","Y-Coordinate":"纵坐标","CellWrite-InsertRow_Label":"插入行时插入","BackgroundTexture-MediumWood":"深色木质","Can_not_use_FormatBursh":"不能对多重选定区域使用格式刷!","FS-Msg-War_Deploy_Block":"war包部署后，插件管理暂不支持，建议打war包前操作.","FR-Designer_Tree-ComboBox":"下拉树","Utils-The_selected_reportlet_do_not_contain_any_parameter":"选择的网络报表不包含任何参数","FR-Engine-Page_Setup_Portrait":"纵向","Parameter-Integer":"整型","FS-System-Get_Verification_Code_Btn":"获取验证码","FR-Plugin-Store_Export_Print":"导出打印","Current_keys":"当前快捷键：","FR-Engine_Excel_Data_Lines":"数据行","FR-Designer_Style":"样式","FS-System-Config_SMS_Yuan":"元","FS-Schedule-Basic_Properties":"基本属性","FR-Designer_ConditionB-AND":"与(AND)","Plugin-ChartF_From":"初始左边界","Cpt_Backup_Sure":"备份模板可以防止数据丢失，您确定不备份吗？","MConfig-SupportEmail":"电子邮件","Enabled":"可用","Chart_Data_Monitor":"数据监控","Plugin-ChartF_Geographical_Position":"地理位置","Printer-Selected_Printers":"已选择的打印机","UrumqiCity":"乌鲁木齐市","FR-Engine_WriteEnhancePreview":"新填报预览","FS-Generic-Simple_Welcome":"欢迎","Layout":"位置","Length":"长度","FR-Designer_Edit":"编辑","SimgleNumber":"号","FS-Frame-Sure_To_Leave":"你确定要离开吗？","ChartF-3DSimulation":"模拟3D","Report_Certification":"报表认证","FS-System-Config_SMS_Test":"信息测试","Plugin-ChartF_Rule":"常规","ServerM-Privilege_Manager":"权限管理","Right_Border_Line":"右框线","FS-BakRestore_Unsupported_Backup_Transferred":"当前已经是迁移后的环境，不支持备份！","ExpandD-Father_Cell":"父格","Log_Declare_Head_Print":"报表打印中","FR-Engine_No_Client_Print":"零客户端打印","Utils-Server_Parameters":"服务器参数","Plugin-ChartF_Drill":"钻取","FS-PSqlInj-Use_Escape":"转义","Unit_Ten":"十","NoAffairToHandle":"暂时没有事务","Hyperlink-Show_Location":"显示地址栏","FS-Generic-Simple_Institution":"机构部门","Plugin-ChartF_Task_ID":"任务id","FR-Plugin-Store_Integrate_Deployment":"部署集成","FS-BakRestore_Sure_To_Restore":"确认还原?","Select_Username_Column":"选择用户名对应列","M_Format-Data_Map":"数据字典","FR-Basic_File_Allow_To_Upload_Contains":"允许上传的文件包括","FS-Monitor-Log_Clean_One_Week_Auto":"每周自动清理一次","FS-Function_Authority_Control":"权限控制","FR-Chart-Style_Bright":"明亮","Choose_Language":"语言选择","HF-Insert_Content":"插入内容","FR-Report-Plugin_Expire_Dialog_Text":"插件过期,请前往帆软应用中心进行购买。","Chart-Edit-HotToolTip":"编辑热点提示","connection_to_server_again":"连接中断，是否重新连接服务器?","Japanese_Language":"日语","FR-Designer-Widget_Style":"样式","FR-Chart_Advanced_Interaction":"高级图表交互","Qinghai":"青海省","M-New_Report":"新建报表(R)","CellWrite-Default_Value_To_Insert":"默认的插入值","FormulaD-Reserve_when_bs-write_or_analy":"填报/分析时，保留公式用于计算","FR-Engine_Do_Not_Know_Me":"不认识我","BackgroundTexture-Papyrus":"纸莎草纸","FS-Msg-Not_Found_Plugin":"未安装该插件,不能被更新.","designerModule":"设计器模块","Choose_AnalysisData":"请选择分析数据！","FR-Engine_FlashPrint":"Flash打印","Plugin-ChartF_StackColumnTypeRadar":"堆积柱形雷达图","FS-Privilege_You_Have_No_Privilege":"嗯...你好像没有权限","FR-Engine_ConditionB-ends_with":"结尾是","Drag_to_select_gradient":" 拖动下方按钮选择渐变区域，单击按钮选择对应颜色","FS-Monitor_Action_In_Detail":"具体操作","DS-Multi_Dimensional_Database":"多维数据库","FS-Reg-Cloud_Remain-Connect":"剩余","November":"十一月","Plugin-ChartF_HeatMap":"热力地图","ReportServerP-Print[Server]":"打印[服务器]","FS-System-Forget_Password":"忘记密码","Not_Set_Verify_Class_Path":"找不到校验类","Create_Tree":"构建树","Form-Name_For_Empty":"空值将显示为","NewAffairToHandle":"您有新的代办事务需要处理","Position_Name":"职位名称","Denied_To_Upload_Contains":"禁止上传的文件包括","FS-Generic-BS_Design":"B/S全局配置","FR-Engine_Role_Name":"角色名称","FS_New_Password":"新密码","Plugin-ChartF_FilledWithImage":"图片填充","FormulaD-All":"全部函数","Performance-plugin_paralleldsloader_name":"数据集并行取数优化","Condition_Display":"条件显示","FR-Designer_ToolBar_Top":"顶部工具栏","Short-Jun":"六","FS-System-Config_SMS_Private_Account":"自定义账号","Short-Jul":"七","FR-Chart-Map_Hangzhou":"杭州市","FS-Monitor-Live_Session_Mem_Ratio":"内存占用比例","Alignment":"对齐","FR-Designer-Dependence":"","Hyperlink-Resizable":"是否可调整窗口大小","FS-System-Mark_Confirm":"确认标记","FR-Engine_Release_Lock":"解锁","RESULTLET":"访问报表结果路径的参数","FirstRow_IS_ColumnName":"第一行包含列标题","LayerPageReport_WN_Chart":"按页运算引擎暂不支持图表","Chart-Animation_JSShow":"动态展示","FR-Chart-Pie_ReCombinePie":"复合饼图","ChartF-Step":"步骤","Hyperlink(success)":"超级链接（成功时）","Utils-Add_Row":"添加行","RP_Node_Name":"节点名称","FS-Frame-Full_Screen":"全屏","FR-Already_exist":"当前环境已存在:","FR-Plugin-Plugin_Version":"插件版本","FR-Failed-Lic_Format_Not_Match":"证书格式不正确","Widget-User_Defined_Widget_Config":"预定义控件","FR-Designer_DataTable-Build":"极速分层构建","FS-Privilege-Entry_Config":"报表权限快捷配置","multiple_choice":"多项选择","FR-Engine_Format":"格式","FR-Engine_Verify_Failed":"校验失败","The_file_is_already_selected.":"这个文件已经被选择","FS-System-Email_Encryption_Method":"加密方式","FR-Chart_DataLabelOutSide":"数据标签外","Plugin-ChartF_Category":"分类","FS-Generic-Server_Usage":"服务器使用情况","Plugin-ChartF_Preview_Radar":"预览雷达图","FR-Engine_Error-Info":"发生的问题是：","Warning":"警告","FS-Schedule-Task_Run_Moment":"运行时刻","Draw":"绘制","M_Help-Quick_Start":"快速入门","FR-Engine_RP_Send_Time":"发送时间","FR-Base_Sche_Monday":"星期一","LayerPageReport_WN_CellExpand":"按页运算时，只支持从上到下扩展属性，其它属性设置均不支持","FR-Engine_Sche-Minute":"分","Button-Group-Display-Columns":"展示列数","LeftParent":"左父格","NS_register_ipFull":"错误代码:11100015 系统并发数已满","I-LineStyle_LineWithMarker":"数据点折线图","FR-Chart-Type_Pie":"饼图","FR-Designer-FRFont_Italic":"倾斜","FR-Engine_-None":"无","HF-Insert_Formula":"插入公式","LasaCity":"拉萨市","Repeat-Freeze":"重复与冻结设置","Smart":"智能","FR-Base-Need_Purchase_Info":"错误代码：12400002 您需要一个注册码或者该报表服务器的使用人数超过了注册限制的数量","CardinalNumber":"基数","GroupB-Report_Footer_Page":"报表脚分页","FS-Plugin_UpdateOnline_Upgrade_New_Version":"升级至 FineReport 9.0","FS-Report-No_Folder_Edit_Privilege":"您没有该文件夹的编辑权限！","FR-Designer-Plugin_Illegal_Plugin_Zip":"不是合法的插件包","Server-Define_Data_Connection":"定义数据连接","Plugin-ChartF_TimeAxis":"时间坐标轴","Layout-HBox":"水平盒子布局","Use_NormalGroup":"使用普通分组","FS-System-Send_Verification_Code_Again":"重新发送","FR-Engine_RP_Alert_Setting":"预警设置","FS-Schedule_Status":"状态","FS-Generic-Simple_New":"新建","FR-Chart-Map_Guizhou":"贵州","Plugin-ChartF_NewCustom_ColumnLine":"柱形图-折线图","M-Others":"其它...","Utils-Are_you_sure_to_delete_the_role":"确实要删除该角色吗","StyleFormat-Percent":"百分比","Yong-Style":"清新","FR-Base_Sche_Week":"星期","FS-User-Platform_User_Management":"平台用户管理","All_File_Uploaded":"所有文件已上传","FS-Report_Inform_Appending":"","revert":"撤销","LIC-Support_Schedule":"定时调度","Plugin-ChartF_Off":"关闭","Preference-Undo_Cacheable":"撤销之磁盘缓存","Loading_Component":"正在加载控件","Log_Level_INFO":"普通级别,显示SQL语句等信息","Sche-Wednesday":"星期三","Drop_down_for_more_preview":"","FS-BakRestore_Backup_Capacity":"备份容量","DS-Class":"程序","FRFont-Strikethrough":"删除线","GroupReport-Hide_Detail_When_There's_No_Data":"当没有数据时不显示主体","FS-Report_Choose_Add_Item":"请选择要添加的内容","Horizontal":"水平","Preference-Function":"功能设置","FR-Engine_Event_beforeprint":"打印前","Export-Excel-LargeData-Page":"大数据量分页导出","FR-Chart-Chart_BubbleChart":"气泡图","Continue_add":"继续添加","M_Window-Next_Window":"下一个窗口(N)","FR-Engine_Event_aftertoword":"Word导出后","M_File-Export-PDF":"PDF格式","Cache-DataBase-Parameters-Setting":"数据集共享属性设置","RWA-Column_Offset":"列偏移","FR-Engine_Enlarge_Or_Reduce":"缩放","FR-Engine_Excel_Foot_Tip_Page_Count":",显示{R1}行数据","FS-Module-Plugin_Operate":"插件管理","FR-Engine_Refresh":"刷新","Plugin-ChartF_Moniter_refresh":"监控刷新","Form-Editing_Listeners":"事件编辑","FR-Engine-Condition_Greater_Than_Or_Equals":"大于或等于","FS-System-Edit_Personal_Realname":"修改姓名","FS-User-Position_Can_Not_Be_Null":"职位不能为空","FS-Plugin_updateOnline_CurrentVersion":"JAR版本","FR-Engine_Sun":"日","Plugin-ChartF_Shadow":"阴影","Utils-The_Name_has_been_existed":"此名已经存在","Collect-Click!_Get_user_information_code":"点击!获取激活码","FS-Plugin_updateOnline_LatestVersion":"最新JAR","FR-Engine_Edit":"编辑","Plugin-ChartF_TitleMaxProportion":"标题区域最大占比","FR-Engine_Multi-Excel-Import":"批量Excel数据导入","FR-Engine-ReportServerP_Print[Server]":"打印[服务器]","TaipeiCity":"台北市","FR-Engine_Event_afterappletprint":"Applet打印后","Verify-Formular_Parser_Error":"公式解析错误","Edit":"编辑","FS-Schedule_Local_File":"本地文件","FR-Engine-Loading_Component":"正在加载控件","FR-Engine_Excel_Title_Lines":"标题行","ExpandD-Inherit_All_Condition":"继承所有条件","Layer-Waiting_For_Page_Number":"等待页码","Utils-Beyond_the_bottom_side_of_Border":"超出下边界","Set_Callback_Function":"设置回调函数","Backup_To":"备份到","Utils-Design-File_Open":"打开","FR-Engine_FS_Task_End":"内截止","FR-Basic_Successfully":"成功","Function-The_selected_file_cannot_be_null":"文件不能为空","EmailPane-mailContent":"邮件正文","RP_Content":"正文","FS-System-Cache_Template_Settings":"模板缓存属性设置","FS-Mobile-Dev_Added_By_Admin":"管理员添加的设备","FR-Designer-Plugin_Install_From_Local":"从本地文件安装","DS-Class_Name":"类名","FS-Monitor-Dlg_View":"弹窗浏览","FS-Plugin_UpdateOnline_Backup_Old_Project":"备份8.0工程","FRFont-Style":"字形","Preference-Row_Header_Visible":"行标题可见","FS-Reg-Lock_Serial_Number":"加密锁序列号","RWA-Key":"主键","Type_Set":"类型设置","Datasource-SAP_datasource":"SAP 数据源","Statistic":"统计","Err-The_value_must_be_number":"值必须是一个数字","Get-Cube":"正在获取cube","LayerPageReport_WN_Report_Columns":"按页运算引擎暂不支持报表分栏","Chart-Project_ID":"项目名","FR-Designer_No-Privilege":"没有权限","ReportWebAttr-Widget_Css":"控件自定义样式表","ChartF-Arrow":"箭头","FR-Engine_RP_Son_Task_Not_Complete":"子任务尚未完成","FR-Designer_ReportColumns-Repeat_Column":"复制列序列","Choice_Type":"备选项类型","FR-Chart-Heat_Map":"热力地图","FS-Generic-Simple_Delete":"删除","ChartF-Tick_Size":"刻度大小","Plugin-ChartF_Node_Radius":"节点半径","Normal":"普通","FS-Schedule_Mobile-User-Group-Not-Null":"请设置消息接收人","Hyperlink-URL_cannot_be_null":"URL不能为空","Layout-Margin":"外边距","FS-Report-Simple_Analysis":"分析","FS-Generic-Simple_Hour":"小时","FR-Engine-Click_To_Shrink_Panel":"点击收缩面板","Border-Style":"边框样式","FR-Plugin-Store_Disconnected":"无法连接应用中心","I-AreaStyle_PercentageStack":"百分比堆积面积图","HF-Move_Right":"右移","Work_After_Restart_Designer":"重启设计器后生效","FS-Monitor-Log_Clean_Three_Months_Auto":"每隔三个月自动清理一次","FS-Schedule_Input_Style":"输入方式","Chart-Step_Nam":"步骤名","FR-Designer-Beyond_Bounds":"超出或者小于body边界，不能调整大小","FR-Engine-Edit_Clear":"清除","FR-Chart-Pop_Chart":"悬浮窗图表","Plugin-ChartF_Gauge_Cuvette_Title":"试管仪表盘","WEB-Write_Setting":"填报页面设置","FS-Generic-Platform_Module_Log":"日志","FR-Designer_ReportColumns-Repeat_Row":"复制行序列","Attention":"注意","FR-Engine_RP_Execute_Day":"执行日","Re-sametime-ip":"可同时访问模板IP的个数","FR-Chart-Gantt_RealEndTime":"实际结束时间","Plugin-ChartF_MultiPie_Series_Name":"指标名","Chart-Pointer_Value":"指针对应值","StyleFormat-Category":"分类","FS-Failed-AppName-Reason":"失败原因：注册应用名与本机不匹配","Plugin-ChartF_Map_Param_RootName":"模板参数","ExpandD-Remove_Datasource":"删除数据源","ConnectionPool_Attr":"连接池属性","FR-Chart-Product_Demo":"产品演示","FR-Designer_Server-version-tip-moreInfo":"建议您所属团队使用的我方FineReport产品的设计器版本号以及部署的服务器版本号保持一致，以避免版本不一致造成的问题风险。\n假如您打开更高设计器版本制作的模板，可能打开出错，也可能丢失原有模板属性。假如您制作的模板使用的设计器版本高于您最终部署所用的服务器版本，服务器可能无法正常载入您制作的模板。","FR-Chart-TimeUnit_Second":"秒","FS-Schedule_Continue":"继续","FS-Schedule-Execute_Period_Time_Unit_Day":"每天","FR-Plugin-Store_Version":"版本","sure_to_delete":"确认删除","Plugin-ChartF_AreaSize":"区域大小","Execute_Error_info_forbid_formula":"非法传入参数，禁止为公式","FS-Privilege-Template_Control":"模板权限控制","FR-Engine_Database_Connection_Failed":"错误代码：11300008 数据库连接失败","Plugin-ChartF_CustomIntervalBackground":"自定义间隔","FS-Report-RP_AddLabel":"添加上报标签","FS-Monitor-SMS_Tip":"提示：支持填写多个号码，以,隔开","CardLayout":"卡片布局","FR-Engine-Excel_poi_2007_third":"Error Code: 11200007 导入Excel2007需要更新fr-third.jar","StyleAlignment-Left_To_Right":"从左向右","Plugin-ChartF_Layer_mapbox":"mapbox","Utils-Left_to_Right":"横向","FS-Admin-Verify_New_Password":"确认新密码","BindColumn-Decrease":"减少","FR-Designer_Form-Iframe":"网页框","Click_To_Change_Value":"点击改变值","Verifying":"校验中","Preference-Support_Undo":"支持撤销","FR-Engine_Server_Need_Restart_Title":"升级成功，服务器需要重启","FR-Designer-Plugin_Installed":"已安装","plugin-ChartF-FloatColor":"悬浮颜色","FS-Setting-Background_Image":"图片","Chart_Line_Color":"折线颜色","Support":"支持","M_Edit-Clear_Formats":"格式(F)","Right_Margin":"右边距","Server_Data_Relations_Table":"服务器数据集关系表","FormulaD-Array":"数组函数","PM-Use_Custom_Privilege":"使用自定义权限","ReportServerP-First":"首页","Plugin-ChartF_Preview_DifferentArcPie":"预览不等弧度玫瑰图","FS-System-Last_Logined_Info":"上次登录信息提示","Utils-Insert_Column":"插入列","FS-System-Config_SMS_Accout_Bind":"账号绑定","fs_process_sontask_tip":"子流程任务:此任务可以选择其他流程作为当前流程的任务来处理。","ChartF-Column":"柱形图","Cache-Cpt-Parameters-Setting":"模板缓存属性设置","M_Edit-Redo":"重做","LIC-Support_Server_Cluster":"报表服务器集群","FS-System-Config_SMS_Model_Mangement":"管理模板","FS-Schedule_Cause_Too_Much_Cal_Continue":"，可能导致计算量过大，是否继续？","FS-Schedule-Output_Attach_Print":"打印文件","DashBoard-DashBoradSetting":"欢迎界面设置","Offline":"离线","M_Help_Licence":"授权许可","Utils-Remove_Row":"删除记录","Column-Fields":"列字段","Utils-Actual_Value":"实际值","read_time_out":"加载超时","Datasource-Datasource-value":"数据源值","ReportServerP-Basic":"基本","Tree-Filter_Condition":"过滤条件","Plugin-ChartF_Info_Dynamic_Chart":"使用了未注册的功能\u2014动态图表","ChartF-Outside":"外部","DateFormat-yyyyMd":"yyyy年M月d日","FR-Engine-Write_Clear":"清空","Start_automatically_when_starting":"启动时自动显示此窗口","FS-BakRestore_Restore":"还原","FR-Engine_RP_Rollback":"回退","MaxMarker":"大标记","FS-PSqlInj-FW_Edit_Title":"关键字管理","DateFormat-yyyyMM":"yyyy年MM月","Privilege-The_Authentication_Is_Not_Supported":"无法支持认证","FS-Generic-Simple_Position":"位置","Set_User_Type":"设置用户类型","Layout-Index":"索引","Utils-Delete_Directory":"删除目录","FR-Engine_Event_beforesubmit":"提交前","Plugin-ChartF_Cycle":"周期","Add_Department_Failure":"部门添加失败，该部门名已被占用","FR-Engine_Function_Form_Widget_Edit_Popupmenu":"表单组件编辑(右键菜单)","FR-Background_Image_Default":"默认","FS-Reg-Immediately":"立即注册","DashBoard-LearnTutorial":"高手进阶  进入FineReport v6.5的学习教程","Short-Jan":"一","FormulaD-Most_Recently_Used":"常用函数","Form-EC-toolbar":"报表块工具栏","BiasD-Input_Slope_Line_text_separated_by_'|'":"输入斜线文字,以'|'分隔","GroupB-Summary_Columns":"汇总列","None":"无","FS-Mobile-Select_Username":"选择用户名","BackgroundTexture-GreenMarble":"绿色大理石","FR-Plugin-Designer_FTP_Setting_Default":"设为默认FTP","Plugin-Memory_Alarm_Mode_Debug":"调试模式","FR-Chart-Map_Hebei":"河北","FS-System-Config_Backup_Frequency_Threemonths":"3月","Ean13_less_than_12":"输入位数不足，Ean13码需要输入12位字符，最后一位由系统自动生成。","FR-Engine_Sat":"六","Series_Dismenber_As_Single":"连续分隔符视为单个处理","Chart_SetInterval_Grid":"设置间隔背景和网格线背景","FS-Plugin_UpdateLogContent":"更新内容","Export-Excel-Setting":"Excel导出方式设置","Priority":"优先级","Re-version-match":"版本号匹配","FR-Designer-LayerPageReport_Define_PageQuerySQL":"定义分页查询sql","FR-Engine_FS_End_Date":"结束日期","Axis-Style-Option":"坐标轴选项","FR-Chart-Map_Taiyuan":"太原市","August":"八月","FR-Chart-Type_Funnel":"漏斗图","Copy":"复制","FR-Engine-Unload_Check_Msg":"有数据没有提交","WF-Auto_Task_Node":"自动任务节点","Form-Report":"报表块","FR-Engine_User":"用户","StyleFormat-Time":"时间型","Animation_Special":"特效","ExpandD-Top_to_Bottom":"从上向下","Hyperlink-Show_Menubar":"显示菜单栏","Save_As_Global_Style":"保存为全局格式","FS-Login_SMS_Verfication_Title":"短信验证","ChartF-PlansToBegin":"计划开始","FR-Engine_Parameter-String":"字符串","RP_Have_Come_To_You_For":"已经到你这里","Preview_Used_Time":"预览已用时间","FR-Designer_Song_TypeFace":"宋体","Required":"必填","FR-Designer-Basic_Copy_Activation_Key":"双击设计器编号可复制到剪贴板","FR-Designer-Plugins_Year_Start":"起始年份","More-information":"更多信息","M_Edit-Clear_All":"全部(A)","INFO-Server_Started_Successfully":"成功启动服务器","TemplatedatasourceSameWarning":"模板数据集中有数据集名字重复，请修改！","FS-Monitor-Free_Memory":"空闲内存","Selection-Foreground":"选中项前景色","FR-Server_Embedded_Server_Start":"內置的服务器-打开","CSS_Import_Description":"只能通过相对路径引用CSS: \n相对报表工程目录如WebReport, 如WebReport\\css下有引用的css文件test.css，则相对路径为css/test.css","FR-Chart-Bar3D_Chart":"三维柱形图","FR-Engine_ConditionB-does_not_in":"不包含于","Data":"数据","Date":"日期","FR-Engine-Sort_Ascending":"升序","Chart_Stock_Check_Data":"请检查您的数据!","FR-Basic_Week":"周","FS-Schedule_Mobile-Title-Not-Null":"请设置消息标题","Second":"第二","Single":"一个","FS-Plugin-Store_Finereport":"","FR-Plugin_Error_HasNewerPluginWhenUpdate":"已经安装了更高的版本","FR-Engine_Delete_Data":"删除数据","M_Format-Add_Row_After":"在后面添加行(D)","ispageBoxMemo":"勾选则纸张默认居中，取消勾选纸张默认居左","TableDismember":"制表符","Cross_Report_Wizard":"交叉报表向导","Dic-Set_Actual_Value_And_Display_Value":"设定实际值和显示值","New_name":"新名称","Actived":"活动的","Schedule-Frequency":"频率设定","FR-Chart-Map_Zhongxiqu":"中西区","Chart_Series_Separate":"系列分割","Utils-Data_consistency_check_successfully_Passed":"成功通过数据一致性检验","FS-Plugin-Store_Update-ALL":"","FormulaD-Valid_Script":"合法的脚本","FS-Report-Link_Address":"链接地址","Server_Data_Relations":"服务器数据集关系","Verify-Verify_Formula":"校验公式","Plugin-ChartF_NewBar":"条形图（新特性）","Import-Datasource_Files":"数据源文件","FR-Basic_OK":"确定","FS-Lic-Upload":"上传lic","BackgroundTexture-WaterDroplets":"水滴","PDF-Print_isPopup":"是否弹出设置框","FS-PSqlInj-ADD_Custom_SC":"添加字符","FS-Generic-Flash_Print":"Flash打印","DBCP_TEST_ON_RETURN":"归还连接前检验","FS-System-Simple_LFU":"最不常使用","Line":"线条","FS-Msg-Invalid_Plugin_Zip_File":"无法安装! 无效的zip文件!","Note":"备注","FR-Hyperlink_Chart_Float":"图表超链-联动悬浮元素","Link":"链接","Utils-Group_Footer":"","Utils-Current_Column":"当前列","FR-Plugin-Designer_Upload_Description":"<html>&nbsp;提示：<br/>&nbsp;磁盘路径<font color=\"#BE0000\">＝\"D:/\"<\/font>,此处示例为D盘根目录<br/>&nbsp;文件<font color=\"#BE0000\">＝A1<\/font>,说明文件绑定A1单元格<br/>&nbsp;文件名<font color=\"#BE0000\">＝A10<\/font>,代表文件名使用A10单元格内容<br/>&nbsp;<br/>&nbsp;<\/html>","InsertBackward":"向后插入","FS-Generic-Face_View":"查看","Chart-Bubble_Size":"气泡大小","FR-Engine_Search_Role":"搜索角色","Plugin-ChartF_Preview_Bar":"预览条形图","FR-Engine_Lic-Form":"决策报表","October":"十月","Compile-Not_Support":"不支持动态编译","FR-Engine_Specified_Pages":"指定页","FR-Base-NS_Cell_Formula":"错误代码:11200003 错误的公式参数","FR-Engine_Write_Group_Name_Here":"这里填写组名","FR-Plugin-Designer_FTP_Site_User":"用户名:","Chart":"图表","FS-Generic-Simple_Actions":"任务","FR-Base_Sche_Day":"日期","CellWrite-InsertRow_COPY":"原值","Printer-All_Printer_Groups":"所有打印机组","FS-Process-already_has":"已有","ComboCheckBox-Start_Symbol":"起始符","FR-Engine_Add_Role":"添加角色","FR-Engine_Tree":"折叠树","ExpandD-Expand_Cell":"扩展单元格","ChartF-Stock":"股价图","Remove_Selected_Button":"移除选中按钮","FR-Widget_Tree_And_Table":"控件树和控件表","Plugin-ChartF_Heat_Map_Blur":"模糊度","Plugin-Chart_Unsupported_Browser":"请使用IE9及以上浏览器","FR-Engine_Please_Enter_End_Value":"请输入终止值，不选择默认为最大值","FS-User-Department_Position":"部门职务","HotHyperlink-Hot_Hyperlink":"热点链接","Chart_Area_Style":"面积样式","I-LineStyle_Line3D":"三维折线图","Import-Excel_Source":"Excel源文件","Plugin-ChartF_LogBaseValue":"对数底数","M_Server-Function_Manager":"函数管理器","Bottom_Border_Line":"下框线","StyleAlignment-Distibuted":"分散对齐","Plugin-ChartF_Preview_Column":"预览柱形图","FS-Monitor-Simple_Error_Message":"简单的出错信息","FR-Engine_Export-Offline-Html":"输出离线html报表","Server_Print":"服务器端打印","List":"列表","Plugin-ChartF_type":"类型","FR-Plugin-Jar_Expired":"Jar包过旧,插件安装失败:","Plugin-ChartF_Carousel_Style":"轮播","FR-Engine_Plugin_Leave_Over_Plugin_Detected":"存在8.0未删除的jar包","Content-empty":" 内容将显示为空。","FS-System-Bind_Phone_Success":"手机绑定成功","FS-Monitor-Options_Static":"操作统计","NanjingCity":"南京市","Guizhou":"贵州省","FR-Chart-Series_Gap":"系列间隔","SpecifiedG-Put_all_others_together":"把其它所有的合并","AxisValue":"坐标轴值","FR-Engine_Every":"每","Parameter_Query":"参数查询","ChartF-Range_Chart":"全距图","AttenchmentsByReceiver":"根据收件人不同生成不同附件","ChartF-Label_Interval":"标签间隔","Form-TextArea":"文本域","FR-Engine-Selection_Filter":"条件筛选","FR-Chart-Map_Qinghai":"青海","RWA-Skip_Unmodified":"值不改变不更新","FR-Engine_Event_statechange":"状态改变","LIC-Support_Remote_Design":"远程设计","FR-Plugin-Store_Update-ALL":"全部更新","FR-Engine_RP_Sponsor":"发起人","Chart-Use_Percent":"百分比","Utils-Would_you_like_to_save":"你是否需要保存","title":"标题","FR-Plugin-Store_Jar_Damaged":"Jar包损坏","FR-Engine-Year_Value_Null":"空值","FS-Schedule_Mobile-Link-Not_Null":"请设置消息链接","Column_Multiple":"数据倍数","TurnScreenVerticalToGetBestEffect":"请翻转屏幕，纵向显示效果更佳","Add_NewUser":"添加新用户","FS-Web-Plugin_Please_Update_Jar":"请更新jar包至","FR-Engine_TaskName":"任务名称","Certification_Type":"认证类型","FS-Generic_Invalid_File_Type_To_Upload":"是禁止上传的文件类型，允许上传的文件包括","FS-User_Create_Role":"人员管理","FR-Engine_RP_Unlimited":"不限","FR-Engine_Tab_Layout_Title":"标题","Classpath-Add_Folder":"添加文件夹","FR-Plugin_Register_Error_LicInvalid":"证书格式错误","DEFAULT":"默认","FS-Schedule_Copies":"次","LIC-Support_ADHOC":"即席报表","FR-Engine_Custom_FS_Process":"自定义流程匹配","Re-lock-serial":"加密狗序列号","ChartZoom":"图表缩放","FR-Basic_Not_In_List":"值不在下拉列表内","FR-Engine_Event_stopedit":"编辑结束","ParameterD-DClick_New_Parameter":"双击新建参数","Build-Way":"构建方式","Plugin-Chart_TopDownShade":"渐变","FS-BakRestore_Info":"提示","DataFunction-Count":"个数","Chart-Map_HowtoDrawMarker":"点击来放置标记点","Even":"偶数","ChartF-MiddleLine":"中间线样式","Chart_Bubble":"气泡","M_Insert-Data_Column":"插入数据列","FS-Generic-Times_Sum":"次数","Exit_Tutorial":"退出教程","HTML-Write_Insert_Data_Failed":"数据插入失败","FS-Generic-Last_Day":"最后一天","Input-New_Name":"输入新名字","LIC-Support_Multi_Web_App":"服务器支持多个应用","FS-Report-Simple_Way":"方式","CellWrite-Editable":"可以编辑单元格内容","data_configuration":"数据配置","FS-Monitor-Log_View":"日志查看","FS-Schedule-Enter_Execute_Formula":"请输入执行公式!","Cache-Path-Setting":"缓存路径设置","FS-Plugin-Store_Account":"","Confirm":"确认","Schedule-Scheduled_Task_Manager":"定时任务管理器","Parameter_Setting":"参数设置","FS-Generic-Manager_System":"管理系统","BaiduMap":"百度地图","FR-Engine_Choose_All":"全选","FR-Chart-Style_Plane3D":"平面3D","FR-Engine_Layout":"布局","Cache_Dir_File_Permission_Error":"文件无法读取或创建，请检查cache.xml下面的缓存目录访问权限","FR-mobile_analysis_style":"解析方式","FS-System-Basic_Description":"常规","FS-Schedule_Mobile-Push-Content":"内容","Cell_Point":"单元格定位","Return-String":"返回字符串","FR-Engine_ConditionB-not_null":"不为空","FR-Engine_RP_Rollback_To":"回退至","ReportServerP-Toolbar":"工具栏","ChartF-Show_Percentages":"显示百分比","Want_To_New_Parameter":"是否想添加参数","Open_Synchronized_DataSet":"开启同步数据集","FR-Designer-FRFont_Underline":"下划线","FS-Monitor-Real_Time_Memory":"实时内存","M_Window-Previous_Window":"上一个窗口(P)","Present-Formula_Present":"公式形态","Error_WidgetNameRepeat":"已经存在","FS-Plugin_UpdateOnline_Tips":"提示:","Expression":"表达式","Classpath-Add_Jar_to_Classpath":"添加Jar到Classpath","Procedure-Warning":"<html>当前存储过程不包含参数或您当前登录用户名与Schema不匹配，<br>系统无法为您自动加载参数，请手动添加<\/html>","Set_More":"详细设置","Plugin-ChartF_Animation_Type":"运动方式","Group_Count":"表示总个数","Utils-Report-Env_Directory":"报表工作目录","Value_Percent":"值所占比例","Plugin-ChartF_Radar":"雷达图","DataFunction-None":"无","Plugin-ChartF_NewCustom_StackColumnLine":"堆积柱形图-折线图","M_Report-Report_Header":"报表页眉","I-RadarChartStyle_Fill":"填充雷达图","FR-Basic-File_Uploaded_File":"该文件已上传","Schedule-Select_Template":"选择模板","RP_Task_List":"任务列表","FS-System-Config_SMS_Content":"信息内容","FR-Engine_Event_aftertoimage":"导出图片后","FR-Engine_Event_afterimportexcel":"Excel导入后","FR-Engine_Cancel":"取消","PageSetup-End_Row":"结束行","CellWrite-Show_Content":"显示内容","FS-Monitor-Not_Exist":"不存在","Value":"值","Web-WEB-INF_Directory":"","FR-Layout_Padding":"内边距","FR-Plugin-Store_Password":"密码","FR-Engine_NS_print_plugin":"错误代码:11200001 当前浏览器未安装打印所需插件","Import-Unconverted_Formula":"不能转换的公式","WARNING-Fail_to_Delete_Cache_File":"删除本地缓存文件失败","FS-Report-Simple_BI":"添加BI","FR-Chart-Gantt_PlanTime":"计划时间","FS-Reg-BI-Version":"BI版本","FR-Engine_Add_Record":"增加记录","FR-Chart-Template_Preview":"预览","FS-Generic-Simple_January":"一月","ChartF-Original_Value":"原始值","FR-Engine_ConditionB-is_less_than":"小于","FR-Engine_Default-Solution":"抱歉！暂无解决方案建议。","FR-Designer_Submmit_WClass":"后台类提交","ServerMenu_Privilege":"服务器权限菜单","M_Report-Formula_Parameter":"公式参数(P)","FR-Designer_Cancel":"取消","M_Insert-Shape_Rectangle":"矩形(R)","ChartF-Tick_Color":"刻度颜色","Performance-plugin_submitbatch_name":"批量提交","Transmission_Encryption":"传输加密","ThreeD_Column_Chart":"三维条形图","Display_Value":"显示值","Bottom_Margin":"下边距","FR-Chart-Action_Copy":"复制","Log_Declare_Head_Execute":"报表计算中","Error":"错误","FS-CustomStyle_Toast_Add":"添加样式","Conditions_formula":"条件公式","FR-Designer_Parameter_String":"字符串","AomenBandao":"澳门半岛","FS-BakRestore_Log_Schedule":"定时调度","Corresponding_Fields":"对应字段","ChartF-PieSeperatePercent":"饼图分离程度","Plugin-ChartF_UseLabel":"使用标签","Plugin-ChartF_New":"新特性","XianCity":"西安市","FS-Schedule-Extra_Execute_X_Times":"额外重复执行{R1}次","FS-Monitor-Log_Clean":"清理","History":"历史","HF-Header_and_Footer":"眉头和眉脚","FR-Engine_Prospecting_File_Error":"勘错文件导出时发生错误","Measure":"度量值","Printer-Printer_Manager":"打印机管理","FR-Engine_Registration_Code":"注册码","already_exists":"已经存在","Utils-Set_ClassPath":"设置Classpath路径","FR-Engine_Event_beforepdfprint":"PDF打印前","DashBoard-NoMoreReminder":"不再显示","Recursion_Pane_Only":"此面板仅用于递归树结构的数据库表","Form-ComboBox":"下拉框","FS-Schedule_Expected_to_Gen_About":"预计产生","FS-Reg-Mac_Address":"Mac地址：","M_Insert-Image":"插入图片","Plugin-ChartF_Duration_Time":"持续时间","Plugin-ChartF_Layer_Detail":"层级属性","Chart_Legend(Series)":"图例项(系列)","Please-Select-Float-E":"请选中要删除的悬浮元素","Plugin-ChartF_Save_Success":"保存成功","Chart-Link_Float":"图表超链-联动悬浮元素","FR-Designer_Widget":"控件","ExpandD-Push_Cell":"后推单元格","Plugin-Chart_Not_Excel":"非excel文件","Key":"键","FS-System-Config_Backup":"备份","Save_All_Records_In_Memory":"所有记录都保存在内存中","Form-Component_Bounds":"控件边界","FR-Chart-Map_China":"中国","Chart-Category_Use_Name":"分类名称","March":"三月","Plugin-ChartF_Min":"最小","FS-Privilege-Template_Edit":"报表编辑","Plugin-ChartF_Minus_Color":"","Dic-Database_Table":"数据库表","Plugin-ChartF_Auto":"自动","FS-Schedule-Output_Information_And_Archive":"通知与存档","Plugin_Picture":"图片","HF-Insert_Parameter":"插入参数","FR-Basic_Current":"当前","Parameter_Name":"参数名","ChartF-Averge-To-Max-Color":"平均值到最大值区域颜色","Shanghai":"上海市","Calendar":"日历","FR-Engine_Row":"行","FR-Engine_Native_Print":"本地软件打印","FR-Designer-Form-ToolBar_Chart":"图表","Performance-plugin_isclosed":"是否关闭","EDIT_REPORT_XML":"在线编辑报表内容传输","Chart-LatFirst":"纬度在前","Chart-Use_Data":"数据","FR-Designer_Show_Blank_Row":"补充空白行","FR-Engine_EssBase-database":"EssBase数据库","ChartF-Range":"范围","FS-System-Config_SMS_Test_Failed":"信息发送失败!","ReportServerP-Custom_Toolbar":"定制工具栏","Utils-No_File_Selected":"没有选择文件","FRFont-Subscript":"下标","FR-Chart-Types_Switch":"图表切换","Backup_Cpt":"备份模板","Export-Excel-Simple":"原样导出","FS-System-Config_Backup_Frequency_Onemonth":"1月","FS-System-Config_SMS_Recharge":"充值","Excel":"Excel","Chart_Log":"对数拟合","LIC-Support_Predefined_Widget":"编辑器控件管理","FS-Report_Batch_Remove":"批量删除","Performance-plugin-save":"保存","FR-Chart_SecondGraduationUnit":"次要刻度单位","First":"首页","PageSetup-Footer":"页脚","FR-Designer_Month":"月","FR-Designer_Date":"日期","Form-Hierarchy_Tree_Last":"上一个","CellPage-Can_Break_On_Paginate":"分页时可以断开","FS-Generic-Simple_Name":"数据决策系统","FR-Chart-Map_Hainan":"海南","FS-Schedule-Simple_Times":"次","Row_Dimension":"行轴/维度","FR-Base-Load_Resource_File":"加载配置文件","FS-Plugin-Store_Update_From_Local":"","Please_input_with_right_format":"请用正确的格式输入","FS-Schedule-File_Name_Not_Null":"文件名称不能为空","PageSetup-Placement_Center_on_Page":"居中方式","FR-Plugin_Error_InitClassesError":"加载类时发生错误","Browser_Address":"浏览地址","FS-Schedule_Choose_Template":"选择模板","LIC-Support_Frozen_View":"冻结表头","M_Edit-Delete":"删除(D)","ChartF-Legend-Option":"图例选项","FR-Engine_ExecuteFrequency":"执行频率","FR-Engine_OK":"确定","Unit_Hundred":"百","FS-Web-Plugin_Read_Plugin_List_Error":"插件列表读取失败","FS-Report-Enter_File_Name":"请输入文件名称！","FS-Generic-Simple_Description":"描述","Vgap":"垂直间隙","Depth_Style":"厚度设置","FS-Monitor-Has_Error":"有错误","Print_Setting":"打印设置","Chart-StyleAlignment_Top":"靠上","not-found":"未发现","Preference-Custom":"自定义","ChartF-Axis_Scale":"坐标轴缩放","RWA-Des1":"重新刷新所有列名会清除当前记录","ThreeD_Bar_Chart_Horizontal":"三维柱形图(横向)","FlowLayout-Center":"中间","FR-Engine_Print":"打印","Chart-Use_None":"无","Utils-NewDemoEnv":"产品演示，将为您自动创建工作目录：","ChartF-Gantt":"甘特图","fileLocked_undeleted":"模板被锁定，不能删除！点击确定，刷新模板列表","FR-Base_Yes":"是","I-BarStyle_NormalStack":"堆积柱形图","Projection":"投影","M-Data_Analysis_Settings":"数据分析设置","FS-Generic-Simple_Sender":"发件人","FS-System-Visit_Times":"系统访问次数统计","FR-App-Report_Template":"报表模版","Plugin-Chart_Import_Data":"导入数据","Datasource-Select_the_class_name":"选择程序数据源的类名","FR-Designer_Plugin_Normal_Update_From_Local":"从本地文件更新","FR-Designer_ComboBox":"下拉框","FS-User-User_Limit_Tip_Right":"用户使用决策系统","Print-Print_To_Fit_Paper_Size":"根据纸张大小缩放打印","FR-Designer_Prepare_Export":"开始导出，请稍候","FS-BakRestore_BackupCountMax":"份数上限","Form-Paste":"粘贴","FR-Engine_Overall_Upload_Progress":"整体上传进度","Plugin-ChartF_Point":"点","FS-Reg-Lic_Upload_Success":"FanRuan.lic上传成功, 请重启服务器后刷新本页面!","ChartF-Plot":"绘图区","FS-Schedule_Regular_Cal_Tip":"所选模板将根据设置的周期和参数组合定时计算，生成结果报表和其他附件","DS-Convert_to_Private":"转为私有","FR-Chart-Type_Area":"面积图","FR-Engine-Send_Failed":"发送失败","Set_group_fields":"将报表中的信息分组","Title-Content":"标题内容","Sche-Day":"日期","FR-Engine_New_Name":"新的名称","FS-Schedule_Retain_Latest_One":"仅留最近1次","Chart-Unit_Ten_Thousand":"万","FR-Designer_Build-Way":"构建方式","FS-Schedule_Mobile-Push-Terminal":"推送终端","FR-Base_Short_Sep":"九","FS-Monitor-Memory_Session":"内存会话","FR-Engine_Error-Page":"出错页面","FS-Monitor-Error_Template":"发生错误的模板","FR-Plugin_Error_DependenceServiceNotStarted":"插件依赖的服务尚未启动或启动失败","Plugin-ChartF_Prompt_Box":"提示框","roles_already_authority_edited":"已配置角色","Form-Method":"方法","Heilongjiang":"黑龙江省","FR-Engine_RP_Back_To_Start":"可越级回退至首节点","EndValue":"结束值","FR-Engine_Add":"增加","FS-Setting-Image_With_Title":"图片+标题","RP_To_Report":"待上报","FR-Engine-Condition_Greater_Than":"大于","FR-Engine_Last_Submit_Time":"上次提交时间","ChartFF-Line_Marker":"线标记","Main_Value_Axis":"主值轴","Radio":"单选框","FS-Generic-Re_Multi_Privilege":"多级权限配置","ChartF-Gis":"gis地图","FRFont-Superscript":"上标","FS-Generic-Most_Time_Restart":"尝试重新启动最多次数","FR-Plugin-Update_Dependence_Success":"依赖插件更新成功","FS-System-Cache_Reload_Template_Policy":"总是重新读取模板","FR-Engine_Is":"为","FR-Engine_EssBase-TableData":"EssBase数据集","Plugin-ChartF_NewWordCloud":"词云(新特性)","FR-Plugin_Error_InvalidPluginFolder":"不是有效的插件目录","ruleSet":"规则设置","Directory_Used_For_Text_Excel":"目录是应用于文本数据集和EXCEL数据集的文件夹目录，里面包含了普通文本或者EXCEL文件","ParameterD-Des1":"拖拽或者双击参数列表,往格子里面添加参数","Moment":"时刻","FR-Widget_Mobile_Tree":"控件树","Deploy-You_Could_Access":"您还可以由此进入","FS-System-Email_Show_Full_Name":"显示姓名","Tree":"树","FR-Engine_Date":"日期","Client":"客户端","FS-Monitor-Visit_Times":"访问次数","Is_Paint_Page":"以图片方式显示","DS-Form_DataSource":"表单数据源","SQLWizard-add_having_condition":"增加HAVING条件","FR-Engine_Refresh_Successfully":"刷新成功","DashBoard-More":"更多...","Background-Texture":"纹理","Widget-User_Defined":"预定义","NS_register_lic":"错误代码:11200006 当前配置目录下未发现注册文件","FS-Generic-M_Page_Preview":"分页预览","FS-Monitor-In_Detail":"具体","Basic":"基本","ReportColumns-Columns_Style_horizontally":"行分栏样式","Performance-plugin_reducecalculation":"数据集归并加载","FS-System-First_Login_Info2":"成员可通过邮箱和手机接收通知、验证等信息。为了更方便，安全的使用系统，建议添加邮箱和手机号！","FS-System-First_Login_Info4":"成员可通过邮箱和手机接收通知、验证等信息。为了更方便，安全的使用系统，建议同步邮箱和手机号！","FS-Msg-Success-Alert":"FanRuan.lic上传成功，请刷新平台页面!","FS-System-First_Login_Info3":"成员可通过邮箱和手机接收通知、验证等信息。为了更方便，安全的使用系统，建议导入邮箱和手机号！","FR-Engine_Enter-New-FileName":"请输入新的文件名","BiasD-From-lower_left_to_upper_right":"从左下到右上发散","Image-Image_Layout":"图片布局","FormulaD-Report":"报表函数","FS-System-Cache_Dataset_Share":"数据集共享","FR-Engine_RP_Task_Type":"任务类型","FR-Base_New-Title":"新建标题","FR-Chart-Stock_Low":"盘低","FR-Engine_Note":"备注","FR-Designer-Need":"需要","FS-System-FlashP_Default_Size":"默认根据纸张大小进行缩放","FS-Setting-Edit_Icon":"图标编辑","RP_Support_Offline":"支持离线填报","FS-Process-Name_Cannot_Be_Null":"名字不能为空","FS-Schedule_Result_Workbook":"结果报表","Lower_LayerSet":"下层钻取设置","Parameter-Refresh_Parameter_UI":"刷新参数界面","FR-Plugin_Error_MultiLicenseEntry":"存在多个授权注解","Sort-Ascending":"升序","FS-Monitor-Log_Statistics":"对日志进行统计","FR-Base_DecimalNumber_Out":"小数位过多","Lookup_Range":"查找范围","Desktop":"桌面","Privilege_Login_Name":"登录名","ConditionB-contains":"包含","ChartF-Volume-High-Low-Close":"成交量-盘高-盘低-收盘图","Utils-Print[Client]":"打印[客户端]","Offline-Verify_ToolTips":"提交校验中包含离线状态无法执行的校验规则，继续将忽略这些校验规则，但是在联网提交时会被重新执行，是否继续校验？","Area_Value":"区域值","FR-Engine_PageSetup-Margin":"页边距","Chart-Link_Dynamic_Parameters":"动态参数","Form-Please_Select_A_Kind_Of_Form_Container":"请选择一种表单容器","FS-Plugin-Store_Recommend":"","HJS-Specified_Pages":"指定页","Schedule-Task_Content":"任务内容","Utils-Resign_in":"重登录","Verify_Fail":"校验失败","PrintP-First":"首页(F)","ChartF-Custom_the_increment":"自定义增量","Database_Connection":"数据库连接","FR-Engine_KaiTi":"楷体","July":"七月","Not_Layer_Report":"非层式报表","Tree-ComboBox":"下拉树","BindCellD-Define_Value":"默认值","Status":"状态","Chart_Axis_IsVisible":"显示坐标轴","Set_Frozen_Cell":"设置冻结单元格","FR-Designer_Release_Lock":"解锁","Datasource-Rename_hibernate_datasource":"重命名Hibernate数据源","I-LineStyle_LineStack":"堆积折线图","FR-Engine_Create_New_Groups_For_Remaining_Values":"将各个剩余值分别创建为新组","FS-Monitor-Triggering_Conditions_Msg_Body":"%，持续","FR-Chart-Map_Haikou":"海口市","FR-Following_parameters_are_not_generated":"以下参数未生成","June":"六月","LayerPageReport_WN_DSColumn":"按页运算引擎只支持列表以及简单分组，其余属性功能均不支持","Form-Left_Align":"左对齐","FS-User-Unauthorized_Users":"未授权用户","FR-Engine_RP_Cpt_Operation":"模版操作","FS-Register_No_Limit":"不限","RP_Execute_Time":"执行时间","FR-Chart-Version_UpdateFail":"获取新版本失败","M-Print_Preview":"打印预览(V)","Compile_Success_And_Then_Save":"编译成功才能正确保存","FS-Mobile_Authorized_Users":"已授权用户","Plugin-ChartF_Preview_Area":"预览面积图","ChartF-Outline_Color":"外框颜色","FS-Monitor-View":"分析浏览","Plugin-ChartF_NotFollowMouse":"不跟随鼠标","RP_Timing_Issue":"定时下发","FR-Chart-TimeSwitch_Global":"全部","FR-Engine_Clear_All_Filters":"清除所有筛选","FR-Chart-Designer_Preparing4Restart":"正在准备重启","FS-System-Email_Not_Match_User":"邮箱未与该账号绑定","Preference-Predefined":"预定义","Widget-TreeNode-Grade":"层级","Chart-LngLat":"经纬","FR-Export_Word":"Word格式","Privilege-No_Authentication":"没有认证","Light_Blue":"淡蓝","D-ChartArea":"图表区","Plugin-ChartF_Label_Format":"标签格式","FS-Schedule_Platform_Notification":"平台通知","Foreground":"前景","FS-System-Unread_Messages":"未读消息","Please-Select-Cell-E":"请选中要删除的行","FS-Generic-Simple_Role":"角色","not_support_authority_edit":"该元素不支持权限控制","Korea_Language":"韩文","Form-Reset":"重置","FS-BakRestore_AutoBackup_Before_ClearLog":"日志清理前将被自动备份","FR-Base_Sche_Month":"月份","TableData":"数据集","FR-Base_Short_Apr":"四","Plugin-ChartF_Latitude":"纬度","FS-Frame-Exit_Full_Screen":"退出全屏","FR-Engine-Excel_poi_2007":"错误代码:11200007 导入Excel2007需要在lib目录下放置poi包","FR-Base_Sche_Thursday":"星期四","Top_Bottom_Border_Line":"上下框线","FS-Module-System_Monitor":"智能运维","FR-Engine_Start_Print":"开始打印","FR-Engine_RP_Leapfrog_Back":"越级回退","FS-Setting-Background_Color":"颜色","ChartF-Stock-Axis":"股价坐标轴","FS-System-Config_SMS_Innner_Account":"内置账号","Plugin-ChartF_Rename_Repeat":"已存在,请重新命名","FR-Basic_Email_Send_Error":"请检查邮件服务器配置，确认SMTP邮件服务器以及用户名密码和收件人地址填写正确，并确保网络畅通。","FS-Privilege-Digital_Sign_Key_Url":"数字签名密钥地址","Fuction-The_compiled_class_should_be_copied_to":"应将编译后的类文件拷贝到","Fomr-NameWidget-Name":"预定义控件名称","FR-Engine-Write_Submit":"填报提交","FR-Engine_RP_Node_Description":"节点描述","Plugin-ChartF_Layer_Blue":"深蓝","Performance-plugin_imageparser_name":"图片转换插件","FlowLayout-Left":"左","FR-Chart-Data_NotShowCate":"分类为空时,不显示该分类","FS-Admin-Can_not_find_Data_Connection":"错误代码:31300013 找不到数据连接","Loading_Data":"正在加载数据","Background-Initial":"初始背景","FS-System-Visit_Time":"访问时间","DeciPart":"小数部分","DS-Class_TableData":"程序数据集","Home":"主页","FR-Engine_JS_Error":"错误代码：11201000 JS抛错\n具体错误：{R1}\n错误堆栈：{R2}","Product_improve":"产品改良","FR-Chart-Map_Shandong":"山东","FR-Designer_File":"文件","FR-Engine_RP_Add_Process":"添加流程","FS-Admin-Please_Enter_Newpwd":"请设置新密码","HF-Page_Number":"页码","FS-Monitor-Recent_Del_Session":"近10分钟内结束会话数","Browser-Are_you_sure_to_delete_the_selected_browser":"你确实想删除选中的浏览器吗","Add_From_Report":"从报表添加","FR-Plugin-Designer_FTP_Site":"FTP站点","FS-System-Bind_Personal_Email":"绑定邮箱","Previous":"上一步","Plugin-ChartF_AlertLeft":"居左","Plugin-ChartF_Shape":"形状","FR-Engine_Role_List":"角色列表","Chart-NotSupport_IMG&ReportData":"不支持图片形式和单元格数据源","FR-Chart-Module_Name":"图表","M-New_Multi_Report":"新建聚合报表(M)","Form-Width_Des":"设置表单设计窗口的宽度","Config_Synchronized_DataSet":"配置同步数据集","WidgetDisplyPosition":"控件显示位置","Whether_Change_To_LayerReport":"是否转换成层式报表","FR-Chart-Format_Excel":"excel格式","FS-Monitor-Memory_Pressure":"内存利用率","FR-Menu-Server_Chart_PreStyle":"图表预定义配色","FS-Monitor-Visits_User":"用户访问次数","Performance-plugin_save_success":"保存成功","FR-Engine_Event_click":"点击","FS-Plugin_updateOnline_AlreadyLatestJar":"当前jar包已是最新版本","FR-Engine_RP_Review":"审核","FS-BakRestore_Log_Error":"错误日志","TableData_Dynamic_Parameter_Setting":"动态参数注入","ChartData":"图表数据","Ecp_Re":"请重新进行加密","FR-Engine-Print_Set_Printer_Offset":"打印机偏移","Performance-plugin_over_system":"该功能要求更高的系统版本，请升级系统，需要Jar包日期：{R1}","ParameterD-Show_Parameter_Window":"显示参数窗体","FR-Engine_FrequencySet":"频率设置","FR-Designer_Yes":"是","FR-Designer-StyleAlignment_Right":"靠右","Chart_HighLightRelif":"高光浮雕","FR-Engine_Event_beforetoexcel":"Excel导出前","FR-Plugin_Error_DownloadDependFileFailed":"下载依赖文件失败","FS-System-Detail_Info":"详情","FR-Chart-Data_Series":"系列","FR-Engine_Schedule-Weekly":"每周","fs_initDragBar_title_tip":"拖拽左边图标至设计区域可以设计流程，设计区域默认有开始任务，鼠标移入任务时触发可拖拽点拖拽至其他任务的拖拽点即可新建分支。","Privilege-The_Request_Is_Not_Instanceof_HttpServletRequest":"该请求不是HTTP请求","Add_Department_Member":"添加部门人员","FS-Schedule_No_Restart":"不重启","FR-Chart-Data_NotShowSeries":"系列为空时,不显示该系列","ReportServerP-Previous":"上一页","FR-Plugin_Error_BelowSystem":"插件版本过低，需升级","Function-Choose_Function_Class":"选择函数类","Style":"样式","NS_LayerReport_subreport":"错误代码:11100009 行式引擎不支持子报表","FR-Engine_Invalid_Page_Number":"无效页码","Cpt_Backup":"加密前先进行模板备份","select_path":"选择路径","Product_Demo":"产品演示","FS-Monitor-Log_Clean_Two_Months_Auto":"每隔两个月自动清理一次","Feburary":"","FS-Schedule_Mount_Directory":"挂载目录","FS-System-Old_Pwd_Cannot_Empty":"原密码不能为空","FS-Generic-True_Run_Times":"正确的运行次数","Simple_general_forV6":"通用查询(适用于ECC 6以上版本)","FR-Engine_Page-Frozen":"分页冻结:","FS-Schedule-Output_Push_Content_Not_Null":"推送消息不能为空","NextToAxis":"轴旁","FR-Chart-Type_BaiduMap":"百度地图","Not_Found_Reportlet":"没有找到网络报表","Task":"任务","Chart_Pie_Click_Out":"弹出扇面","FR-Base_UnSignIn":"  未登录","FS-Mobile-Device_Bind":"设备绑定","DeepSeriesCap":"深度系列间距","FR-Engine_FS_Start_Time":"开始时间","FS-Schedule_Dataset_Col_Name":"字段名","LIC-Support_Privilege":"模板权限集成","Plugin-ChartF_Task_ID_Tooltip":"如果不设置任务关联，此项可以设置成无","FS-Process-Exclamation_mark":"！","croExpression4":"2013年第4季度每天19点50分","croExpression5":"每个工作日早上9点和晚上6点","Sort":"排序","FS-Generic-Simple_Save":"保存","Reset":"重置","Plugin-ChartF_Start_Time":"开始时间","croExpression1":"每月最后一天19点50分","croExpression2":"每月最后一个工作日19点50分","croExpression3":"每月第4个周五19点50分","FS-Admin-Password":"密 码","Login_Setting":"登录设置","ChartHyperlink":"图表超链","Plugin-ChartF_Index3":"层","Yunnan":"云南省","Plugin-ChartF_Index1":"第","Plugin-ChartF_Delete_Error":"删除失败","FS-Setting_Home_Page_Manage":"首页","M_Insert-Rows":"行(R)","FR-Designer_Double":"小数","FS-Generic-Get_Uuid_Failed":"请以root身份运行web服务器","FS-Report-Choose_Data":"选择数据","Registration-Customize_Edition":"定制版","FR-Engine_CLUSTER_REDIRECT":"集群重定向参数","Plugin-ChartF_Max":"最大","File":"文件","FS-Generic-M_Data_Analysis":"数据分析","FS-Monitor-End_Session":"结束会话","FR-Report-Write_Attributes_Msg":"没有设置填报属性","FS-Generic-Simple_Report":"报表","Form-EC_toolbar":"报表块工具栏","Compile":"编译","GroupReport-Only_Display_Grand_Total_Function_At_Last_Page":"仅在最后一页显示总汇总的值","FR-Designer-Plugin_Shop_Need_Update":"插件商店有新版本,是否更新?","WLayout-Vertical-ToolTips":"垂直流式布局，该布局容器中可以添加多个其它组件，根据设定从上到下、或者居中分布","Plugin-Chart_Geographic":"地理信息","Tree-Width":"宽度","Return-Date":"返回日期","Form-Form_Element":"表单元素","FR-Engine_Cancel_Combination":"取消组合","FR-Engine_RP_Process_Select":"流程选择","Using_Server_Report_View_Settings":"采用服务器设置","clickToCover":"已经被修改，是否覆盖？","Percent_Stacked_Column_Chart":"百分比堆积条形图","FR-Engine_Tip_Auto_Match":"提示：系统根据模版自动匹配缩小逻辑","FS-Monitor-CPU_Load":"CPU利用率","FR-Base_Short_Aug":"八","WLayout-Horizontail-ToolTips":"水平流式布局，该布局容器中可以添加多个其它组件，根据设定从左到右、居中或者从右到左分布","HJS-Send_Failed":"发送失败","FR-Plugin_Error_EnvNotSupport":"当前插件不支持该版本","Sheet":"工作表","open-new-form-tip":"当前模板为711以下版本制作，无法兼容，不能打开。假如想打开修改此表单，请使用对应版本设计器打开。","RWA-Batch_Modify_Cells":"批量修改单元格","FS-System-Email_Send_Failed":"邮件发送失败","ThreeD_Stacked_Column_Chart":"三维堆积条形图","FS-Schedule_Add_Detail_Frequency":"添加明细频率","CellWrite-Repeat_Content_When_Paging":"分页断开时值重复显示","FR-Engine_Store_Pass":"用户名/邮箱/手机号","Plugin-ChartF_Animation":"动画","FS-Monitor-Simple_Suggestion":"修改建议","File_Description":"文件描述","Plugin-ChartF_RespectivelySpecified":"分别指定","StyleAlignment-Top":"靠上","Export_Set":"输出设置","FR-Engine_Print_Compatible":"打印（兼容）","Poly_Name":"聚合块名","Plugin-ChartF_NewCustom_Custom":"自定义组合","FRFont-Underline":"下划线","Hour":"小时","Weeks":"个星期","ChartDataLabelInside":"数据标签内","Plugin-ChartF_StackColumnTypeRadar_Title":"柱形雷达图","FS-Plugin-Store_Commodity_Description":"","FR-Chart-CopyJS_Failed":"JS复制失败","Chart_Stock_Error":"股价图必须要有:","FS-BakRestore_Clear_Option":"清理对象","GroupTable":"分组表","FR-Engine_Print_Copy":"份数","FR-Plugin_Update_Failed":"插件更新失败","RP_Operator":"操作人员","FS-Admin-Old_Password_Error":"旧密码输入有误","FR-Engine_Short-Jan":"一","LIST_MODE":"列表","Bubble-Series_Name":"系列名","Chart-Map_DeleteLayers":"删除层级","FR-App-All_Custom":"自定义","Chart_Legend_IsRoundRect":"圆角边框","Rose_Red":"玫瑰红","Plugin-ChartF_Bedding":"弯曲度","Custom_FS_Process":"自定义流程匹配","FR-WriteEnhance_browser_not_support_write_enhance":"您的浏览器不支持此预览方式，请使用传统填报。","CellWrite-Support_Smart_Insert":"支持智能插入行","FS-CustomStyle_Toast_SetStyle_Failed":"样式设置失败","Enable":"启用","Use_Global_Configuration":"使用的是全局配置","SQLWizard-select_all":"全选","Server_Flash":"需要Flash打印设置窗口","DS-Select_Data_Column_from_Left_Data_Tree":"从左边的数据树中选择数据列","FS-Process-WF-Process":"流程","Form-Same_Height":"等高","FS-Generic-Can_Not_Bigger":"不能大于","FS-Reg-Simple_Registration":"注册","FS-MOBILE-SETTING-CHANGE-DIRECTORY-SUCCESS":"更换目录成功","FR-Engine_ConditionB-does_not_contain":"不包含","DBCP_MAX_ACTIVE":"最大活动连接数","FS-Plugin_UpdateOnline_Plugin_Move":"插件适配","Function-Function_has_Existed":"函数已经存在","FS-Reg-Simple_Remain-Plugin":"剩余天数：","Plugin-ChartF_Map_Point_RootName":"点","Plugin-ChartF_Location_With_LongAndLat":"经纬度定位","FR-Background_Image_Adjust":"适应","FS-Generic-Parameter_Integer":"整型","FR-Action_Add":"增加","Widget-Load_By_Async":"异步加载","Plugin-ChartF_Change_Word_Value":"变化词频","Function-The_selected_file_must_end_with":"文件后缀必须是","FS-Schedule-Simple_Unlimited":"无限期","Chart-Horizontal_TimeAxis":"水平(时间)轴","FS-Monitor-Tpl_Restrictions":"模板限制","DashBoard-GuideAction":"报表预处理向导","FR-Engine_Func-Share-Comp":"共享组件","FS-System-Config_Auto_Backup":"自动备份","Choose_Role":"权限控制","FR-Engine-Loading_Applet":"正在加载Applet","FS-Monitor-Log_Clean_Two_Months_Ago":"两个月前","September":"九月","Gradient_Right_Color":"渐变色右区域","FS-Schedule-Restart_With_Frequency":"如果任务中断按以下频率重新启动","Chart-AddSecondGrid":"添加次要网格线","ConditionB-Input_Condition_Parameter":"输入过滤条件的参数","FS-System-Send_Verification_Code_Phone":"无法验证身份：平台未开启短信服务，无法接收验证消息。您可联系管理员帮助重置密码","FS-Generic-Simple_Email":"邮箱","FR-Engine_Can_not_find_Data_Connection":"错误代码:31300013 找不到数据连接","RP_Cpt_Name":"模板名称","FR-Engine_Previous_Node_Staff":"上节点人员","FR-Engine_Native_Print_Loading_Failed_Tip":"安装本地打印软件后，才能继续打印，可点击<a {R1}>下载安装<\/a>；<br>若已安装，可<a {R2}>查看启动帮助<\/a>或<a {R3}>关闭当前窗口<\/a>。","Chart_ProjectID":"项目名","JavaScript":"JavaScript脚本","FS-CustomStyle_Toast_Tab":"信息提示","GuiyangCity":"贵阳市","FR-Engine_Report":"报表","RP_Unfinished_Task_Name":"未处理任务","FR-Engine_Save_Client_Habit":"保存客户端习惯","LOG-Close_Session":"关闭Session","FR_Designer_Visible":"可见","FS-Schedule-Output_FTP_Port":"端口","FS-Msg_Warning":"警告","FR-Designer-Dependence_Install_Succeed":"依赖安装成功","Chart_Clock_Type":"270度闹钟形","Please_Input_A_Effect_One":"请输入一个有效的参数名","Form-Split_Pane":"二分面板","FormulaD-Operations":"操作符","I-BarStyle_3DPercentageStack":"三维百分比堆积柱形图","Chart-OuterLight":"外发光","FormulaD-Script":"脚本","Plugin-ChartF_More_Label":"后台检测","RP_Creator":"创建人","Henan":"河南省","Plugin-ChartF_AxisLabel":"轴标签","Select_The_Source_To_Save":"选择要存储的项目","FS-User_OK":"确    认","Select_DataFields":"选择数据字段","ThreeD_Bar_Chart":"三维柱形图","Plugin-ChartF_Up_Head_Table":"上层表头","Utils-Top_to_Bottom":"纵向","M_Server-Printer_Manager":"打印机管理器(P)","XMLA":"多维数据库","Break":"断开","Plugin-Memory_Alarm_Msg_Body_Clear_All_Session":"%时,清除所有会话","I-RadarChartStyle_FillwithMarkerLine":"数据点带线填充雷达图","FR-Plugin-Designer_Authorized":"授权:","DS-XML_TableData":"XML数据集","File-Allow_Upload_Files":"允许上传文件类型","File-tree":"文件树","ChartF-Other_Styles":"其他的样式","ChartF-High/Low":"盘高/盘低","FS-Generic-Sche_Second":"秒","FS-Frame-Enter_Entry_Name":"输入文字以检索模版","FR-Engine_Loading":"正在加载","RCodeVersion":"版本","Plugin-Memory_Alarm_Interrupt_Percent":"已用内存百分比大于此值时报警(%):","Log":"日志","FR-Plugin_Error_NeedRunDependingPluginFirst":"需要先运行该插件依赖的插件","Definition":"定义","FR-Utils-Would_you_like_to_cover_the_current_file":"你希望覆盖当前文件吗","Registration-Input_Registration_Information":"输入注册信息","M_Format-Style":"样式","FR-Engine_Tabpane_Position_Bottom":"底部","Low":"低","FRFont-bold":"加粗","Datasource-TabeData":"由TableData创建","FR-Designer-Form-ToolBar_Report":"报表","FS-Module-Simple_Register":"注册信息","FR-Base_Bottom":"下","KunmingCity":"昆明市","Select_FS_Roles":"选择平台角色","AxisInside":"轴内侧","Chart-Gis_LatLng":"经纬","ParameterD-Report_Parameter":"报表参数","FR-Designer_Create_Tree":"构建树","Designer-Preview":"设计器预览","Web_Preview_Port-Conflict-Message1":"内置服务器端口(","QueryResult":"查询结果","FS-Schedule_Sure_To_Delete_Task_And_File":"确认删除该任务及相关文件","Cache-Max-Elements-In-Memory":"最大活动对象数","Web_Preview_Port-Conflict-Message2":")同您的其它端口发生冲突，请设置一个新端口以重启服务。","ReportServer-Frozen_Row":"冻结行","Title-Background":"标题背景","Chart-SVG_MAP":"地图","FS-System-Verification_Hello":"您好，","FR-Chart-Value_Tick_And_Color":"刻度和配色","Plugin-ChartF_Preview_Custom_Line":"预览自定义折线图","FR-Chart-Data_Max":"最大值","FR-Engine-Condition_Contains":"包含","MConfig-WebsiteURL":"公司网址","ChartF-Custom":"自定义图表","Utils-Are_you_sure_to_remove_the_selected_item":"你确实决定删除选中的项","wrong":"出错了","FR-Engine_Parameter_Name":"参数名","RWA-Click_Cell_To_Edit_Value":"单击模板单元格修改值","Plugin-ChartF_IntervalBackground":"间隔背景","FR-Engine_Edit_Role":"编辑角色","Widget-Widget_Config":"控件配置","plugin-ChartF_Radius":"圆角","N.O.":"第","CellWrite-Print_Export":"打印导出","Read_failure":"读取失败，可能源文件已损坏","Plugin-ChartF_Area":"区域","Plugin-ChartF_NewPie":"饼图（新特性）","FS-Schedule_Mobile-Push-Link":"链接","FS-System-Settings_Button_Margin_Left":"55","Already_exist":"当前环境已存在:","Error_Template_File":"模板文件错误","BackgroundTexture-FishFossil":"鱼类化石","Plugin-ChartF_Hidden":"隐藏","Song_TypeFace":"宋体","Widget-Widget_Type":"控件类型名","Set_default_browser":"没有找到默认浏览器，请在Intenet选项中设置系统默认浏览器。","SQLWizard-deselect_all":"全不选","Not_Exist":"不存在","FR-Engine_Define_Group_Value":"定义组的值","Utils-Should_select_a_template_first":"必须先选择一张模板","Plugin-ChartF_MultiPieChart":"多层饼图","Tree-Show_Root_Or_Not":"是否显示根节点","File-Des":"默认地址，一般无需改变，可以使用下拉的\u201c字符串\u201d选项来输入你想指定的文件上传地址","FR-Engine_Param_Template_Max":"参数模板最多保存9个","Please_Input_A_Widget_Name":"请输入控件名","FS-Plugin_confirm_delete":"确认删除？","FormulaD-Functions":"函数","RP_End":"结束","FS-Reg-Machine-Info":"机器信息","FlowLayout":"流式布局","Compile_Failed":"编译失败","Plugin-ChartF_ValueLabel":"值标签","Hyperlink-Self":"在原网页中打开链接(S)","Parameter_Name_Can_Not_Be_Empty":"参数名不能为空","FormulaD-Function_name":"函数名","Chart-Address_Name":"地址名称","FS-User-Sync_Dataset_Config_Tip":"您需要先使用设计器新建一个包含4类不同字段的服务器数据集","Plugin-ChartF_Change_Value":"变化值","WF-Equal":"同级","Role_Name":"角色名","HTML-Report_Mail_Server":"报表邮件服务器","HJS-Server_Print":"服务器端打印","FS-System-Sign_Dongle":"加密锁注册","Number-Format":"数字格式","Preview":"预览","Select_Name_Column":"选择姓名对应列","FR-Chart-Gannt_PlanStartTime":"计划开始时间","Re-connect-to-remote-server":"服务器已关闭，是否重新连接服务器?","Today":"今天","Plugin-ChartF_Preview_Column_Line_Custom":"预览柱形折线组合图","FS-Generic-Simple_Printer":"打印机","Utils-No_Pagination":"不分页","Wizard":"向导","Utils-Switch_To_Template_Reportlet":"切换到模板网络报表","ADD_Department_Failure":"部门添加失败，该部门名已被占用！","FS-Report-Devices_Phone":"手机","Query":"查询","FR-Basic_Page_Number":"页","M_Insert-Text":"插入普通文本","FR-Plugin_Share_Read_Me_Tip":"FineReport.Reuse文件夹存放的是复用组件的帮助文件和属性文件，请不要移动和删除该文件夹。迁移时尽量整体拷贝reportlets文件夹","Insert":"插入","NS_LayerReport_float":"错误代码:11100005 行式引擎不支持悬浮元素","FS-Plugin_UpdateOnline_Download_Fail":"下载失败","File_Upload":"文件上传","FS-Module-Simple_Scheduler":"定时调度","FS-Monitor-Recipient":"收件人","ReportColumns-Repeat_Row":"复制行序列","Verify":"校验","SQLWizard-join_expression":"联合表达式","FR-Plugin_Error_WrongPluginMarker":"指定了错误的插件ID","FR-Designer_Plugin_Should_Update":"插件版本过低,需要升级","INFO-End_Executing_Report":"完成报表计算","FR-App-All_File":"文件","DashBoard-ConnectionList":"数据连接","FS-System-Verification_Email_Tip1":"此验证码10分钟内有效","FR-Chart-Pie_ReCombinePie_Bar":"复合条饼图","ReportColumns-End_at_Row":"结束分栏行序号","FS-Plugin-Store_Function":"","M_Insert-Shape_Rounded_Rectangle":"圆角矩形(U)","FS-Schedule_Retain_Latest_5_Copies":"保留最近5次","FreezeWarning2":"请输入正整数！","FS-Generic-Simple_Mon":"一","FreezeWarning1":"初始值不大于尾值","Schedule-Report_File_Directory":"报表文件目录","FreezeWarning3":"请输入A-Z的字母","FR-Engine_Quiet_Print_Check_Tip":"保存客户端习惯，执行静默打印","No-Privilege":"没有权限","M_Format-Remove_Column":"删除列(C)","Staff_Management_InDepartment":"机构部门内人员管理","FR-Engine_Event_afterprint":"打印后","BackgroundTexture-Cork":"软木塞","SpecifiedG-Group_Name":"组名","Datasource-JNDI_Name":"JNDI的名字","ChartF-DeleteSecondGrid":"删除次要网格线","Plugin-ChartF_Line_Width":"线宽","FR-Base-Time_Hour":"小时","Plugin-ChartF_Radius":"半径","Chart-Gis_Address":"地址","FR-Engine_Day":"天","LanguageSetUp":"语言配置","FR-Designer-Basic_Copy_Build_NO_OK":"构建版本号已经复制到剪贴板","WorkBook":"工作簿","Platform_Module_DataSetting":"B/S设计器配置","FR-Chart-Type_XYScatter":"散点图","FR-Plugin-Plug_Expired":"插件已经超过授权期，插件ID是","try_resending":"请尝试重新发送","FS-Mobile-Unauth_Devices":"未授权设备","Widget-Role_Table_Tree":"角色表格树，该控件仅仅用在权限配置中","FR-Designer-Plugin_Disable":"禁用","FR-Engine-Decimal_Number_Out":"小数位过多","FR-Plugin-Store_Install_From_Local":"从本地安装","FR-Designer-Form-Please_Drag_ParaPane":"请拖入参数面板","Plugin-ChartF_Map_Area":"地图边界","RWA-Class":"程序","LayerPageReport_WN_SIL":"按页运算引擎暂不支持Sheet间运算","FR-Basic-Email_Format":"格式","M_File-ExportT-Template(embedded_data)":"模板(内置数据)","mobile_number":"手机号码","FS-Plugin_UpdateLogDate":"更新日期","LIC-Support_Global_Style":"报表全局样式","Plugin-ChartF_Limit":"限制","JavaScript-Synch":"同步","FR-Remote_Re_Connect_to_Server":"服务器已关闭，是否重新连接服务器?","File-Denied_Upload_Files":"禁止上传文件类型","fs_process_p_tip":"注意：执行频率中的只执行一次和简单重复执行在任务开始时就会执行，而自定义重复执行则将在任务开始后根据其自身定义执行。","Edit_Analysis":"编辑分析","FR-Engine_PageSetup-Predefined":"预定义","Plugin-ChartF_Gauge_Cuvette":"试管型仪表盘","FS-Generic-HJS_Send_Failed":"发送失败","FS-Plugin_Restore_Failed":"还原失败,请手动替换jar包","Jilin":"吉林省","DBCP_NUM_TEST_PER_EVCTION_RUN":"空闲连接回收检查数","No_Advanced_Chart":"当前版本 无复杂统计图 此功能，请购买高级版本。","Plugin-ChartF_refresh":"刷新","Set_Row_Title_End":"设置重复结尾行","FS-Generic-Self_Define_Class_Name":"自定义类名","Form-Form_Definition":"表单定义","FS-Report-Edit_Directory":"编辑目录","FS-Monitor-Smart_Push":"智能推送","Remedy":"Remedy","Plugin-ChartF_Rename_Error":"重命名失败","FR-Engine_Verify-Message":"错误信息","Plugin-ChartF_Rotation_Angle":"旋转角度","Three_Rows_Of_Two_Grid":"三行两列的格子","StyleAlignment-Single_Line":"单行显示","Plugin-ChartF_Time":"时间","FR-Engine_Short-Jun":"六","FR-Engine_Short-Jul":"七","Two_Rows_Of_Three_Grid":"两行三列的格子","FR-Engine-Sort_Sorting":"排序中","FR-Engine_Export-Excel-LargeData-Page-Info":"请耐心等待文件的生成，所花费的时间将视数据量的大小而定，在此过程中请勿关闭当前页面或浏览器。","FR-Plugin-Store_Delete":"删除","FR-Engine-Cal_Calculating":"处理中","DS-Database_TableData":"数据库数据集","FS-Schedule-Task_Run_Info":"运行信息","Plugin-ChartF_Preview_Large_Bubble":"预览大数据气泡图","FR-Designer_StyleAlignment-Wrap_Text":"自动换行","FR-Designer_No":"否","FS-Setting-Add_Theme":"添加主题","FS-Generic-R_Code_Version":"版本","FS-Generic-Simple_Transfer_Tips":"检测到您使用了同步数据集,该版本支持同步数据集从XML转存到平台使用的数据库,是否使用并迁移?","Upload-Select_a_File":"选择文件","Chart_RadarPlot_Should_Select_One_In_Line_Or_Marker_Or_Fill":"填充、折线和标记需要至少选择显示一个","FS-Generic-Cro_Expression_1":"每月最后一天19点50分","FR-Plugin_Error_LockOfFunctionRecorder":"检测到插件没有功能点记录，无法运行","FS-Generic-Cro_Expression_2":"每月最后一个工作日19点50分","FS-Generic-Cro_Expression_3":"每月第4个周五19点50分","FS-Generic-Cro_Expression_4":"2013年第4季度每天19点50分","Model_Selection":"关联方式","FS-Generic-Cro_Expression_5":"每个工作日早上9点和晚上6点","FS-Report_Support_Formula":"支持公式输入，如${today()}","FS-User-Simple_Selected":"已选人员","Input_The_Name_Of_Gloabel_Style":"输入所保存的全局格式名称","Server_PdfInstallPath":"Pdf安装文件路径","Select_FS_Users":"选择平台用户","RWA-Smart_Add_Fields":"智能添加字段","Unit_Thousand":"千","FR-Chart-Map_Not_Supported":"您当前使用的lic不支持地图功能，请升级您的lic","Chart-Time_Seconds":"秒","Address":"地址","FR-Designer-Hyperlink_Name":"名字","FR-Engine_End_At":"终止于：","HF-Even_Page":"偶数页","StyleAlignment-Wrap_Text":"自动换行","FS-Plugin-Store_BI":"","Privilege_Use_Privilege":"启用内置权限","The_Columns_Hava_Relations_Whether_Add":"检测到数据列之间有过滤关系，是否添加","Plugin-ChartF_Point_Map_Data":"点","FR-Engine-Verify_Failed":"校验失败","Exit":"退出","FR-Plugin-Store_Function":"函数","Url_location":"绝对路径","FR-Engine_RP_No_Property":"no property","FR-Engine_REPORT_XML":"报表内容传输","User-defined-MDX":"自定义MDX查询","FS-PSqlInj-Forbid_Word":"特殊关键字","FR-Basic_Email_Send_Success":"邮件已发送","Calculating":"处理中","Plugin-ChartF_Create_Error":"新建失败","FS-Generic-Attach_File":"附件","Formula_Editor":"公式编辑器","Append_Delete_Row_Message":"提示：指定的单元格需要设置扩展属性","FR-Engine_Event_afterpdfprint":"PDF打印后","Application":"应用程序","Interval":"时间间隔","Form-Remove_Repeat":"去掉重复项","FS-BakRestore_backup_Frequency_Sixmonths":"6月","May":"五月","Cancel":"取消","Max":"最大","Plugin-ChartF_Gradual_Deep":"渐深","Upload":"上传","FS-Generic-You_Are_Using_Unregisted_Function":"错误代码:11100016 您使用了未注册的功能","Two_rows_of_two_grid":"","Adaptive_Original_Scale":"自适应原样缩放","PendingVitureDirectiry":"挂载虚拟目录","Sign_In":"登录","FS-User_BackAndReset":"返回重新设置","FR-Hyperlink_ChartHyperlink":"图表超链","FR-Engine-Excel_Title_Match":"标题行匹配成功, 行号为:","FS-Monitor-Server_Max_Memory_Is":"当前服务器设置的最大内存为","Error_To_Create_Report_From":"生成报表时产生错误","EmailPane-mailSubject":"邮件标题","ExcelImportD-Excel_Source_File":"Excel 源文件列表","Datasource-Test_Connection":"测试连接","Form-SupportTag":"标签形式显示","FR-Designer_Form-List":"列表","InsertForward":"向前插入","Modify":"修改","StandardType":"标准类型","FS-Generic-Simple_Transferring_To_DB":"迁至平台数据库","FS-Schedule_Task_End_Clean_Up":"任务结束即清理","FS-Plugin-Store_Private_Message":"","FS-System-Please_Input_VerificationCode":"请输入验证码","FR-Engine_Event_change":"值改变","Des-Merger_Cell":"选择的区域包含多个数据，合并单元格后将只保留编辑过的所有单元格中最左上角的数值.","Server_Path":"主机位置","FR-Chart-Radar_Chart":"雷达图","FR-Chart-Custom_Van":"组合图(新特性)","Plugin-ChartF_Link_Type":"关联类型","Plugin-ChartF_Origin":"原样展示","MobilePhone":"手机","Preference-Export_Configuration_File":"导出配置文件","FS-Module-MobilePush_SureToOpenIGT":"确认使用个推？","Plugin-Chart_Preview_Data":"导入预览数据","FR-Utils_WorkBook":"工作簿","BindColumn-Custom_Left_Father":"自定义左父格","M-Edit":"编辑(E)","Layer-Sleep_Thread_For_Calculating":"休眠计算线程","Export-Excel-Page":"分页导出","FR-Engine_Tue":"二","Registration-Enterprise_Edition":"企业版","RP_Son_Task":"子任务","Chart_Meter_Field":"分段区域","FS-System-Server_character_encoding":"服务器端字符编码","FR-Designer-Layout_Adaptive_Layout":"自适应布局","ChartF-PercentageOfCompletion":"完成百分比","FS-Schedule-Execute_Condition_Always":"始终执行","FS-Generic-Simple_April":"四月","Confirm-Delete-File":"是否删除所选文件？","FR-Chart-Map_Map":"地图","Utils-switch":"\n您当前未被保存文件将被保存在当前目录下，\n是否继续？","Plugin-Memory_Alarm":"内存警报","FS-Generic-Simple_Successfully":"成功","ChooseOneButton":"请选择一个控件后再添加","Plugin-ChartF_Layer_Tree":"钻取层级关系","FS-Generic-Simple_May":"五月","ECP_error_same":"密码不能与原始密码相同","Fail_To_Select_A_Data_Field":"选取数据字段失败","Plugin-ChartF_Gauge_Pointer180_Title":"半指针仪表","M_Server-Global_Parameters":"全局参数","Chart-Title_Is_Visible":"标题可见","ParameterD-Interface":"界面","FR-Engine_Fit-None":"不自适应","Chart-Address-Name":"地址名称","Plugin-ChartF_OpenAnimation":"开启动画","SQLWizard-add_expression":"增加表达式","FR-Engine_Parameter-Double":"双精度型","FR-Plugin_Error_OperationNotSupport":"当前部署环境下不支持该操作","FS-Generic-Simple_Number":"号","Original_Marked_Filed":"原始标记字段","Form-Text_File":"文本文件","FR-Chart-Curve_Line":"光滑曲线","Schedule-Task_Name":"任务名","LDAP_User":"LDAP用户","ReportServerP-Add_Printer":"增加打印机","FR-Engine_Verifying":"校验中","NS-war-remote":"错误代码:11100017 压缩部署不支持远程设计","FS_Table_Del":"删除","FR-Engine_Import_Again":"重新导入","No-tableData":"没有返回数据集","FR-Plugin_Delete_Failed":"插件删除失败","SingleTime":"次","Chart_Null_Value_Break":"断开","Schedule-Unspecified_Report_File_Save_Location":"未指定报表文件保存位置","RP_Rollback":"回退","FR-Engine_Custom_FS_Users":"自定义用户","FR-Basic_Choose_None":"不选","No-Supported-File-Types":"不支持的文件类型","FR-Chart-Map_Shanghai":"上海市","HF-Default_Page":"默认页","ChartB-Change_Summary":"改变汇总","FS-Process-Import_Parameter":"导入","Plugin-ChartF_Radius_Set":"半径设置","BackgroundTexture-PaperBag":"纸袋","SQLWizard-remove_entities":"删除所有的实体","plugin-ChartF_XYFromTheUpLeft":"距离图表左上角位置（%）","FR-Plugin-Store_Disabled":"禁用","ReportServerP-Server_Printers":"服务器端的打印机","Close":"关闭","FS-System-Config_Manual_Backup":"手动备份","PageSetup-Finis_Start_Row":"重复结尾行","FR-Chart-Map_Wuhan":"武汉市","FS-Failed-License_Not_Match":"证书信息与本地不匹配","PieStyle":"饼状","FS-User-Http_Authentification":"Http认证","Subquery":"子查询","FR-Engine_getDataFromCache":"从共享数据集缓存中获取数据","FS-Setting-Default_HomePage":"默认首页","Select_the_repeated_row_and_column":"选择需要重复的行列","FR-Basic_Email":"邮件","confirm_server":"请确认服务器地址、端口、应用是否正确且服务器是否开启","FS-System-Config_SMS_Model":"短信模板","Datasource-Column_Index":"列序号","Chart-Stock_Close":"收盘","Form-Design_Height":"设计高度","Convert":"转换","Remove_All_Button":"清除所有按钮","FR-Chart-Map_Saved":"地图已保存","Chart-Use_MSBold":"微软雅黑","KeyPoint":"关键节点","Bulletin":"公告","Widget-Default_Widget_Config":"基本控件","Report_Display":"报表展示","Plugin-ChartF_Horizontal_Structure":"横向框架图","Plugin-ChartF_Preview_Stack_Column":"预览堆积柱形图","RP_Process_Created_By_Me":"我创建的流程","SQLWizard-select_expression":"select表达式","FR-Engine_Switch_Selected":"切换选中项","FS-Frame-Simple_Subscribe":"收藏","Face_View":"查看","Chart-Select_Data_Set":"选择数据集","Performance-plugin_lazyreadresource":"合并加载资源文件","FR-Engine-Reportlet_Net":"网络报表","Name":"名字","FR-Plugin-Store_Update_From_Local":"从本地更新","DataFunction-Max":"最大值","Pwd_Format":"6-16个字符，支持字母、数字","Successfully":"成功","Custom_Icon_SelectIcon":"选择图标","Server-version-tip-moreInfo":"建议您所属团队使用的我方FineReport产品的设计器版本号以及部署的服务器版本号保持一致，以避免版本不一致造成的问题风险。\n假如您打开更高设计器版本制作的模板，可能打开出错，也可能丢失原有模板属性。假如您制作的模板使用的设计器版本高于您最终部署所用的服务器版本，服务器可能无法正常载入您制作的模板。","Show_Content":"显示内容","FS-PSqlInj_Title":"SQL防注入","PageSetup-End_Column":"结束列","Create_QRCode":"生成二维码","ChartF-MainAxis":"主坐标轴","FR-Basic_Time":"时间","StyleAlignment-Multi_Line(Adjust_Font)":"多行显示(调整字体)","Common":"普通","FR-Plugin_Error_FrozenState":"当前不可该变插件状态，请检查是否有对其依赖的插件正在运行","FS-System-Deploy_Type":"当前部署方式","ReportColumns-Report_Columns":"报表分栏","FR-Chart-Map_Baidu":"百度地图","HF-Insert_Date":"插入日期","FR-Designer_Component_Interval":"组件间隔","FR-Chart-Meter_Yuan":"元","NS_LayerReport_RowCol":"错误代码:11100002 行式引擎不支持条件属性修改行高列宽","CellWrite-Append_Row(Used_in_Web_Write_Report)":"添加行(Web填报使用)","FR-Chart-Area_Title":"区域标题","Plugin-ChartF_LargeDataModelPrompt":"(优化后会改变分类顺序但不会影响时间轴和值轴效果)","Form-Hierarchy_Tree_Next":"下一个","Fill_blank_Data":"补充空白数据","FS-Is-Unbind-URL":"是否确定解除绑定？","PageSetup-Vertically":"垂直居中","FR-Engine_Custom_FS_Roles":"自定义角色","Plugin-Memory_Alarm_Row_Msg":"超出提示","FR-Chart-TimeUnit_Month":"月","FS-Auth-Machine-Code":"认证机器码：","FormulaD-Formula_Definition":"公式定义","FR-Engine_Top":"上","FS-Reg-Register_email":"请导出注册信息，通过邮件发送到","FS-Plugin-Store_Delete":"","Mon":"一","FR-Designer_Please_input_with_right_format":"请用正确的格式输入","DS-Should_select_a_bind_column":"需要绑定一个数据列","FR-Engine_Excel_Edit_Sheets":"编辑导入sheet","FR-Plugin-Designer_Disk_Path":"磁盘路径","Env-Local_Directory":"本地目录","FR-Background_Image":"图片","FS-System-Config_Delete_Backup":"删除","NC-Des":"该容器应该包含北部和中部块","Performance-Monitor_Row_Over_Warning_Info":"很抱歉,数据量过大触发保护机制,请减少数据量或联系管理员","FR-Engine_FormPreview":"表单预览","FR-Chart-Pie_Van":"饼图(新特性)","Chart-Map":"地图","PageSetup-Paper_Size":"纸张大小","ReportD-Export_Hided_Row":"导出隐藏行","FS-System-Marked_Read":"标记为已读","Widget-TreeNode":"树节点按钮","SpecifiedG-Groups":"组","Chart_Line_Type":"折线线型","Utils-please_waiting":"请稍候","SQLWizard-arrange_entities":"重新安排实体","Meter_Style_Set":"风格设置","Utils-The_selected_reportlet_is_not_a_reportlet_,_":"您选择的文件不是报表模板，不能生成参数","FR-App-File_Lookup_range":"查找范围","I-RadarChartStyle_Line":"带线雷达图","FR-Designer-Basic_Only_Submit_Current_Sheet":"只提交当前sheet","FS-Plugin-Store_Businesses":"","Card":"卡片","RP_Finished_Task":"已处理任务","FR-Base_Table":"表","Chart_Linear":"线性拟合","ECP-error_pwd":"密码错误","FR-Plugin-Store_Pay":"付费","Utils-Add_Column":"添加列","Not_limited_IP":"不限并发","FS_Start_Time":"开始时间","FS-Msg-Send_Success":"消息发送成功","BS-Design":"B/S全局配置","FR-Engine_Export_Excel_Simple":"原样导出","Level":"级","FR-Engine_Thu":"四","FS-Setting-Login_Page":"登录页","Browser":"浏览器","FS-Plugin-Store_My_Plugins":"","FS-Schedule-Remove_Task":"删除任务","FR-Chart-Map_Guiyang":"贵阳市","FS-Report-File_Name":"文件名称","Form-Widget_Property":"属性名","FR-Base_Column":"列","Utils-Only_Rename_File_Under_Reportlets":"仅重命名在reportlets目录下的文件","FS-Setting-Edit_Home_Page":"编辑首页","More":"更多","Sichuan":"四川省","FS-Generic-Simple_Alert":"警告","FS-Setting-Login_URL_Detail":"网页URL","FS-System-Param_Template_Recommend":"推荐","Utils-Click_the_left_plus_button_to_add_tree_node":"点击左边的加号来添加树节点","ReportServerP-Are_you_sure_to_delete_the_selected_printer":"你确实想删除选中的打印机吗","FR-Engine_Add_Task":"添加任务","FR-Engine_Re-Multi-privilege":"集团权限控制","CellWrite-Page_After_Column":"列后分页","FS-BI-Dezi_New_Report":"新建分析","Face_Write":"填报","Plugin-ChartF_Preview_Structure":"预览框架图","FS-Plugin_updateOnline":"更新升级","IntPart":"整数部分","Plugin-Memory_Alarm_Mode":"模式","DoSelectUser":"请选择用户","World":"世界","Plugin-ChartF_PaneBackground":"底盘背景","FS-Monitor-Visitor_IP":"访问用户IP","Sub_Report_ToolTips":"子报表提示","DataFunction-Min":"最小值","Utils-Submit":"提交","Line-Style":"线型","Not_Imported":"尚未导入","FS-Schedule-End_Date":"到","Form-Action":"操作","FR-Designer_Query":"查询","DS-TableData":"数据集","FS-System-Config_SMS_Monitor":"运行监控","M-New_WorkBook":"新建普通报表","FS-Monitor_Export_To_DB":"输出至数据库","Utils-Rename_Column":"重命名列","FS-BakRestore_Backup_Config":"配置备份","Period":"句号","FR-Engine_Parameter-Formula":"公式","Utils-You_will_rename_the_following_file":"你要重命名如下文件","FR-Chart-Map_Xinjiang":"新疆维吾尔族自治区","FS-System-Verification_Code_Wrong":"验证码不正确","FS-Plugin_updateOnline_NoNext":"上一次更新操作尚未完成，暂时不可进行下一步","Function-The_class_must_implement_the_interface":"该类必须实现接口","Datasource-Key":"键值","FS-Web-Plugin_Illegal_Plugin_Zip_Cannot_Be_Install":"无法安装! 无效的zip文件!","Widget-Height":"控件高度","I-AreaStyle_Normal_3D":"三维面积图","Add_Role":"添加角色","FR-Chart_Custom-Map":"自定义地图","Plugin-ChartF_Collapse":"收缩于抽屉菜单内","FR-Engine_Offline_Html_Browser":"如果您未安装其他浏览器，推荐您使用","Favorite":"收藏夹","FS-Schedule_Task_Trigger_Null":"任务触发器配置项为空！","Level_coordinates":"层次坐标","ChartF-Min-To-Average-Color":"最小值到平均值区域颜色","FR-Engine_Institution":"机构部门","FR-Engine_Event_afterdelete":"删除行后","M_Report-Report_Background":"纸张背景","FR-Engine_Please_Enter_Define_Group_Name":"请输入定义组名称","ChartF-Closing":"收盘","PageSetup-Landscape":"横向","Variables":"变量","FS-Frame-Close_Other_Tabs":"关闭其他标签","ExpandD-Child_Cell_Follows_Father_Cell_to_Expand":"子格跟随父格扩展","FR-Chart-Type_Bar":"条形图","Schedule-Reportlet_Info":"网络报表信息","FR-Engine_Ssas-database":"SSAS数据库","Docking-Float":"浮动","FS-System-Verification_Email_Tip2":"如非您本人操作，请忽略此邮件","FS-Web-Plugin_Env_Expired":"该插件只支持FineReport9.0","Plugin-Memory_Alarm_Time_Check":"检测时间","FS-Report-Directory_Management":"目录管理","FS-Plugin-Store_Register":"","SQLWizard-distinct":"消除重复行","Total":"总共","DataBinding":"数据绑定","StyleAlignment-Left":"靠左","Widget-Chart_Widget_Config":"图表控件","SecondGraduationUnit":"次要刻度单位","Export-SVG":"SVG格式","Hyperlink-Email_cannot_be_null":"Email不能为空","FR-Designer_Get_Lock":"加锁","Plugin-ChartF_StackAndSeries":"堆积和坐标轴","FR-Plugin-Install_Dependence_Failed":"依赖插件安装失败","Hyperlink-Show_Toolbar":"显示工具栏","Short-Feb":"二","Choose_All":"全选","WLayout-Absolute-ToolTips":"自由式布局，可以在布局内任意位置添加控件","Report_Designer":"报表设计器","Plugin-ChartF_ExportImage":"导出图片","FS-Plugin-Store_Unexpected_Error":"","NS_print_flashPaperSetting":"错误代码:11100018 Flash打印不支持将页面设置传递给打印机","FS-Plugin_updateOnline_Deleted_Successful":"删除成功","ConditionB-is_greater_than":"大于","Chart-Unit":"单位","Form-Split_Vertical":"垂直分割","FS-Setting-Config_File_Detection":"配置文件检测","Already_End":"已结束","FR-Engine_Invalid_Setting_Cause_Reach_Min_Widget_Size":"设置无效：{R1}将低于最小尺寸","Web_Preview_Port":"端口号","DS-No_Dictionary":"没有数据字典","Chart-Change_Config_Attributes":"图表切换属性","FS-BakRestore_Browser":"浏览","Deploy-Success_Info":"看到此页面，说明您已经成功部署了报表服务器","FR-Plugin-Store_Cost":"费用","LOG-Report_Server_IS_Started":"报表服务器已启动","Utils-Display_Value":"显示值","FS-Plugin_restore":"正在还原","FS-Report-RP_ProcessMgr":"上报流程管理","Schedule-The_selected_file_must_be_end_with_filter":"选择的文件必须以.cpt或者.class或者.frm结尾。","ChartF-Fill":"填充","FS-Report-Input_Link_Name":"请输入链接名字","FR-Engine_CSV-Export":"导出CSV","Plugin-Memory_Alarm_Life_Cycle":"生命周期","FR-App-Template_Report_Not_Exist":"所选报表不存在!","FS-BakRestore_LogDB_Trans_Detected_Not_Backup":"检测到使用了平台数据迁移功能，日志清理前不会备份，是否继续？","Task_List_Chosen":"已选任务列表","FS-Schedule_End_Time":"结束时间","FR-Chart-Data_Average":"平均值","Chart-Series_Name":"系列名","BackgroundTexture-Denim":"斜纹布","FR-Engine_Start_At":"起始于：","FR-Engine_Cannot_Set_Duplicate_Role_Name":"不能设置重复的角色名","StyleFormat-Text":"文本型","Chart_Bubble_Size":"气泡大小","FR-Chart-Pre_Defined":"已定义","long_data_can_not_show_fully":"长数据显示不全","FS-Monitor_Show_In_Console":"打印至控制台","XML_File_Cannot_Be_Resolved":"xml文件无法解析","Schedule-Defined_Tasks":"定义的任务","Plugin-ChartF_Axis":"坐标系","Line-Color":"线条颜色","Performance-plugin_Title":"性能优化","Plugin-ChartF_InnerRadius":"内径占比","This_Name_Has_Exsit":"这个名字已经存在","M-Design_Report":"设计报表(D)","Merge":"合并","RP_Sponsor":"发起人","FS-BakRestore_JAR_Backup":"jar包","Relationship":"关联","LIC-Support_Performce_Optimise":"性能调优","JavaScript-Commit_to_Database":"提交入库","Error_Input_Value":"错误的输入值","FR-Engine_RP_AllProcesses":"所有流程","Plugin-ChartF_NewFunnel":"漏斗图(新特性)","Quarter":"季度","FR-Plugin-Designer_File_Name":"文件名","Add_Task":"添加任务","Plugin-ChartF_Preview_Custom_Bar":"预览自定义条形图","FR-Chart-Map_Jinan":"济南市","ReportServerP-Next":"下一页","FS-System-Simple_FIFO":"先进先出","FS-Schedule_Mobile-Push-App-Terminal":"APP通知","FR-Chart-Style_TopDownShade":"上下渐变","FR-Engine_AppletPrint":"Applet打印","Sche-Minute":"分","Plugin-ChartF_Radar_X_Axis":"极角轴","FR-Designer_Plugin_Normal_Update":"更新","IS_TD_HEAVY_EXPORT":"重方式输出格子","ReportServerP-ms":"毫秒","FR-Chart-Password_Error":"密码错误","ChartF-CIRCLE":"圆形","Add_From_Server":"从服务器添加","About":"关于","Platform_Module_Log":"日志","Bottom":"下","M_File-Export-CSV":"CSV格式(逗号分隔)","Icon":"图标","M-Exit":"退出","Plugin-Chart_Category_Array":"分类数组","Above":"以上版本","Plugin-ChartF_OnlyUseBeforeRecords":"只使用前有限条记录","FR-Engine_Chart-Map":"地图","Stacked_Column_Chart":"堆积条形图","FR-Engine_Please_Enter_Step_Greater_Than_Zero":"请输入步长且大于零","FR-Engine_Delete_Role":"删除角色","FR-Plugin-Store_User_Password_Error":"用户名或密码错误","FR-Designer_Width":"宽","PageSetup-Header":"页眉","Des-Show_private_data_dialog_when_creating_new_worksheet":"每次新建自由报表时显示私有数据对话框","Background-Background_is_NULL":"没有背景","Class_Processor":"类处理器","Plugin-ChartF_At_Least_One_Chart":"至少选择一种图表","MobilePad":"平板","FS-User-Department_Name":"部门名称","FS-Generic-Fail_And_Restart":"任务重启","Event_Name_Type":"事件名字和类型","Hunan":"湖南省","Plugin-Chart_Add_Line":"添加","Plugin-Memory_Alarm_Live_Time_Exp":"系统根据【检测时间】定时检测,如果某个会话的更新时间加上【超时时间】\n小于当前时间，那么就从会话池中移除;\n另外会话达到【存活时间】后会被强行移除。\n存活时间：会话从创建到被移除的时间\n检测时间：定时检测会话\n超时时间：配合检测时间，共同决定会话生死\n心跳：是否发送心跳，每发送一次心跳,对应的会话的更新时间就会更新为\n当前时间","Plugin-ChartF_SecType":"次刻度单位","Printer-Printer_Group":"打印机组","Allow":"进入","FR-Designer_ToolBar_Bottom":"底部工具栏","User-defined":"自定义","Hyperlink-Choose":"选择(C)","BackgroundTexture-WovenMat":"编织物","Jiangsu":"江苏省","FR-Designer-Widget-Style_Standard":"标准","Chart-Address":"地址","I-xyScatterStyle_Marker":"散点图","FR-Engine_Please_Select_Define_Group_Value":"请选择定义组的值","HF-Insert_Number_of_Page":"插入总页数","Cache-Book-Parameters-Setting":"内存缓存属性设置","FormulaD-Other":"其它函数","BorderLayout-West":"西","alraedy_close":"已经关闭","Plugin-ChartF_menuClose":"收缩工具栏","FS-System-Please_Input_New_Pwd":"请输入新密码","FS-Module-Report_Manager":"目录管理","RP_Remove_Task":"删除任务","Plugin-ChartF_Position_Bottom":"下方","FR-Engine_Excel-Import":"Excel导入","Title-Format":"标题格式","period":"。","Chart_BarSpacePecent":"柱宽百分比","FR-Designer-DS-Database_Query":"数据库查询","FS-Generic-Memory_Usage":"内存使用情况","ConditionB-does_not_contain":"不包含","Chart-Map_NoLayers":"没有可编辑的层级","Deep":"深度","FS-Admin-Full_Name":"姓名","You_Choose_An_Empty_Directory":"你所选目录是空的","ChartF-ProjectID":"项目ID","Chart_Alert_Bottom":"居下","Form-View_Tree":"视图树","FS-Msg_Enable":"插件已被启用,重启服务器后生效","Chart_Axis_UnitCount":"统一计算","Plugin-ChartF_Open":"开启","is_need_word_adjust":"不固定行高导出","ChartF-Title":"标题","FS_End_Time":"结束时间","FS_Task_Start":"任务开始后","Means":"表示","Pause":"暂停","FR-Basic_Email_Send_Failed":"邮件发送失败","PrintP-Next":"下一页(N)","FR-Chart-Map_Field":"字段","template_unopened":"无法打开模板","Plugin-ChartF_New_Chart":"图表(新特性)","REPORTLET":"访问模板的路径的参数。","FR-Utils-New_Folder":"新建文件夹","Function_Detail":"函数明细","CellElement-Property_Table":"单元格属性表","FR-Engine_RP_Process_Name_Not_Null":"流程名称不能为空","Plugin-ChartF_menuOpen":"展开工具栏","FR-Chart-Data_Edit":"编辑","FS-Reg-Lic_Upload_Failed":"FanRuan.lic上传失败, 请重试或联系我们!","FR-Designer_PageSetup-Vertically":"垂直居中","FailAndRestart":"任务重启","HighLight":"高光","Already_Pause":"已暂停","FR-Server_Embedded_Server_Stop":"內置的服务器-停止","FR-Designer_New_Value":"新值","DS-Select_Data_Column":"选择数据列","FS-Plugin-Store_Chart":"","FS-Plugin_updateOnline_Confirm":"确认还原到","BI_Global_Config":"BI全局配置","Chart-Gantt_Error_Check":"请检查您的数据","StyleFormat-Currency":"货币","Number-Max_Int_Length":"最大整数长度","Chart-Map-Key":"地图对应值","BindColumn-Summary":"汇总","RP_Process_Name_Not_Null":"流程名称不能为空","FS-PSqlInj-Exist_Custom_SC":"该转义字符已经存在","Datasource-Convert_Charset":"编码转换","FS-Monitor_Clean_Failed":"清理失败","FS-Report_Has_Invalid_Value_To_Fill":"该模板中存在未填写项","New":"新建","Chart-Summary_Method":"汇总方式","Widget-Form_Widget_Container":"表单容器","Send-Email_Schedule_Action":"定时发送邮件","FR-Designer_Preview":"预览","FS-User-Builtin_Authentification":"平台内置认证","CUSTOM_MODE":"自定义分组","FR-Plugin-Designer_FTP_Site_IP":"地址:","FS-Web-Error_Cannot_Delete_In_Jetty":"内置的jetty服务器不支持删除插件,建议使用设计器插件管理来管理插件.","FR-Chart-XY_Van":"散点图(新特性)","IS_Auto_Scale":"iframe嵌入时自动缩放","HJS-Range":"范围","NS_cell_formula":"错误代码:11200003 错误的公式参数","Plugin-ChartF_Change_Percent":"变化百分比","FRFont-Size":"大小","Plugin-ChartF_Outside":"外侧","FS-System-Settings_Button_Width":"50","Plugin-ChartF_Fixed":"固定","FR-Plugin-Dependence_Plugin_Not_Found":"未找到依赖的插件","Connect_SQL_Cannot_Null":"数据连接和SQL面板不能为空","Chart_Line_Style":"折线样式","FS-User-Delete_User":"删除用户","ExpandD-Up_Father_Cell":"上父格","Sure_To_Leave":"你确定要离开吗","Reinstate_Report":"恢复成非层式报表","Printer-Rename_Printer_Group":"重命名打印机组","Forecast":"预测","ChartF-Open-High-Low-Close":"开盘-盘高-盘低-收盘图","FR-Engine_PageSetup-Paper_Size":"纸张大小","Display-Style":"报表展示样式","WF-Assigned_User":"指定用户","FS-Msg-Dependence_Install_Or_Not":"插件需要安装依赖环境，是否下载依赖","ChartF-Start_Value":"起始值","Plugin-ChartF_NewGauge":"仪表盘（新特性）","Nation":"国家","FS-Monitor-Templet_Active_Days":"生命天数","FS-Setting-Home_Page":"首页","Delete_Data":"删除数据","JS_WARNING2":"  例：http://localhost:8075/WebReport/demo.js","PageSetup-Title_Start_Row":"重复标题行","Chart-Unit_Ten_Million":"千万","M_Format-Add_Row_at":"添加行","JS_WARNING1":"  相对报表工程目录如WebReport,如WebReport\\js下有引用的js文件test.js，则相对路径为js/test.js","Plugin-ChartF_Preview_Pie":"预览饼图","FS-Generic-Simple_Address":"地址","Docking-Aggregate":"聚合","FS-Schedule-Prepare_Expression":"预置表达式","Allow_To_Upload_Contains":"允许上传的文件包括","Platform_Module_PostManager":"公告管理","FS-System-Applet_Need_Settings":"需要Applet打印机属性设置窗口","Plugin-ChartF_End_Point":"到达点","ConditionB-is_less_than":"小于","Utils-Repeat_ReportFooter":"重复表脚","M-New_FormBook":"新建决策报表","VisitTime":"访问时间","Plugin-ChartF_MainGraduationLine":"主要刻度线","FR-Plugin-Store_Key_Word":"关键字","Mobile_Widget_Table":"移动端控件列表","Chart-Map_DragToEdit":"拖拽来编辑层级","Err-The_value_must_be_integer":"必须为整数","FR-Engine_Modify_Schedule-Task_Name":"修改任务名称","Preference-JDK_Home":"JDK路径","Ecp_Pwd_Short":"密码长度过短","Main_Axis":"主坐标轴","Chart_Alert_Top":"居上","FS-Web-Plugin_Has_Been_Installed":"该插件已安装","HF-Insert_Page_Number":"插入页码","FR-Engine_Cluster-Member":"集群节点机器","FS-Generic-Simple_Server":"服务器","FR-Engine_Cluster-Leader":"集群主机","Highlight-Choose_Property_To_Modify":"选择要改变的属性","FR-Plugin_Error_UnexpectedError":"未知错误","Chart_Float":"图表超链-联动悬浮元素","Sytle-FRFont":"字体","FR-Engine_Excel_by_location":"Excel导入, 开始位置匹配","FR-Import-Export_SVG":"SVG格式","Printer-Set_Alias":"设置别名","FR-Basic-Email_From":"发件人","ChartF-Range_of_RangeAxis":"坐标轴值范围","FR-Engine-Type_Number":"数字","FR-Designer_Record-Number":"记录数","FS-Schedule-Step3_Label_Width":"100","ECP_error_input":"密码格式不符","Form-Comma":"逗号","Form-Desin_Width":"设计宽度","Registration-Professional_Edition":"专业版","ChartF-Needle_Color":"指针颜色","Series_Name":"系列名","FS-Monitor-Frm":"决策报表浏览","HyperLink_Must_Alone_Reset":"多个超链","First_Of_Week":"为周起始","INFO-Start_Converting_ReportPage_To_Html":"开始转报表页为Html","ReportD-Html_Export":"报表HTML导出属性","FS-Generic-Simple_Mail":"邮件","Attribute":"属性","Plugin-Chart_Loading_Layers":"正在加载","FS-System-Send_Verification_Code_Phone_Email":"无法验证身份：平台未开启短信服务，无法接收验证消息。您可尝试使用邮箱进行验证。","FS-Web-Dependence_Connect_Server_Error":"依赖下载失败","FR-Designer-Plugin_Load_Plugins_From_Server":"正在从插件商店获取数据","JS_Import_Description":"如果通过相对路径引用js: \n相对于报表工程目录如WebReport, 如WebReport\\js下有引用的js文件test.js，则相对路径为js/test.js;\n如果通过绝对路径引用js:\n示例:D:\\tomcat\\webapps\\WebReport\\WEB-INF\\scripts\\script.js","InRow":"行(R)","FS-Generic-APP_LAUNCHING":"APP启动画面","RWA-Row_Offset":"行偏移","Error_TableDataNameRepeat":"已经在服务器数据集中存在或者多个数据集名重复。","FR-Engine-Type_String":"字符串","FR-Engine_Current_Page":"当前页","LayerPageReport_Define_PageQuerySQL":"定义分页查询sql","FR-Plugin-Dependence_File_Not_Found":"未找到依赖的资源文件","Chart-Lat_First":"纬度在前","CellWrite-InsertRow_NULL":"空值","FR-Module_Designer":"设计器模块","CountStyle":"计算方式","FR-Chart-Map_Title":"标题","Utils-Group_Header":"","Select":"选择","DateFormat-yyyyMMdd":"yyyy年MM月dd日","M_Report-Bind_Data":"绑定数据(B)","Managed":"可管理","FR-Plugin_Error_InitInstanceError":"初始化插件对象失败","Please_Install":"请安装","FR-Plugin-Store_Designer":"设计器","FS-Privilege-Simple_Authorize":"授权","Build_Tree_Accord_Parent_Marked_Filed":"依赖所选数据集的父标记字段构建树","Utils-Set_Default_Database":"设为默认数据库","The_current_list_is_empty":"当前列表为空","FS-Schedule-Output_FTP_Address":"服务器地址","M_Help-Demo":"示例(D)","Privilege_Allocate":"权限分配","FS-User-Simple_Management":"用户管理","FR-Designer-Plugin-Store_Businesses":"","Schema":"主题","Import-Save":"保存到目录","FR-Chart-Title_NewTitle":"新建图表标题","FS-System-IP_Address":"IP地址","Plugin-ChartF_NewScatter":"散点图（新特性）","FS-Schedule-Operation_Monitoring":"运行监控","Remember-Username_And_Password":"记住用户名和密码","data_import":"数据导入","FS_Table_Edit":"编辑","Plugin-ChartF_Condition_Config":"状态设置","Datasource-Param_DES":"<html>&nbsp;您可以键入\"${abc}\"做为一个参数，这里abc是参数的名称。例如：<br/>&nbsp;select * from table where idLOG-Has_Been_Openned=已经打开","IDCard":"身份证","FR-Module_Engine":"引擎模块","FR-Chart-App_Update":"更新","FR-Engine_FS_BI":"决策平台","FR-Designer-Plugin_DownLoadMessage":"插件需要依赖的支持，是否安装 ({R1} m)?","I-LineStyle_LineStackWithMarker":"堆积数据点折线图","FS-Msg_Install":"插件将在重启服务器后被启用","ECP_decode":"模板解密","M_Edit-Free_Ajust_Size":"自由调整尺寸(S)","Specify":"指定","FS-BakRestore_FS_Config_Backup":"平台配置","Chart_Set_Data_Sheet":"设置数据表","Des-Would_you_like_to_cover_the_current_file":"是否要覆盖当前文件","FS-Generic-Simple_Expression_Not_Null":"自定义表达式不能为空","ConditionB-AND":"与(AND)","M-Excel_File":"Excel文件(E)","FR-Engine_Fri":"五","Chart_TrendLine_Forward":"前推","Plugin-ChartF_AlertRight":"居右","DS-Define_Semantic":"定义语义层","Plugin-ChartF_Flash_Period":"运动周期","FR-Engine_Excel_The":"第","Chart-Data_Filter":"数据筛选","Print_As_Image":"以图片方式打印( 针式打印机推荐使用 )","FR-Plugin-Designer_FTP_Login_Anonymous":"匿名登录","FS-Schedule-Time_Validate":"开始时间不能大于结束时间!","FR-Designer-Dependence_Install_Failed":"依赖安装失败","Rotation":"旋转","View_Combo":"下拉视图","Rename":"重命名","Indent-Indentation_Unit":"缩进单位","FR-WriteEnhance_not_support_null":"不能为空","DashBoard-FormBook":"表单","FS-Ecp_Old_Password":"旧密码","Datasource-Connection_failed":"连接失败","Template-Design":"模板设计","FS-Plugin-Store_Front_End_Display":"","PageSetup-First_Page_Number":"起始页码","I-LineStyle_LinePercentageStackMarker":"百分比堆积数据点折线图","Form-TableTree":"表格树","Choose_to_generate_file_displayed_in_the_virtual_directory":"选择生成文件显示在的虚拟目录","ChartF-Tick_Marker_Type":"刻度类型","schedule_email_notice_tip_second":"中的","PageURL":"网页URL","Comfirm_To_Save":"确认保存","FR-Designer_RWA-Help":"设置未修改不更新后，填报预览报表，记录所在单元格没有被编辑修改，则此记录不会进行更新；\n在大数据量记录查询并回填情况下，启用该设置，可以提高填报提交性能。","ChartF_Alert":"警戒","Plugin-ChartF_Currency":"货币","FS-Error-Null-Msg":"输入值不能为空！","Plugin-ChartF_Section_Config":"区间配置","SelfDefineClassName":"自定义类名","Restore-Default":"恢复默认","JinanCity":"济南市","FR-Engine_Export-Excel-PageToSheet":"分页分Sheet导出","FS-Setting-Edit_Directory_Icon":"编辑目录图标","Role_Information":"角色信息","FS-Report-Analysis_Name":"分析名称","FR-Engine_RP_Report_Deadline":"填报时限","Plugin-ChartF_AlertText":"提示文字","Chart-Value_Percent":"值所占比例","Report_Not_Exist":"所选报表不存在！","FS-System-Config_Backup_Every":"每隔","Role_Source":"角色来源","FR-Designer_ConditionB-OR":"或(OR)","Plugin-ChartF_Default":"默认","Enter_Pwd_Ecp":"请输入密码进行加密","Style-Spacing_After":"段后","REDIRECT_FROM":"权限跳转FROM的URL","FR-Engine_Event_afterappend":"添加行后","Plugin-ChartF_PercentLabel":"百分比标签","RP_Reach_Node":"到达该节点","Current":"当前","FR-Engine_ConditionB-does_not_equal_to":"不等于","FR-Engine_Current_File_Upload_Progress":"当前文件上传进度","Chart_Title":"新建图表标题","FS-Unbind-Success":"服务器解除绑定成功，请刷新本页面！","Set_Chart_Style":"设置图表区格式","Export-CSV":"CSV格式(逗号分隔)","FS-Privilege-Role_Name_Exists":"角色名已存在","FR-Engine_Event_beforeappend":"添加行前","FR-Plugin_Register_Error_UUID_Not_Match":"证书中绑定的机器码与本机不符，绑定的机器码为:{R1}","FR-Designer_Form-Button":"按钮","Printer-Rename_Printer":"重命名打印机","FR-Engine_Excel_not_found_start":"未发现Excel导入起始行列","Chart_Float_chart":"图表超链-悬浮窗图表","Cache-Policy":"缓存策略","FS-Schedule_Calculated_Regularly":"定时计算","Plugin-ChartF_Formula":"公式","FS-Generic-Activated_Printer":"需要激活的打印机","FS-MOBILE-DEFAULT-DIRECTORY-NAME":"九宫格","FR-Engine_Delete":"删除","FS-System-PDFP_Need_Settings":"需要PDF打印机属性设置窗口","New_Value":"新值","FS-System-Config_Backup_Frequency_Oneweek":"1周","RP_Process_Type":"流程类型","HF-Whether_to_define_the_selected_type":"是否定义选中的类型","ChartF-Data-Filter":"筛选器","IN_and_INOUT_type_not_as_cursor":"IN和INOUT类型不可以作为游标","RP_Edit_Process":"编辑流程","Style_Name":"格式名","LayerGrade":"钻取层级","Plugin-ChartF_Preview_Point_Drill_Map":"预览点钻取地图","FR-Engine_Excel_Customize_Import":"Excel自定义导入行列","Inner_Parameter":"内置参数","FR-Chart-AutoRefresh_NotSupportIMGAndReportData":"不支持图片形式和单元格数据源","Update":"更新","FS-Mobile-User_Limit_Tip_Left":"当前许可文件仅支持","Sub_Report_Message2":"父报表不在当前运行环境下","Sub_Report_Message1":"请选择正确路径","Chart-Select_Path":"选择路径","FR-Engine-List_Filter":"列表筛选","CellWrite-Hide_Same_Cell_Vertically(Used_in_Group_Report)":"纵向隐藏相同的单元格(分组报表使用)","Collect-Use_Designer":"使用设计器","Utils-Insert_Row":"插入行","Collect-Collect_User_Information":"收集用户信息","D-ChartStyle_SubStyle":"","FS-User-Empty_Custom_Role":"角色名称不能为空","FS-System-New_Pwd_Cannot_Empty":"新密码不能为空","Sub_Report_Message3":"不能选择自身","Plugin-ChartF_Drill_Map":"钻取地图(新特性)","Get_Catalog":"正在获取catalog","Value_Not_Match":"键入值不符合规范","plugin-ChartF-Radius":"圆角","Input_Keyword":"键入关键字","Device":"设备","Set-Parameter-Name":"请先设置参数名","FS-Setting-Backgroung_Type":"背景","Role_changed_isRefresh":"角色已变动，是否刷新","FS-Frame-Simple_Platform":"报表管理平台","ChartF-DeleteMainGrid":"删除主要网格线","Chart-Map_Delete":"删除","FS-Plugin-Store_Version":"","Edit_String_To_Formula":"是否将字符串编辑为公式","Set_Submit_Event":"设置提交事件","already-saved":"已经保存","Uploaded_File":"该文件已上传","Please_Set_Repeat_First":"请先设置重复标题行和列","FR-Designer_HyperLink_Must_Alone_Reset":"多个超链","Sort-Sort_Order":"排列顺序","FS-Schedule-Output_File_Description":"文件描述","FS-Schedule_Generate_Result_By_User_Group":"除通用结果外，根据默认用户组内的用户单独生成结果","Chart-Use_Format":"格式","FR-Engine_Event_unloadcheck":"未提交离开","Page_Total":"共","RestartAfterSet":"配置结束立刻开始","Background-Pattern":"图案","Clear_All":"清空","StyleAlignment-Right_To_Left":"从右向左","MainGraduationLineStyle":"主要刻度线类型","Using_single_template_set":"使用单模板偏移","BarStyle":"条形","Formula_Condition":"公式条件","fs_process_reporttask_tip":"表单任务:此任务可以设置报表或者表单用于展现所需数据,单击编辑属性，双击可以改名。","ExpandD-Cell_Expand_Attributes":"扩展属性","FR-Plugin_Delete_Confirmed":"确定删除此插件？","CopyRight":"版权所有","Plugin-ChartF_Layer_Null":"无","M_Insert-Hyperlink":"超级链接","CategoryName":"分类名","FS-PSqlInj-Exist_Custom_FW":"该关键字已经存在","time(s)":"","Chart-Song_TypeFace":"宋体","FS-Monitor-Log_Clean_Three_Months_Ago":"三个月前","FS-Schedule-Extra_Execute_Times":"额外重复执行次数","Plugin-ChartF_To":"初始右边界","Add_Chart_Map":"添加地图","Plugin-ChartF_UnifiedComputing":"统一计算","RP_Edit_Task":"编辑任务","Report-Web_Attributes":"模板Web属性","FS-Schedule-Trans_FAILED":"数据同步转换失败","Preference-Grid_Line_Color":"网格线颜色","Freeze-Page_Row":"冻结重复标题结束行","Form-Properties":"属性","Log_Declare_Head_Res_Write":"文件写出中","FS-Privilege-Normal_Role":"普通角色","RP_Task_Status":"任务状态","FR-Engine_RP_Invalid_Task_Or_Process":"任务名称或流程名称不符合规范","FR-Plugin_Has_Install_Lower":"已经安装低版本插件，是否进行更新？","ChartF-Show_GuidLine":"牵引线","ChartF_Stock_Low":"盘低","RP_Execute_Month":"执行月","Plugin-ChartF_DisplayStrategy":"显示策略","Char-Lik_Cell":"","FR-Plugin-Store_Permanent":"永久","FR-Engine_Short-Dec":"十二","M_Window-Cascade(C)":"层叠(C)","FR-Base_Not_Exsit":"不存在于报表","Custom_Login_Page":"自定义登录页面","RP_Task_Operation":"任务操作","FR-Engine_no_title":"表头匹配失败, 直接导入Excel","M_Edit-DeleteFloat":"删除悬浮元素","Plugin-Chart_Create_GIS_LAYER":"创建GIS背景","File-address":"文件地址","SQLWizard-reading":"读取中","FS-Privilege-No_Control":"不做身份验证","Component_Interval":"组件间隔","FR-Engine_Execute":"执行","Choose_Use_Authority":"您可以选择使用权限来进行权限的设置","FR-Engine_Event_showWidgets":"直接显示控件","WLayout-Border-ThreeContainer":"拥有北、西和中三块的边界布局容器，其中北部块可以根据需要调整高度，西部块可以根据需要调整宽度","Repagination":"页码重置","Chart-DS_TableData":"数据集","Opening_Report":"正在打开报表","DONE_WORK":"已处理事务","FS-Report-RP_SelectLabel":"请选择上报标签","Download":"下载","M_File-Export-SVG":"SVG格式","Plugin-ChartF_Right_Tree_Map":"右侧","Last_Submit_Time":"上次提交时间","FR-Engine_Excel2007-not-support-pwd":"Excel2007导出不支持工作簿加密","Excel_formula_error":"导出公式解析错误","FS-Monitor-Templet_Release_Date":"发布日期","Chart-Float_Chart":"图表超链-悬浮窗图表","Columns":"列","FR-Engine_Block_extended":"可扩展块：","Plugin-Memory_Alarm_Msg_Body_Clear":"%时,强制清除","FS-System-Last_Logined_Info_Example_Title":"提示样例","FR-Chart-Data_Min":"最小值","Department_Roles":"部门角色","FR-Engine_Verify_Error":"校验出错","FS-System-Single-Login-Set":"单一登录设置","ConditionB-Add_bracket":"添加括号","Classpath-Add_Jar":"添加Jar","template_unsaved":"无法保存模板","DS-Database_Query":"数据库查询","Privilege-Keep_Login_State":"保持登录状态","FS-Schedule_Subject":"主题","FS-Monitor-Not_Less_Than":"建议不应小于","Chart-Data_Configuration":"数据配置","FS-Local-Version-Number":"本地版本号：","FR-Chart-Map_Sichuan":"四川","No_offset":"无偏移","INFO-Page_is_Generated":"页面已生成","FS-Plugin_UpdateOnline_Already_Backup":"8.0工程已备份在","FS-System-Messages_Count":"条","Datasource-Set_Classpath":"设置Classpath","M_Edit-Bring_Forward":"上移一层(F)","DBCP_TEST_ON_BORROW":"获取连接前检验","DisplayNothingBeforeQuery":"点击查询前不显示报表内容","FR-Plugin_Error_FindNoPlugin":"未找到该插件","FR-Engine_WF-Name":"名称","CellWrite-Print_Zero_Value":"打印零值","Plugin-ChartF_CommonModel":"常规模式","Plugin-ChartF_On":"开启","FR-Designer-Widget-Style_Title_Background":"标题背景","FR-Chart-Map_Yinchuan":"银川市","Role":"角色","FR-Engine_Event_afteredit":"编辑后","Update_OfflineWrite_Lic":"当前版本不支持输出离线html报表，请升级您的lic","I-Message_SummaryGrouper":"您可以选择适当函数进行汇总显示","Plugin-ChartF_Gis_Layer":"GIS图层","Plugin-ChartF_Layer_GaoDe":"高德地图","FS-Generic-RP_System_Message":"系统消息","Datasource-Are_you_sure_to_delete_the_selected_remedy_datasource":"你确定删除选中的Remedy数据源吗","FS-Plugin_updateOnlineNow":"立即更新","StyleFormat-Scientific":"科学计数","FS-Schedule_Platform_Message":"平台消息","FR-Designer-Plugin_Cannot_Update_Not_Install":"无法更新插件，请检查该插件是否已经成功安装","Field":"字段","Close_Synchronized_DataSet":"关闭同步数据集","You_have_not_made_a_report":"您还没有制作报表","FS-System-Login_Now":"立即登录","FR-Chart-Map_Neimenggu":"内蒙古","Plugin-ChartF_Project_Name":"项目名称","FR-Engine_JavaScript-Commit_to_Database":"提交入库","FR-Designer_Refresh":"刷新","Chart-Right_Top":"右上","FR-Engine_Wed":"三","Datasource-Read_Type":"读取方式","Add_JS_warning":"请输入如实例所示的正确的url地址!","FS-Plugin_updateOnline_Rename":"重命名","Registration-User_Email":"用户邮件","M_Insert-Shape_Line":"直线(L)","FR-Designer_Plugin_Should_Update_Title":"插件升级提醒","FS-Schedule_Mobile-Push-Scheme":"主题","BuildIn":"内置","Plugin-ChartF_NO":"否","FS-CustomStyle_Toast_Res_Empty_alert":"样式响应为空！","FR-Plugin_Developer":"开发者","FS-Admin-Password_Can_Not_Be_Null":"密码不能为空","ComboCheckBox-End_Symbol":"结束符","FS-Frame-Simple_Comma":"，","Delivery":"传递","Chart_Date_Axis":"时间坐标轴","FS-Monitor-No_Selected_Tip":"你没有选中任何选项","Plugin-ChartF_UseTooltip":"使用数据点提示","FS-Admin-Simple_Exit":"退出","Chart-Change_Chart_Style":"设置图表区域格式","Remove":"删除","Plugin-ChartF_Custom":"自定义","Plugin-Memory_Alarm_Mode_Exp":"开启调试模式的时候,服务端会每秒钟输出一次内存占用信息(info级别)","Odd":"奇数","FS-User_Login2PlatForm":"登录到服务器管理平台","Utils-Connection_can_not_be_null":"数据连接不可为空","FR-Plugin-Store_Login_By_QQ":"用QQ号登录","FS-Generic-Simple_Minute":"分钟","M-File":"文件","BindColumn-Advanced_Summary":"高级摘要","RP_Report":"上报","Performance-plugin_vendor":"作者","ChartF-TickLabelIsVisible":"隐藏刻度值","Sub_Report_Description":"子报表需要存在于父表运行环境下，且两者不能为同一模板","Root":"根节点","Utils-Show_Cell_Value":"显示单元格值","This_ScheduleAction_Is_Not_Exsit":"这个定时动作不存在","FR-Engine-Tab_Layout_Width":"宽度","Plugin-ChartF_Center":"居中","FR-Engine-Sort_Sort":"排序","Unit_INCH":"英寸","FR-Base_Columns":"列","DS-Select_Database":"选择数据库","FR-Engine_ConditionB-Remove_bracket":"去掉括号","Unit_Hundred_Thousand":"十万","My_Computer":"我的电脑","FR-Engine_TaskEndWhenOneTime":"任务执行一次后即结束","ServerM-Face_Manager":"界面设置","ChartF_ValueRange_MatchColor":"值区间配色","Custom_Type_Set":"组合类型设置","Folder":"目录","Schedule_DEC":"","Still":"仍然","Prospecting_File_Error":"勘错文件导出时发生错误","FS-Generic-Simple_Form":"表单","Input-To_Search":"搜索选项结果","M-Popup_ChartType":"图表类型","FS-Before-Unbind-Authority":"正在解除绑定","Mouse_move-background":"鼠标移动到按钮上的背景，若无则不改变背景","FS-System-Please_Input_Email":"请输入邮箱","FR-Chart-Interactive_timeSwitch":"时间切换","Utils-Total_Option":"可选项","FR-Chart-Map_Guangxi":"广西","Chart_Half_Transparent":"半透明","FR-Base_May":"五月","FR-Plugin_Register_Error_ProjectID_Not_Match":"证书中绑定的工程ID与本机不符，绑定的工程ID为:{R1}","FR-Engine_ReportServerP-Previous":"上一页","FR-Engine-Write_Stash_Failed_Msg":"暂存失败，请注意保存数据。","Gradient-Direction":"渐变方向","Prospecting_File":"勘错文件","FS-BakRestore_Cleanuping":"正在清理...","FR-Base-NS_register_ipFull":"错误代码:11100015 系统并发数已满","M_Help-About_Software":"关于软件","I-AreaStyle_Stack_3D":"三维堆积面积图","FS-Generic-Simple_March":"三月","Right_Top":"右上","FR-Designer_Unit_INCH":"英寸","FR-Plugin-Store_App":"应用商城","Widget-Width":"控件宽度","RWA-BuildIn_SQL":"内置SQL","FS-Plugin_UpdateOnline_Unzip_Replace_Restore":"，解压后可独立运行。建议在工程目录外解压。","FS-Plugin-Store_Install_From_Local":"","Ningxia":"宁夏回族自治区","ZhengzhouCity":"郑州市","Form-Allow_CustomData":"允许自定义值","Pink":"粉红","Column-Number-OR-Row-Number":"列号或行号","ChartF-Meter_Type":"仪表盘类型","Save":"保存","Cell-Location_And_Span":"位置和跨度","FR-Plugin_Error_NotPluginInstallPackage":"不是插件安装包","Plugin-ChartF_Word_Value":"词频","ChartF-Tick_Label":"刻度标签","Display position":"显示位置","Schedule-Mail_To":"以邮件发送到","Is_Need":"必需","Plugin-Chart_Gradient_Direction":"渐变方向","FS-Schedule_Mount_directory_Not_NULL":"目录不能为空！","FS-Schedule_Attach_Send":"附件发送","FR_FS-Handle_Affairs":"处理事务","Custom_Icon_Message1":"建议使用16 × 16规格的PNG图片","FS-System-not_war":"非","Custom_Icon_Message2":"您的操作存在不合理之处。","Custom_Icon_Message3":"图标名称已经存在。","ImgBoard":"图片面板","Plugin-Memory_Alarm_Unit_MS":"ms","FR-Chart-Text_Vertical":"竖排","Plugin-ChartF_FullScreenDisplay":"全屏展示","Rows":"行","Set_User":"用户配置","FR-Engine_ConditionB-Input_Condition_Parameter":"输入过滤条件的参数","FR-Designer_Modify":"修改","Datasource-From_Database":"数据库表","FR-Widget_Message_Letter_Space":"8","FR-Engine_Form-Action":"操作","OtherGroup_Name":"其他组的名字","Closed":"已关闭","RowSpan":"行跨度","FR-Engine_Sche-Hour":"时","FS-Monitor_Suggestion_Comma":"，","FS-Plugin_updateOnline_Restore":"jar包还原","NS_print_noApplet":"错误代码:11200002 当前工程目录下未发现Applet包","FR-Engine_ConditionB-does_not_begin_with":"开头不是","FR-Plugin_Error_AuthenticationFailed":"鉴权失败","FR-Designer-Plugin_Connect_Server_Error":"无法连接插件商店，请稍候再试","Release-To_Load_Data":"松开将加载数据","Activity":"活动","SINGLE_FILE_UPLOAD":"只支持单文件上传","SecondGraduationLine":"次要刻度线","FS-Generic-Parameter_Setting":"参数设置","Empty_Input":"输入内容为空","Month":"月","RWA-Add_Field":"添加字段","FS-Schedule-Invalid_Unsent_Email_Address":"无效的邮件地址：","FS-Setting-Custom_Homepage":"自定义首页","WF-Privilege_Setting":"权限设置","MicrosoftYaHeiInCN":"微软雅黑","FR-Engine-ExcelImport_Write_Match_Error_Info":"匹配模板失败，请确认文件格式是否与模板一致！","Plugin-Chart_Empty_Data_Title":"数据没有内容","Max-Decimal_Length":"最大小数长度","Form-Right_Align":"右对齐","FR-Engine-PageSetup_Landscape":"横向","Cursor_to_previous_row":"光标移到上一行为：","Name_has_Colon":"名字:","FS-Setting-Title_Only":"仅使用标题","Schedule-Unspecified_Template_File_Name":"未指定模板文件名","FR-Chart-Data_None":"无","FS-Generic-Simple_Value":"值","Performance-plugin_Maintain_Session":"导出维持Session","FR-Designer-Plugin_Jar_Expired":"Jar包过旧","Privilege-The_User_Account_Is_Expired":"此用户名已经过期","FS-Schedule_No_Limit":"无限制","M-Report":"报表(R)","Float":"浮点型","Custom_Button_Type_Simple":"普通","Expand":"扩展","FR-Base_Short_Feb":"二","TurnOff":"关闭","ExcelImportD-Save":"保存到目录","ChartF-End_Value":"结束值","Chart-Map_HowtoDrawRectangle":"点击并拖拽画矩形","FR_Chart-Data_Range_configuration":"数据区间配置","Plugin-Chart_Load_Layers":"加载图层","FR-Engine_Save":"保存","Provide":"提供","XiningCity":"西宁市","ChartF-Series_Name":"系列名称","FS-System-Last_Login_Location":"地点","FS-Web-Dependence_Install_Failed":"插件安装失败","Plugin-Chart_Tooltip":"提示","Plugin-ChartF_Change_Value_Conversion":"变化转化率","ReportColumns-End_at_Column":"结束分栏列序号","FS-System-Email_Wrong_Format":"邮箱格式不正确","FS-Plugin-Store_Not_Login":"","FR-Designer-Plugin_Update":"插件更新","FR-Engine_Modify":"修改","Report-Write_Attributes_Group_Warning":"设置为单元格组的各字段中的单元格个数必须相同","FS-BakRestore_Log_Success":"模板执行","Plugin-ChartF_MainType":"主刻度单位","GroupB-Add_Condition_to_List":"是否将以下条件添加到条件列表中","ExportAndOutput":"导出","FS-Msg_Prompt":"提示","ReportD-Report_Write_Attributes":"报表填报属性","FR-Designer_Size":"尺寸","Performance-plugin_remarks":"备注","FS_Old_Password":"旧密码","RP_To_Check":"待审核","LanzhouCity":"兰州市","Registration-Standard_Edition":"标准版","FR-Engine-Print_As_Image":"以图片方式打印( 针式打印机推荐使用 )","SAP_datatype":"SAP数据类型","Row_tag":"行标签","FR-Engine_Function_Name_Should_Not_Be":"函数名不应该是","M_Report-Report_Parameter":"模板参数","FR-Engine_Right":"右","Chart-Actual_End":"实际结束","Display":"展示","Para-Shown_On_Default_Parameter_Page":"显示于默认参数页面","FS-Report-Create_Dir_Dialog_Label_width":"58","Datasource-Single":"单个读取","Plugin-ChartF_Gauge_Pointer_Title":"满指针仪表","Plugin-ChartF_Y_Direction":"y方向","SetStartTime":"设定开始时间","Please_Drag":"请拖入行列字段、汇总字段","LIC-Support_Flash_Print":"Flash零客户端打印","FR-Chart-Map_Wulumuqi":"乌鲁木齐","Performance-plugin_multisheetcalculate":"多sheet缓存数据集","MeterAngle":"仪表盘角度","Docking-Undock":"不停靠","Registration-Project_Name":"项目名称","Tree-Select_Leaf_Only_Tips":"（不勾选此项时，返回值仅为用户勾选的当前节点而不包括其子节点）","FS-Setting-Generic_Setting":"通用","EveryInterval":"每隔","FS-Generic-Applet_Print":"Applet打印","One-Name_Value":"一个字段的值","FS-BakRestore_Use_Global_Config":"使用全局配置","Poly-Report_Component":"聚合报表组件","M_Format-Add_Row_Before":"在前面添加行(A)","FR-Engine_Form_Share":"组件复用","LayerPageReport_CountPerPage":"每页记录数","FR-Engine_Executing_Report":"报表计算中","I-LineStyle_LinePercentageStack":"百分比堆积折线图","Already_exists":"已存在，请重新输入！","FR-Import-Export_CSV":"CSV格式(逗号分隔)","Performance-plugin_function_manager":"功能管理","FS-BakRestore_Path_Invalid":"无效路径","Vertical_Layout":"垂直布局","Plugin-ChartF_Needle":"指针","FR-Plugin-Start_Version":"支持的最低报表版本","FS-Generic-Simple_Example":"例如","Plugin-ChartF_SameArcPie":"等弧度玫瑰图","Plugin-Chart_Point_Name":"点名称","Utils-All_Sheets":"所有的Sheet","FormulaD-Text":"文本函数","Form-Remove_Repeat_Data":"去除重复数据","Loading_Applet":"正在加载Applet","Preference-Locale":"国际化","FR-Base_July":"七月","FS-Schedule_Mount_Platform":"挂载平台","Set_Column_Title_End":"设置重复结尾列","ParentCell_Setting":"父格设置","Hyperlink-Extends_Report_Parameters":"继承报表的参数","Show_Grid_Column":"显示格子列","DateFormat-Custom_Warning":"注：自定义日期格式不支持格式校验","Title":"标题","FS-Plugin_updateOnline_ChooseVersion":"请选择jar包版本","FR-Engine_Excel_Current_Sheet":"当前sheet","FR-Engine_RP_Edit_Task":"编辑任务","FR-Engine-Write_Column_Type_Mismatch":"数据列类型不匹配 ","FR-Chart-Map_Taiwan":"台湾","Utils-Bottom_to_Top":"从下到上","FR-Base_June":"六月","FR-Engine-Tab_Text_Vertical":"竖排","FR_FS-FailPass_ImproveYourVersion":"当前版本无此功能，请使用高级版本。","Ecp_Failed":"加密失败","Editor":"编辑器","FR-Plugin-Store_Net_Connect_Failed":"网络连接失败","ParameterD-Parameters_Processor":"参数处理器","NS_register_sense":"错误代码:11200005 加密狗读取失败","Location":"位置","Has_Selected":"已经选择","Plugin-ChartF_TickColor":"刻度线颜色","Utils-New_Directory":"","ShowAsDownload":"用下载链接显示二进制内容","FR-Chart-Import_Map":"导入地图","FS-Generic-Simple_Next":"下一步","Jiangxi":"江西省","FS-User-Add_User_Failure":"用户添加失败，该用户名已被占用或者角色异常","GroupReport-GroupReport_Attributes":"分组报表属性","ChartF-High-Low-Close-Chart":"盘高-盘低-收盘图","BindColumn-Default_Father_Cell":"默认父格","FR-Plugin-Designer_FTP_Site_Port":"端口:","FR-Base_TurnOff":"关闭","FS-BakRestore_BackupRestore":"备份还原","ReportServerP-Import_JavaScript":"引用JavaScript","Plugin-ChartF_Height":"高","WF-Reportlet_Info":"网络报表信息","FS-Schedule_SMS_Prompt":"短信提醒","Utils-No_Data":"没有数据","FR-Chart-Value_Divided_stage":"划分阶段","FR-mobile_report_analysis":"报表解析","Suffix":"后缀","EmailPane-tips":"<html>您可以键入${abc}作为一个参数，abc为参数名称；${today()}作为公式，例如：标题正文为\"${today()}统计情况\"，收件人为\"${p},123@gmail.com,mike\"，这里mike必须是已保存在平台用户管理里的用户名<\/html>","Switch":"切换","FS-Schedule_DataSet_Name":"数据集名称","FS-Plugin-Store_Free":"","ExpandD-Add_Datasource":"添加数据源","FS-Reg-Simple_Jar":"Jar包","Examples":"例子","Default_Certification":"默认认证","FR-Engine_Role":"角色","Sequenced_number":"序号","FR-Engine-Invalid_Cell":"无效的单元格","Plugin-ChartF_NewColumn":"柱形图（新特性）","FS-System-Email_Ports_and_Encryption":"端口和加密","FR-Engine_RP_Content":"内容","Function-Function_File":"函数文件","Plugin-Chart_Gradient_Color":"渐变色","FR-Share_Module_Removed_Failed":"组件删除失败","Form-Semicolon":"分号","FR-Chart-Map_Multilayer":"多层地图","Where_claus":"过滤条件","Cannot_Set_Date":"不能设置日期","FS-BakRestore_Auto_Clear_Once":"自动清理一次，保留近","WLayout-Grid-ToolTips":"网格式布局，可通过设置将整个容器平均分成N行,N列","Plugin-ChartF_Null_Value_Break":"空值断开","FS-User-Encryption_Mode":"加密方式","Plugin-ChartF_Invalid_WMS":"WMS服务无效","Plugin-ChartF_WordCloud":"词云","Plugin-ChartF_Content":"内容","Datasource-Stored_Procedure":"存储过程","Registration-Develop_Edition":"开发版","DisPlay_Proportion":"显示比例","FR-Plugin-Store_Recommend":"推荐","FR-Engine-Condition_Less_Than_Or_Equals":"小于或等于","Not_Exsit":"不存在于报表","BindColumn-Custom_Up_Father":"自定义上父格","M_File-Export-Excel":"Excel格式","Tree-Root_Name":"根节点名","Utils-Rename_File":"文件重命名","FR-Engine_Excel_Requied_Tip":"存在必填项未填!请排查各个sheet","Privilege-Select_Role":"选择角色","FS-Generic-User_Defined":"自定义","FR-Engine_RP_Task_Operations":"任务操作","LayerPageReport_PageQuery_Unsupport_Msg1":"无法自动转化成分页语句，请自定义分页SQL!","DataFunction-Sum":"求和","FS-System-Send_Verification_Code_Admin_Phone":"无法验证身份：平台未开启短信服务，无法接收验证消息。您可删除路径WebRreport\\\\WEB-INF\\\\resources下的privilege.xml文件后重置账号信息","FR-Engine_WriteEnhanceModule":"新填报模块","FR-Chart-Map_Bubble":"气泡图地图","Choose_Date_Time":"选择日期时间","Area_Name":"区域名","Unit_Ten_Thousand":"万","Plugin-ChartF_UseSameSlantAngle":"连续","Plugin-ChartF_Rotation_Direction":"旋转方向","ReportColumns-Columns_vertically":"列分栏","M_Insert-Shape_None":"选择图形(N)","ShenyangCity":"沈阳市","WLayout-Split-ToolTips":"按照比率可以将布局分割两部分","Form-Colon":"冒号","FS-Admin-Simple_Name":"管理员名称","RP_Add_Process":"添加流程","ChartF-Volume":"成交量","SQLWizard-remove_all":"全删除","FR-Engine_String":"字符串","ReportServer-Frozen_Column_Row":"冻结行列","Plugin-ChartF_MaxDiameter":"最大直径","Plugin-ChartF_Layer_Fresh":"清新","FS-User-Custom_Encryption":"自定义密码加密","Highlight-Barcode":"条形码","Utils-Click_the_database_button_to_add_database":"点击数据按钮来添加数据库","FR-Engine-Year_ThisYear":"今年","FS-Monitor-No_Global_Style":"缺少全局样式","Submit_Url":"提交地址","ParameterD-Are_you_sure_to_delete_the_selected_parameter":"你确定删除选中的参数吗?","Test_URL":"测试连接","Plugin-ChartF_Preview_Column_Area_Custom":"预览柱形面积组合图","FS-Schedule-CPR_FAILED":"快照生成：失败","UpParent":"上父格","Float_Element_Name":"悬浮元素名称","FS-Plugin-Store_Official":"","FS-Monitor-Max_Memory":"最大内存","FR-Engine_Show_Print_Setting_Window_When_Printing":"打印时需要打印设置窗口","FR-Server_Version_Tip_MoreInfo":"建议您所属团队使用的我方FineReport产品的设计器版本号以及部署的服务器版本号保持一致，以避免版本不一致造成的问题风险。\n假如您打开更高设计器版本制作的模板，可能打开出错，也可能丢失原有模板属性。假如您制作的模板使用的设计器版本高于您最终部署所用的服务器版本，服务器可能无法正常载入您制作的模板。","M-Page_Preview":"分页预览","FR-Engine_NS_exception_deathCircle":"错误代码:11300003 单元格计算死循环　　出错对象:　","HF-First_Page":"首页","Chart_Bubble_Outside":"气泡外","Plugin-ChartF_FollowMouse":"跟随鼠标","Privilege-The_Password_Of_The_User_Is_Invalid":"错误的密码","Select_Specified_Grouping":"选择自定义分组","Log_Declare_Head_Export":"报表导出中","FR-Chart-UpdateMessage_PushAuto":"是否自动推送","SetPrinterOffset":"打印机偏移","IDLE":"空闲","FS-System-Time_To_Live_Seconds":"最大生存时间","Plugin-ChartF_Position":"位置","FS-Reg_Registration_Successfully":"注册成功","Select_All":"全选","Utils-Submit_Forcibly":"强行提交","FR-Engine_Required":"必填","Plugin-ChartF_Layer_Custom_WMS":"自定义wms服务","FR-Engine-Write_Are_Stashed_Clear":"是否要清空暂存数据？","Plugin-ChartF_Preview_SameArcPie":"预览等弧度玫瑰图","FS-Monitor-Log_Cleaning":"正在清理","FS-Plugin-Store_Installed":"","FR-Plugin-Store_My_Plugins":"我的插件","quote":"引用","ChartF-Stagger":"交错显示","FS-Report-RP_TaskMgr":"上报任务管理","Re-lic-out-date":"lic过期","FR-Chart-Line_Style":"折线样式","Hyperlink-Reportlet_name_cannot_be_null":"网络报表名字不可为空","Platform-Create_Table":"创建表","Form-Design_Size":"设计尺寸","FR-Engine_De":"的","FR-Designer_Indent-Pixel":"像素","Deploy-Page":"部署页面","Preference-Setting_Colors":"颜色设置","FS-BakRestore_Clear_Log":"手动清理","FR-Base-Error_Cell":"错误的格子","FS-System-Mail_Sender_Account":"发件人帐户","EnterTrueTimeFormat":"请输入正确格式的时间","SetLoginBackground":"设置登录背景图片","FR-Chart-Map_Nanchang":"南昌市","GuangzhouCity":"广州市","FS-User-MD5_Encryption":"内置MD5加密","FR-Engine_the_target_cell_is_at":"计算的目标格子在","MinuteWrong":"执行时点的分钟填写错误","FR-Plugin_Error_CopyLicenseFileFailed":"拷贝License文件失败","Group_by":"分组依据","FS-Login_SMS_Verfication_Msg_2":"决策系统开启了登录验证，为了确保账号安全，请进行身份验证","FS-Login_SMS_Verfication_Msg_1":"提示：请确保其他成员已绑定手机号，否则他们将无法独立完成登录验证","Yuan":"元","FS-Login_SMS_Verfication_Msg_3":"决策系统开启了登录验证，为了确保账号安全，请联系管理员帮助绑定手机号，然后进行身份验证","File-File_Size_Limit":"文件大小限制","Utils-Are_you_sure_to_refresh_all":"刷新所有行将删除您所有的行设置，确定继续","FormulaD-Input_formula_in_the_text_area_below":"请在下面的文本编辑框里面输入公式","FR-Engine_Unload_Check_Msg":"有数据没有提交","FR-Engine-Err-The_Number_Is_Less_Than_The_Minimum_Value":"值小于允许输入的最小值","FR-Engine_no_need_insert":"报表数据多于Excel数据, 不需要插入行.","Following_parameters_are_not_generated":"以下参数未生成","FS-Generic-Simple_Yes":"是","FS-Plugin_updateOnline_Error":"jar升级过程中出现错误,错误信息为:","Allow_Negative":"允许负数","Widget-User_Defined_Editor":"预定义编辑器，该编辑器只能在控件管理菜单里更改其属性","FR-Engine_Fit-Vertical":"纵向自适应","Abnormal_Communication":"通信异常","Mobile_Widget_Tree":"控件树","M_Report-Execute_Script":"运行期脚本(S)","Interval_Gap":"间隔","FR-Engine_Import":"导入","Function-Are_you_sure_to_delete_selected_function":"你确定删除选中的函数吗","Style-Left_Indent":"左缩进","Plugin-ChartF_DifferentArcPie":"不等弧度玫瑰图","Semicolon":"分号","Submit":"提交","Parameter":"参数","FS-Msg-Send_Failed":"消息发送失败","And_A":"及其","Not_Found_XML_File":"没有找到XML文件","Plugin-ChartF_Connect_WMP":"连接","FS-System-Edit_Username_Success":"姓名修改成功","FS-Report-Has_Parameter":"有","ReportWebAttr-Write_Css":"填报自定义样式表","MConfig-ProductName":"产品名称","Printer-Selected_Printer_Groups":"已选择的打印机组","FR-Engine_Native_Print_Loading_Failed_Title":"本地打印软件启动失败！","M_Insert-Shape_Oval":"椭圆(O)","FR-Engine_ConditionB-is_empty":"为空","FS-Plugin_UpdateOnline_Doing_Backup":"正在压缩","Short-Dec":"十二","Form-Bottom_Align":"底边对齐","FS-Schedule-Start_Policy_Immediately":"配置结束立即执行","FR-Designer_Cover_None":"全不覆盖","BindColumn-Group":"分组","FR-Engine_RP_Cpt_Name":"模版名称","ConditionB-Remove_bracket":"去掉括号","PrintP-Last":"末页(L)","Test":"测试","Printer-Remove_Alias":"移除别名","plugin-ChartF_MatchColor":"配色","FS-Module-MobilePush_UseIGT":"使用个推推送","add":"添加","Undefined":"未定义","Overlapping":"重叠型","Root_Path_Cannot_Remove":"根节点不可删除","Enter-New-FileName":"请输入新的文件名","Shandong":"山东省","FS-System-Config_Cleanup_Backup":"内存已满，请清除部分备份","Offline-Contain_Unsupport_Function":"包含不识别的公式","Hyperlink-Show_Directories":"显示快速链接栏","EditRC-Entire_column":"整列(C)","Excel2007-not-support-pwd":"Excel2007导出不支持工作簿加密","Has_Existed":"已经存在","Plugin-ChartF_X_Direction":"x方向","FR-Designer_Tooltips":"提示","Auto-Build":"自动构建","FR-Chart-Map_Liaoning":"辽宁","FS-User-User_Limit_Tip_Left":"当前许可文件仅支持","Plugin-ChartF_Import_Image":"导入图片","FR-Engine_Utils_Flash_Print[Client]":"打印[客户端]","Data-Label":"标签","FR-Designer_Confirm":"确认","FS-Reg-FR-Version":"FR版本","FS-Privilege-Has_No_Privilege_To_Visit":"没有权限访问","FR-Background_Image_Titled":"平铺","ChartF-Show_Labels":"显示标签","Hainan":"海南省","Utils-Matching_Items":"匹配项目","FR-Chart_MainGraduationUnit":"主要刻度单位","Plugin-ChartF_Gradual_Level":"层次渐变","BindColumn-Result_Serial_Number_Start_From_1":"序号从1开始","FS-Plugin-Store_Jar":"","LIC-Support_WorkBook":"多sheet报表设计","FORMLET":"访问不同表单的路径的参数","AxisReversed":"轴逆序","FR-Engine_ConditionB-Operator":"操作符","Utils-New_Report":"新建报表","SpecifiedG-Discard_all_others":"丢弃其它所有的","Chart-Use_Address":"地址","FR-Plugin-Designer_Installed":"已安装","HJS-CC_to":"抄送","fixedTime":"定时","FS-Monitor-SMS_Notification":"短信提醒","FR-Chart-Stock_Chart":"股价图","FS-Schedule_List_Task_404":"错误代码：11300010 找不到相关任务","FR-Chart-Map_Lasa":"拉萨","ReportDir":"报表目录","Freeze-Use_In_Write":"使用填报冻结行列","REPORTLETS":"访问多张模板的路径的参数","FS-Schedule-CPR_SKIP":"快照生成：跳过","WLayout-Card-ToolTips":"卡片式布局，该布局容器中可以添加多个其它组件，并通过设置以展示其中的一个","FR-Chart-Series_Setting":"系列设置","Chart-StyleAlignment_Right":"靠右","ExpandD-Left_to_Right":"从左向右","FR-Chart-Series_Name":"系列名","Back":"返回","FR-Plugin-Plugin_Name":"插件名称","M-Save":"保存","BackgroundTexture-Newsprint":"新闻纸","FR-Base_Rows":"行","Plugin-ChartF_NewCustom":"组合图（新特性）","Load":"加载","XML_TREE_Wait":"等待刷新","FS-Generic-Synchronize_Rate":"同步频率","FR-Designer_ReportColumns-Columns":"列分栏","HJS-Current_Page":"当前页","Margin":"边距","FS-System-Bind_Personal_Phone":"绑定手机","ChartF-Meter":"仪表盘","Import-Excel_Import":"Excel输入","FR-Chart-Area_Value":"区域值","FR-Chart-Type_Donut":"圆环图","Privilege-The_User_Account_Is_Locked":"此用户名已被锁定","Tree-Return_Full_Path":"结果返回完整层次路径","FS-BakRestore_Backup_Path_Chooser":"备份路径选择","ChartF-Values":"数值","FR-Plugin_Error_UnzipFileError":"解压文件错误","FS-Plugin-Store_User_Password_Error":"","Memory_Usage":"内存使用情况","FR-Engine_REDIRECT_FROM":"权限跳转FROM的URL","FS-Plugin_UpdateOnline_Detail_Info":"具体内容","Please-Wait":"请稍候","Cannot_Get_Date":"不能获取日期","FS-Schedule-Printer_Not_Null":"打印机不能为空","FR-Share_Module_Removed_Successful":"组件已被移除","FR-Chart-Map_Drill":"钻取层级","Width":"宽","FR-Designer_Layer-Build":"普通分层构建","Exchange_key":"点击互换快捷键","FR-Chart-Data_Current":"当前值","Plugin-ChartF_Fixed_Radius":"固定大小","Custom_Button_Submit_URL":"提交地址","FR-Engine_RP_Reach_Node":"到达该节点","Text":"文本","FR-Engine_Re-not-start-in-jar":"您使用的版本不是通过JAR包启动.","URL_Certification":"URL认证","FR-Server_Version_Tip":"您当前连接的服务器版本低于您使用的设计器版本号，继续连接，您编辑的一些属性可能无法有效保存。  假如需要连接请将您的设计器版本与服务器版本保持一致","FS-Monitor-Intelligent_Release":"智能释放","DS-Text_TableData":"文本数据集","FR-Chart-Map_Jilin":"吉林","Privilege-Cannot_Load_User_Just_With_Username_When_Use_LDAP":"LDAP用户无法加载用户名","FS-Plugin-Store_Export_Print":"","FR-Engine_Export-Excel-Page":"分页导出","Null":"空值","FS-Generic-Page_Number":"页","FR-Chart_Cell_Data":"单元格数据","FS-Module-MobilePush_Setting":"推送配置","Component_Scale":"组件缩放","FR-Designer-Plugin_Warning":"警告","Chart-Condition_Display":"条件显示","Hyperlink-Target_Frame":"打开链接的窗口","FR-Engine_RP_Process_View":"任务流程查看","Plugin-ChartF_DifferentArcPie_Title":"异弧玫瑰图","Opened":"已开启","Style-Spacing_Before":"段前","NS_LayerReport_columns":"错误代码:11100007 行式引擎不支持分栏","FR-Base-Time_Minute":"分","FR-Chart-Map_Second_Title":"第二标题","MDX_Explain":"语法格式参考MDX语法。\n例如：\nWITH\nMEMBER [Measures].[Special Discount] AS\n[Measures].[Discount Amount] * 1.5\nSELECT\n[Measures].[Special Discount] on COLUMNS,\nNON EMPTY [Product].[Product].MEMBERS  ON Rows\nFROM [Adventure Works]\nWHERE [Product].[Category].[Bikes]\n注：COLUMNS、ROWS可以使用0、1代替，查询轴只支持返回两个轴。","Custom_Button_Type_Submit":"提交","Utils-Move_Down":"下移","FS-System-Sender_Address":"发件人地址","Transparent":"透明","Function-The_class_must_be_located_in":"该类必须放置在","FS-Schedule_Receiver":"接收人","Plugin_RH_Iframe_Template_Path":"模板路径","Ecp_Convert":"注：加密后reportlets文件夹的文件将转为密文。","Can_Be_Unselected":"可不选","Chart-Table_Data_Not_Found":"图表数据集没有找到","Plugin-ChartF_Preview_Scatter":"预览散点图","M_Format_A-Border":"边框(B)","fs_process_endtask_tip":"结束任务:此任务触发时整个流程立刻结束,单击编辑属性。","Chart_Bubble_Inside":"气泡内","Datasource-TableData_Name":"数据集名称","Border-Line":"边框粗细","FS-BakRestore_BackupPath":"备份路径","Form-ComboCheckBox":"下拉复选框","HF-Move_Left":"左移","FR-Chart-Map_Xizang":"西藏","Plugin-ChartF_Rectangular_Coordinate_System":"直角坐标系","FR-Engine_Hour":"小时","Black_Font":"黑体","and":"和","Plugin-ChartF_Legend_Ordinary":"普通","FS-Schedule_Unable_to_Delete":"无法删除，请至少保留一条记录！","Set_Submit_Condition":"设置提交条件","Gradient-Color":"渐变色","HF-NewLine_Des":"可以点击上面的移动和删除按钮来操作换行符","FS-Setting-Style_Choice":"配色选择","Plugin-ChartF_NewLine":"折线图（新特性）","FS-Reg-Plugin-Unsuccess-Count":"个插件未成功注册","Series":"序列","Mail":"邮件","Chart_Interval_Back_Color":"间隔背景色","Datasource-Class_datasource_name_cannot_be_null":"程序数据源的名字不可以为空","FS-Schedule_Mobile-Content-Not-Null":"请设置消息内容","Select_A_Tree_DataSource_To_Build":"选择一个树数据集来构建","FR-Background_Image_Extend":"拉伸","Male":"男","Column_tag":"列标签","Data_Connection_Driver_Name":"数据连接驱动器名称","FS-Report-No_Dir_Selected":"请选择除根节点以外的目录节点！","FR-Engine_FS_Name":"FS用户","ChartF-X_Axis":"X轴","FR-Base_No":"否","Plugin-Memory_Alarm_Update_Success":"保存成功","FS-Plugin_UpdateOnline_Restart":"重启","Image-Image_Files":"图片文件","FR-Plugin_Has_Been_Disabled":"插件已被禁用","Parameter-Add_Parameter":"添加参数","FS-Setting-Homepage_URL_PC":"PC","FR-Base_December":"十二月","FR-Plugin_Delete_Dependence":"是否删除依赖环境","LIC-Support_Collapable_Tree_View":"多维度分析","GROUPING_MODE":"普通分组","ComboBox":"下拉框","HJS-BCC_to":"密件抄送","FS-Generic-M_Form_Preview":"表单预览","ChartF-Line":"折线图","ChartF_OneSeriesSet":"指定系列","BarOutSide":"柱子外侧","FR-Base_Not_exist":"不存在","LayerPageReport_WN_SubReport":"按页运算引擎暂不支持子报表","Sub_Report":"子报表","FR-Engine_Dialog":"对话框","FR-Engine-ECP_decode_failed":"解密失败, 请联系管理员检查密码文件是否存在","FR-Engine_Excel_Import_Clean":"清空导入","FR-Chart-Type_Radar":"雷达图","FS-Monitor-Menu_System_Situation":"系统情况","ChartF_Stock_Volume":"成交量","FR-Engine_Define_Group_Name":"定义组的名称","FR-Engine_Event_nodeadd":"节点生成","Plugin-ChartF_layout":"形式","NS_exception_ps":"错误代码:11300002 行高列宽超出页面大小设置　　出错对象:　","Female":"女","ReportServerP-The_name_of_printer_cannot_be_null":"打印机的名字不能为空","FR-Plugin-Plugin_Damaged":"损坏","FR-Engine-Not_NULL":"不能为空","Server-Demo_Server":"","FR-Chart-Map_Nanning":"南宁市","I-BarStyle_PercentageStack":"百分比堆积柱形图","RP_NO_Privilege":"没有操作权限","Chart-Stock_Error":"股价图必须要有","FS-Schedule_Email_Prompt":"邮件提醒","FS-Auth-MAC-Address":"认证MAC地址：","ColumnName":"列名","FR-Plugin_Downloading_Dependence_File":"下载依赖文件","RP_After_Use":"后，使用","FS-Plugin-Store_Switch_Account":"","FR-Engine_Task":"任务","FS-Cloud-Address-Msg":"例：https://localhost:8080","DrawChart":"绘图","FR-Engine_Modify_Task_Name":"修改任务名称","FS-Setting-Customize_Login_Style_Change_Info":"登录风格切换成功","FS-Setting-Simple_FS":"素雅","FS-User-Ldap_Context":"前后关系","FR-Chart-Bar3DStack_Chart":"三维堆积柱形图","FR-Engine_FS_Task_Start":"任务开始后","BackgroundTexture-WhiteMarble":"白色大理石","FR-Engine-Value_Value":"数值","FS-Generic-True_Run_Interval":"正确的运行间隔时间单位","Top_And_Double_Bottom_Border_Line":"上框线和双下框线","FR-Chart_Bit_Map":"位图地图","Plugin-ChartF_Background":"背景","CrossReport_Fields":"交叉报表字段","FR-Engine_Excel_Is_Title_Lines":"行是标题行","FR-Chart-Meter_Van":"仪表盘(新特性)","FR-Chart-Direction_Horizontal":"横向","FS-System-Email_Receiver":"邮件接收人","YinchuanCity":"银川市","HJS-From":"发件人","ChartB-Should_select_a_summary_column":"需要选择一个汇总列","DisplayTheLabel-In-Chart":"在图表上显示刻度单位标签","PDF-Print_Setting":"PDF打印设置","lic-same-content":"当前环境已存在相同lic文件","FR-Designer_Height":"高","Plugin-ChartF_Highlight":"高亮","FS-Privilege-Simple_Template":"模板","Plugin-ChartF_Animation_Effects":"动画特效","ChartF-XYScatter":"散点图","Verify-Error_Information":"校验出错信息","FR-Chart-Map_Guangdong":"广东省","Ean13_more_than_12":"Ean13码仅需输入前12位字符，最后一位由系统自动生成，超出12位部分系统将自动截取。","FS-Generic-Simple_December":"十二月","FS-BakRestore_One_Week_Before":"一周前","FR-Engine_Mobile-show":"移动终端报表展现","Loading_PDF":"正在加载PDF","User_Authentification_Mode":"用户认证方式","FS-Privilege_Template_Tool_Margin":"10","Class":"类","About-CopyRight":"版权所有","FR-Plugin-Store_Account":"账号","Plugin-Memory_Alarm_Interval":"内存值变化监控间隔时间(秒):","Judge":"判断","FS-Monitor-Resource_Path_Is":"配置文件路径为","Datasource-Rename_SAP_datasource":"重命名SAP数据源","NanchangCity":"南昌市","Formula_Description":"公式说明","Parent":"父","Use_Semantic":"使用语义层","FS-Schedule-Simple_Execute_Time":"执行时间","M_Format_W-Support_Write":"是否可写","Plugin-ChartF_NewChart":"","Current_custom_global":"当前报表所用自定义全局样式","ReportPageSetting_Message":"-1表示自适应不限制大小","FS-Plugin-Store_Mobile_Terminal":"","FR-Designer_Filter_Conditions":"过滤条件","WLayout-Border-ToolTips":"完整的边界布局容器，由东南西北中五块共同构成，\n其中南北块可以根据需要调整高度，东西块可以根据需要调整宽度。","Plugin-ChartF_ZoomInTitle":"放大","Y_offset":"Y方向偏移","GroupB-Group_Columns":"分组列","Registration-The_Registration_code_is_invalid":"注册码无效","Chart_Line":"折线","FS-Monitor-Email_Tip":"提示：支持填写多个邮箱，以,隔开","FS-BakRestore_Backup_Complete":"备份完成","FS-Admin-Use_Tree_Will_Remove_User":"使用树数据集会清空已有用户数据","Ignore_All":"忽略全部","DS-Report_Dictionary":"报表数据字典","PreStyle":"预定义配色","FS-Schedule-Execute_Condition_Formula":"公式判断","Freeze-Page_Column":"冻结重复标题结束列","FR-Designer-Min_Height":"最小高度","FR-Engine_Search":"搜索","FR-Engine_Excel-Multi_Import":"Excel联合导入","Parameter_Refresh_Waring":"刷新参数将会把当前布局恢复到默认布局，但不会改变格内容，是否继续","NS_exception_td":"错误代码:11300001 数据集配置错误","Choose_Different_Server_Data":"请选择不同服务器数据集进行关联","Word":"Word","FR-Engine_Unit_MM":"毫米","Horizontal-Split_Layout":"水平分割布局","Registration-Purchase_Enterprise":"购买企业版","viewModule":"数据分析模块","Receiving_Page":"正在接收页码","Plugin-ChartF_Fixed_Column_Width":"固定柱宽","IS_Key_Equals_Value":"实际值和显示值相同","Only_selected_cell_can_paste_only":"只有选中单元格时才可以粘贴","FR-Engine-Filter_Filter":"过滤","FR-Chart-Style_Retro":"复古","Utils-Print[PDF]":"打印[PDF]","FR-Hyperlink_Chart_Cell":"图表超链-联动单元格","CellWrite-Merge_Extra_Blank_Cell(Used_in_Group_Report)":"合并补空行的空白格子(分组报表使用)","Web-URL":"网络表单数据源地址","FS-Msg-Not_Login":"消息发送失败，无发送者","FR-Base_Mon":"一","FR-Engine_Tip_Equal_Proportions_Adaptivity":"提示：保持宽高比例不变，等比例自适应","Form-Delete":"删除","Login":"登录","ChartF-Bar":"条形图","FS-BakRestore_Restore_Complete_Restart":"还原完成，请重启","Need_Select_SAP_Task":"必须选择一个转换任务","Formula_Tips":"公式必须以\"EX-Hierarchy_Analysis_is_not_Supported_in_this_Edition=该版本不支持层次坐标解析","Server-Open_Service_Manager":"打开服务管理器","Handle_Affairs":"处理事务","Plugin-ChartF_PointMap":"点地图","FR-Designer_Tree-Grade":"层","FR-Engine-Condition_Not_End_With":"结尾不是","CrossTable":"交叉表","Choose_None":"不选","FR-Chart-Map_Zhejiang":"浙江","FR-Engine_Excel_Import_Append":"增量导入","FS-Generic-Simple_Criterion":"分类标准","FR-Designer_Input_Rule":"填写规则","Form-NullLayout":"绝对定位","ChartF-Grid_Line":"网格线","ProcessManager":"流程管理","SignIn-Confirm_Closing_The_Designer":"确认退出设计器？","FR-Engine_PageSetup-Landscape":"横向","Current_Node_Staff":"本节点人员","FR-Engine_RP_Deal_With_It_As_Soon_As_Possible":"请尽快处理","Datasource-Are_you_sure_to_delete_the_selected_class_datasource":"你确定删除选中的程序数据源吗","LIC-Support_Online_Write":"数据录入","Dimension":"维度","ChartF-Comb_Chart":"组合图","Basic_Setting":"基本设置","Function_Name_Should_Not_Be":"函数名不应该是","FS-System-Edit_Phone_Success":"手机修改成功","Mobile-show":"移动终端报表展现","FR-Designer_Parameter":"参数","FR-Engine_Event_callback":"上传后","Registration-Concurrency":"并发数","FS-Generic-Already_End":"已结束","M_Format_E-Cell_Expand_And_FatherCell":"扩展与父格(E)","ChartB-Add_Summary":"增加汇总","Include":"包括","FR-Engine_pageModule":"分页模块","PageSetup-Repeated_Title":"重复的标题","Chart_DiscardOtherSeries":"不保留其他图例项(系列)","FR-Designer_Pagination":"分页","Undo_Authority":"撤销前一次权限编辑的所有操作","FR-Engine_JavaScript-Commit_to_Database_Failed":"提交入库失败","FS-Generic-Simple_Send":"发送","M_Insert-Date":"日期(D)","FS-Report-Input_Cpt_Name":"请输入报表名字","FR-Engine_Please_Set_Repeat_First":"请先设置重复标题行和列","FR-Basic_Today":"今天","ChartF-Stacked":"堆积","DBCP_TEST_WHILE_IDLE":"开启空闲回收器检验","Plugin-ChartF_Axis_Rotation":"坐标系翻转","FR-Engine_Task_Submit":"任务提交","Tips:You_Can_Input_B1_To_Input_The_Data_Of_The_First_Row_Second_Column":"提示:您可以通过输入B1来写入第一行第二列的数据。","Chart-Use_Value":"值","WF-Previous_User":"先前用户","FR-Plugin-Store_No_Plugins":"已安装了0个插件","Form-Target":"目标","FR-Engine_LayerReport":"行式引擎","FR-Designer-Basic_Restart_Designer":"重启设计器","FR-Engine_Enter_Task_Name":"请输入任务名称","FS-Monitor-Total_Memory":"所有内存","EmailPane-warnings":"您尚未配置发件邮箱，请登录平台进行配置或者联系管理员","Performance-druid_Title":"SQL执行监控","User_TableData":"用户数据集","Feature_Name":"功能名称：","FR-Engine_Short-Feb":"二","FR-Engine_Event_afterinit":"初始化后","Chart-Chart_Alert":"警戒","DashBoard-MainFunction":"主要功能一览","FR-Basic_Loading":"正在加载","FS-Generic-Simple_Type":"类型","Docking-Fix":"固定","GroupB-Page":"分页","Server_Usage":"服务器使用情况","StartSuccessfully":"启动成功","Plugin-ChartF_Preview_Percent_Stack_Bar":"预览百分比堆积条形图","Modify_Column":"修改列","Data_Submit_Error":"数据提交出错","FR-Plugin-Store_Front_End_Display":"前端展现","WF-Previous_User_Relation":"与先前用户关系","FR-Chart_DataLabelInside":"数据标签内","Plugin-ChartF_Gauge_Pointer":"多指针的仪表盘360度","FS-Privilege-Grade_Authority":"分级授权","Chart-Map_CancelChanges":"取消更改","CellWrite-Page_Before_Column":"列前分页","Custom_Button_Target_Type":"提交窗口模式","Register_Version":"注册版本","CellWrite-Flag":"标志","Utils-The-WorkBook":"模板","FR-Chart-Column_Van":"柱形图(新特性)","FR-App-Template_Form":"表单","FR-Engine_Privilege_Allocate":"权限分配","Default_value":"参数默认值","Custom_Roles":"自定义角色","Want_To_Cover_It":"是否想覆盖它","FS-Monitor-Model_Using":"使用中","Utils-Current_Row":"当前行","NS_LayerReport_expandAttr":"错误代码:11100004 行式引擎只支持从上到下扩展属性，其它属性设置均不支持","Chart-Layout_Right":"右侧","FS-Plugin-Store_Not_Null":"","FR-mobile_native_analysis":"原生解析","Utils-Left_to_Right_a":"从左往右","Divided_stage":"划分阶段","FR-Designer-Plugin_All_Plugins":"全部插件","Import_Export-Excel":"Excel格式","Plugin-ChartF_Gannt_Marker":"里程碑","FR-Designer-Plugin_Plugin_Description":"插件描述","DashBoard-ChartFloat":"图表","FS-Report-Add_Template_Width":"58","FS-System-Connection_Pool":"连接池","Original":"原有","FR-Designer-Plugin_Uninstall_Successful":"插件卸载成功，请重启服务器","RP_Alert_Mode":"提醒方式","Form-EC-WebAttr-toolbar":"是否需要表单工具栏","Plugin-ChartF_RecordsNum":"记录条数","ChartF-Funnel":"漏斗图","Plugin-ChartF_Change":"可调整","FR-Designer-Dependence_Need_Install":"是否下载依赖","Chart-Area_Title":"区域标题","Chart-Default_Name":"默认","FR-Chart-Data_CombineOther":"合并剩余项为\"其它\"","Define":"定义","FR-Engine_HJS-Specified_Pages":"指定页","Chart_Exponent":"指数拟合","Reload":"重载","Export-Text":"文本文件(制表符分隔)","HF-Insert_New_Line":"插入换行符","Task_List_To_Choose":"可选任务列表","FR-Chart-Version_Local":"当前版本","FS-Generic-HJS_CC_To":"抄送","FR-Designer_Background":"背景","GroupB-Report_Header_Page":"报表眉分页","FS-Failed-Lic_Format_Not_Match":"证书格式不正确","baseModule":"基础模块","FR-Plugin-Store_Day":"天","Always_Execute":"始终执行","FR-Designer-Widget-Style_Common":"普通","FS-System-Config_SMS_Balance":"账户余额","Chart-Map_Center":"中心点","Free_Report_Wizard":"自由报表向导","ExtraRepeatTime":"额外重复执行次数","FS-Plugin__NotSupportJetty":"内置的jetty服务器不支持在决策平台中升级或还原，请通过设计器来操作","FR-Engine_Excel_poi_2007":"错误代码:11200007 导入Excel2007需要在lib目录下放置poi包","FR-Utils-App_AllFiles":"所有文件","FR-Engine-Err-The_Number_Is_Larger_Than_The_Maximum_Value":"值大于允许输入的最大值","FR-Engine_RP_Send_Date":"发送时间","FS-Schedule_Basic_Settings":"基本设置","Layer-Wake_Up_Thread_For_Page_Retriever":"唤醒取页面线程","FR-Engine_Email":"邮件","Mobile_BI":"移动决策平台","FS-BakRestore_Alert":"警告","FS-Plugin_UpdateOnline_Restore_to_V8":"还原至8.0版本","PostAttachment":"上传附件","FS-Error-Msg":"，请重新注册","AddFailed":"添加失败","FR-Engine_RP_Alert_Mode":"提醒方式","Edit_Button_ToolBar":"编辑按钮所在工具栏","Forbid_Drag_into_Adapt_Pane":"该对象不允许拖入表单主体","Scheduler-parameters_were_found_,_Are_you_sure_to_apply_now":"参数被发现，您是否要应用","Plugin-ChartF_Preview_Pointer_Gauge":"预览多指针360度仪表盘","Row-Axis":"行轴","Utils-File_type":"文件类型","FS-Schedule-Interval_Execute_Once":"执行一次","FS-Special-Sure_To_Delete":"你确定要删除这个模板吗","Plugin-ChartF_Point_Style":"点样式","Year":"年","Schedule-Remove_Task":"删除任务","Chart-Link_Web":"网页链接","FR-Chart-TimeUnit_Year":"年","FR-Designer_Rename":"重命名","Preference-Menu_Configuration":"菜单配置","BackgroundTexture-Oak":"橡木","FS-System-Change_PW_Success":"密码修改成功","Highlight-Click_to_Choose_Property_To_Modify":"点击选择要改变的属性","FS-Monitor-Log_Setting":"日志设置","FR-Base_August":"八月","M-Page_Setup":"页面设置","AnalysisLine":"分析线","file-is-locked":"您所要打开的报表正在被其他人编辑，请稍候打开","FR-Lic_does_not_Support_Remote":"您当前使用的lic不支持远程设计功能，请升级您的lic","FR-Chart-Category_Name":"分类","Docking-Unpin":"不固定","RP_Node_Description":"节点描述","Index":"列轴/指标","FR-Engine-Loading_PDF":"正在加载PDF","Chart-Stock_Volume":"成交量","Utils-Selected_Option":"已选项","NS_exception_readError":"错误代码:11300005 模板文件解析出错","Need":"需要","CellWrite-Preview_Cell_Content":"预览单元格内容","Plugin-ChartF_NewStructure":"框架图（新特性）","FS-System-Config_SMS_Test_Failed_Tip":"请检查用户名、密码,接收手机号是否正确,并确保网络畅通.","FRFont-Shadow":"阴影","FR-Basic_Calendar":"日历","FS-Schedule-Please_Select":"请选择","StyleAlignment-Single_Line(Adjust_Font)":"单行显示(调整字体)","ChartF-Icon_Border_Color":"图标边框的颜色","Failed":"失败","FormulaD-Date_&_Time":"日期和时间函数","Color":"颜色","Setting-Ruler-Units":"标尺单位设置","Plugin-ChartF_Location":"定位","FS-Monitor-Triggering_Conditions":"触发条件","Datasource-Maximum_Number_of_Preview_Rows":"最大的预览行数","DS-Databse_Info_Save_Des":"全局数据库连接信息保存在全局文件\"/WEB-INF/resources/datasource.xml\"，里面供所有的模板文件调用。","FS-System-Config_SMS_Platform":"平台","ChartF-Legend_Count":"图例个数","User-DefinedType":"自定义类型","Sche-Week":"星期","Logarithmic":"对数刻度","Chart-Map_HowtoDrawCircle":"点击并拖拽画圆","FR-Plugin-Store_Finereport":"帆软","Plugin-Chart_Alpha":"不透明度","FS-Generic-Sure_To_Delete":"确认删除","FR-Basic_Report":"报表","FS-Monitor-Suggestion_Add_Name":"建议增加名为","FS-Generic-EmailPane_BCC":"密送","Description_things":"描述","ToolBar_Top":"顶部工具栏","Unit_Hundred_Million":"亿","FS-Failed-Reason":"失败原因：注册机器码与本机不匹配","Re-system-version":"系统版本号","FS-System-Event_Submitfailure":"提交失败","M_Window-Frozen_WindowGrid":"冻结窗格(F)","RP_Task_Operations":"任务操作","FR-Engine_FreezeWarning1":"初始值不大于尾值","M-Repeat-Freeze":"重复与冻结设置","Schedule-Template":"模板名称","Env-Invalid_User_and_Password":"非法的用户名或密码","Agency":"机构","FR-Designer-Widget-Style_Border_Color":"边框颜色","FS-Msg-Delete_Chosen":"插件已被刪除,重启服务器后生效","FS-Monitor-Suggestion_FS_Report":"模板可能被删除或者移动位置，建议删除FS目录管理里对应模板或者修改其位置","FS-System-Last_Login_Location_Beijing":"江苏南京","Purple":"粉紫","BorderLayout-North":"北","hasRelation":"相关","plugin-ChartF-MatchColor":"配色","Plugin-ChartF_Start_Point":"起始点","Plugin-Chart_Create_Geo_Map":"创建地理信息地图","FS-System-Forget-Password-Set":"忘记密码设置","Image":"图片","Utils-Switch_To_Class_Reportlet":"切换到程序网络报表","ExpandD-Expand_Direction":"扩展方向","Create_Free_Report":"创建自由报表","Plugin-ChartF_Style":"样式","Env-Des2":"Servlet位置是主机名，端口，WEB应用，Servlet的组合，它应当指向一个Servlet，比如\"http://localhost:8080/WebReport/ReportServer\"。您可以选择填写主机名，端口，WEB应用，Servlet，它会自动生成您所需要的Servlet位置。","Plugin-ChartF_LineStyle":"线型","product_feedback":"产品反馈","General-ToolBar":"普通工具栏","Example":"例如","FS-Mobile-Add_Mac_Address":"添加mac地址","ReportServerP-Edit_Printer":"编辑打印机","FR-Engine_Parameter-Integer":"整型","This_Template_Has_Exist":"这个模板已经存在","I-PieStyle_Normal_Seperate":"分离饼图","Platform_Module_WidgetletManager":"主页控件库管理","Page_Number":"页","Utils-Segment_Not_existed":"不存在表字段","FR-Plugin_Error_LockOfDependenceFile":"缺少依赖文件","Actions":"任务","M_Window-Preference":"选项","Show_Blank_Column":"补充空白列","M_Help-API_Document":"二次开发的API文档(A)","FR-Designer_Form-TextArea":"文本域","Utils-Would_you_like_to_save_the_report":"","Utils-Insert_Record":"插入记录","Beijing":"北京","WF-Work_Flow":"工作流","CellWrite-Hide_Row_If_Null":"当空值时隐藏当前行","FR-Engine_RESULTLET":"访问报表结果路径的参数","ECP_start_encode":"开始加密","FRFont-Effects":"特殊效果","Over-Sheet":"跨Sheet计算","Plugin-ChartF_Add_Interval":"添加间隔","Select_Date":"选择日期","FS-MOBILE-DEFAULT-THEME-NAME":"蓝色","FR-Engine_Event_beforeappletprint":"Applet打印前","FS-Register_File_Error":"文件操作发生错误","FR-Designer_Remove":"删除","FR-Engine_Not_Allow_Null":"不允许为空","HF-Edit_Header/Footer":"编辑页眉/页脚","Frame":"框架","Chart-StyleAlignment_Bottom":"靠下","Plugin-ChartF_Funnel_Shape":"漏斗","FS-Plugin_UpdateOnline_Upgrade_Immediate":"立即升级","Plugin-Memory_Alarm_Heartbeat":"心跳","FR-Plugin_Year_Trigger":"年份控件","FS-System-Config_SMS_Fee_Tip":"每条短信收费0.06元,当余额不足时,将可能无法正常发送短信,请及时充值.","FR-Engine-PageSetup_Portrait":"纵向","Plugin-ChartF_Arrow_Style":"轮播箭头","FR-Engine_SSAS-TableData":"SSAS数据集","FR-Basic-Email_Message":"内容","SAP_column_name":"SAP列名","Form-Iframe":"网页框","FR-Plugin_Delete_Success":"插件删除成功","MSBold":"微软雅黑","FR-Designer_Connect_SQL_Cannot_Null":"数据连接和SQL面板不能为空","Save_Result":"保存结果","FR-Template-Path_chooseRightPath":"请选择正确路径","Plugin-ChartF_Word_Name":"词名","FR-Designer-Widget-Style_Frame_Style":"框架样式","INFO-Start_Reading_XML":"开始读XML","FS-BakRestore_Backup_Frequency_Threemonths":"3月","BiasD-Slope_Line":"斜线","FR-Engine_NameWidget-Name":"预定义控件名称","FR-Plugin-Store_Not_Login":"未登录","Plugin-Memory_Alarm_Unit_Min":"min","M_Insert-Boolean":"布尔数值(O)","Plugin-ChartF_Level":"层次","fs_process_para_message_tip":"注：编辑后会同时修改选中流程中的流程数据项","Export-Excel-LargeData-Page-Info":"请耐心等待文件的生成，所花费的时间将视数据量的大小而定，在此过程中请勿关闭当前页面或浏览器。","FR-Designer_Sche-Week":"星期","About-All_Rights_Reserved":"保留所有的权利","the_template":"该模板","ChartF-Volume-Open-High-Low-Close":"成交量-开盘-盘高-盘低-收盘图","Enlarge_Or_Reduce":"缩放","ParameterD-The_Second_List":"第二个列表","Data_Setting":"数据设置","Utils-Default_Value":"默认值","NotSupportIMG&ReportData":"不支持图片形式和单元格数据源","LIC-Support_Multi_Env":"多报表运行环境","Import-Translate":"转换","FR-Widget_Mobile_Table":"移动端控件列表","FR-Chart-Line_Van":"折线图(新特性)","TaiyuanCity":"太原市","File_Error":"文件解析错误","Cell":"单元格","FS-Web-Plugin_Install_Failed":"插件安装失败","CellWrite-Hide_Cell":"隐藏单元格","FR-Chart-Gap_Series":"系列间隔","CommaDismenber":"逗号","FS-Reg-Simple_Deadline-Plugin":"过期时间：","RP_Urgent":"紧急","CellWrite-ToolTip":"内容提示","MConfig-CancelButton":"取消","FR-Engine_Plugin_Expire_Dialog_Text":"插件过期,请前往帆软应用中心进行购买。","M_Report-Report_Columns":"报表分栏","FS-Schedule-Simple_Execute_Time_Unit_Month":"执行月","FS-Admin-Unknown_Error":"未知错误，若无法登录请重启服务器重新设置","Plugin-ChartF_Preview_Stack_Area":"预览堆积面积图","File-Create-Failed":"文件创建失败","FR-Engine_RP_Node_Name":"节点名称","Warnning":"提醒","Return_set_name":"返回集","MainGraduationLine":"主要刻度线","ChartF-RadarAxis":"雷达轴","Height":"高度","Click-Me":"点我有惊喜哦！","FS-System-Current_Login_First":"后登录踢出先登录","FR-Engine_Tabpane_Position_Left":"左侧","FR-Designer-Form-ToolBar_Widget":"控件","Gradient_Left_Color":"渐变色左区域","Env-Des1":"请选择报表服务器所在的WEB-INF目录","M-Data_Analysis":"数据分析","Plugin-ChartF_Position_Top":"上方","BorderLayout-South":"南","FR-Chart-Axis_labelShowway":"显示方式","User_Defined_Event":"自定义事件","DataList":"数据链","Chart-Series_Drag":"系列拖拽","FS-System-Select_Tip":"至少选择一项","FR-Plugin-Store_Businesses":"商家","FS-Monitor-Log_Copy":"日志清理后将被自动备份","FR-Engine_Confirm":"确认","I-HBarStyle_3D":"三维簇状条形图","Sche-Thursday":"星期四","FS-User-Do_Select_Department":"请选择部门","FS-PSqlInj-Special_Char":"字符","FR-Engine-Page_Number":"页码","Form-EC_heightrestrict":"手机显示限制高度","Data_Fields_will_be_displayed":"将要显示的数据字段","Chart-Scatter_Name":"散点","ParameterD-Should_select_a_reportlet_first":"需要先选择一个Reportlet","FR-Engine_Event_beforewrite":"填报前","FS-Shop_Resource_Update_Failed":"插件商店资源更新失败","FR-Engine-NS_export_excelCellBg":"错误代码:11100012 导出Excel单元格背景只支持纯色","Output_Excel":"Excel输出","Utils-Merge_datasource_files_successfully":"合并数据源文件成功","M-Popup_ChartOption":"图表选项","FR-Engine_Hana-database":"Hana数据库","Sure_To_Open_Synch_Data_Sets":"确定要开启同步数据集","FS-BakRestore_Data":"的数据","FS-Local-AppName":"本地工程名：","FR-Engine-Condition_Not_In":"不包含于","ExpandD-Expand_Type":"扩展方式","SQLWizard-pack_all_entities":"最小化所有实体","FR-Plugin-Install_Package":"插件安装包","FS-Monitor-Server_Setting_Detection":"服务器配置检测","After_Click_Widget_Show":"点击单元格后显示控件","FR-Engine_Offline-ReadMe":"打开html文件进行离线填报，数据将实时保存在本地。\r\n联网后可以将本地数据提交至服务器端。\r\n若要移动文件，请拷贝整个文件夹。\r\n注：手动清除浏览器缓存(Cookie)会导致数据丢失。","StyleAlignment-Vertical":"垂直对齐","Sytle-Indentation":"缩进","Dic-Only_Can_Delete_DataDictionary":"只能删除数据字典","Not_Allow_To_Upload_File":"是禁止上传的文件类型","Cannot-Add_To_This_Area":"无法添加到该区域","FR-Engine-Sort_Descending":"降序","PostCode":"邮政编码","Plugin-ChartF_Level_Order":"层级序号","PDF_Print":"PDF打印","FR-Engine_Please_Enter_Role_Name":"请输入角色名称","FS-Admin-Authentication_failed":"验证失败","FS-Reg_Function_Name_List":"功能列表","RP_Cpt_Operation":"模板操作","FS-Schedule_Mobile-Push-Terminate-Not-Null":"请设置推送终端","Verify-ToolTips":"不满足公式提示校验出错信息","StyleAlignment-Text_Style":"文本控制","FS-Template_Add_Parameter":"添加参数","Max_Peak_Limit":"最大连接数","ToolBar_Bottom":"底部工具栏","Plugin-ChartF_Up_Tree_Map":"上侧","FR-Engine_Please_Select":"请选择","FS-System-View_All":"查看全部消息","Version-does-not-support-map":"您当前使用的lic不支持地图功能，请升级您的lic","FormulaD-Valid_Formula":"合法的公式","Scheudle-Invalid_Template_File_Name":"无效的模板文件名","RP_Sender":"发送人","FR-Designer_Restore_Default":"恢复默认","FR-Designer-Basic_Activation_Key_Copy_OK":"已复制到剪贴板","AbsoluteLayout":"绝对定位","FS-Generic-Save_Path":"保存路径","IS_Need_Password":"需要密码","M_Edit-Bring_to_Front":"置于顶层(T)","Task_Has_Been_Closed":"这个任务已经关闭","Needle":"指针","Parameter-Formula":"公式","Function-Program_Function":"程序函数","Plugin-ChartF_Close":"关闭","clickToCancel":"已经被删除，无法操作！","Plugin-ChartF_Parent_ID":"父id","FS-Generic-Privilege_Name_Not_Match_Password":"用户名和密码不匹配","Chart-SetMainGridStyle":"设置主要网格线格式","FS-Reg-Fail_Tip":"服务器授权文件的产品版本与实际系统的版本不符，请尽快重新申请","FS-BakRestore_Nothing_to_Delete":"没有待删除的项！","Please_Rename":"请重命名","FR-Designer-FRFont_Line_Style":"线型","DashBoard-ReportsPrint":"零客户端报表打印","Meter-Style":"仪表盘风格","This_ScheduleTask_Is_Not_Exsit":"这个定时任务不存在","FR-Engine_STXingKai":"华文行楷","Utils-Can_not_find_the_corresponding_TableData":"未找到对应的数据集","Plugin-ChartF_Bottom_Data_Sum":"底层数据汇总","BorderLayout-Center":"中","FS-BakRestore_Backup_Frequency_Oneweek":"1周","Plugin-ChartF_Preview_Point_Map":"预览点地图","WF-Basis":"基本属性","Row_Cell":"竖格","Plugin-ChartF_Cloud":"云","General":"常用","FS-System-Config_Backup_Complete":"备份完成","FR-Base_Short_Dec":"十二","Sche-Sunday":"星期日","Plugin-RH_Iframe_Value":"地址和参数","Column_Measure":"列轴/度量值","FS-Mobile_Unauthorized_Users":"未授权用户","FS-Schedule-Execute_Period_Time_Unit_Month":"每月","FS-Generic-Simple_Query":"查询","Inside":"内部","Utils-Merge_Cell":"合并单元格","StartValue":"开始值","Driver":"驱动器","FS-System-FlashP_Need_Page_Selection":"需要Flash打印页码选择窗口","Chart-Use_Refresh":"刷新","FR-Engine_RP_Deliver":"分发","FR-Base_is":"是","FS-System-Report_Manager_Detection":"报表管理检测","FR-Engine_Alert":"警告","Use_FormulaGroup":"使用公式分组","Chart-Unit_Hundred_Million":"亿","FS-Module-Node_Manager":"节点管理","ChartF-PieNoneSeperate":"不分离","FR-Engine_Please_input_with_right_format":"请用正确的格式输入","FR-Basic-File_All_File_Uploaded":"所有文件已上传","Schedule-Edit_Time":"编辑时间","FS-System-Single-Login":"单一登录","FR-Engine_Please_Rename":"请重命名","ReportServerP-Pre_concurrency":"优先访问的并发数","Y_Axis":"Y轴","FS-Frame-Button_Refresh":"刷新","Plugin-ChartF_NewRadar":"雷达图（新特性）","FS-System-Name_Can_Not_Equal_With_Old":"新姓名与原姓名不能相同","FS-Auth-Version-Number":"认证版本号：","ColorMatch":"配色","FS-Schedule_Default":"默认","I-BarStyle_Normal":"簇状柱形图","HF-Edit_Header":"编辑页眉","FR-Plugin_Update_Dependence":"是否更新依赖插件","FS-User-Department_Management":"机构部门管理","D-Dispaly_Divide_Result_Set_into_Groups":"将结果集进行分组","FS-Schedule-Step_Margin_Left":"22","Local-file":"本地文件","FS-Plugin-Store_Net_Connect_Failed":"","Platform":"平台","Chart-Map_SaveChanges":"保存更改","Import_Again":"重新导入","Para-Help_Info":"您可以点击下方工具栏最左侧按钮或右键单元格来添加参数控件、查询按钮等元素","FR-Engine-Please_Install":"请安装","At_least_one_visual_worksheet":"工作簿中至少要有一张可视化工作表,如果想要删除，请先插入一张新工作表","Plugin-ChartF_Layer_PlainJane":"素雅","CapsLock":"大写锁定已打开","Neimenggu":"内蒙古自治区","seconds":"秒","FR-Base_Sche_Second":"秒","Chart-Step_Index":"步骤序号","Form-Allow_Edit":"允许直接编辑","Plugin-ChartF_Rotation":"可旋转","FR-Engine_SimgleNumber":"号","FR-Engine_Custom_Sort":"自定义排序","FR-Designer-Plugin_Install_Failed":"插件安装失败","Form-Layout":"布局","FS-Plugin_UpdateOnline_Delete_Dirs":"正在删除","FRFont":"字体","FR-App-File_Message":"信息","FS-BakRestore_Log_System_Status":"用户登录","BackgroundTexture-Granite":"花岗岩","FR-Engine_Lic_Update":"当前版本不支持Flash零客户端打印, 请升级您的lic","SQLWizard-would_you_like_to_continue":"是否想继续","ChongqingInCity":"重庆市区","FS-BakRestore_Six_Months_Before":"6月前","Next":"下一步","ChartF-Alpha":"不透明度","Chart-DS_Embedded_TableData":"内置数据集","FS-Frame-Delete_Data":"删除数据","BindColumn-Extend_the_conditions_of_fatherCell(Applied_to_the_data_contains_other_data)":"将父格子作为过滤条件(适用于父子格来自于同一个数据集)","Whether_Reinstate_Report":"是否恢复原有报表","RP_Son_Task_Not_Complete":"子任务尚未完成","PolyAccessWarning-NotSupport":"您所访问的模板含有聚合报表，它并不支持","FS-Privilege_Please_Contact_Platform_Admin":"如果您确实需要访问该页面，请联系平台管理员","FS-Generic-Import_2":"导入","Plugin-ChartF_YES":"是","FR-Engine-Condition_Equals":"等于","Cannot_Get_Date_Format":"不能获取日期格式","FS-CustomStyle_Toast_Prompt":"提示","BindD-Need_to_select_columns_to_display":"需要选择列","I-Message_FunctionGrouper_2":"默认的\u201c$$$\u201d为当前值，相当于不做函数处理","I-Message_FunctionGrouper_1":"您可以通过函数处理的结果进行分组和显示","BorderLayout-East":"东","Waring_you":"您选中了多个单元格！","Chart-Bubble_X":"气泡值X","FS-Schedule_Expected_File_Num":"预计文件","Plugin-ChartF_Button_Style":"按钮","FS-BakRestore_One_Month_Before":"一月前","Plan":"计划","FS-Privilege-Simple_View":"权限项查看","WorkSheet":"自由报表","FR-Chart-Map_Henan":"河南","Active_Connection_Size":"活动连接数","Action-Type":"操作类型","FS-Report-Add_Link":"添加链接","FS-Generic-Simple_Time":"时间","Vertical-Split_Layout":"垂直分割布局","Plugin-ChartF_View_Center":"中心点","BackgroundTexture-Sand":"沙滩","Chart-Meter_Field":"分段区域","Import-Excel_File":"Excel文件","Report-WorkFlow_Attributes":"工作流属性","FR-Designer_Dimension":"维度","FS-Generic-Report_Type":"类型","FS-Generic-I_Created":"我创建的","FR-Engine_Func-AlphaFine":"AlphaFine","Chart_PaintInSeries":"系列内填充","FS-User-Delete_Template":"删除这个模板","Plugin-Memory_Alarm_Live_Time":"存活时间","FS-Mobile-Report_Cover":"目录封面","FS-Report-Simple_Path":"路径","FS-Generic-DataFunction_None":"无","FS-Public-Result_Cpr":"通用结果","ChartF-Sets_Alert_Range":"设置警戒区域","FR-Chart-Map_Shanxi":"山西","FS-Schedule-Task_Name_Should_Not_Be_Empty":"任务名称不能为空","FR-Engine_SAP-TableData":"SAP数据集","StyleFormat-Sample":"示例","FS-User-Simple_Authentication":"认证方式","FS-System-Verification_Code_Can_Not_Empty":"验证码不能为空","FS-BakRestore_Log_Export":"导出","SpecifiedG-New_Group":"新建组","FR-Engine-Write_Submit_Failed_Reminder":"提交失败智能提示","Setting":"选项","Please_Select":"请选择","Recursion":"递归","Printer-All_Printers":"所有打印机","FormulaD-Logical":"逻辑函数","FR-Basic_Cancel":"取消","FR-Engine-NS_exception_readError":"错误代码:11300005 模板文件解析出错","FR-Plugin-Store_BI":"决策平台","FS-Frame-Simple_Save":"保 存","Please_Enter":"请输入","Privilege-Select_Roles":"选择角色","SAP":"SAP","ModifySecretWillRemoveUser":"修改加密方式会清空已有用户数据","Printer-Alias":"别名","FS-Admin-First_Set_Platform":"您是第一次使用报表管理平台，请先配置您的管理员用户名和密码","FR-Chart-Area_Van":"面积图(新特性)","Shaanxi":"陕西省","Datasource-Database_Type":"数据库类型","Custom_styles_lost":"自定义样式已丢失","Printer-Edit_All_Printer_Groups":"编辑所有打印机组","Out_Border_Line":"外侧框线","FR-Utils-Please_Input_a_New_Name":"请输入新的名字","Plugin-ChartF_Custom_Axis":"自定义坐标轴","FS-System-Bind_Email_Success":"邮箱绑定成功","M_Edit-Clear":"清除(A)","FR-Plugin_No_Plugin_Update":"没有找到对应的插件，是否安装？","FR-Engine_Importing":"导入中","Add_Member":"添加人员","ReportColumns-None":"不分栏","Function_browser":"函数浏览","FR-Plugin-Designer_Download_Description":"<html>提示：<br/>如果当前单元格存的是文件名称，且文件存于D盘，则文件路径中可以写公式=\"D://\"+$$$,其中$$$表示当前值<br/>&nbsp;<\/html>","FS-System-Config_SMS_Signature":"短信签名","Plugin-ChartF_ValueDefinition":"值定义","FS-Schedule-Execute_Period":"调度周期","satisfy":"满足条件","FR-Engine-Choose_None":"不选","Plugin-ChartF_AlertSet":"警戒线设置","FR-Chart-Env_Directory":"图表工作目录","FS-System-Config_SMS_Test_Content":"[信息平台]恭喜!您的短信服务已经配置成功","FS-Privilege-Post_All":"所有职务","Common_Condition":"普通条件","FS-Reg-Unregister_Version":"当前版本未注册","Plugin-ChartF_WMS_Layers":"wms图层","FR-Designer-LayerPageReport_PageQuery":"分页查询","FS-Reg-Unregister_Tip":"提示：当前应用的WEB-INF/resources路径下未发现服务器授权文件！请尽快导入授权文件并完成注册\n未注册版本同时可访问模板IP个数限制为2个！","FS-System-Config_SMS_Send_Test":"发送测试信息","Chart-Unit_Hundred_Thousand":"十万"},
    /**
     * 根据键获取国际化后的值
     * @param key 键
     * @returns {String} 国际化后的文本
     * @example
     *    FR.i18nText("Click");//输出结果为"点击"
     *    FR.i18nText("Sum({R1}, {R2}) = 3", 1,2);//输出结果为"Sum(1, 2) = 3"
     */
    i18nText: function (key) {
        var localeText = FR.i18n[key];
        if (!localeText) {
            localeText = key;
        }
        var len = arguments.length;
        if(len > 1){
            for(var i = 1;i<len;i++){
                var key = "{R"+i+"}";
                localeText = localeText.replaceAll(key, arguments[i]+"");
            }
        }
        return localeText;
    },

    /**
     * 获取不需要国际化的中文字符串
     * @param key 中文字符串对应的键
     * @returns {String} 中文字符串
     */
    plainText : function(key) {
        return this.chinese[key] || key;
    },

    /**
     * 获取国际化字符串的字符串宽度（根据当前语言环境动态变化）
     * @param key 国际化字符串对应的键
     * @param fontWidth 字体宽度
     * @returns {number} 字符串宽度
     */
    i18nTextWidth: function (key, fontWidth) {
        return FR.byteLength(this.i18nText(key)) * (fontWidth ? fontWidth : 6);
    }
});if (window.FR == null) {
	window.FR = {};
}
$.extend(FR, {
	$defaultImport : function() {
		var ars = arguments;
        if (ars[0] && typeof ars[0] === "object") {
            var config = $.extend({
                op: 'resource',
                path: null,
                type: null,
                must: false
            }, ars[0]);
            config.url = FR.servletURL + '?op=' + config.op + '&resource=' + config.path;
            this.$import(config.url, config.type, config.must);
        }
        else {
            if (ars[0] != null) {
                ars[0] = FR.servletURL + '?op=resource&resource=' + ars[0];
            }
            this.$import.apply(null, ars);
        }
	},

    $import: function () {
		var _LOADED = {}; // alex:保存加载过的
		function loadReady(src, must){
			var $scripts = $("head script");
			$.each($scripts, function(i, item) {
				if (item.src.indexOf(src) != -1) {
					_LOADED[src] = true;
				}
			});
			var $links = $("head link");
			$.each($links, function(i, item) {
				if (item.href.indexOf(src) != -1 && must){
					_LOADED[src] = false;
					$(item).remove();
				}
			});
		}
		// must=true 强行加载
		return function(src, ext, must) {
			loadReady(src, must);
			// alex:如果已经加载过了的,直接return
            if (_LOADED[src] === true) {
                return;
            }
			if (ext === 'css') {
				var link = document.createElement('link');
				link.rel = 'stylesheet'
				link.type = 'text/css';
				link.href = src;
				var head = document.getElementsByTagName('head')[0];
				head.appendChild(link);
				_LOADED[src] = true;
			} else {
				// alex:这里用同步调用的方式,必须等待ajax完成
				$.ajax({
					url : src,
					dataType : "script", // alex:指定dataType为script,jquery会帮忙做globalEval的事情
					async : false,
                    cache: true,
					complete : function(res, status) {
						/*
						 * alex:发现jquery会很智能地判断一下返回的数据类型是不是script,然后做一个globalEval
						 * 所以当status为success时就不需要再把其中的内容加到script里面去了
						 */
						if (status == 'success') {
							_LOADED[src] = true;
						}
					}
				})
			}
		}
	}()
});
/**
 * 事件集合
 * @class FR.Events
 */
$.extend(FR, {
    Events: {

        /**
         * @static
         * @property 清除选择
         */
        NOSELECT: 'NOSELECT',

        /**
         * @static
         * @property 编辑数据
         */
        EDITDATA: 'EDITDATA',

        /**
         * @static
         * @property 移除数据
         */
        REMOVEDATA: 'REMOVEDATA',

        /**
         * @static
         * @property 移除自身
         */
        REMOVESELF: 'REMOVESELF',

        /**
         * @static
         * @property 窗体改变大小
         */
        RESIZE: "_resize",

        /**
         * @static
         * @property 编辑前事件
         */
        BEFOREEDIT: 'beforeedit',

        /**
         * @static
         * @property 编辑后事件
         */
        AFTEREDIT: 'afteredit',

        /**
         * @static
         * @property 值改变事件
         */
        VALUECHANGE: 'valuechange',

        /**
         * @static
         * @property 停止编辑事件
         */
        STOPEDIT: 'stopedit',

        /**
         * @static
         * @property 值改变事件
         */
        CHANGE: 'change',

        /**
         * @static
         * @property 下拉弹出菜单事件
         */
        EXPAND: 'expand',

        /**
         * @static
         * @property 关闭下拉菜单事件
         */
        COLLAPSE: 'collapse',

        /**
         * @static
         * @property 状态改变事件，一般是用在复选按钮和单选按钮
         */
        STATECHANGE: 'statechange',

        /**
         * @static
         * @property 文件上传回调事件
         */
        CALLBACK: 'callback',

        /**
         * @static
         * @property 点击事件
         */
        CLICK: 'click',

        /**
         * @static
         * @property 状态改变前事件
         */
        BEFORESTATECHANGE: 'beforestatechange',

        /**
         * @static
         * @property 树选中节点事件
         */
        DEALSELECTEDNODES: 'dealselectednodes',

        /**
         * @static
         * @property 树构建完成后事件
         */
        AFTERBUILD: 'afterbuild',

        /**
         * @static
         * @property 数据读取后事件
         */
        AFTERREAD: 'afterread',

        /**
         * @static
         * @property 增加新数据到原有数据时的事件
         */
        APPENDDATA: 'appenddata',

        /**
         * @static
         * @property 树初始化事件
         */
        DEFAULTINIT: 'defaultinit',

        /**
         * @static
         * @property 标签切换事件
         */
        TABCHANGE: 'tabchange',

        /**
         * @static
         * @property 标签切换前事件
         */
        TABCHANGESTART: 'tabchangestart',

        /**
         * @static
         * @property 滚动条滚动事件
         */
        SCROLLCHANGE: 'scrollchange',

        /**
         * @static
         * @property 初始化后事件
         */
        AFTERINIT: 'afterinit',

        /**
         * @static
         * @property 报表开始加载事件
         */
        STARTLOAD: 'startload',

        /**
         * @static
         * @property 报表加载后事件
         */
        AFTERLOAD: 'afterload',

        /**
         * @static
         * @property 报表初始化事件
         */
        INIT: 'init',

        /**
         * @static
         * @property 填报时单元格值改变事件
         */
        CELLVALUECHANGE: 'cellvaluechange',

        /**
         * @static
         * @property 提交前事件
         */
        BS: 'beforesubmit',

        /**
         * @static
         * @property 提交后事件
         */
        AS: 'aftersubmit',

        /**
         * @static
         * @property 提交完成事件
         */
        SC: 'submitcomplete',

        /**
         * @static
         * @property 提交失败事件
         */
        SF: 'submitfailure',

        /**
         * @static
         * @property 提交成功事件
         */
        SS: 'submitsuccess',

        /**
         * @static
         * @property 校验提交前事件
         */
        BVW: 'beforeverifywrite',

        /**
         * @static
         * @property 校验提交后事件
         */
        AVW: 'afterverifywrite',

        /**
         * @static
         * @property 校验后事件
         */
        AV: 'afterverify',

        /**
         * @static
         * @property 填报前事件
         */
        BW: 'beforewrite',

        /**
         * @static
         * @property 填报后事件
         */
        AW: 'afterwrite',

        /**
         * @static
         * @property 填报成功事件
         */
        WS: 'writesuccess',

        /**
         * @static
         * @property 填报失败事件
         */
        WF: 'writefailure',

        /**
         * @static
         * @property 添加行前事件
         */
        BA: 'beforeappend',

        /**
         * @static
         * @property 添加行后事件
         */
        AA: 'afterappend',

        /**
         * @static
         * @property 删除行前事件
         */
        BD: 'beforedelete',

        /**
         * @static
         * @property 删除行后事件
         */
        AD: 'beforedelete',

        /**
         * @static
         * @property 未提交离开事件
         */
        UC: 'unloadcheck',


        /**
         * @static
         * @property PDF导出前事件
         */
        BTOPDF: 'beforetopdf',

        /**
         * @static
         * @property PDF导出后事件
         */
        ATOPDF: 'aftertopdf',

        /**
         * @static
         * @property Excel导出前事件
         */
        BTOEXCEL: 'beforetoexcel',

        /**
         * @static
         * @property Excel导出后事件
         */
        ATOEXCEL: 'aftertoexcel',

        /**
         * @static
         * @property Word导出前事件
         */
        BTOWORD: 'beforetoword',

        /**
         * @static
         * @property Word导出后事件
         */
        ATOWORD: 'aftertoword',

        /**
         * @static
         * @property 图片导出前事件
         */
        BTOIMAGE: 'beforetoimage',

        /**
         * @static
         * @property 图片导出后事件
         */
        ATOIMAGE: 'aftertoimage',

        /**
         * @static
         * @property HTML导出前事件
         */
        BTOHTML: 'beforetohtml',

        /**
         * @static
         * @property HTML导出后事件
         */
        ATOHTML: 'aftertohtml',

        /**
         * @static
         * @property Excel导入前事件
         */
        BIMEXCEL: 'beforeimportexcel',

        /**
         * @static
         * @property Excel导出后事件
         */
        AIMEXCEL: 'afterimportexcel',

        /**
         * @static
         * @property PDF打印前事件
         */
        BPDFPRINT: 'beforepdfprint',

        /**
         * @static
         * @property PDF打印后事件
         */
        APDFPRINT: 'afterpdfprint',

        /**
         * @static
         * @property Flash打印前事件
         */
        BFLASHPRINT: 'beforeflashprint',

        /**
         * @static
         * @property Flash打印后事件
         */
        AFLASHPRINT: 'afterflashprint',

        /**
         * @static
         * @property Applet打印前事件
         */
        BAPPLETPRINT: 'beforeappletprint',

        /**
         * @static
         * @property Applet打印后事件
         */
        AAPPLETPRINT: 'afterappletprint',

        /**
         * @static
         * @property 服务器打印前事件
         */
        BSEVERPRINT: 'beforeserverprint',

        /**
         * @static
         * @property 服务器打印后事件
         */
        ASERVERPRINT: 'afterserverprint',

        /**
         * @static
         * @property 打印前事件
         */
        BPRINT: 'beforeprint',

        /**
         * @static
         * @property 打印后事件
         */
        APRINT: 'afterprint',

        /**
         * @static
         * @property 邮件发送前事件
         */
        BEMAIL: 'beforeemail',

        /**
         * @static
         * @property 邮件发送后事件
         */
        AEMAIL: 'afteremail',

        /**
         * @static
         * @property 邮件发送后事件
         */
        CARDCHANGE: 'cardchange'
    }
});
$(function () {
    if (!Array.prototype.lastIndexOf) {
        Array.prototype.lastIndexOf = function (searchElement /*, fromIndex*/) {
            'use strict';

            if (this === void 0 || this === null) {
                throw new TypeError();
            }

            var n, k,
                t = Object(this),
                len = t.length >>> 0;
            if (len === 0) {
                return -1;
            }

            n = len - 1;
            if (arguments.length > 1) {
                n = Number(arguments[1]);
                if (n != n) {
                    n = 0;
                }
                else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
                    n = (n > 0 || -1) * Math.floor(Math.abs(n));
                }
            }

            for (k = n >= 0
                ? Math.min(n, len - 1)
                : len - Math.abs(n); k >= 0; k--) {
                if (k in t && t[k] === searchElement) {
                    return k;
                }
            }
            return -1;
        };
    }
    if (!Array.prototype.indexOf) {
        Array.prototype.indexOf = function (elt /*, from*/) {
            var len = this.length >>> 0;
            var from = Number(arguments[1]) || 0;
            from = (from < 0)
                ? Math.ceil(from)
                : Math.floor(from);
            if (from < 0){
                from += len;
            }
            for (; from < len; from++) {
                if (from in this &&
                    this[from] === elt){
                    return from;
                }
            }
            return -1;
        };
    }
});
/**
 * 对数组对象的扩展
 * @class Array
 */
$.extend(Array.prototype, {
    /**
     * 检查指定的值是否在数组中(弱检测,通过FR.equals判断相同)
     * @param {Object} o 要检查的值
     * @return {Number}  o在数组中的索引（如果不在数组中则返回-1）
     */
    weakIndexOf: function (o) {
        for (var i = 0, len = this.length; i < len; i++) {
            if (FR.equals(o, this[i])) {
                return i;
            }
        }
        return -1;
    },

    /**
     * 检查指定的值是否在数组中(弱检测,通过FR.equals判断相同)
     * ie67不支持数组的这个方法
     * @param {Object} o 要检查的值
     * @return {Number}  o在数组中的索引（如果不在数组中则返回-1）
     */
    weakLastIndexOf: function (o) {
        for (var len = this.length, i = len - 1; i >= 0; i--) {
            if (FR.equals(o, this[i])) {
                return i;
            }
        }
        return -1;
    },

    /**
     * 从数组中移除指定的值，如果值不在数组中，则不产生任何效果
     * @param {Object} o 要移除的值
     * @return {Array} 移除制定值后的数组
     */
    remove: function (o) {
        var index = this.weakIndexOf(o);
        if (index != -1) {
            this.splice(index, 1);
        }
        return this;
    },
    /**
     * 从数组中移除指定的值，如果值不在数组中，则不产生任何效果
     * @param {Object} o 要移除的值
     * @return {Array} 移除制定值后的数组
     */
    removeWeakEqual: function (o) {
        var index = this.weakIndexOf(o);
        if (index != -1) {
            this.splice(index, 1);
        }
        return this;
    },
    /**
     * 移除数组中的所有元素
     */
    clear: function () {
        while (this.length > 0) {
            this.pop();
        }
    }
});

/**
 * 对jQuery对象方法的补充
 * @class jQuery
 */
(function () {
    /**
     * 使用指定的class替代jQuery对象的原始class
     * @param {jQuery} c1  原始的class
     * @param {jQuery} c2  新的class
     * @return {jQuery}  jQuery对象
     */
    $.fn.swapClass = function (c1, c2) {
        // removeClass(undefined): jquery1.6删除当前class  1.9则不会删除 会导致单参数的switchClass失败
        return c1 == undefined ? this.removeClass().addClass(c2) : this.removeClass(c1).addClass(c2);
    };
    /**
     * 让jQuery对象的class在两个指定的class中交换，如果当前是c1，调用后则将class变为c2，如果当前是c2，调用后则将class变为c1
     * @param {jQuery} c1  第一个class
     * @param {jQuery} c2  第二个class
     * @return {jQuery} jQuery对象
     */
    $.fn.switchClass = function (c1, c2) {
        if (this.hasClass(c1)) {
            return (c2 || c2 === 0) ? this.swapClass(c1, c2) : false;
        } else {
            return this.swapClass(c2, c1);
        }
    };
    /**
     * 判断当前元素是否为指定元素的子元素
     * @param {jQuery} b  需要比较的元素
     * @return {Boolean}   如果当前元素为指定元素的子元素，返回true，否则返回false
     */
    $.fn.isChildOf = function (b) {
        var self = this;
        var compare1 = self[0];
        var compare2 = b[0];
        var parent = compare1.parentNode;
        while (parent) {
            if (parent == compare2) {
                return true;
            }
            else if (!parent.tagName || parent.tagName.toUpperCase() == "HTML") {
                return false;
            }
            parent = parent.parentNode;
        }
        return false;
    };
    /**
     * 判断制定元素是否为当前元素或则当前元素的子元素
     * @param {jQuery} b 需要比较的元素
     * @return {Boolean}  是则返回true，否则返回false
     */
    $.fn.isChildAndSelfOf = function (b) {
        return (this.closest(b).length > 0);
    };
    $.fn.mousewheel = function (Func) {
        return this.each(function () {
            var _self = this;
            _self.D = 0;
            if (FR.Browser.isIE() || FR.Browser.r.safari || FR.Browser.r.chrome) {
                _self.onmousewheel = function () {
                    _self.D = event.wheelDelta;
                    event.returnValue = false;
                    Func && Func.call(_self);
                };
            } else {
                _self.addEventListener("DOMMouseScroll", function (e) {
                    _self.D = e.detail > 0 ? -1 : 1;
                    e.preventDefault();
                    Func && Func.call(_self);
                }, false);
            }
        });
    };
    /*
     * 给jQuery.Event对象添加的工具方法
     */
    $.extend($.Event.prototype, {
        // event.stopEvent
        stopEvent: function () {
            this.stopPropagation();
            this.preventDefault();
        }
    });

})();

/**
 * 对字符串对象的扩展
 * @class String
 */
$.extend(String, {

    /**
     * 对字符串中的'和\做编码处理
     * @static
     * @param {String} string 要做编码处理的字符串
     * @return {String} 编码后的字符串
     */
    escape: function (string) {
        return string.replace(/('|\\)/g, "\\$1");
    },

    /**
     * 让字符串通过指定字符做补齐的函数
     *
     *      var s = String.leftPad('123', 5, '0');//s的值为：'00123'
     *
     * @static
     * @param {String} val 原始值
     * @param {Number} size 总共需要的位数
     * @param {String} ch 用于补齐的字符
     * @return {String}  补齐后的字符串
     */
    leftPad: function (val, size, ch) {
        var result = String(val);
        if (!ch) {
            ch = " ";
        }
        while (result.length < size) {
            result = ch + result;
        }
        return result.toString();
    },

    /**
     * 对字符串做替换的函数
     *
     *      var cls = 'my-class', text = 'Some text';
     *      var res = String.format('<div class="{0}>{1}</div>"', cls, text);
     *      //res的值为：'<div class="my-class">Some text</div>';
     *
     * @static
     * @param {String} format 要做替换的字符串，替换字符串1，替换字符串2...
     * @return {String} 做了替换后的字符串
     */
    format: function (format) {
        var args = Array.prototype.slice.call(arguments, 1);
        return format.replace(/\{(\d+)\}/g, function (m, i) {
            return args[i];
        });
    }
});

/**
 * 对字符串对象的扩展
 * @class String
 */
$.extend(String.prototype, {

    /**
     * 判断字符串是否已指定的字符串开始
     * @param {String} startTag   指定的开始字符串
     * @return {Boolean}  如果字符串以指定字符串开始则返回true，否则返回false
     */
    startWith: function (startTag) {
        if (startTag == null || startTag == "" || this.length === 0 || startTag.length > this.length) {
            return false;
        }
        return this.substr(0, startTag.length) == startTag;
    },
    /**
     * 判断字符串是否以指定的字符串结束
     * @param {String} endTag 指定的字符串
     * @return {Boolean}  如果字符串以指定字符串结束则返回true，否则返回false
     */
    endWith: function (endTag) {
        if (endTag == null || endTag == "" || this.length === 0 || endTag.length > this.length) {
            return false;
        }
        return this.substring(this.length - endTag.length) == endTag;
    },

    /**
     * 获取url中指定名字的参数
     * @param {String} name 参数的名字
     * @return {String} 参数的值
     */
    getQuery: function (name) {
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
        var r = this.substr(this.indexOf("?") + 1).match(reg);
        if (r) {
            return unescape(r[2]);
        }
        return null;
    },

    /**
     * 给url加上给定的参数
     * @param {Object} paras 参数对象，是一个键值对对象
     * @return {String} 添加了给定参数的url
     */
    appendQuery: function (paras) {
        if (!paras) {
            return this;
        }
        var src = this;
        // 没有问号说明还没有参数
        if (src.indexOf("?") === -1) {
            src += "?";
        }
        // 如果以问号结尾，说明没有其他参数
        if (src.endWith("?") !== false) {
        } else {
            src += "&";
        }
        $.each(paras, function (name, value) {
            if (typeof(name) === 'string') {
                src += name + "=" + value + "&";
            }
        });
        src = src.substr(0, src.length - 1);
        return src;
    },
    /**
     * 将所有符合第一个字符串所表示的字符串替换成为第二个字符串
     * @param {String} s1 要替换的字符串的正则表达式
     * @param {String} s2 替换的结果字符串
     * @returns {String} 替换后的字符串
     */
    replaceAll: function (s1, s2) {
        return this.replace(new RegExp(s1, "gm"), s2);
    },
    /**
     * 总是让字符串以指定的字符开头
     * @param {String} start 指定的字符
     * @returns {String} 以指定字符开头的字符串
     */
    perfectStart: function (start) {
        if (this.startWith(start)) {
            return this;
        } else {
            return start + this;
        }
    },

    /**
     * 获取字符串中某字符串的所有项位置数组
     * @param {String} sub 子字符串
     * @return {Number[]} 子字符串在父字符串中出现的所有位置组成的数组
     */
    allIndexOf: function (sub) {
        if (typeof sub != 'string') {
            return [];
        }
        var str = this;
        var location = [];
        var offset = 0;
        while (str.length > 0) {
            var loc = str.indexOf(sub);
            if (loc === -1) {
                break;
            }
            location.push(offset + loc);
            str = str.substring(loc + sub.length, str.length);
            offset += loc + sub.length;
        }
        return location;
    }
});

/**
 * 对函数对象的扩展
 * @class Function
 */
$.extend(Function.prototype, {

    /**
     * 将函数绑定到全局域上
     *
     *      @example
     *      function t(a) {
     *          alert(a);
     *      }
     *      var x = t.createCallback("abc");
     *      window.x();
     * @returns {Function}
     */
    createCallback: function (/*args...*/) {
        // make args available, in function below
        var args = arguments;
        var method = this;
        return function () {
            return method.apply(window, args);
        };
    },

    /**
     * 函数的代理，更改原函数的参数和this作用域
     *
     *      @example
     *      var $div = $("#test1");
     *      var $div2 = $("#test2")
     *      $div.bind("click", function(){
     *          alert($(this) == $div2);  // 这一句将会输出true
     *      }.createDelegate($div2));
     *
     * @param {Object} obj 函数内部this作用域的范围
     * @param {Array} args 参数数组
     * @param {Array} appendArgs appendArgs是"Boolean或Number",
     * 如果appendArgs是 Boolean型的且值为true,那么args参数将跟在调用代理方法时传入的参数后面组成数组一起传入当前方法,
     * 否则只传入args,如果 appendArgs为Number型,那么args将插入到appendArgs指定的位置。
     * @returns {Function}
     */
    createDelegate: function (obj) {
        var method = this;
        var args = arguments[1];
        var appendArgs = arguments[2];
        return function () {
            var callArgs = args || arguments;
            if (appendArgs === true) {
                callArgs = Array.prototype.slice.call(arguments, 0);
                callArgs = callArgs.concat(args);
            } else if (typeof appendArgs == "number") {
                callArgs = Array.prototype.slice.call(arguments, 0);
                // copy arguments first
                var applyArgs = [appendArgs, 0].concat(args);
                // create method call params
                Array.prototype.splice.apply(callArgs, applyArgs);
                // splice them in
            }
            return method.apply(obj || window, callArgs);
        };
    },

    /**
     * 创建阻断方法,如果fcn返回false,原方法将不会被执行
     * @param {Function} fcn 阻断函数
     * @param {Object} scope 作用域
     * @returns {*}
     */
    createInterceptor: function (fcn, scope) {
        if (typeof fcn != "function") {
            return this;
        }
        var method = this;
        return function () {
            fcn.target = this;
            fcn.method = method;
            if (fcn.apply(scope || this || window, arguments) === false) {
                return;
            }
            return method.apply(this || window, arguments);
        };
    },

    /**
     * 让函数延迟执行
     * @param {Number} millis 延迟的毫秒数
     * @param {Object} obj 函数的this作用域
     * @param {Array} args 参数
     * @param {Array} appendArgs 同createDelegate函数的最后一个参数说明
     * @returns {Number}
     */
    defer: function (millis, obj, args, appendArgs) {
        var fn = this.createDelegate(obj, args, appendArgs);
        if (millis || millis === 0) {
            return setTimeout(fn, millis);
        }
        fn();
        return 0;
    },

    /**
     * 创建组合函数，将执行原函数以及fcn函数
     * @param {Function} fcn  组合添加的fcn函数
     * @param {Object} scope 函数作用域
     * @returns {*}
     */
    createSequence: function (fcn, scope) {
        if (typeof fcn != "function") {
            return this;
        }
        var method = this;
        return function () {
            var retval = method.apply(this || window, arguments);
            fcn.apply(scope || this || window, arguments);
            return retval;
        };
    },

    /**
     * 通过函数名获取函数的参数列表
     * @returns {String[]} 函数的参数列表组成的数组
     */
    getNameArguments: function () {
        var s = this.toString();
        /*
         * alex:通过正则表达式取到参数列表
         * function(a, b) -> a, b
         * function fn(a, b, c) -> a, b, c
         */
        var match = /function[^\(]*\(([^\)]*)\)/.exec(s);
        var a = [];
        if (match != null) {
            a = match[1].split(",");
        }

        return $.map(a, function (item) {
            return $.trim(item)
        });
    },

    /**
     * @private
     */
    arguments2Json: function () {
        var args = arguments;
        var nameArgs = this.getNameArguments();
        var retJo = {};
        $.each(nameArgs, function (idx, item) {
            if (args.length > idx) {
                retJo[item] = args[idx];
            }
        });

        return retJo;
    }
});


if (window.FR == null) {
    window.FR = {};
}
if (window.FR.servletURL == null) {
    window.FR.servletURL = {};
}
/**
 * 插件接口判断方法
 */
$.extend(FR, {

    Plugin: {
        /**
         * 是否是合适的插件等级
         * @param provider 接口
         * @param plugin 插件实现
         * @returns {boolean} 是否是符合版本需求的插件实现
         */
        validLevel: function (provider, plugin) {
            var bv = provider.version || 1.0;
            var pv = plugin.version || 1.0;
            return bv >= pv;
        }
    }
});
/**
 * 浏览器类型、模式以及版本判断处理
 * @class FR.Browser
 */
var browser = function () {
    var agent = navigator.userAgent.toLowerCase(),
        opera = window.opera,
        browser = {
            /**
             * @property {boolean} ie 检测当前浏览器是否为IE
             *
             *      @example
             *      if (FR.Browser.r.ie ) {
             *              console.log( '当前浏览器是IE' );
             *      }
             */
            ie: /(msie\s|trident.*rv:)([\w.]+)/.test(agent) || agent.indexOf("edge") > -1,

            /**
             * @property {boolean} edge 检测当前浏览器是否为Edge
             *
             *      @example
             *      if (FR.Browser.r.edge ) {
             *              console.log( '当前浏览器是Edge' );
             *      }
             */
            edge: agent.indexOf("edge") > -1,

            /**
             * @property {boolean} opera 检测当前浏览器是否为Opera
             *
             *      @example
             *      if (FR.Browser.r.opera ) {
             *          console.log( '当前浏览器是Opera' );
             *      }
             */
            opera: ( !!opera && opera.version ),

            /**
             * @property {boolean} webkit 检测当前浏览器是否是webkit内核的浏览器
             *
             *     @example
             *     if (FR.Browser.r.webkit ) {
             *         console.log( '当前浏览器是webkit内核浏览器' );
             *     }
             */
            webkit: ( agent.indexOf(' applewebkit/') > -1 ),

            /**
             * @property {boolean} mac 检测当前浏览器是否是运行在mac平台下
             *
             *      @example
             *      if (FR.Browser.r.mac ) {
             *          console.log( '当前浏览器运行在mac平台下' );
             *      }
             */
            mac: ( agent.indexOf('macintosh') > -1 ),

            /**
             * @property {boolean} quirks 检测当前浏览器是否处于“怪异模式”下
             *
             *      @example
             *      if (FR.Browser.r.quirks) {
             *          console.log( '当前浏览器运行处于“怪异模式”' );
             *      }
             */
            quirks: ( document.compatMode == 'BackCompat' )
        };

    /**
     * @property {boolean} gecko 检测当前浏览器内核是否是火狐内核
     *
     *      @example
     *      if (FR.Browser.r.gecko) {
     *          console.log( '当前浏览器内核是火狐内核' );
     *      }
     */
    browser.gecko = ( navigator.product == 'Gecko' && !browser.webkit && !browser.opera && !browser.ie);

    var version = 0;
    browser.isInnerHtmlSuitable = true;
    // Internet Explorer 6.0+
    if (browser.ie && !browser.edge) {

        var v1 = agent.match(/(?:msie\s([\w.]+))/);
        var v2 = agent.match(/(?:trident.*rv:([\w.]+))/);
        if (v1 && v2 && v1[1] && v2[1]) {
            version = Math.max(v1[1] * 1, v2[1] * 1);
        } else if (v1 && v1[1]) {
            version = v1[1] * 1;
        } else if (v2 && v2[1]) {
            version = v2[1] * 1;
        } else {
            version = 0;
        }

        browser.ie11Compat = document.documentMode === 11;
        /**
         * @property { boolean } ie9Compat 检测浏览器模式是否为 IE9 兼容模式，如果浏览器不是IE， 则该值为undefined
         *
         *      @example
         *      if (FR.Browser.r.ie9Compat) {
         *          console.log( '当前浏览器运行在IE9兼容模式下' );
         *      }
         */
        browser.ie9Compat = document.documentMode === 9;

        /**
         * @property { boolean } ie10Compat 检测浏览器模式是否为 IE10 兼容模式，如果浏览器不是IE， 则该值为undefined
         *
         *      @example
         *      if (FR.Browser.r.ie10Compat) {
         *          console.log( '当前浏览器运行在IE10兼容模式下' );
         *      }
         */
        browser.ie10Compat = document.documentMode === 10;

        /**
         * @property { boolean } ie8 检测浏览器是否是IE8浏览器，如果浏览器不是IE， 则该值为undefined
         *
         *      @example
         *      if (FR.Browser.r.ie8) {
         *          console.log( '当前浏览器是IE8浏览器' );
         *      }
         */
        browser.ie8 = !!document.documentMode;

        /**
         * @property { boolean } ie8Compat 检测浏览器模式是否为 IE8 兼容模式，如果浏览器不是IE， 则该值为undefined
         *
         *      @example
         *      if (FR.Browser.r.ie8Compat) {
         *          console.log( '当前浏览器运行在IE8兼容模式下' );
         *      }
         */
        browser.ie8Compat = document.documentMode === 8;

        /**
         * @property { boolean } ie7Compat 检测浏览器模式是否为 IE7 兼容模式，如果浏览器不是IE， 则该值为undefined
         *
         *      @example
         *      if (FR.Browser.r.ie7Compat) {
         *          console.log( '当前浏览器运行在IE7兼容模式下' );
         *      }
         */
        browser.ie7Compat = ( ( version === 7 && !document.documentMode )
        || document.documentMode === 7 );
        /**
         *
         * @type {boolean} 当前浏览器是否可使用用innerhtml替换html以提高性能而没有bug.(bug:77528)
         *
         *      @example
         *      if (FR.Browser.r.isInnerHtmlSuitable) {
         *          console.log( '当前浏览器建议使用.innerHtml替换.html' );
         *      }
         */
        browser.isInnerHtmlSuitable = (version === 9 && browser.ie9Compat)
            || (version === 10 && browser.ie10Compat)
            || (browser.ie && version === 11.0 && browser.ie11Compat)
            || (version === 8);  //added by loy on 20160913

        /**
         * @property { boolean } ie6Compat 检测浏览器模式是否为 IE6 模式 或者怪异模式，如果浏览器不是IE， 则该值为undefined
         *
         *      @example
         *      if (FR.Browser.r.ie6Compat) {
         *           console.log( '当前浏览器运行在IE6模式或者怪异模式下' );
         *      }
         */
        browser.ie6Compat = version < 7;

        browser.ie8bellow = version < 8;

        browser.ie9above = version > 8;

        browser.ie9below = version < 9;

        browser.ie11above = version > 10;

        browser.ie11below = version < 11;

    }

    // Gecko.
    if (browser.gecko) {
        var geckoRelease = agent.match(/rv:([\d\.]+)/);
        if (geckoRelease) {
            geckoRelease = geckoRelease[1].split('.');
            version = geckoRelease[0] * 10000 + ( geckoRelease[1] || 0 ) * 100 + ( geckoRelease[2] || 0 ) * 1;
        }
    }

    /**
     * @property { Number } chrome 检测当前浏览器是否为Chrome, 如果是，则返回Chrome的大版本号，如果浏览器不是chrome， 则该值为undefined
     *
     *      @example
     *      if (FR.Browser.r.chrome ) {
     *          console.log( '当前浏览器是Chrome' );
     *      }
     */
    if (/chrome\/(\d+\.\d)/i.test(agent)) {
        browser.chrome = +RegExp['\x241'];
    }

    /**
     * @property { Number } safari 检测当前浏览器是否为Safari, 如果是，则返回Safari的大版本号，如果浏览器不是safari， 则该值为undefined
     *
     *      @example
     *      if (FR.Browser.r.safari) {
     *          console.log( '当前浏览器是Safari' );
     *      }
     */
    if (/(\d+\.\d)?(?:\.\d)?\s+safari\/?(\d+\.\d+)?/i.test(agent) && !/chrome/i.test(agent)) {
        browser.safari = +(RegExp['\x241'] || RegExp['\x242']);
    }


    // Opera 9.50+
    if (browser.opera) {
        version = parseFloat(opera.version());
    }

    // WebKit 522+ (Safari 3+)
    if (browser.webkit) {
        version = parseFloat(agent.match(/ applewebkit\/(\d+)/)[1]);
    }

    /**
     * @property { Number } version 检测当前浏览器版本号
     * <ul>
     *     <li>IE系列返回值为5,6,7,8,9,10等</li>
     *     <li>gecko系列会返回10900，158900等</li>
     *     <li>webkit系列会返回其build号 (如 522等)</li>
     * </ul>
     *
     *      @example
     *      console.log( '当前浏览器版本号是： ' + FR.Browser.r.version );
     */
    browser.version = version;

    return browser;
}();

$.extend(FR, {
    Browser: {

        /**
         * 浏览器细节
         */
        r: browser,

        /**
         * 判断浏览器是否是IE6
         * @returns {Boolean} 浏览器是IE6则返回true，否则返回false
         */
        isIE6: function () {
            return browser.ie6Compat;
        },
        isIE7: function () {
            return browser.ie7Compat;
        },
        isIE8: function () {
            return this.getIEVersion() === 8.0;
        },
        isIE9: function () {
            return this.getIEVersion() === 9.0;
        },
        isIE10: function () {
            return this.getIEVersion() === 10.0;
        },
        isIE11: function () {
            return browser.ie && browser.version === 11.0;
        },
        isIE11Before: function () {
            return browser.ie && browser.version < 11.0;
        },
        isIE8Before: function () {
            return this.getIEVersion() < 9.0;
        },
        isIE6Before: function () {
            return this.getIEVersion() < 7.0;
        },
        isIE7Before: function () {
            return this.getIEVersion() < 8.0;
        },
        isIE9Later: function () {
            return browser.ie9above;
        },
        getIEVersion: function () {
            return browser.ie ? browser.version : undefined;
        },
        isIE: function () {
            return browser.ie;
        },
        isEdge: function () {
            return browser.edge;
        }

    }
});

(function () {
    /**
     * FR工具类
     * @class FR
     */
    $.extend(FR, {
        /**
         * 对指定的键值对对象做中日韩文编码处理
         *
         * @static
         * @param {Object} o 键值对对象
         * @return {Object} 经过了中日韩文编码处理的键值对
         */
        cjkEncodeDO: function (o) {
            if ($.isPlainObject(o)) {
                var result = {};
                $.each(o, function (k, v) {
                    if (!(typeof v == "string")) {
                        v = FR.jsonEncode(v);
                    }
                    //wei:bug 43338，如果key是中文，cjkencode后o的长度就加了1，ie9以下版本死循环，所以新建对象result。
                    k = FR.cjkEncode(k);
                    result[k] = FR.cjkEncode(v);
                });
                return result;
            }
            return o;
        },

        /**
         * 封装过的jQuery.ajax()函数，对data参数做了中日韩文编码处理
         *
         * @static
         * @param {Object} options ajax参数
         */
        ajax: function (options) {
            if (options) {
                options.data = FR.cjkEncodeDO(options.data);
            }

            $.ajax(options);
        },

        /**
         * 封装过的jQuery.get()函数，对data参数做了中日航文编码处理
         *
         * @static
         * @param url 异步请求的地址
         * @param data 异步请求的参数
         * @param callback 异步请求的回调函数
         * @param type 返回值的类型
         */
        get: function (url, data, callback, type) {
            // shift arguments if data argument was omitted
            if ($.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }

            if (data) {
                data = FR.cjkEncodeDO(data);
            }

            $.get(url, data, callback, type);
        },
        /**
         * 封装过的jQuery.post()函数，对data参数做了中日韩文编码处理
         *
         * @static
         * @param url 异步请求的地址
         * @param data 异步请求的参数
         * @param callback 异步请求的回调函数
         * @param type 返回值的类型
         */
        post: function (url, data, callback, type) {
            // shift arguments if data argument was omitted
            if ($.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }

            if (data) {
                data = FR.cjkEncodeDO(data);
            }

            $.post(url, data, callback, type);
        },

        /**
         * 封装过的jQuery.param()函数，其中的值做了中日韩文编码处理
         * @static
         * @param a  参数集合
         * @return 编码后的参数集合
         */
        param: function (a) {
            a = FR.cjkEncodeDO(a);

            return $.param(a);
        },

        /**
         * 对url做参数添加和编码处理
         * @static
         * @param url 原始地址
         * @param data  要添加的参数键值对对象
         * @return {String} 经过了编码处理和参数添加的地址
         */
        url: function (url, data) {
            if ($.isPlainObject(data)) {
                return url + "?" + FR.param(data);
            }

            return FR.cjkEncode(url);
        },

        /**
         * 生成一个当前服务器下使用的地址，可以开启和关闭缓存
         * @static
         * @param data  生成的url所使用的参数，键值对对象
         * @param nocache  true表示启用缓存，否则表示关闭缓存
         * @return {String} 结果地址
         */
        buildServletUrl: function (data, nocache) {
            if (nocache) {
                data = $.extend({_: ('' + new Date().getTime())}, data);
            }
            return FR.url(FR.servletURL, data);
        },

        /**
         * 生成一个获取内部资源的url
         * @static
         * 例如：name为/com/fr/web/jquery.js
         * 则生成一个指向jquery.js这个文件的地址
         * @param name 资源文件的名称
         * @return {String} 指向特性资源文件的
         */
        resource: function (name) {
            return FR.buildServletUrl({op: 'resource', resource: name});
        },

        /**
         * 对指定的函数执行异常检测
         * @static
         * @param fn  要执行的函数
         * @param context 函数执行上下文
         * @param args 参数
         * @return {*}
         */
        tc: function (fn, context, args) {
            try {
                return fn.apply(context, args);
            } catch (e) {
                FR.Msg.toast(e.toString());
                throw e;
            }
        },

        /**
         * 返回参数列表中第一个有效的参数（不为null，不为undefined）
         * @returns {*} 有效的参数
         */
        pick: function () {
            var arg, length = arguments.length;
            for (var i = 0; i < length; i++) {
                arg = arguments[i];
                if (typeof arg !== 'undefined' && arg !== null) {
                    return arg;
                }
            }
            return null;
        }
    });
})();

(function () {
    $.extend(FR, /**@class FR */{
        /**
         * 客户端计算公式
         * @static
         * @param {String} formula 要计算的公式
         * @param {Object} initValue 初始值
         * @param {Boolean} must  是否必须总是计算
         * @returns {Object} 计算后的值
         */
        formulaEvaluator: function (formula, initValue, must) {
            var lazyValue = initValue;
            return function (nocache) {
                //如果后台没有计算出公式结果initValue, 那再去remoteEval
                //这边之前写!lazyValue , 遇到lazyValue = 0时就会重复计算
                if (nocache || lazyValue == undefined || must) {
                    try {
                        if (FR.SessionMgr.getSessionID()) {// kunsnat: BI在sessionID为空时, 不需要此解析公式.
                            lazyValue = FR.remoteEvaluate(formula);
                        }
                    } catch (e) {
                        // 说明不需要到服务器端取数
                    }
                }

                return lazyValue;
            }
        },

        /**
         * @private
         * @static
         * @param {String} formula
         * @returns {String} 经过计算的公式的结果
         */
        remoteEvaluate: function (formula) {
            var result = null;

            //post只需要encode一次, get两次
            formula = encodeURIComponent(formula);

            FR.ajax({
                url: FR.servletURL,
                type: 'POST',
                async: false,
                data: {
                    op: 'fr_base',
                    cmd: 'evaluate_formula',
                    sessionID: FR.SessionMgr.getSessionID(),
                    expression: formula
                },
                timeout: 5000,
                complete: function (res, status) {
                    result = FR.jsonDecode(res.responseText);
                    result = result["result"];
                }
            });

            return result;
        }
    });
})();

(function ($) {
    var COL_IDS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    /**
     * FR的一些常用方法
     * @class FR
     */
    $.extend(FR, {

        /**
         * 取数据时一次取的数据量
         */
        limitData: 500,

        /**
         * @property {Object} 常量
         */
        constant: {
            /**
             * 成功
             */
            success: "success",
            /**
             * 失败
             */
            failure: "failure"
        },

        /**
         * 空函数
         * @static
         */
        emptyFn: function () {
        },

        /**
         * ie8对0开头的字串默认为8进制,需要加进制参数
         * @static
         * @param str 需要解析的字串
         * @returns {Number} 整数
         */
        parseINT: function (str) {
            return parseInt(str, 10);
        },


        /**
         * 判断一个对象是否可能是宽度或者高度
         * 例如：100， 'auto', '40px'都会被识别为高度或者宽度
         * @static
         * @param {Object} o 待判断的对象
         * @return {Boolean}  该对象可以表示高度或者宽度则返回true，否则返回false
         */
        isWidthOrHeight: function (o) {
            if (typeof o == 'number') {
                return o >= 0;
            } else if (typeof o == 'string') {
                return /^\d{1,3}%$/.exec(o) || o == 'auto' || /^\d+px$/.exec(o);
            }
        },

        /**
         * 将数字转换成以百分比的形式显示
         * @static
         * @param {Number} number  数字
         * @return {String}  百分比形式的值
         */
        number2Percentage: function (number) {
            return (~~(number * 100)) + "%";	// to integer
        },

        /**
         * 判断一个指定对象是否为一个数组对象
         * @deprecated
         * @static
         * @param {Object} a 指定对象
         * @return {Boolean}  该对象昂如果是数组对象则返回true，否则返回false
         */
        isArray: function (a) {
            return Object.prototype.toString.call(a) == '[object Array]' || a instanceof jQuery
        },

        /**
         * 给指定的jQuery对象添加样式
         *
         *      @example
         *      var $div = $("<div></div>").css({width:100, height:100}).appendTo("body");
         *      FR.applyStyles($div, "color:red; border:1px"); //$div的样式将会变成$nbsp;div style='color:red; border:1px'>;
         *      FR.applyStyles($div, {color:#4eff2，border:1px}）; //$div的样式将会变成<div style='color:#4eef2; border:1px'>;
         *
         * @static
         * @param {jQuery} $el jQuery对象
         * @param {String} styles 样式
         */
        applyStyles: function ($el, styles) {

            if ($el instanceof jQuery && styles) {
                if (typeof styles == "string") {
                    var re = /\s?([a-z\-]*)\:\s?([^;]*);?/gi;
                    var matches;
                    while ((matches = re.exec(styles)) != null) {
                        $el.css(matches[1], matches[2]);
                    }
                } else if (typeof styles == "object") {
                    $el.css(styles);
                } else if (typeof styles == "function") {
                    FR.applyStyles(dom, styles.call());
                }
            }
        },

        /**
         * 根据配置属性以及evt生成菜单
         * @static
         * @param {Object} o 菜单的配置属性
         * @param evt 用于计算菜单弹出位置的事件对象
         * @param evtPosition true表示根据evt的位置进行定位，false表示根据evt的target的位置进行定位
         */
        showMenuByEvent: function (o, evt, evtPosition) {
            if (evtPosition === true) {
                FR.showMenuByLocation(o, {
                    left: evt.clientX,
                    top: evt.clientY
                }, {
                    // 让鼠标位置在menu内,防止menu显示后不消失
                    left: -5,
                    top: -5
                });
            }
            // alex:如果根据evt.target的位置进行定位
            else if (evt.target) {
                FR.showMenuByEl(o, $(evt.target));
            } else {
                // james:IE中这里得到的evt不是mouseEvent,只是一个普通的Event，结果就没有target了
                FR.showMenuByLocation(o, {
                    left: evt.clientX,
                    top: evt.clientY + 10
                })
            }
        },

        /**
         * 判断是否是空数组
         * @static
         * @param {Array} array 数组
         * @returns {Boolean} 返回是否是空数组
         */
        isEmptyArray: function (array) {
            if ($.isArray(array)) {
                if (array.length === 0) {
                    return true;
                } else if (array.length === 1) {
                    return array[0] === "";
                }
            }
            return false;
        },

        /**
         * 代理执行指定的函数
         * @static
         * @param {Object} obj 原始对象
         * @param {Function} func 执行函数
         * @param {Object} param 函数执行的参数
         * @param {Object} defaultValue 默认值
         * @returns {Object} 函数执行后的值
         */
        applyFunc: function (obj, func, param, defaultValue) {
            if ((typeof func) == "function") {
                return func.apply(obj, param ? param : []);
            }
            return defaultValue;
        },

        /**
         * URLdecode时候+和%要特别处理
         * @static
         * @param {String} s 原始字符串
         * @return {String} 编码后的字符串
         */
        encodePrecentPlus: function (s) {
            if (typeof(s) == "string") {
                s = s.replace(/%/gi, "%25");
                s = s.replace(/\+/gi, "%2B");
            }
            else if (FR.isArray(s)) {
                for (var i = 0; i < s.length; i++) {
                    s[i] = FR.encodePrecentPlus(s[i]);
                }
            }
            return s;
        },

        /**
         * @private
         * @static
         */
        showMenuByEl: function (o, $el) {
            var menu;
            if ($el.fr_menu && $el.fr_menu.menu && (FR.equals($.extend({
                    xxxMMenu: true
                }, o), $el.fr_menu.opts) || $el.fr_menu.menu.close())) {
                menu = $el.fr_menu.menu;
            } else {
                o.$el = $el;
                menu = FR.createShortMenu(o);
                delete o.$el;
            }
            var modify = 1;
            if ($el.offset().top < menu.$menuRoot.height() + modify
                || $el.offset().top + $el.height() + modify
                + menu.$menuRoot.height() < document.body.clientHeight) {
                var offsetTop = $el.offset().top + $el.height() + modify
            } else {
                var offsetTop = $el.offset().top - menu.$menuRoot.height() - modify
            }
            o.xxxMMenu = true;
            menu.show();
            menu.position($el.offset().left, offsetTop);
            $el.fr_menu = {
                //防止点击多次生成，menu remove的时候会清除掉，想不到更好的写法。
                "menu": menu,
                "opts": o
            };
        },

        /**
         * @private
         * @static
         */
        showMenuByLocation: function (o, location, modify) {
            if (!modify) {
                modify = {
                    left: 0,
                    top: 0
                }
            }
            var menu = FR.createShortMenu(o);
            FR.showWithMenu(menu, location, modify);
        },

        /**
         * @private
         * @static
         */
        showWithMenu: function (menu, location, modify) {
            if (location.left < menu.$menuRoot.width() + modify.left
                || location.left + modify.left + menu.$menuRoot.width() < document.body.clientWidth) {
                var left = location.left + modify.left;
            } else {
                var left = location.left - menu.$menuRoot.width() - modify.left;
            }
            if (location.top < menu.$menuRoot.height() + modify.top
                || location.top + modify.top + menu.$menuRoot.height() < document.body.clientHeight) {
                var top = location.top + modify.top
            } else {
                var top = location.top - menu.$menuRoot.height() - modify.top
            }
            menu.show();
            //40565 ie里面, 如果鼠标在原点0,0, 快速移动鼠标, 会导致menu不消失, 往右下偏一点
            left = FR.Browser.isIE() ? left - 5 : left;
            top = FR.Browser.isIE() ? top - 5 : top;
            menu.position(left, top);
        },

        versionRemind: function (o) {
            var jo = FR.jsonDecode(o);
            if (jo.exception == "failpass") {
                var msg = FR.i18nText("FR_FS-FailPass_ImproveYourVersion");
                if (jo.func) {
                    msg = jo.func + ", " + msg;
                }
                FR.Msg.toast(msg);
                return false;
            }
            return true;
        },

        createShortMenu: function (o) {
            o = $.extend({
                minWidth: 80,
                destroyOnClose: true
            }, o);
            return new FR.frMenu(o);
        },

        /*
         * 超链,如果只有一个链接,直接链过去,如果有多个链接,要弹出菜单
         */
        doHyperlink: function () {
            function _doHyperlink(data) {
                // carl:这里不decode了吧,否则传的都是明码了
                new Function(unescape(data))();
            }

            /*
             * evt是事件,用来定位菜单弹出的位置
             * obj [{url, targetFrame, features}] 关于超链的配置属性
             */
            // carl:多加个evtPosition确定menu弹出策略
            return function (evt, obj, evtPosition) {
                if ($.isArray(obj)) {
                    switch (obj.length) {
                        case 0:
                            return;
                        // alex:如果是数组,且长度只有1,不需要以弹出menu的方式处理超链
                        case 1:
                            FR.doHyperlink(evt, obj[0]);
                            break;
                        // alex:如果是数组,且长度只有1,不需要以弹出menu的方式处理超链
                        default:
                            var _noMenuHyperlink = function (data) {
                                //目前只有图表块和报表块是需要直接联动
                                return data && (data.indexOf("changeParameter") >= 0 ||
                                    data.indexOf("_g().name_widgets[") >= 0);
                            }
                            // frank 图表关联时候不需要弹Menu,直接变化
                            var noMenuHyperlink = [];
                            var otherHyperlink = [];
                            for (var i = 0; i < obj.length; i++) {
                                var data = obj[i].data;
                                if (_noMenuHyperlink(data)) {
                                    noMenuHyperlink[noMenuHyperlink.length] = obj[i];
                                } else {
                                    otherHyperlink[otherHyperlink.length] = obj[i];
                                }
                            }

                            for (var i = 0; i < noMenuHyperlink.length; i++) {
                                try {
                                    _doHyperlink(noMenuHyperlink[i].data);
                                } catch (e) {
                                    FR.Msg.toast(e.message)
                                    //do nth 某一个出错的, 不影响其他的
                                }
                            }

                            switch (otherHyperlink.length) {
                                case 0:
                                    return;
                                case 1:
                                    FR.doHyperlink(evt, otherHyperlink[0]);
                                    break;
                                default:
                                    FR.showMenuByEvent({
                                        items: $.map(otherHyperlink, function (cfg) {
                                            return {
                                                src: cfg.name,
                                                handler: _doHyperlink.createCallback(cfg.data)
                                            }
                                        })
                                    }, evt, evtPosition || false);
                            }
                    }
                } else {
                    _doHyperlink(obj.data);
                }
            }
        }(),


        doHyperlinkByGet: function (url, para, target, feature) {
            if (arguments.length < 1) {
                return;
            }
            var options = arguments[0];
            if (typeof options === 'object') {
                url = options.url || '';
                para = options.para || {};
                target = options.target;
                feature = options.feature;
            }
            // alex:加一个当前时间参数,保证超链不从缓存中取
            para = $.extend({
                _: new Date().getTime()
            }, para);

            var pString = "";
            var paras = {};
            $.each(para, function (pName, pValue) {
                if (FR.isArray(pValue) && !FR.isEmptyArray(pValue) && FR.isArray(pValue[0])) {
                    pValue = pValue.join(";");
                }
                // kunsnat: 先cjdDeCode处理, 都是统一在java端做过cjkEncode处理
                var tmpName = FR.cjkDecode(pName);
                var tmpValue = FR.cjkDecode(pValue);
                paras[pName] = pValue;
                if (tmpName != "__LOCALE__" && tmpName != "REPORTLET" && tmpName != "OP") {
                    // neil:第一次encode是去掉特殊字符, 变成ascii字符串(STR_ENC1), 第二次encode是因为web容器得到后会去自动解一次,
                    // 容器req.getParameter自动解的这一次，不管是按 GBK 还是 UTF-8 还是 ISO-8859-1 都好，都能够正确的得到 [STR_ENC1],
                    // 如果只encode一次, 那么容器那边只能按照utf-8解, 否则乱码妥妥的, 然后java端再去URLDecoder.decode
                    //REPORT-2022 第二次encode挪到最外面进行(encodeURI(url)) 因为uri规范需要对大括号进行encode
                    pString += "&" + encodeURIComponent(tmpName) + "=" + encodeURIComponent(tmpValue);
                }
            });

            if (url.indexOf("?") == -1) {
                url += "?";
                pString = pString.substring(1);
            }
            var targetUrl = url + pString;
            if (this.shouldGet(target)) {//必须要走get方式的

                this.doHyperlinkActionByGet(targetUrl, target, feature, options.title);

            } else if (this.shouldPost(targetUrl, target)) {//参数超长能用post的走post
                //Sean: IE下Get方式的url最大限制为256字节，此时改用POST
                var submitForm = $("<form method='post' target='" + target + "' action='" + url + "'></form>").hide().appendTo($('body'));
                for (var i in paras) {
                    $("<input type=\"hidden\" name=\"" + i + "\" value=\"\"/>")
                        .attr("value", paras[i]).appendTo(submitForm);
                }
                if (target && target === "_dialog") {
                    this.showHyperlinkDialog(targetUrl, feature, target);
                }
                submitForm.submit();
            } else {//最后剩下来的再走get

                this.doHyperlinkActionByGet(targetUrl, target, feature, options.title);

            }

        },

        showHyperlinkDialog: function (url, feature, target) {
            //39363 ie7下iframe的滚动条只显示一半
            var isIEUnder8 = FR.Browser.isIE8Before();
            var iframeWidth = isIEUnder8 ? '99%' : '100%';
            var iframeHeight = isIEUnder8 ? '99%' : '100%';

            var iframeDialog = "<iframe src='' id =" + target + " name = "+ target+ " width=" + iframeWidth + " height= " +
                iframeHeight + " scrolling='no' frameborder='0'></iframe>";

            iframeDialog = $(iframeDialog).attr('src', url)[0];
            if (feature.split(',').length > 2) {
                var width = feature.split(',')[0];
                if (width.indexOf('=') != -1) {
                    width = width.substring(width.indexOf('=') + 1, width.length);
                }
                var height = feature.split(',')[1];
                if (height.indexOf('=') != -1) {
                    height = height.substring(height.indexOf('=') + 1, height.length);
                }
            }

            FR.showDialog(" ", parseInt(width) || 600, parseInt(height) || 400, iframeDialog);
        },

        //marro:这个方法和下面的 doHyperlinkByPost调用对象只是网络报表，所以用__parameter__=xxx来传递，这样我们处理的时候可以对数组参数
        //也进行处理
        doHyperlinkByGet4Reportlet: function (url, para, target, feature) {
            if (arguments.length < 1) {
                return;
            }
            var options = arguments[0];
            if (typeof options === 'object') {
                url = options.url || '';
                para = options.para || {};
                target = options.target;
                feature = options.feature;
            }
            para = $.extend({
                _: new Date().getTime()
            }, para);

            $.each(para, function (pName, pValue) {
                if (pName != "__LOCALE__" && pName != "REPORTLET" && pName != "OP" && !$.isPlainObject(pValue)) {
                    if (FR.isArray(pValue)) {
                        para[pName] = pValue;
                    } else {
                        para[pName] = encodeURIComponent(pValue);
                    }
                }
            });

            var pString = "__parameters__=" + FR.cjkEncode(FR.jsonEncode(para));

            url += url.indexOf("?") == -1 ? "?" : "&";

            this.doHyperlinkActionByGet(url + pString, target, feature, options.title);

        },

        doHyperlinkByPost: function (url, para, target, feature) {
            if (arguments.length < 1) {
                return;
            }
            var options = arguments[0];
            if (typeof options === 'object') {
                url = options.url || '';
                para = options.para || {};
                target = options.target;
                feature = options.feature;
            }
            para = para || {};
            $.each(para, function (pName, pValue) {
                if (pName != "__LOCALE__" && pName != "REPORTLET" && pName != "OP" && !$.isPlainObject(pValue)) {
                    if (FR.isArray(pValue)) {
                        para[pName] = pValue;
                    } else {
                        para[pName] = encodeURIComponent(pValue);
                    }
                }
            });
            if (this.$hyperlinkForm) {
                this.$hyperlinkForm.html("");
            } else {
                this.$hyperlinkForm = ($("<div>").appendTo($(document.body))).css({
                    "display": "none",
                    "position": "absolute"
                });
            }
            if (target == null) {
                target = "formresult";
            }
            para = FR.cjkEncode(FR.jsonEncode(para));
            // 这里注意写法$("<form></form>"),否则IE里面无法提交
            var submitForm = $("<form method='post' target='" + target + "' action='" + url + "'></form>").appendTo(this.$hyperlinkForm);
            var input = $("<input type=\"hidden\" name=\"__parameters__\" value=\"\"/>");
            input.attr("value", para);// kunsnat: 都是在java端先做的cjk处理, 所以这边只做json
            submitForm.append(input);
            if (this.shouldGet(target)) {
                this.doHyperlinkActionByGet(this.getTargetUrlByPost(url, para), target, feature, options.title);
                return;
            }
            if (target && target === "_dialog") {
                var targetUrl = encodeURI(url);//REPORT-2022 tomcat73加入了uri规范,整个uriencode一下
                this.showHyperlinkDialog(targetUrl, feature, target);
            }
            submitForm.submit();

        },
        doHyperlinkActionByGet: function (targetUrl, target, feature) {
            targetUrl = encodeURI(targetUrl);//REPORT-2022 tomcat73加入了uri规范,整个uriencode一下
            if (target && target === "_dialog") {
                this.showHyperlinkDialog(targetUrl, feature, target);
            } else {
                window.open(targetUrl, target);
            }
        },
        getTargetUrlByPost: function (url, para) {
            var pString = "__parameters__=" + para;
            url += url.indexOf("?") == -1 ? "?" : "&";
            return url + pString;
        },

        shouldPost: function (targetUrl, target) {
            if (target === undefined) {
                return false;
            }
            return !this.shouldGet() && targetUrl.length >= 2048 && FR.Browser.isIE();
        },
        shouldGet: function (target) {
            return false;
        },

        isEmpty: function (value) {
            // 判断是否为空值
            var result = value === "" || value === null || value === undefined;
            return result;
        },

        /**
         * 判断是否为{},undefined,null,'',""
         * @param obj
         * @returns {boolean}
         */
        isEmptyObj: function (obj) {
            return _.isEmpty(obj);
        },
        /*
         * 转成正则表达式的String
         * {abc}变成str = \{abc\},这样new Regex(str)就是匹配{abc}的正则表达式
         */
        toRE: function (str) {
            return str.replace(/\\/g, "\\\\")
                .replace(/\[/g, "\\[")
                .replace(/\]/g, "\\]")
                .replace(/\(/g, "\\(")
                .replace(/\)/g, "\\)")
                .replace(/\{/g, "\\{")
                .replace(/\}/g, "\\}")
                .replace(/\*/g, "\\*")
                .replace(/\|/g, "\\|")
                .replace(/\?/g, "\\?")
                .replace(/\$/g, "\\$")
                .replace(/\^/g, "\\^")
        },

        //执行html中的带的script代码
        //非常不严谨,目前只用于特定地方，有其他需求再完善
        _executeScriptFromHtml: function (html) {
            var html_script = html.substring(0, 500);
            var html_script_low = html_script.toLowerCase();
            var begin = html_script_low.indexOf("<" + "script>");
            if (begin < 0) {
                return;
            }
            var end = html_script_low.indexOf("</" + "script>");
            html_script = html_script.substring(begin + 8, end);
            try {
                eval(html_script);
            } catch (e) {

            }
        },

        extend: function () {
            return function (sb, sp, overrides) {
                if (typeof sp == 'object') {
                    overrides = sp;
                    sp = sb;
                    sb = function () {
                        sp.apply(this, arguments);
                    };
                }
                if (sp == null) {
                    console && console.log("empty");
                }
                var F = function () {
                }, spp = sp.prototype;
                F.prototype = spp;
                sb.prototype = new F();
                sb.superclass = spp;
                $.extend(sb.prototype, overrides);
                return sb;
            };
        }(),

        /*
         * 管理该html页面中所有的SessionID -> ReportPane
         */
        SessionMgr: function () {
            var sid, cp;

            /*
             * alex:unload的时候关掉session TODO 但上次没加async:false + unbind的时候导致了ie浏览器的死掉
             */
            $(window).unload(function () {
                $(window).unbind('unload', arguments.callee);
                // carl：打印预览的时候不需要close, bi也不需要关闭
                if (sid && cp && FR.servletURL && cp.rtype != 'preview' && cp.rtype != 'bi' && !cp.noClossSession) {
                    var closeSession = function (sid) {
                        FR.ajax({
                            async: false,
                            url: FR.servletURL,
                            data: {
                                op: 'closesessionid',
                                sessionID: sid
                            }
                        });
                    };
                    closeSession(sid);
                }
            });

            if (FR.shouldSendHeartBeat) {
                // alex:每30秒通知服务器端i am alive
                setInterval(function () {
                    if (sid && cp && FR.servletURL) {
                        FR.ajax({
                            url: FR.servletURL,
                            data: {
                                sessionID: sid,
                                _: new Date().getTime()
                            }
                        });
                    }
                }, 30000);
            }

            return {
                getSessionID: function () {
                    return sid;
                },
                getContentPane: function () {
                    return cp;
                },
                //wei : 兼容
                get: function () {
                    return cp;
                },
                register: function (id, s) {
                    sid = id;
                    cp = s;
                }
            }
        }(),

        CookieInfor: {
            getCookies: function () {
                var cookieString = document.cookie
                return unescape(cookieString).split(";");
            },

            addCookie: function (name, value, temp) {
                var newCookie = name + "=" + escape(value);
                //生存的天数
                var liveDays = temp ? temp : 30;
                var expires = new Date();
                expires.setDate(expires.getDate() + liveDays);
                newCookie += ";expires=" + expires.toGMTString();
                document.cookie = newCookie;
            },

            removeCookie: function (name) {
                var expires = new Date();
                expires.setTime(expires.getTime() - 1);
                document.cookie = name + '=' + ';expires=' + expires.toGMTString();
            },

            clearCookie: function () {
                var self = this;
                var $cookies = this.getCookies();
                $.each($cookies, function (i) {
                    var cookieName = $cookies[i].split('=')[0];
                    self.removeCookie(cookieName);
                });
            },

            getCookieByName: function (name) {
                var $cookies = this.getCookies();
                var re = new RegExp(name);
                var value = null;
                $.each($cookies, function (i) {
                    if ($cookies[i].match(re)) {
                        value = $cookies[i].split(name + '=')[1];
                        return false;
                    }
                });
                return value;
            }
        },

        /**
         * 返回对中日韩问做了特殊转换的字符串
         *
         * @static
         * @param text 需要做编码的字符串
         * @return {String} 编码后的字符串
         */
        cjkEncode: function (text) {
            // alex:如果非字符串,返回其本身(cjkEncode(234) 返回 ""是不对的)
            if (typeof text !== 'string') {
                return text;
            }

            var newText = "";
            for (var i = 0; i < text.length; i++) {
                var code = text.charCodeAt(i);
                if (code >= 128 || code === 91 || code === 93) {//91 is "[", 93 is "]".
                    newText += "[" + code.toString(16) + "]";
                } else {
                    newText += text.charAt(i);
                }
            }

            return newText
        },
        /**
         * 将cjkEncode处理过的字符串转化为原始字符串
         *
         * @static
         * @param text 需要做解码的字符串
         * @return {String} 解码后的字符串
         */
        cjkDecode: function (text) {
            if (text == null) {
                return "";
            }
            //查找没有 "[", 直接返回.  kunsnat:数字的时候, 不支持indexOf方法, 也是直接返回.
            if (!isNaN(text) || text.indexOf('[') == -1) {
                return text;
            }

            var newText = "";
            for (var i = 0; i < text.length; i++) {
                var ch = text.charAt(i);
                if (ch == '[') {
                    var rightIdx = text.indexOf(']', i + 1);
                    if (rightIdx > i + 1) {
                        var subText = text.substring(i + 1, rightIdx);
                        //james：主要是考虑[CDATA[]]这样的值的出现
                        if (subText.length > 0) {
                            ch = String.fromCharCode(eval("0x" + subText));
                        }

                        i = rightIdx;
                    }
                }

                newText += ch;
            }

            return newText;
        },

        //replace the space(&nbsp;) of html with " "
        //Only "&nbsp;" need to be decoded, because "&amp;", "&lt;", "&gt;", "&apos;" and "&quot;"
        //can be paresed correctly by the org.w3c.dom to the eaxctly values '&', "<", ">", "'", """
        htmlSpaceDecode: function (text) {
            return (text == null) ? '' : String(text).replace(/&nbsp;/, ' ');
        },
        //replace the html special tags
        htmlEncode: function (text) {
            return (text == null) ? '' : String(text).replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        },
        //html decode
        htmlDecode: function (text) {
            return (text == null) ? '' : String(text).replace(/&amp;/g, '&').replace(/&quot;/g, '\"').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&nbsp;/g, ' ');
        },
        //json encode
        jsonEncode: function (o) {
            //james:这个Encode是抄的EXT的
            var useHasOwn = {}.hasOwnProperty ? true : false;

            // crashes Safari in some instances
            //var validRE = /^("(\\.|[^"\\\n\r])*?"|[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t])+?$/;

            var m = {
                "\b": '\\b',
                "\t": '\\t',
                "\n": '\\n',
                "\f": '\\f',
                "\r": '\\r',
                '"': '\\"',
                "\\": '\\\\'
            };

            var encodeString = function (s) {
                if (/["\\\x00-\x1f]/.test(s)) {
                    return '"' + s.replace(/([\x00-\x1f\\"])/g, function (a, b) {
                            var c = m[b];
                            if (c) {
                                return c;
                            }
                            c = b.charCodeAt();
                            return "\\u00" +
                                Math.floor(c / 16).toString(16) +
                                (c % 16).toString(16);
                        }) + '"';
                }
                return '"' + s + '"';
            };

            var encodeArray = function (o) {
                var a = ["["], b, i, l = o.length, v;
                for (i = 0; i < l; i += 1) {
                    v = o[i];
                    switch (typeof v) {
                        case "undefined":
                        case "function":
                        case "unknown":
                            break;
                        default:
                            if (b) {
                                a.push(',');
                            }
                            a.push(v === null ? "null" : FR.jsonEncode(v));
                            b = true;
                    }
                }
                a.push("]");
                return a.join("");
            };

            if (typeof o == "undefined" || o === null) {
                return "null";
            } else if ($.isArray(o)) {
                return encodeArray(o);
            } else if (o instanceof Date) {
                /*
                 * alex:原来只是把年月日时分秒简单地拼成一个String,无法decode
                 * 现在这么处理就可以decode了,但是JS.jsonDecode和Java.JSONObject也要跟着改一下
                 */
                return FR.jsonEncode({
                    __time__: o.getTime()
                })
            } else if (typeof o == "string") {
                return encodeString(o);
            } else if (typeof o == "number") {
                return isFinite(o) ? String(o) : "null";
            } else if (typeof o == "boolean") {
                return String(o);
            } else if ($.isFunction(o)) {
                return String(o);
            } else {
                var a = ["{"], b, i, v;
                for (i in o) {
                    if (!useHasOwn || o.hasOwnProperty(i)) {
                        v = o[i];
                        switch (typeof v) {
                            case "undefined":
                            case "unknown":
                                break;
                            default:
                                if (b) {
                                    a.push(',');
                                }
                                a.push(FR.jsonEncode(i), ":",
                                    v === null ? "null" : FR.jsonEncode(v));
                                b = true;
                        }
                    }
                }
                a.push("}");
                return a.join("");
            }
        },
        /**
         * hiram 优化了一下，但仅为了找o.__time__还是多耗了点时间
         * richie:为了找__time__，需要把整个JSON树都遍历一遍，耗时不少，应该要想办法优化
         */
        jsonDecode: function (text) {

            try {
                // 注意0啊
                //var jo = $.parseJSON(text) || {};
                var jo = $.parseJSON(text);
                if (jo == null) {
                    jo = {};
                }
            } catch (e) {
                /*
                 * richie:浏览器只支持标准的JSON字符串转换，而jQuery会默认调用浏览器的window.JSON.parse()函数进行解析
                 * 比如：var str = "{'a':'b'}",这种形式的字符串转换为JSON就会抛异常
                 */
                try {
                    jo = new Function("return " + text)() || {};
                } catch (e) {
                    //do nothing
                }
                if (jo == null) {
                    jo = [];
                }
            }
            if (!FR._hasDateInJson(text)) {
                return jo;
            }
            return (function (o) {
                if (typeof o === "string") {
                    return o;
                }
                if (o && o.__time__ != null) {
                    return new Date(o.__time__);
                }
                for (var a in o) {
                    if (o[a] == o || typeof o[a] == 'object' || $.isFunction(o[a])) {
                        break;
                    }
                    o[a] = arguments.callee(o[a]);
                }

                return o;
            })(jo);
        },

        _hasDateInJson: function (json) {
            if (!json || typeof json !== "string") {
                return false;
            }
            return json.indexOf("__time__") != -1;
        },


        /**
         * 设置背景 尤其是ie兼容的处理
         * @param $dom
         * @param bg
         */
        setBackground: function ($dom, bg, height) {
            var type = bg["type"];
            // 4自适应背景  2拉伸
            if ((type === 4 || type === 2) && FR.Browser.isIE()) {
                // IE8杂项模式会出现里面的控件点不了的问题
                // 自适应要保持长宽比 下面的是拉伸 todo
                if (FR.ieForFixBackground()) {
                    var url = bg["url"];
                    var bgImage = $("<img src='" + url + "' id='para-bg'>");
                    bgImage.appendTo($dom);
                    setSize($dom);
                    $(window).resize(function () {
                        setSize($dom);
                    })
                    function setSize($dom) {
                        var $img = $('#para-bg', $dom);
                        setTimeout(function () {
                            if ($img.isVisible()) {
                                $img.attr('width', $dom.width());
                                // ie8计算工具栏的height总是不对 直接传过来了
                                //if (height) {
                                //    $img.attr('height', height);
                                //} else {
                                //    $img.attr('height', $dom.height());
                                //}
                                //zack:上述代码会导致bug67421的第二个问题，
                                // resize之后高度会变化但是上面的代码只会记住初始高度，这显然不对啊，
                                // 不过看上去注释代码传height是有原因的先写成||吧，有问题后续再看看
                                $img.attr('height', $dom.height() || height);

                            }
                        }, 20);
                    }
                } else {
                    $.each(['background-image', 'background-repeat', 'filter', "background", 'background-position'], function (idx, item) {
                        if (bg[item] != null) {
                            $dom.css(item, bg[item]);
                        }
                    });
                }
            } else {
                $.each(['background', 'background-size', 'background-image','background-position',
                    'background-repeat'], function (idx, item) {
                    if (bg[item] != null) {
                        $dom.css(item, bg[item]);
                    }
                });
            }
        },


        // 不能用filter花背景图的ie版本 ie7 和 ie8杂项
        //wikky:ie8标准也不能用
        // jim:ie6不支持filter的
        ieForFixBackground: function () {
//            return $.browser.version == '7.0' || ($.browser.version == '8.0' && !$.support.boxModel);
            return FR.Browser.isIE8Before()
        },

        //james：判断c是否包含在p中，p==c的时候，也表示包含
        contains: function (p, c) {
            return FR.isAncestor(p, c) ? true : ((!p || !c) ? false : p == c);
        },

        //james：判断p是不是c的祖先,p,c都是DOM对象
        isAncestor: function (p, c) {
            //p = $(p);
            //c = $(c);
            if (!p || !c) {
                return false;
            }

            if (p.contains && !(FR.Browser.r.safari || FR.Browser.r.chrome)) {
                try {
                    return p.contains(c);//james:IE中会报“no such interface supported”
                } catch (e) {
                    //do nothing
                }
            }
            if (p.compareDocumentPosition) {
                return !!(p.compareDocumentPosition(c) & 16);
            } else {
                var parent = c.parentNode;
                while (parent) {
                    if (parent == p) {
                        return true;
                    }
                    else if (!parent.tagName || parent.tagName.toUpperCase() == "HTML") {
                        return false;
                    }
                    parent = parent.parentNode;
                }
                return false;
            }
        },

        isNavKeyPress: function (event) {
            if (!event) {
                return false;
            }
            var safariKeys = {
                63234: 37, // left
                63235: 39, // right
                63232: 38, // up
                63233: 40, // down
                63276: 33, // page up
                63277: 34, // page down
                63272: 46, // delete
                63273: 36, // home
                63275: 35  // end
            };
            var k = event.keyCode;
            k = (FR.Browser.r.safari || FR.Browser.r.chrome) ? (safariKeys[k] || k) : k;
            return (k >= 33 && k <= 40) || k === 13 || k == FR.keyCode.TAB || k == FR.keyCode.ESCAPE;
        },

        isSpecialKey: function (e) {
            if (!e) {
                return false;
            }
            var k = e.keyCode;
            return (e.type == 'keypress' && e.ctrlKey) || k === 9 || k === 13 || k === 40 || k === 27 ||
                (k === 16) || (k === 17) ||
                (k >= 18 && k <= 20) ||
                (k >= 33 && k <= 35) ||
                (k >= 36 && k <= 39) ||
                k === 44 || (k === 13 || k === 229);//richer:中文输入法可以在数字编辑器中输入非数字的bug
        },

        equals: function (v1, v2) {
            if (FR.isNull(v1) || FR.isNull(v2)) {
                return v1 == undefined && v2 == undefined || v1 == null && v2 == null
            }
            if (v1 === v2) {
                return true;
            } else if (v1 instanceof Date && v2 instanceof Date) {
                return v1.getTime() === v2.getTime();
            } else if ($.isArray(v1)) {
                if (v1.length == v2.length) {
                    for (var i = 0; i < v1.length; i++) {
                        if (!FR.equals(v1[i], v2[i])) {
                            return false;
                        }
                    }
                } else {
                    return false;
                }
            } else if (typeof v1 == 'object') {
                var lv1 = 0, lv2 = 0;
                for (var i in v1) {
                    lv1++;
                }
                for (var i in v2) {
                    lv2++;
                }
                if (lv1 != lv2) {
                    return false;
                }
                for (var a in v1) {
                    if (!FR.equals(v1[a], v2[a])) {
                        return false;
                    }
                }
            } else {
                return v1 === v2
            }

            return true;
        },

        isNull: function (v) {
            return v == undefined || v == null
        },

        // 给文件名后面加一块,用于重名处理,没有扩展名的话直接加在后面
        lengthenFileName: function (name, s) {
            if (!name) {
                return;
            }
            if (name.lastIndexOf('.') == -1) {
                return name + s;
            }
            var leftName = name.substring(0, name.lastIndexOf('.'));
            var rightName = name.substring(name.lastIndexOf('.'), name.length);
            return leftName + s + rightName;
        },

        /**
         * 获取光标在文本框文本中的位置
         * @param input
         * @return {*}
         */
        getCursorPosition: function (input) {
            try {
                if (input.value == "") {
                    return 0;
                }
                var cursurPosition = -1;
                if (input.selectionStart) { //非IE
                    cursurPosition = input.selectionStart;
                } else {                   //IE
                    var rngSel = document.selection.createRange();//建立选择域
                    var rngTxt = input.createTextRange();//建立文本域
                    var flag = rngSel.getBookmark();//用选择域建立书签
                    rngTxt.collapse();//瓦解文本域到开始位,以便使标志位移动
                    rngTxt.moveToBookmark(flag);//使文本域移动到书签位
                    rngTxt.moveStart('character', -input.value.length);//获得文本域左侧文本
//                    cursurPosition = rngTxt.text.replace(/\r\n/g, '').length;//替换回车换行符
                    // ie和非ie的都把换行符算在内
                    cursurPosition = rngTxt.text.length;
                }
                return cursurPosition;
            }
            catch (e) {
                return input.value.length;
            }
        },

        /**
         * 设置光标位置
         * @param input
         * @param pos
         */
        setCursorPosition: function (input, pos) {
            if (input.setSelectionRange) {
                input.focus();
                input.setSelectionRange(pos, pos);
            } else if (input.createTextRange) {
                var lineChangeNum = input.value.length - input.value.replace(/\n/g, '').length;
                pos = pos - lineChangeNum + 1;
                var range = input.createTextRange();
                range.collapse(true);
                range.moveEnd('character', pos);
                range.moveStart('character', pos);
                range.select();
            }
        },

        /**
         * 将表示id的字符串转换成表示格子的字符串，如"A3-1-0"->"A3"
         * @param id
         * @return {String}
         */
        id2ColumnRowStr: function (id) {
            return id.replace(/([A-Z]+\d+)-\d+-\d+/, "$1");
        },

        /**
         * 将表示id的字符串转换成一个表示列和行的对象，如"A3-1-0"->{column, row}
         * @param id
         * @return {*}
         */
        id2ColumnRow: function (id) {
            return FR.cellStr2ColumnRow(FR.id2ColumnRowStr(id));
        },

        /**
         * 将表示id的字符串转换成一个表示页数、列和行的对象，如"A3-4-5"->{rptIdx, column, row}
         * @param id
         * @return {*}
         */
        id2Location: function (id) {
            var rt = FR.id2ColumnRow(id);
            var arr = id.split("-");
            rt.rptIdx = arr[1];
            return rt
        },

        /**
         * 将表示行列的字符串转换成表示列和行的对象，如"A3"->{column, row}
         * @param name
         * @return {*}
         */
        cellStr2ColumnRow: function (name) {
            name = $.trim(name.toUpperCase());
            if (!FR.isValidCellStr(name)) {
                return null;
            }
            var colStr = name.replace(/([A-Z]+)\d+/, "$1")
            var rowStr = name.replace(/[A-Z]+(\d+)/, "$1")
            var col = FR.letter2Digit(colStr) - 1;

            var row = parseInt(rowStr) - 1;
            return {
                col: col,
                row: row
            }
        },

        /**
         * 将表示列和行的对象转化成表示行列的字符串，如{column, row}->"A3"
         * @param cr
         * @return {*}
         */
        columnRow2CellStr: function (cr) {
            var col = parseInt(cr.col);
            var row = parseInt(cr.row);

            if (typeof col != "number" || typeof row != "number") {
                return "";
            }

            return FR.digit2Letter(col + 1) + (row + 1);
        },

        /**
         * 判断是否是合法的单元格字符串，如A1
         * @param str 被判断的字符串
         */
        isValidCellStr: function (str) {
            if (str.match(/^[A-Z]+\d+$/) == null) {
                return false;
            } else {
                return true;
            }
        },

        // "A"->1
        letter2Digit: function (abc) {
            var len = abc.length;
            var col = 0;
            for (var i = len - 1; i >= 0; i--) {
                var c = abc.charAt(i);
                col += (COL_IDS.indexOf(c) + 1) * Math.pow(26, len - 1 - i);
            }
            return col;
        },

        // 1->"A"
        digit2Letter: function (k) {
            var c, abcBuf = "";

            if (typeof k != 'number' || k === 0 || isNaN(k) || !isFinite(k)) {
                return abcBuf;
            }

            for (; k !== 0;) {
                c = k % 26;
                if (c === 0) {
                    c = 26;
                }
                abcBuf = COL_IDS.charAt(c - 1) + abcBuf;
                k = (k - c) / 26;
            }

            return abcBuf;
        },

        // 获取字符串的byte长度，英文占1，中文占2
        byteLength: function (str) {
            if (FR.isEmpty(str)) {
                return 0;
            }
            var byteLen = 0, len = str.length;
            for (var i = 0; i < len; i++) {
                byteLen += str.charCodeAt(i) > 255 ? 2 : 1;
            }
            return byteLen;
        },
        keyCode: {
            BACKSPACE: 8,
            COMMA: 188,
            DELETE: 46,
            DOWN: 40,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            HOME: 36,
            LEFT: 37,
            NUMPAD_ADD: 107,
            NUMPAD_DECIMAL: 110,
            NUMPAD_DIVIDE: 111,
            NUMPAD_ENTER: 108,
            NUMPAD_MULTIPLY: 106,
            NUMPAD_SUBTRACT: 109,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            RIGHT: 39,
            SPACE: 32,
            TAB: 9,
            UP: 38
        },

        location: function (callback) {
            callback.call(this, "fail", FR.i18nText("FR-Basic_Fail_Location"));
        },

        /**
         * 使用jquery的html()之前先将content进行去脚本处理
         * @param {ob} jquery对象。
         * @param {content} 渲染的内容。
         */
        html: function (ob, content) {
            function transferStr(str) {
                if (FR.isEmpty(str)) {
                    return str;
                }
                //typeof new String('abc') = object
                return String(str).replace(/&/g, "&amp;")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/ /g, "&nbsp;")
                    .replace(/\'/g, "&#39;")
                    .replace(/\"/g, "&quot;")
                    .replace(/\(/g, "&#40;")
                    .replace(/\)/g, "&#41;");
            }

            ob.html(transferStr(content));
            return ob;
        }

    });
})(jQuery);


(function ($) {

    var kv = {}; // alex:键(编辑器简称,如text)值(也是一个字符串,如FR.TextEditor)对
    $.shortcut = function (xtype, cls) {
        if (kv[xtype] != null) {
            throw ("shortcut:[" + xtype + "] has been registed");
        }
        kv[xtype] = cls;
        $.extend(cls.prototype, {
            xtype: xtype
        })
    };

    /**
     * 发送日志到后台
     */
    FR.Logger = {
        // 把错误信息发送到后台
        error : function(e) {
            var msg, stackTrace;
            if (e instanceof Error) {
                stackTrace = e.stack;
                msg = e.message;
            } else {
                stackTrace = '';
                msg = e.toString();
            }
            var data = {trace: stackTrace, message: msg};
            FR.ajax({
                url: FR.servletURL + "?op=js_log&cmd=log_js_error",
                type: 'POST',
                data: data
            });
        }
    };


    // 根据配置属性生成widget
    FR.createWidget = function (config, throwError) {
        // alex:如果是一个jquery对象,就在外面套一层,变成一个FR.Widget
        if (config instanceof $) {
            return new FR.Widget({
                renderEl: config
            });
        }
        if (config['classType']) {
            return new (new Function('return ' + config['classType'] + ';')())(config);
        }

        if (!config.type) {
            if (throwError !== true) {
                var msg = 'config type cannot be null.';
                FR.Logger.error(new Error(msg));
                return new FR.ErrorMarkWidget({
                    renderEl : config.renderEl,
                    message : msg,
                    width : config.width,
                    height : config.height
                });
            }
        }
        var xtype = config.type.toLowerCase();
        var cls = kv[xtype];
        try {
            return new cls(config);
        } catch (e) {
            FR.Logger.error(e);
            if (throwError === true) {
                throw e;
            } else {
                return new FR.ErrorMarkWidget({
                    renderEl: config.renderEl,
                    message: FR.i18nText('FR-Base_Widget_Error_Mark_Text') + ":" + config.type + ",message:" + e,
                    width: config.width,
                    height: config.height
                });
            }
        }
    };
    // 兼容$el.asComponent(config)的写法
    $.fn.extend({
        asComponent: function (config) {
            config = config || {};
            config.renderEl = $(this);
            return FR.createWidget(config);
        }
    })
})(jQuery);

// 简化FR.SessionMgr.getContentPane
if (window._g == null) {
    window._g = FR.SessionMgr.getContentPane;
}

/*
 * 加减乘除的精确计算的东西
 *
 * marks:为了精确计算
 */
$.extend(FR, {
    /*
     * 把2, 4, 7, 3-6, 8-9, 12转成int[]
     */
    string2ints: function (str) {
        var res_array = []
        var ints_str_array = str.split(",");
        for (var i = 0; i < ints_str_array.length; i++) {
            var ints_str = ints_str_array[i]; // 3-6 or 7
            var se = ints_str.split("-");
            var start = parseInt(se[0]), end = start
            if (se.length > 1) {
                end = parseInt(se[1])
            }

            for (var x = start; x <= end; x++) {
                res_array.push(x);
            }
        }

        return res_array
    }
});

//b:迁移至base下，暂时做为内置函数用来处理process
$.extend(FR, {
    activeBranches: function (branches, parameters, processid, taskName, serverURL, needClose) {
        if (processid && taskName) {
            var it = {
                "id": processid,
                "taskname": taskName
            }
        } else {
            var it = this.getProcessIDAndTaskName();
            if (!it.processid) {
                //wei : 说明任务已经关闭
                FR.Msg.toast(FR.i18nText('FR_FS-Task_Has_Been_Closed'));
                return;
            }
        }
        //wei : 支持不选分支，只选参数，这样就是不跳转只入库。所以branches未定义的时候不return
        if (!it) {
            return;
        }
        if (!$.isArray(branches)) {
            branches = [branches];
        }
        if (parameters != null && !$.isArray(parameters)) {
            parameters = [parameters];
        }
        var data = $.extend(it, {
            branches: branches
        });
        if (parameters) {
            $.each(parameters, function (idx, item) {
                if (item.value.toString().startWith('eval')) {
                    var evalValue = item.value.toString().substring(5, item.value.toString().length - 1);
                    item.value = eval(evalValue);
                }
            });
            data.parameters = parameters;
        }
        this.ajax({
            url: (serverURL ? serverURL : FR.servletURL) + '?op=process_exe&cmd=continue',
            data: data,
            type: 'post',
            complete: function (res, status) {
                if (res.responseText == 'close') {
                    FR.Msg.toast(FR.i18nText('FR_FS-Task_Has_Been_Closed'));
                    return;
                }
//				if (res.responseText != 'success') {
//					FR.Msg.toast('操作失败!');
//				}
                this.refreshUserTask(it);
            }.createDelegate(this)
        });
    },

    getProcessIDAndTaskName: function () {
        var o = {};
        this.ajax({
            url: FR.servletURL + '?op=process_exe',
            async: false,
            data: {
                sessionID: FR.SessionMgr.getSessionID(),
                cmd: 'values'
            },
            complete: function (res, status) {
                o = FR.jsonDecode(res.responseText);
            }
        });
        return o;
    },

    refreshUserTask: function (it) {
        var pa = window.parent;
        if (!pa || !pa.FS || !pa.FS.Process) {
            //wei : 不是在FS里访问的页面，直接刷新
            location.reload(true);
            return;
        }
        pa.FS.Process.refreshTask();
        var src = "?op=process_exe&cmd=seejob&taskname=" + it.taskname + "&processexecutorid=" + it.id
            + "&processid=" + it.processid;
        pa.FS.tabPane.addItem({
            'title': FR.i18nText('FR_FS-Handle_Affairs') + it.id,
            src: src
        });
    }
});

// 在pc端 重置js移动端特有方法
$.extend(FR, {
    logoutApp: function () {

    }
});

// 用全局变量保存浏览器尺寸,参数面板,工具栏高度
(function ($) {
    $(document).ready(function () {
        FR.windowHeight = $(window).height();
        FR.windowWidth = $(window).width();
        if (FR.windowHeight === 0 || FR.windowWidth === 0) {
            FR.windowHeight = document.body.clientHeight;
            FR.windowWidth = document.body.clientWidth;
        }
        $(window).resize(function () {
            if (FR.Browser.isIE()) {
                setTimeout(function () {
                    FR.windowHeight = $(window).height();
                    FR.windowWidth = $(window).width();
                    if (FR.windowHeight === 0 || FR.windowWidth === 0) {
                        FR.windowHeight = document.body.clientHeight;
                        FR.windowWidth = document.body.clientWidth;
                    }
                }, 0);
            }
            else {
                FR.windowHeight = $(window).height();
                FR.windowWidth = $(window).width();
            }
        });
        FR.parameterContainerHeight = 0;
        FR.toolbarHeight = 0;
    });
})($);
(function ($) {
    $.extend(FR, {
        /**
         * 报表中格式化处理方法
         * @param cv 值
         * @param fmt 格式
         * @returns {*} 返回处理结果
         */
        contentFormat: function(cv, fmt){
            if(FR.isEmpty(cv)){
                //原值为空，返回空字符
                return '';
            }
            var text = cv.toString();
            if(FR.isEmpty(fmt)){
                //格式为空，返回原字符
                return text;
            }
            if(fmt.match(/^T/)){
                //T - 文本格式
                return text;
            }else if(fmt.match(/^D/)){
                //D - 日期(时间)格式
                if(!(cv instanceof Date)){
                    if(typeof cv === 'number'){
                        //毫秒数类型
                        cv = new Date(cv);
                    }else{
                        //字符串类型转化为date类型
                        cv = new Date(Date.parse(""+cv.replace(/-|\./g, "/")));
                    }
                }
                if (!FR.isInvalidDate(cv)) {
                    var needTrim = fmt.match(/^DT/);
                    text = FR.date2Str(cv, fmt.substring(needTrim ? 2 : 1));
                }
            }else if(fmt.match(/E/)){
                //科学计数格式
                text = FR._eFormat(text, fmt);
            }else{
                //数字格式
                text = FR._numberFormat(text, fmt);
            }
            //¤ - 货币格式, 2016年6月3日¤前多加个\, 不然一些冷门的编码如big5不支持这个符号的, 就导致js出错了, 加个\或者引号引起来都是可以的.
            text = text.replace(/\¤/g, '￥');
            return text;
        },

        //'#.##'之类的格式处理 1.324e-18 这种的科学数字
        _dealNumberPrecision:function (text, fright) {
            if(/[eE]/.test(text)){
                var precision = 0, i = 0, ch;

                if(/[%‰]$/.test(fright)){
                    precision = /[%]$/.test(fright) ? 2 : 3;
                }

                for(var len = fright.length; i < len; i++) {
                    if((ch = fright.charAt(i)) == '0' || ch == '#'){
                        precision++;
                    }
                }
                return Number(text).toFixed(precision);
            }

            return text;
        },

        /**
         * 数字格式
         */
        _numberFormat: function(text, format){
            var text = text+'';

            //在调用数字格式的时候如果text里没有任何数字则不处理
            if(!(/[0-9]/.test(text)) || !format){
                return text;
            }

            //数字格式，区分正负数
            var numMod = format.indexOf(';');
            if (numMod > -1) {
                if (text >= 0) {
                    return FR._numberFormat(text + "", format.substring(0, numMod));
                } else {
                    return FR._numberFormat((-text) + "", format.substr(numMod + 1));
                }
            }else{
                //兼容格式处理负数的情况
                if(+text < 0 && format.charAt(0) !== '-'){
                    return FR._numberFormat((-text) + "", '-' + format);
                }
            }

            var fp = format.split('.'), fleft = fp[0] || '', fright = fp[1] || '';
            text = this._dealNumberPrecision(text, fright);
            var tp = text.split('.'), tleft = tp[0] || '', tright = tp[1] || '';

            //百分比,千分比的小数点移位处理
            //CHART-1055 百分号可以不在format结尾处
            if(/[%‰]/.test(format)){
                var paddingZero = /[%]/.test(format) ? '00' : '000';
                tright += paddingZero;
                tleft += tright.substr(0, paddingZero.length);
                tleft = tleft.charAt(0) === '-' ? tleft.replace(/^-0+/gi, '-') : tleft.replace(/^0+/gi, '');
                tright = tright.substr(paddingZero.length).replace(/0+$/gi, '');
            }
            var right = FR._dealWithRight(tright, fright);
            if(right.leftPlus){
                //小数点后有进位
                tleft = parseInt(tleft) + 1 + '';

                tleft = isNaN(tleft) ? '1' : tleft;
            }
            right = right.num;
            var left = FR._dealWithLeft(tleft, fleft);
            if(!(/[0-9]/.test(left))){
                left = left + '0';
            }
            if(!(/[0-9]/.test(right))){
                return left + right;
            }else{
                return left + '.' + right;
            }
        },

        /**
         * 科学计数格式
         */
        _eFormatOld: function(text, fmt){
            text = this.numberStringWithoutE(text);   //@CHART-1274
            var e = fmt.indexOf("E");
            var eleft = fmt.substr(0, e), eright = fmt.substr(e + 1);
            if (/^[0\.-]+$/.test(text)) {
                text = FR._numberFormat(0.0, eleft) + 'E' + FR._numberFormat(0, eright)
            } else {
                var isNegative = text < 0;
                if (isNegative) {
                    text = text.substr(1);
                }
                var elvl = (eleft.split('.')[0] || '').length;
                var point = text.indexOf(".");
                if (point < 0) {
                    point = text.length;
                }
                var i = 0; //第一个不为0的数的位置
                text = text.replace('.', '');
                for (var len = text.length; i < len; i++) {
                    var ech = text.charAt(i);
                    if (ech <= '9' && ech >= '1') {
                        break;
                    }
                }
                var right = point - i - elvl;
                var left = text.substr(i, elvl);
                var dis = i + elvl - text.length;
                if (dis > 0) {
                    //末位补全0
                    for (var k = 0; k < dis; k++) {
                        left += '0';
                    }
                } else {
                    left += '.' + text.substr(i + elvl);
                }
                left = left.replace(/^[0]+/, '');
                if (right < 0 && eright.indexOf('-') < 0) {
                    eright += ';-' + eright;
                }
                text = FR._numberFormat(left, eleft) + 'E' + FR._numberFormat(right, eright);
                if (isNegative) {
                    text = '-' + text;
                }
            }
            return text;
        },

        /**
         * CHART-1400
         * 使用数值计算的方式来获取任意数值的科学技术表示值。
         * 科学计数格式
         */
        _eFormat: function(text, fmt) {
            text = +text;

            return eFormat(text, fmt);
            /**
             * 科学计数格式具体计算过程
             * @param num
             * @param format {String}有两种形式，
             *      1、"0.00E00"这样的字符串表示正常的科学计数表示，只不过规定了数值精确到百分位，
             *         而数量级的绝对值如果是10以下的时候在前面补零。
             *      2、 "##0.0E0"这样的字符串则规定用科学计数法表示之后的数值的整数部分是三位，精确到十分位，
             *         数量级没有规定，因为没见过实数里有用科学计数法表示之后E的后面会小于一位的情况（0无所谓）。
             * @returns {*}
             */
            function eFormat(num, format) {
                var neg = num < 0 ? (num *= -1, "-") : "",
                    magnitudeNeg = "";

                var funcName = num > 0 && num < 1 ? "floor" : "ceil";  // -0.9999->-1
                // 数量级
                var magnitude = Math[funcName](Math.log(num) / Math.log(10));

                if (!isFinite(magnitude)) {
                    return format.replace(/#/ig, "").replace(/\.e/ig, 'E');
                }

                num = num / Math.pow(10, magnitude);

                // 让num转化成[1, 10)区间上的数
                if (num > 0 && num < 1) {
                    num *= 10;
                    magnitude -= 1;
                }

                // 计算出format中需要显示的整数部分的位数，然后更新这个数值，也更新数量级
                var integerLen = getInteger(magnitude, format);
                integerLen > 1 && (magnitude -= integerLen - 1, num *= Math.pow(10, integerLen - 1));

                magnitude < 0 && (magnitudeNeg = "-", magnitude *= -1);

                // 获取科学计数法精确到的位数
                var precision = getPrecision(format);
                // 判断num经过四舍五入之后是否有进位
                var isValueCarry = isValueCarried(num);

                num *= Math.pow(10, precision);
                num = Math.round(num);
                // 如果出现进位的情况，将num除以10
                isValueCarry && (num /= 10, magnitude += magnitudeNeg === '-' ? -1 : 1);
                num /= Math.pow(10, precision);

                // 小数部分保留precision位
                num = num.toFixed(precision);
                // 格式化指数的部分
                magnitude = formatExponential(format, magnitude, magnitudeNeg);

                return neg + num + "E" + magnitude;
            }

            // 获取format格式规定的数量级的形式
            function formatExponential(format, num, magnitudeNeg) {
                num += "";
                if (!/e/ig.test(format)) {
                    return num;
                }
                format = format.split(/e/ig)[1];

                while (num.length < format.length) {
                    num = "0" + num;
                }

                // 如果magnitudeNeg是一个"-"，而且num正好全是0，那么就别显示负号了
                var isAllZero = true;
                for (var i = 0, len = num.length; i < len; i++) {
                    if (!isAllZero) {
                        continue;
                    }
                    isAllZero = num.charAt(i) === "0";
                }
                magnitudeNeg = isAllZero ? "" : magnitudeNeg;

                return magnitudeNeg + num;
            }

            // 获取format规定的科学计数法精确到的位数
            function getPrecision(format) {
                if (!/e/ig.test(format)) {
                    return 0;
                }
                var arr = format.split(/e/ig)[0].split(".");

                return arr.length > 1 ? arr[1].length : 0;
            }

            // 获取数值科学计数法表示之后整数的位数
            // 这边我们还需要考虑#和0的问题
            function getInteger(magnitude, format) {
                if (!/e/ig.test(format)) {
                    return 0;
                }
                // return format.split(/e/ig)[0].split(".")[0].length;

                var formatLeft = format.split(/e/ig)[0].split(".")[0], i, f, len = formatLeft.length;
                var valueLeftLen = 0;

                for(i = 0; i < len; i++) {
                    f = formatLeft.charAt(i);
                    // "#"所在的位置到末尾长度小于等于值的整数部分长度，那么这个#才可以占位
                    if(f == 0 || (f == "#" && (len - i <= magnitude + 1))) {
                        valueLeftLen++;
                    }
                }

                return valueLeftLen;
            }

            // 判断num通过round函数之后是否有进位
            function isValueCarried(num) {
                var roundNum = Math.round(num);
                num = (num + "").split(".")[0];
                roundNum =(roundNum + "").split(".")[0];
                return num.length !== roundNum.length;
            }
        },

        /**
         * 处理小数点右边小数部分
         * @param tright 右边内容
         * @param fright 右边格式
         * @returns {JSON} 返回处理结果和整数部分是否需要进位
         * @private
         */
        _dealWithRight: function(tright, fright){
            var right = '', j = 0, i = 0;
            for(var len = fright.length ;i < len;i++) {
                var ch = fright.charAt(i);
                var c = tright.charAt(j);
                switch(ch) {
                    case '0':
                        if(FR.isEmpty(c)){
                            c = '0';
                        }
                        right += c;
                        j++;
                        break;
                    case '#':
                        right += c;
                        j ++;
                        break;
                    default :
                        right += ch;
                        break;
                }
            }
            var rll = tright.substr(j);
            var result = {};
            if(!FR.isEmpty(rll) && rll.charAt(0) > 4){
                //有多余字符，需要四舍五入
                result.leftPlus = true;
                var numReg = right.match(/^[0-9]+/);
                if(numReg){
                    var num = numReg[0];
                    var orilen = num.length;
                    var newnum = FR.parseINT(num) + 1 + '';
                    //进位到整数部分
                    if(newnum.length > orilen){
                        newnum = newnum.substr(1);
                    }else{
                        newnum = String.leftPad(newnum, orilen, '0');
                        result.leftPlus = false;
                    }
                    right = right.replace(/^[0-9]+/, newnum);
                }
            }
            result.num = right;
            return result;
        },

        /**
         * 处理小数点左边整数部分
         * @param tleft 左边内容
         * @param fleft 左边格式
         * @returns {string} 返回处理结果
         * @private
         */
        _dealWithLeft: function(tleft, fleft){
            var left = '';
            var j = tleft.length - 1;
            var combo = -1, last = -1;
            var i = fleft.length - 1;
            for(;i>=0;i--){
                var ch = fleft.charAt(i);
                var c = tleft.charAt(j);
                switch(ch){
                    case '0':
                        if(FR.isEmpty(c)){
                            c = '0';
                        }
                        last = -1;
                        left = c + left;
                        j--;
                        break;
                    case '#':
                        last = i;
                        left = c + left;
                        j--;
                        break;
                    case ',':
                        if(!FR.isEmpty(c)) {
                            //计算一个,分隔区间的长度
                            var com = fleft.match(/,[#0]+/);
                            if (com) {
                                combo = com[0].length - 1;
                            }
                            left = ',' + left;
                        }
                        break;
                    default :
                        left = ch + left;
                        break;
                }
            }
            if(last > -1){
                //处理剩余字符
                var tll = tleft.substr(0, j+1);
                left = left.substr(0, last) + tll + left.substr(last);
            }
            if(combo > 0){
                //处理,分隔区间
                var res = left.match(/[0-9]+,/);
                if(res){
                    res = res[0];
                    var newstr = '', n = res.length - 1 - combo;
                    for (; n >= 0; n = n - combo) {
                        newstr = res.substr(n, combo) + ',' + newstr;
                    }
                    var lres = res.substr(0,n+combo);
                    if(!FR.isEmpty(lres)){
                        newstr = lres + ',' + newstr;
                    }
                }
                left = left.replace(/[0-9]+,/, newstr);
            }
            return left;
        },

        object2Number: function (value) {
            if (value == null) {
                return 0;
            } if (typeof value == 'number') {
                return value;
            } else {
                var str = value + "";
                if (str.indexOf(".") === -1) {
                    return parseInt(str);
                } else {
                    return parseFloat(str);
                }
            }
        },

        object2Date: function(obj) {
            if (obj == null) {
                return new Date();
            } if (obj instanceof Date) {
                return obj;
            } else if (typeof obj == 'number') {
                return new Date(obj);
            } else {
                var str = obj + "";
                str = str.replace(/-/g, '/');
                var dt = new Date(str);
                if (!FR.isInvalidDate(dt)) {
                    return dt;
                }

                return new Date();
            }
        },

        object2Time: function(obj) {
            if (obj == null) {
                return new Date();
            } if (obj instanceof Date) {
                return obj;
            } else {
                var str = obj + "";
                str = str.replace(/-/g, '/');
                var dt = new Date(str);
                if (!FR.isInvalidDate(dt)) {
                    return dt;
                }
                if (str.indexOf('/') === -1 && str.indexOf(':') !== -1) {
                    dt = new Date("1970/01/01 " + str);
                    if (!FR.isInvalidDate(dt)) {
                        return dt;
                    }
                }
                dt = FR.str2Date(str, "HH:mm:ss");
                if (!FR.isInvalidDate(dt)) {
                    return dt;
                }
                return new Date();
            }
        },

        // 判断是否是无效的日期
        isInvalidDate: function (date) {
            return date == "Invalid Date" || date == "NaN";
        },

        /**
         * 将科学计数法的数字字符串转换为常规的数字字符串
         * @param string 科学计数法的数字字符串，如2.3e-10
         * @returns {XML|*|string|void} 转换后的数字字符串 如0.00000000023
         */
        numberStringWithoutE: function(string){
            if(isNaN(Number(string))){
                return string;
            }
            var data = Number(string).toString().split(/[eE]/);

            if(data.length === 1){ return data[0]; }

            var newString = "", sign = Number(string) < 0 ? "-" : "",
                leftString = data[0].replace(".", ""),
                power = Number(data[1]) + 1;

            if(power < 0){
                newString = sign + '0.';
                while(power++){
                    newString += "0";
                }
                return newString + leftString.replace(/^-/, '');
            }

            power -= leftString.length;
            while(power-- > 0){
                newString += "0";
            }
            return leftString + newString;
        }

    });
})(jQuery);
/**
 * 客户端观察者，主要处理事件的添加、删除、执行等
 * @class FR.OB
 * @abstract
 */
FR.OB = function (config) {
    this.options = $.extend(this._defaultConfig(), config);
    this._init();
    this._confirmEvents();
};
$.extend(FR.OB.prototype, {
    _defaultConfig: function () {
        return {};
    },
    _init: function () {
        var self = this;
        if (this.options.listeners != null) {
            $.each(this.options.listeners, function (i, lis) {
                (lis.target ? lis.target : self)[lis.once ? 'once' : 'on']
                    (lis.eventName, lis.action.createDelegate(self))
            })
            delete this.options.listeners;
        }
    },

    _confirmEvents: function () {
        this.fireEvent(FR.Events.AFTERINIT);
    },

    _getEvents: function () {
        if (!$.isArray(this.events)) {
            this.events = []
        }

        return this.events;
    },

    /**
     * 给观察者绑定一个事件
     * e.g. 给填报页面添加一个提交失败事件：contentPane.on(FR.Events.WF, function() {alert("填报失败！");});
     *      给文本框控件p1添加一个初始化后事件：p1.on(FR.Evnets.AFTERINIT, function() {alert("初始化完成！");});
     * @param {String} eventName 事件的名字
     * @param {Function} fn 事件对应的执行函数
     */
    on: function (eventName, fn) {
        eventName = eventName.toLowerCase();
        var fns = this._getEvents()[eventName];
        if (!$.isArray(fns)) {
            fns = [];
            this._getEvents()[eventName] = fns;
        }
        fns.push(fn);
    },

    /**
     * 给观察者绑定一个只执行一次的事件
     * @param {String} eventName 事件的名字
     * @param {Function} fn 事件对应的执行函数
     */
    once: function (eventName, fn) {
        var proxy = function () {
            fn.apply(this, arguments);
            this.un(eventName, proxy);
        };
        this.on(eventName, proxy);
    },
    /**
     * 解除观察者绑定的指定事件
     * @param {String} eventName 要解除绑定事件的名字
     * @param {Function} fn 事件对应的执行函数，该参数是可选的，没有该参数时，将解除绑定所有同名字的事件
     */
    un: function (eventName, fn) {
        eventName = eventName.toLowerCase();

        /*alex:如果fn是null,就是把eventName上面所有方法都un掉*/
        if (fn == null) {
            delete this._getEvents()[eventName];
        } else {
            var fns = this._getEvents()[eventName];
            if ($.isArray(fns)) {
                var newFns = [];
                $.each(fns, function (idx, ifn) {
                    if (ifn != fn) {
                        newFns.push(ifn);
                    }
                })
                this._getEvents()[eventName] = newFns;
            }
        }
    },
    /**
     * 清除观察者的所有事件绑定
     */
    purgeListeners: function () {
        /*alex:清空events*/
        this.events = [];
    },
    /**
     * 触发绑定过的事件
     *
     * @param {String} eventName 要触发的事件的名字
     * @returns {Boolean} 如果事件函数返回false，则返回false并中断其他同名事件的执行，否则执行所有的同名事件并返回true
     */
    fireEvent: function () {
        var eventName = arguments[0].toLowerCase();
        var fns = this._getEvents()[eventName];
        if ($.isArray(fns)) {
            var args = Array.prototype.slice.call(arguments, 1)
            for (var i = 0; i < fns.length; i++) {
                if (fns[i].apply(this, args) === false) {
                    return false;
                }
            }
        }
        return true;
    }
});
FR.OB.capture = function (o, fn, scope) {
    o.fireEvent = o.fireEvent.createInterceptor(fn, scope);
}
// alex:释放事件的捕捉
FR.OB.releaseCapture = function (o) {
    o.fireEvent = FR.OB.prototype.fireEvent;
}
// FR.OB end
FR.widget = {
    opts: {
        zIndex: 8000,
        num: 0
    }
};

/**
 * 这是一个抽象类，是所有控件的父类，不能直接使用，只能使用其具体的子类
 * @class FR.Widget
 * @extends FR.OB
 * @abstract
 *
 * @cfg {JSON} options 配置属性
 * @cfg {String} [options.widgetName=""] 控件名
 * @cfg {Object} options.value 控件值
 * @cfg {Number} options.width 控件宽度
 * @cfg {Number} options.height 控件高度
 * @cfg {Boolean} [options.disabled=false] 控件的可用性
 * @cfg {Boolean} [options.invisible=false] 控件的可见性
 *
 */
FR.Widget = FR.extend(FR.OB, {

    /**
     * 默认的配置
     * @private
     */
    _defaultConfig: function () {
        return $.extend(FR.Widget.superclass._defaultConfig.apply(this, arguments), {
            widgetName: "",
            disabled: false,
            invisible: false,
            usedAsEditor: false,
            resultWidgets : {}
        });
    },

    /**
     * 初始化方法
     * @private
     */
    _init: function () {
        FR.Widget.superclass._init.apply(this, arguments);
        this._initRoot();
        this._initElementSize();
        this._initVisualEffects();
        this._initNameEffects();
    },

    /**
     * 初始化根节点
     * @private
     */
    _initRoot : function(){
        /*alex:如果options里面有renderEl这个属性,就使用这个属性对应的jquery对象*/
        if (this.options.renderEl != null) {
            /**
             * @property {jQuery} element 控件的根节点元素
             */
            this.element = $(this.options.renderEl);
        } else {
            this.element = this._defaultRoot();
        }
        if (this.options.baseCls) {
            this.element.addClass(this.options.baseCls);
        }
    },

    /**
     * 初始计算高度宽度相关的尺寸
     * @private
     */
    _initElementSize : function() {
        var o = this.options;
        if (FR.isWidthOrHeight(o.width)) {
            this.element.css({
                width: o.width - FR.fixBoxModelWidth(this.element)
            });
        } else {
            if (o.width == 'auto') {
                this.element.width('auto');
            }else if(this.isStringTypeNumber(o.width)){
                this.element.width(parseInt(o.width));
            }
        }
        if (FR.isWidthOrHeight(o.height)) {
            this.element.css({
                height: o.height - FR.fixBoxModelHeight(this.element)
            });
        } else {
            if (o.height == 'auto') {
                this.element.height('auto');
            }else if(this.isStringTypeNumber(o.height)){
                this.element.height(parseInt(o.height));
            }
        }
        var self = this;
        this.element.bind(FR.Events.RESIZE, function (event, give) {
            self.doResize(give);
        });
    },

    /**
     * "24"这种形式的
     * @param o 宽度或者高度
     * @returns {boolean} 是否是"24"这种形式
     */
    isStringTypeNumber: function(o){
        return !isNaN(parseInt(o));
    },

    /**
     * 初始化视觉相关效果
     * @private
     */
    _initVisualEffects : function() {
        this[this.options.disabled ? 'disable' : 'enable']();
        if(this.options.invisible) {
            this.setVisible(false);
        }
    },

    /**
     * 初始化和名字相关的计算
     * @private
     */
    _initNameEffects : function() {
        var o = this.options;
        if (o.widgetName) {
            this.element.attr({
                widgetName: o.widgetName
            });
        }
        FR.widget.opts.num++;
        if (o.widgetName) {
            this._addWidget(o.widgetName, this);
        } else {
            this._addWidget("_widget_" + FR.widget.opts.num, this);
        }
    },

    /**
     * 添加此控件中所包含的空间，以名字/值做对应
     * @param {String} name 要添加的控件的名字
     * @param {FR.Widget} widget  要添加的控件
     * @private
     */
    _addWidget : function(name, widget) {
        this.options.resultWidgets[name] = widget;
    },

    /**
     * 获取控件名字
     * @return 控件名
     */
    getName : function() {
        return this.options.widgetName;
    },

    /**
     * 获取该控件中所添加的子控件
     * @param {String} name 要获取的子控件的名字
     * @returns {FR.Widget} 具有指定名字的控件
     */
    getWidgetByName : function(name) {
        return this.options.resultWidgets[name];
    },

    /**
     * 获取控件的显示值，所有表单控件都应该实现这个方法
     * @returns {String} 获取控件的显示的值
     */
    getText : function() {

    },

    /**
     * 设置控件的显示值
     * @param {String} text 要设置的显示值
     */
    setText : function(text) {

    },
    /**
     * 获取控件的实际值
     * @returns {Object} 获取控件的实际值
     */
    getValue: function () {

    },

    /**
     * 设置控件的值
     * @param {Object} value 要设置的实际值
     * @param {Boolean} shouldFireEvent 是否触发事件
     */
    setValue: function (value, shouldFireEvent) {

    },
    /**
     * 获取控件类型，
     */
    getType: function () {
        return this.options.type;
    },

    /**
     * 判断控件是否可用
     * @returns {Boolean} 返回true表示可用，返回false表示不可用
     */
    isEnabled: function () {
        return !this.options.disabled;
    },

    /**
     * 设置控件的可用性
     * @param {Boolean} enable 如果参数值为true则设置控件为可用，如果参数值为false则设置控件为不可用
     */
    setEnable: function (enable) {
        if (enable === true) {
            this.options.disabled = false;
            this.element.addClass('ui-state-enabled');
            this.element.removeClass('ui-state-disabled');
        } else if (enable === false) {
            this.options.disabled = true;
            this.element.addClass('ui-state-disabled');
            this.element.removeClass('ui-state-enabled');
        }

    },

    /**
     * 判断控件是否可见
     * @returns {Boolean} 可见则返回true，不可见则返回false
     */
    isVisible: function () {
        return !this.options.invisible;
    },

    /**
     * 设置控件的可见性
     * @param {Boolean} visible  如果参数值为true则设置控件为可见，如果参数值为false则设置控件为不可见
     */
    setVisible: function (visible) {
        this.resetVisible(visible);
        /*只有参数为true/false的时候才有反应,其他参数一律不作任何改变*/
        if (visible === true) {
            this.options.invisible = false;
            this.element.show();
        } else if (visible === false) {
            this.options.invisible = true;
            this.element.hide();
        }
    },

    /**
     * 控件重新加载
     */
    reload: function (){

    },

    resetVisible: function (visible) {
        var self = this,
            currentWidget = self.titleWidget ? self.titleWidget : self;
        var layout = currentWidget.options.layout;
        if(!layout){
            return;
        }
        if (currentWidget.isVisible() === visible) {
            return;
        }
        layout.setInnerWidgetVisible(self.getName(), currentWidget, visible);
    },

    /**
     * 设置控件的初始值，一般情况和setValue一样，在初始值为数据绑定的时候需要动态加载数据
     * @param source 初始值
     */
    setSource: function (source) {
        this.setValue(source);
    },

    /**
     * 控件能否在填报中用做编辑器
     * @returns {Boolean} 可以用做编辑器则返回true，比如FR.ComboBoxEditor;否则返回false
     */
    couldUsedAsEditor: function () {
        return this.options.usedAsEditor;
    },

    /**
     * 恢复控件到初始状态，一般用于重新取值
     */
    reset: function () {

    },

    /**
     * 重新设置控件的大小和位置
     * @param {Object} [give] 给定的尺寸和位置
     * @param {Number} give.width 给定的宽度
     * @param {Number} give.height 给定的高度
     * @param {Number} give.top 距离其父容器顶部的距离
     * @param {Number} give.left 距离其父容器左侧的距离
     */
    doResize: function (give) {
        var opts = this.options;
        var cc = this.element;
        if (give) {
            if (give.width) {
                opts.width = give.width;
            }
            if (give.height) {
                opts.height = give.height;
            }
            if (give.left != null) {
                opts.left = give.left;
            }
            if (give.top != null) {
                opts.top = give.top;
            }
        } else if (opts.fit === true) {
            var p = cc.parent();
            var p_width = p.width();
            var p_height = p.height();
            opts.width = p_width;
            opts.height = p_height;
        }
        this.element.width(opts.width);
        this.element.height(opts.height);
    },

    /**
     * 销毁整个控件的dom结构
     */
    destroy: function () {
        this.element.each(function () {
            $(this).remove();
            if (FR.Browser.isIE()) {
                this.outerHTML = '';
            }
        });
    },

    /**
     * @returns {jQuery} 返回控件DOM的根节点标签
     * @private
     */
    _defaultRoot: function () {
        return $("<div/>");
    },

    /**
     * @deprecated
     * {@link #setEnable}
     */
    disable: function () {
        this.setEnable(false);
    },
    /**
     * @deprecated
     * {@link #setEnable}
     */
    enable: function () {
        this.setEnable(true);
    },
    /**
     * @deprecated
     * {@link #setVisible}
     */
    invisible: function () {
        this.setVisible(false);
    },
    /**
     * @deprecated
     * {@link #setVisible}
     */
    visible: function () {
        this.setVisible(true);
    }
});

/**
 * 用于展示控件出错的信息
 */
FR.ErrorMarkWidget = FR.extend(FR.Widget, {
    _defaultConfig: function () {
        return $.extend(FR.ErrorMarkWidget.superclass._defaultConfig.apply(), {
            width: 120,
            height: 24
        });
    },

    _init: function () {
        FR.ErrorMarkWidget.superclass._init.apply(this, arguments);
        var opts = this.options;
        this.element.text(opts.message || '');
        this.element.css({
            textAlign : 'center',
            width : opts.width,
            height : opts.height,
            lineHeight : opts.height + 'px'
        });

    },
    doResize: function (give) {
        FR.ErrorMarkWidget.superclass.doResize.call(this, give);
        this.element.css({
            width : give.width,
            height : give.height,
            lineHeight : give.height + 'px'
        });
    }
});
(function ($) {
    /**
     * 自定义用于消息传递的模态对话框类，用于替代浏览器原生的比较丑的alert,prompt,confirm
     *
     *      @example
     *      var showToast = function() {
     *          FR.Msg.toast("Hello");
     *      };
     *      var showConfirm = function() {
     *          FR.Msg.confirm("Confirm", "Content", showToast);
     *      };
     *      var showPrompt = function() {
     *          FR.Msg.prompt("Prompt", "Message", "Value", showConfirm);
     *      };
     *      var showAlert = function() {
     *          FR.Msg.alert("Alert", "Content", showPrompt);
     *      };
     *      $("<button>Click To Test</button>").appendTo("body").on("click", showAlert);
     *
     * @class FR.Msg
     */
    $.extend(FR, {

        Msg: function () {
            return {

                verticalOffset: 0.77,                // vertical offset of the dialog from center screen
                horizontalOffset: 1,                // horizontal offset of the dialog from center screen\
                repositionOnResize: true,           // re-centers the dialog on window resize
                overlayOpacity: .01,                // transparency level of overlay
                overlayColor: '#FFF',               // base color of overlay
                draggable: true,                    // make the dialogs draggable (requires UI Draggables plugin)
                okButton: FR.i18nText("FR-Basic_OK"),         // text for the OK button
                cancelButton: FR.i18nText("FR-Basic_Cancel"), // text for the Cancel button
                dialogClass: null,                  // if specified, this class will be applied to all dialogs
                style: null,                          //message样式，默认为blue，具有blue,green共2种样式
                textSpace: FR.i18nText("FR-Widget_Message_Letter_Space") + "px",


                msgStyle: function () {
                    var style = this.style;
                    var defaultStyle = "blue";
                    $.each(["green", "blue"], function (i, item) {
                        if (style && item == style.toLowerCase()) {
                            defaultStyle = style.toLowerCase();
                        }
                    });
                    this.style = defaultStyle;
                },

                /**
                 * 弹出消息的提示对话框
                 * @static
                 * @param title 对话框的标题
                 * @param message 对话框显示的消息
                 * @param maxHeight 对话框最大高度
                 * @param callback 对话框显示以后的回调函数。如果该参数是数字类型，则表明该对话框在指定的时间（单位：毫秒）后自动关闭
                 */
                alert: function (title, message, callback, maxHeight) {
                    FR.Keys.enable(false);
                    if (!title) {
                        title = 'Alert';
                    }
                    this._show(title, message, null, 'alert', function (result) {
                        FR.Keys.enable(true);
                        if ($.isFunction(callback)) {
                            callback(result);
                        }
                    }, -1, maxHeight);
                    if (typeof callback == "number" && callback > 0) {
                        setTimeout(function () {
                            FR.Msg._hide();
                        }, callback);
                    }
                },

                /**
                 * 弹出的确认对话框
                 * @static
                 * @param title  确认对话框的标题
                 * @param message  确认对话框的显示消息
                 * @param callback  点击确认后的回调函数
                 * @param min_width  确认对话框的最小宽度
                 */
                confirm: function (title, message, callback, min_width) {
                    FR.Keys.enable(false);
                    if (!title) {
                        title = 'Confirm';
                    }
                    this._show(title, message, null, 'confirm', function (result) {
                        FR.Keys.enable(true);
                        if (callback) {
                            callback(result);
                        }
                    }, min_width ? min_width : -1);
                },

                /**
                 * 弹出的输入对话框
                 * @static
                 * @param title  输入对话框的标题
                 * @param message  输入对话框的显示消息
                 * @param value   输入对话框的默认值
                 * @param callback 点击确认输入后的回调函数
                 * @param min_width  输入对话框的最小宽度
                 */
                prompt: function (title, message, value, callback, min_width) {
                    FR.Keys.enable(false);
                    if (!title) {
                        title = 'Prompt';
                    }
                    this._show(title, message, value, 'prompt', function (result) {
                        FR.Keys.enable(true);
                        if (callback) {
                            callback(result);
                        }
                    }, min_width ? min_width : -1);
                },

                /**
                 * 出现与页面左边并在5秒后消失的一个消失提示页
                 * @static
                 * @param message 要显示的消息
                 */
                toast: function (message) {
                    var toright = -300;
                    if (FR.Browser.isIE7Before()) {
                        toright = -370;
                    }
                    var $dv = $('body').children('div.toast');
                    if ($dv.length === 0) {
                        var top = 60;
                        // carl:ie6不支持fixed, 改用absolute及下面方法模拟
                        if (FR.Browser.isIE6()) {
                            top += $('body')[0].scrollTop;
                        }
                        $dv = $("<div/>").addClass('toast').css({
                            right: toright,
                            top: top,
                            'z-Index': FR.widget.opts.zIndex++
                        }).appendTo("body");

                    }
                    $dv.text(message);

                    var $showbutton = $('body').children('div.toastIcon');
                    if ($showbutton.length === 0) {
                        $showbutton = $("<div/>").addClass('toastIcon').css({
                            right: 0,
                            top: $dv.css('top'),
                            'z-index': $dv.css('z-index') + 1
                        }).appendTo("body");
                        new FR.IconButton({
                            width: $showbutton.css('width'),
                            height: $showbutton.css('height'),
                            imgsrc: 'fr_show_toast',
                            renderEl: $('<div/>').appendTo($showbutton),
                            handler: function () {
                                $dv.animate({
                                    right: -4
                                }, "slow");
                                setTimeout(function () {
                                    $dv.animate({
                                        right: toright
                                    }, "slow");
                                }, 5000);
                            }
                        });
                    }
                    $showbutton.hide();

                    $dv.animate({
                        right: -15
                    }, "slow");


                    (function () {
                        $dv.animate({
                            right: toright
                        }, "slow", function () {
                            $showbutton.show();
                            $showbutton.fadeOut(5000);
                        });
                    }).defer(5000);
                },

                // Private methods

                _show: function (title, msg, value, type, callback, min_width, max_height) {
                    this.msgStyle();
                    this._hide();
                    this._overlay('show');

                    $("BODY").append(
                        '<div id="popup_container">' +
                        '<div id="popup_header" >' +
                        '<h1 id="popup_title"></h1></div>' +
                        '<div id="popup_content">' +
                        '<div id="popup_message"></div>' +
                        '</div>' +
                        '</div>');

                    if (this.dialogClass) {
                        $("#popup_container").addClass(this.dialogClass);
                    }

                    var pos = FR.Browser.isIE() ? 'absolute' : 'fixed';

                    $("#popup_container").css({
                        position: pos,
                        zIndex: 99999,
                        padding: 0,
                        margin: 0,
                        top: 0,
                        left: 0
                    });

                    $("#popup_title").html(title);
                    $("#popup_content").addClass(type);
                    if (_.isArray(msg)) {
                        $.each(msg, function (index, item) {
                            var oneLevelMsg = item.oneLevel.replace(/\n/g, '<br />');
                            var twoLevelMsg = item.twoLevel.replace(/\n/g, '<br />');
                            $('<span class="popup_level_one">').html(oneLevelMsg).appendTo($("#popup_message"));
                            $('<span class="popup_level_two">').html(twoLevelMsg).appendTo($("#popup_message"));
                            $('</br>').appendTo($("#popup_message"));
                        });
                    } else {
                        $("#popup_message").html(msg.replace(/\n/g, '<br />'));
                    }

                    var minw = $("#popup_container").outerWidth();
                    var maxw = $("#popup_container").outerWidth();
                    $("#popup_container").css({
                        minWidth: min_width > 0 ? Math.max(minw, min_width) : minw,
                        maxWidth: min_width > 0 ? Math.max(maxw, min_width) : maxw
                    });
                    $("<div id = 'popup_close' class = 'close_mouseout' style='position: absolute;top: 0;right: 7px;width: 25px;height: 30px'>").appendTo("#popup_header")
                        .bind("mouseover", function () {
                            $("#popup_close").removeClass('close_mouseout');
                            $("#popup_close").addClass('close_mouseover');
                        })
                        .bind("mouseout", function () {
                            $("#popup_close").removeClass('close_mouseover');
                            $("#popup_close").removeClass('close_click');
                            $("#popup_close").addClass('close_mouseout');
                        })
                        .bind("mousedown", function () {
                            $("#popup_close").removeClass('close_mouseover');
                            $("#popup_close").addClass('close_click');
                        })
                        .bind("click", function () {
                            FR.Msg._hide();
                            if (callback) {
                                callback(null);
                            }
                        });

                    msg = min_width == -1 ? msg : msg.replace(/([\u4E00-\u9FA5\uf900-\ufa2d])/g, 'aa');
                    var msgLength = msg && !_.isArray(msg) ? FR.byteLength(msg) : 0;
                    switch (type) {
                        case 'alert':
                            $("#popup_container").css({
                                minWidth: "400px",
                                maxWidth: "400px",
                                width: "400px"
                            });
                            var msHeight = $("#popup_message").height();
                            $("#popup_message").css({
                                width: "380px",
                                wordBreak: "break-all",
                                fontSize: "14px",
                                fontWeight: "bold",
                                overflowY: 'auto',
                                maxHeight: max_height || msHeight
                            });
                            var ctHeight = msHeight + 87;
                            ctHeight = ctHeight > 150 ? ctHeight : 150;
                            $("#popup_container").css({
                                height: ctHeight
                            });
                            $("#popup_header").css({
                                width: "400px"
                            });
                            $("#popup_content").css({
                                top: "40px",
                                left: "10px",
                                background: "none",
                                padding: "0px",
                                fontSize: "14px",
                                textAlign: "left"
                            });

                            var ok_btn = new FR.createWidget({
                                type: "quickbutton",
                                style: this.style,
                                text: FR.i18nText("FR-Basic_OK"),
                                width: 65,
                                height: 28,
                                handler: function () {
                                    FR.Msg._hide();
                                    callback(true);
                                }
                            });

                            var $ok_button = ok_btn.element.appendTo("#popup_container").css({
                                position: 'absolute',
                                right: "20px",
                                bottom: "8px",
                                letterSpacing: FR.Msg.textSpace,
                                textIndent: FR.Browser.isIE7Before() ? 0 : FR.Msg.textSpace
                            });

                            $ok_button.focus();
                            $ok_button.keydown(function (e) {
                                if (e.keyCode === 13 || e.keyCode === 27) {
                                    $ok_button.trigger('click');
                                }
                            });
                            break;
                        case 'confirm':
                            if (msg) {
                                if (msgLength < 7) {
                                    $("#popup_container").css({
                                        minWidth: "233px",
                                        maxWidth: "233px",
                                        width: "233px",
                                        height: "149px"
                                    });
                                    $("#popup_content").css({
                                        left: "32px",
                                        width: "100px"
                                    });
                                    $("#popup_header").css({
                                        width: "233px"
                                    });
                                    $("#popup_message").css({
                                        width: "100px"
                                    });
                                } else if (msgLength > 6 && msgLength < 11) {
                                    $("#popup_container").css({
                                        minWidth: "233px",
                                        maxWidth: "233px",
                                        width: "233px",
                                        height: "149px"
                                    });
                                    $("#popup_content").css({
                                        left: "33px",
                                        width: "98px",
                                        backgroundPosition: "23px 31px"
                                    });
                                    $("#popup_header").css({
                                        width: "233px"
                                    });
                                    $("#popup_message").css({
                                        width: "98px"
                                    });
                                } else {
                                    var wd = msgLength * 17 / 2 + 16;
                                    min_width = min_width > 233 ? min_width : 233;
                                    var cwd = (wd + 100) > min_width ? wd + 100 : min_width;
                                    $("#popup_container").css({
                                        minWidth: cwd + "px",
                                        maxWidth: cwd + "px",
                                        width: cwd + "px",
                                        height: "169px"
                                    });
                                    $("#popup_content").css({
                                        left: "15.5px",
                                        width: wd + "px",
                                        backgroundPosition: "23px 31px"
                                    });
                                    $("#popup_header").css({
                                        width: cwd + "px"
                                    });
                                    $("#popup_message").css({
                                        width: wd + "px"
                                    });
                                }
                            } else {
                                $("#popup_container").css({
                                    minWidth: "233px",
                                    maxWidth: "233px",
                                    width: "233px",
                                    height: "149px"
                                });
                                $("#popup_header").css({
                                    width: "233px"
                                });
                                $("#popup_content").css({
                                    left: "46px",
                                    top: "45px"
                                });
                            }

                            var containerwd = document.getElementById("popup_container").offsetWidth;
                            var lf = (containerwd - 140) / 2 - 1;
                            var ok_btn = new FR.createWidget({
                                type: "quickbutton",
                                style: this.style,
                                text: FR.i18nText("FR-Basic_OK"),
                                width: 65,
                                height: 28,
                                handler: function () {
                                    FR.Msg._hide();
                                    callback(true);
                                }
                            });
                            var $ok_button = ok_btn.element.appendTo("#popup_container").css({
                                position: 'absolute',
                                left: lf + "px",
                                bottom: "8px",
                                letterSpacing: FR.Msg.textSpace,
                                textIndent: FR.Browser.isIE7Before() ? 0 : FR.Msg.textSpace
                            });

                            var cancel_btn = new FR.createWidget({
                                type: "quickbutton",
                                style: "gray",
                                text: FR.i18nText("FR-Basic_Cancel"),
                                width: 65,
                                height: 28,
                                handler: function () {
                                    FR.Msg._hide();
                                    callback(false);
                                }
                            });
                            var $cancel_button = cancel_btn.element.appendTo("#popup_container").css({
                                position: 'absolute',
                                right: lf + "px",
                                bottom: "8px",
                                letterSpacing: FR.Msg.textSpace,
                                textIndent: FR.Browser.isIE7Before() ? 0 : FR.Msg.textSpace
                            });

                            break;
                        case 'prompt':
                            $("#popup_content").append('<input type="text" size="21" id="popup_prompt" >');
                            if (msg) {
                                min_width = min_width > 233 ? min_width : 233;
                                var wd = ( msgLength * 14 + 15) > min_width - 100 ? (msgLength * 14 + 15) : min_width - 100;
                                var cwd = wd + 100;
                                $("#popup_container").css({
                                    minWidth: cwd,
                                    maxWidth: cwd,
                                    width: cwd
                                });
                                $("#popup_header").css({
                                    width: cwd
                                });
                                $("#popup_content").css({
                                    left: "50px",
                                    top: "45px",
                                    width: wd,
                                    height: '59px',
                                    padding: "0"
                                });
                                $("#popup_message").css({
                                    fontSize: "14px",
                                    width: wd,
                                    textAlign: "left"
                                });
                            } else {
                                $("#popup_container").css({
                                    minWidth: "233px",
                                    maxWidth: "233px",
                                    width: "233px"
                                });
                                $("#popup_header").css({
                                    width: "233px"
                                });
                                $("#popup_content").css({
                                    left: "50px",
                                    top: "52px",
                                    width: "130px",
                                    height: "59px",
                                    padding: "0"
                                });
                                $("#popup_message").css({
                                    width: "130px"
                                });
                            }

                            var containerwd = document.getElementById("popup_container").offsetWidth;
                            var lf = (containerwd - 140) / 2 - 1;
                            var ok_btn = new FR.createWidget({
                                type: "quickbutton",
                                style: this.style,
                                text: FR.i18nText("FR-Basic_OK"),
                                width: 65,
                                height: 28,
                                handler: function () {
                                    var val = $("#popup_prompt").val();
                                    FR.Msg._hide();
                                    if (callback) {
                                        callback(val);
                                    }
                                }
                            });
                            var $ok_button = ok_btn.element.appendTo("#popup_container").css({
                                position: 'absolute',
                                left: lf + "px",
                                bottom: "8px",
                                letterSpacing: FR.Msg.textSpace,
                                textIndent: FR.Browser.isIE7Before() ? 0 : FR.Msg.textSpace
                            });

                            var cancel_btn = new FR.createWidget({
                                type: "quickbutton",
                                style: "gray",
                                text: FR.i18nText("FR-Basic_Cancel"),
                                width: 65,
                                height: 28,
                                handler: function () {
                                    FR.Msg._hide();
                                    if (callback) {
                                        callback(null);
                                    }
                                }
                            });
                            var $cancel_button = cancel_btn.element.appendTo("#popup_container").css({
                                position: 'absolute',
                                right: lf + "px",
                                bottom: "8px",
                                letterSpacing: FR.Msg.textSpace,
                                textIndent: FR.Browser.isIE7Before() ? 0 : FR.Msg.textSpace
                            });

                            $("#popup_prompt").width($("#popup_message").width());
                            if (value) {
                                $("#popup_prompt").val(value);
                            }
                            $("#popup_prompt").focus().select();
                            break;
                    }

                    this._reposition();
                    this._maintainPosition(true);

                    // Make draggable
                    if (this.draggable) {
                        try {
                            $("#popup_container").draggable({
                                handle: $("#popup_title"),
                                onStopDrag: function () {
                                    if ($("#popup_container").offset().top < 0) {
                                        $("#popup_container").css({
                                            top: "0px"
                                        })
                                    }
                                    if ($("#popup_container").offset().left < 0) {
                                        $("#popup_container").css({
                                            left: "0px"
                                        })
                                    }
                                }
                            });
                            $("#popup_title").css({
                                cursor: 'move'
                            });
                        } catch (e) { /* requires jQuery UI draggables */
                        }
                    }
                },

                _hide: function () {
                    $("#popup_container").remove();
                    this._overlay('hide');
                    this._maintainPosition(false);
                },

                _overlay: function (status) {
                    switch (status) {
                        case 'show':
                            this._overlay('hide');
                            $("BODY").append('<div id="popup_overlay"></div>');
                            $("#popup_overlay").css({
                                position: 'absolute',
                                zIndex: 99998,
                                top: '0px',
                                left: '0px',
                                width: '100%',
                                height: FR.windowHeight,
                                background: this.overlayColor,
                                opacity: this.overlayOpacity
                            });
                            break;
                        case 'hide':
                            $("#popup_overlay").remove();
                            break;
                    }
                },

                _reposition: function () {
                    var top = FR.windowHeight;
                    top = (top - $("#popup_container").outerHeight()) / 2 + this.verticalOffset;
                    top = top * this.verticalOffset;
                    var left = FR.windowWidth;
                    left = (left - $("#popup_container").outerWidth()) / 2 + this.horizontalOffset;
                    left = left * this.horizontalOffset;
                    if (top < 0) {
                        top = 0;
                    }
                    if (left < 0) {
                        left = 0;
                    }

                    // IE fix
                    if (FR.Browser.isIE()) {
                        top = top + $(window).scrollTop();
                    }

                    $("#popup_container").css({
                        top: top + 'px',
                        left: left + 'px'
                    });
                    $("#popup_overlay").height(FR.windowHeight);
                },

                _maintainPosition: function (status) {
                    function reposition() {
                        FR.Msg._reposition();
                    }

                    if (this.repositionOnResize) {
                        switch (status) {
                            case true:
                                $(window).bind('resize', reposition);
                                break;
                            case false:
                                $(window).unbind('resize', reposition);
                                break;
                        }
                    }
                }
            };
        }()
    });
})(jQuery);
/*!
 * jLayout - JavaScript Layout Algorithms v0.2
 *
 * Licensed under the revised BSD License.
 * Copyright 2008, Bram Stein
 * All rights reserved.
 */
/*global window.jLayout */
(function () {
    window.jLayout = {
        layout: function (spec, shared) {
            var that = {}, my = shared || {};

            my.hgap = spec.hgap || 0;
            my.vgap = spec.vgap || 0;

            /**
             * Lay out the container using a layout algorithm.
             */
            that.layout = function (container) {
                return container;
            };

            /**
             * Return the preferred size of the container.
             */
            that.preferred = function (container) {
                return {
                    width: container.width(),
                    height: container.height()
                };
            };

            /**
             * Return the minimum size the container is allowed to have.
             */
            that.minimum = function (container) {
                return {
                    width: 0,
                    height: 0
                };
            };

            /**
             * Return the maximum size the container is allowed to have.
             */
            that.maximum = function (container) {
                return {
                    width: Number.MAX_VALUE,
                    height: Number.MAX_VALUE
                };
            };

            return that;
        },

        parameter: function (spec) {
            var my = {},
                items = spec.items || [],
                that = this.layout(spec, my),
                scrollable = spec.scrollable,
                scrollContainer = spec.scrollContainer;
            that.layout = function (container) {
                var bounds = container.bounds(),
                    insets = container.insets(),
                    totalWidth = bounds.width - (insets.left + insets.right),
                    totalHeight = bounds.height - (insets.top + insets.bottom),
                    maxOffsetX = 0, maxOffsetY = 0;
                for (var i = 0; i < items.length; i ++) {
                    var item = items[i];
                    var width = (scrollable || totalWidth == 0) ? item.width : Math.min(item.width, totalWidth - item.x);
                    var height = (scrollable || totalHeight == 0) ? item.height : Math.min(item.height, totalHeight - item.y);
                    if (scrollable) {
                        maxOffsetX = Math.max(maxOffsetX, width + item.x);
                        maxOffsetY = Math.max(maxOffsetY, height + item.y);
                    }
                    item.el.bounds({
                        'x' : item.x,
                        'y' : item.y + (item.delta || 0),
                        'width' : width,
                        'height' : height
                    });
                    item.el.doLayout();
                }
                if (scrollContainer) {
                    scrollContainer.bounds({
                        'x' : 0,
                        'y' : 0,
                        width : maxOffsetX,
                        height : maxOffsetY
                    });
                }
            };

            function typeLayout(type) {
                return function () {
                    return {
                        "width": 0,
                        "height": 0
                    }
                };
            }

            that.preferred = typeLayout('preferred');
            that.minimum = typeLayout('minimum');
            that.maximum = typeLayout('maximum');

            return that;
        },

        flow: function (spec) {
            var my = {},
                that = this.layout(spec, my),
                items = spec.items || [],
                alignment = (spec.alignment && (spec.alignment === 'center' || spec.alignment === 'right' || spec.alignment === 'left') && spec.alignment) || 'left',
            hgap = typeof spec.hgap === 'number' && !isNaN(spec.hgap) ? spec.hgap : 5,
            vgap = typeof spec.vgap === 'number' && !isNaN(spec.vgap) ? spec.vgap : 5;
            that.layout = function (container) {
                var parentSize = container.bounds(),
                    insets = container.insets(),
                    i = 0,
                    len = items.length,
                    itemSize,
                    currentRow = [],
                    rowSize = {
                        width: 0,
                        height: 0
                    },
                    offset = {
                        x: insets.left,
                        y: insets.top
                    };

                parentSize.width -= insets.left + insets.right;
                parentSize.height -= insets.top + insets.bottom;

                for (; i < len; i += 1) {
                    if (items[i].el.isVisible()) {
                        itemSize = items[i].el.preferredSize();

                        if ((rowSize.width + itemSize.width) > parentSize.width) {
                            align(currentRow, offset, rowSize, parentSize);

                            currentRow = [];
                            offset.y += rowSize.height;
                            offset.x = insets.left;
                            rowSize.width = 0;
                            rowSize.height = 0;
                        }
                        rowSize.height = Math.max(rowSize.height, itemSize.height + vgap);
                        rowSize.width += itemSize.width + hgap;

                        currentRow.push(items[i]);
                    }
                }
                align(currentRow, offset, rowSize, parentSize);
                return container;
            };

            function align(row, offset, rowSize, parentSize) {
                var location = {
                        x: offset.x,
                        y: offset.y
                    },
                    i = 0,
                    len = row.length;

                switch (alignment) {
                    case 'center':
                    {
                        location.x += (hgap + parentSize.width - rowSize.width) / 2;
                        break;
                    }
                    case 'right':
                    {
                        location.x += parentSize.width - rowSize.width + hgap;
                        break;
                    }
                }

                for (; i < len; i += 1) {
                    location.y = offset.y;
                    row[i].el.bounds(location);
                    row[i].el.doLayout();
                    location.x += row[i].el.bounds().width + hgap;
                }
            }

            function typeLayout(type) {
                return function (container) {
                    var i = 0,
                        width = 0,
                        height = 0,
                        typeSize,
                        firstComponent = false,
                        insets = container.insets();

                    for (; i < items.length; i += 1) {
                        if (items[i].isVisible()) {
                            typeSize = items[i][type + 'Size']();
                            height = Math.max(height, typeSize.height);
                            width += typeSize.width;
                        }
                    }

                    return {
                        'width': width + insets.left + insets.right + (items.length - 1) * hgap,
                        'height': height + insets.top + insets.bottom
                    };
                };
            }

            that.preferred = typeLayout('preferred');
            that.minimum = typeLayout('minimum');
            that.maximum = typeLayout('maximum');

            return that;
        },
        /**
         * 水平布局，容器内的所有组件高度和容器一致，宽度根据自身的设置决定
         * 容器内的组件对齐方式可选为“靠左”、“靠右”以及“中间”的对齐位置
         * 默认：
         * 按中间对齐
         * 水平间隙为2px
         * 垂直间隙为0
         */
        horizontal: function (spec) {
            var my = {},
                that = this.layout(spec, my),
                items = spec.items || [],
                alignment = (spec.alignment && (spec.alignment === 'center' || spec.alignment === 'right' || spec.alignment === 'left') && spec.alignment) || 'center',
                hgap = typeof spec.hgap === 'number' && !isNaN(spec.hgap) ? spec.hgap : 2,
                vgap = typeof spec.vgap === 'number' && !isNaN(spec.vgap) ? spec.vgap : 0;
            that.layout = function (container) {
                var bounds = container.bounds(),
                    insets = container.insets(),
                    x = insets.left + hgap,
                    y = insets.top + vgap,
                    maxWidth = bounds.width - (insets.left + insets.right + hgap * 2),
                    totalWidth = 0,
                    totalHeight = bounds.height - (insets.top + insets.bottom),
                    eachHeight = totalHeight - 2 * vgap,
                    i,
                    len = items.length;
                for (i = 0; i < len; i++) {
                    var item = items[i];
                    // 只有可见的才参与布局
                    if (item.el.isVisible()) {
                        totalWidth += (item.width + hgap);
                    }
                }
                moveElements(x, y, maxWidth - totalWidth + 2 * hgap, eachHeight);
                return container;
            };
            function moveElements(x, y, deltaWidth, height) {
                var bounds = {
                        "x": x,
                        "y": y,
                        "width": deltaWidth,
                        "height": height
                    },
                    i = 0,
                    len = items.length;
                switch (alignment) {
                    case "left" :
                    {
                        bounds.x += 0;
                        break;
                    }
                    case 'center':
                    {
                        bounds.x += deltaWidth / 2;
                        break;
                    }
                    case 'right':
                    {
                        bounds.x += deltaWidth;
                        break;
                    }
                }
                for (; i < len; i++) {
                    var item = items[i];
                    if (item.el.isVisible()) {
                        bounds.width = item.width;
                        item.el.bounds(bounds);
                        item.el.doLayout();
                        bounds.x += (item.width + hgap);
                    }
                }
            }

            function typeLayout(type) {
                return function (container) {
                    var i = 0,
                        width = 0,
                        height = 0,
                        typeSize,
                        insets = container.insets();
                    for (; i < items.length; i += 1) {
                        if (items[i].el.isVisible()) {
                            typeSize = items[i].el[type + 'Size']();
                            height = Math.max(height, typeSize.height);
                            width += items[i].width + hgap;
                        }
                    }

                    return {
                        'width': width + insets.left + insets.right,
                        'height': height + insets.top + insets.bottom
                    }
                }
            }

            that.preferred = typeLayout('preferred');
            that.minimum = typeLayout('minimum');
            that.maximum = typeLayout('maximum');

            return that;
        },
        vertical: function (spec) {
            var my = {},
                that = this.layout(spec, my),
                items = spec.items || [],
                spec = spec,
                hgap = typeof spec.hgap === 'number' && !isNaN(spec.hgap) ? spec.hgap : 0,
                vgap = typeof spec.vgap === 'number' && !isNaN(spec.vgap) ? spec.vgap : 0;
            that.layout = function (container) {
                var bounds = container.bounds(),
                    insets = container.insets(),
                    i,
                    len = items.length,
                    x = insets.left + hgap,
                    y = insets.top + vgap,
                    maxHeight = bounds.height - (insets.top + insets.bottom + vgap * 2),
                    totalHeight = 0,
                    totalWidth = bounds.width - (insets.left + insets.right),
                    eachWidth = totalWidth - 2 * hgap;
                for (i = 0; i < len; i++) {
                    var item = items[i];
                    if (item.el.isVisible()) {
                        totalHeight += item.height;
                    }
                }
                moveElements(x, y, eachWidth, maxHeight - totalHeight);
                return container;
            };

            function moveElements(x, y, width, height) {
                var bounds = {
                        "x": x,
                        "y": y,
                        "width": width,
                        "height": height
                    },
                    i = 0,
                    len = items.length;
                for (; i < len; i++) {
                    var item = items[i];
                    if (item.el.isVisible()) {
                        bounds.height = item.height;
                        item.el.bounds(bounds);
                        item.el.doLayout();
                        bounds.y += item.height + vgap;
                    }
                }
            }

            function typeLayout(type) {
                return function (container) {
                    var i = 0,
                        width = 0,
                        height = 0,
                        typeSize,
                        insets = container.insets();
                    for (; i < items.length; i += 1) {
                        if (items[i].el.isVisible()) {
                            typeSize = items[i].el[type + 'Size']();
                            width = Math.max(width, typeSize.width);
                            height += items[i].height + vgap;
                        }
                    }

                    return {
                        'width': width + insets.left + insets.right,
                        'height': height + insets.top + insets.bottom
                    }
                };
            }

            that.preferred = typeLayout('preferred');
            that.minimum = typeLayout('minimum');
            that.maximum = typeLayout('maximum');

            return that;
        },
        /**
         * 格子布局
         */
        gridLayout: function (spec) {
            var my = {},
                that = this.layout(spec, my),
                leftGap = spec.leftGap || 0,
                rightGap = spec.rightGap || 0,
                topGap = spec.topGap || 0,
                bottomGap = spec.bottomGap || 0,
                items = spec.items || [],
                columns = spec.columns,
                rows = spec.rows,
                widths = spec.widths,
                heights = spec.heights;
            that.layout = function (container) {
                // richer:获取布局容器的边界
                var bounds = container.bounds();
                var insets = container.insets(),
                    totalWidth = bounds.width - (insets.left + insets.right) - leftGap - rightGap,
                    totalHeight = bounds.height - (insets.top + insets.bottom) - topGap - bottomGap;
                var realWidths = {}, setWidthTotal = 0, setWLen = 0;
                if (widths) {
                    for (var i = 0; i < widths.length; i ++) {
                        var wid = widths[i];
                        if (wid != 'auto') {
                            realWidths["" + i] = wid;
                            setWidthTotal += wid;
                            setWLen ++;
                        }
                    }
                }
                var realHeights = {}, setHeightTotal = 0, setHLen = 0;
                if (heights) {
                    for (var i = 0; i < heights.length; i ++) {
                        var he = heights["" + i];
                        if (he != 'auto') {
                            realHeights[i] = he;
                            setHeightTotal += he;
                            setHLen ++;
                        }
                    }
                }
                var eachWidth = (totalWidth - (columns - 1) * my.hgap - setWidthTotal) / (columns - setWLen),
                    eachHeight = (totalHeight - (rows - 1) * my.vgap - setHeightTotal) / (rows - setHLen);

                var sum = function(arr, average, index, gap) {
                    if (!arr) {
                        return index * (average + gap)
                    }
                    var result = 0;
                    for (var n = 0; n < index; n ++) {
                        var el = arr[n];
                        if (el == 'auto') {
                            result += average;
                        } else {
                            result += el;
                        }
                        if (n > 0) {
                            result += gap;
                        }
                    }
                    return result;
                };

                for (var k = 0; k < items.length; k++) {
                    var item = items[k];
                    var w = realWidths[item.column] || eachWidth, h = realHeights[item.row] || eachHeight;
                    var x = sum(widths, eachWidth, item.column, my.hgap);
                    var y = sum(heights, eachHeight, item.row, my.vgap);
                    if (item.el) {
                        item.el.bounds({
                            'x' : x + leftGap,
                            'y' : y + topGap,
                            'width' : w,
                            'height' : h
                        });
                        // richer:该$元素的大小和位置改变了,当然要doLayout一下,让它内部的子元素也重新布局
                        item.el.doLayout();
                    }
                }
                return container;
            };
            function typeLayout(type) {
                return function (container) {
                    if (type == 'minimum' || type == "maximum") {
                        return container[type.substring(0, 3) + "Size"]()
                    }
                    var bounds = container.bounds();
                    var insets = container.insets(),
                        totalWidth = bounds.width - (insets.left + insets.right),
                        totalHeight = bounds.height - (insets.top + insets.bottom),
                        eachWidth = totalWidth - (columns - 1) * my.hgap,
                        eachHeight = totalHeight - (rows - 1) * my.vgap;
                    return {
                        'width': eachWidth,
                        'height': eachHeight
                    };
                };
            }

            that.preferred = typeLayout('preferred');
            that.minimum = typeLayout('minimum');
            that.maximum = typeLayout('maximum');
            return that;
        },


        tableLayout : function(spec) {
            var my = {},
                that = this.layout(spec, my),
                vgap = spec.vgap,
                items = spec.items,
                columnSize = spec.columnSize,
                rowSize = spec.rowSize,
                scrollContainer = spec.scrollContainer;
            that.layout = function (container) {
                var bounds = container.bounds(),
                    insets = container.insets(),
                    totalWidth = bounds.width - (insets.left + insets.right),
                    totalHeight = bounds.height - (insets.top + insets.bottom),
                    fixHeight = 0,maxOffsetY = 0;
                for (var row = 0; row < items.length; row++) {
                    var rowItems = items[row];
                    if (isRowHide(rowItems)) {
                       fixHeight += (heightY(row, totalHeight) + vgap);
                    } else {
                        for (var column = 0; column < rowItems.length; column++) {
                            var item = rowItems[column];
                            var y = offsetY(row) - fixHeight;
                            var h = heightY(row, totalHeight);
                            maxOffsetY = Math.max(y + h, maxOffsetY);
                            if (item == null) {
                                continue;
                            }
                            var rect = {
                            	'x' : offsetX(column, totalWidth),
                                'y' : y
                           	};
                           	if(isNaN(item.el.width)) {
                           		//没有为el定义width，采用table的width
                           		rect.width = widthX(column, totalWidth);
                           	}
                           	if(isNaN(item.el.height)) {
                           		rect.height = h;
                           	}
                            item.element.bounds(rect);
                            item.element.doLayout();
                        }
                    }
                }
                if (scrollContainer) {
                    scrollContainer.bounds({
                        x : 0,
                        y : 0,
                        width : totalWidth,
                        height : maxOffsetY
                    });
                }
            };
            function isRowHide(rowItems) {
               for (var column = 0; column < rowItems.length; column++) {
                   if (rowItems[column] != null && rowItems[column].element.isVisible()) {
                       return false;
                   }
               }
                return true;
            }

            function offsetX(index, totalWidth) {
                var offsetX = 0;
                for (var i = 0; i < index; i ++) {
                    var cz = columnSize[i];
                    if (cz > 0 && cz < 1) {
                        cz = cz * totalWidth;
                    }
                    offsetX += cz;
                }
                return offsetX;
            }
            function offsetY(index) {
                var offsetY = 0;
                for (var i = 0; i < index; i ++) {
                    offsetY += rowSize[i] + vgap;
                }
                return offsetY;
            }

            function widthX(index, totalWidth) {
                var width = columnSize[index];
                if (!isNaN(width)) {
                    if (width > 0 && width < 1) {
                        return width * totalWidth;
                    }
                    return width;
                }
                // richie:如果不是数字的宽度不在最后一位，则忽略掉这个宽度
                if (index != columnSize.length - 1) {
                    return 0;
                }
                return totalWidth - offsetX(index, totalWidth);
            }

            function heightY(index, totalHeight) {
                var height = rowSize[index];
                if (!isNaN(height)) {
                    return height;
                }
                // richie:如果不是数字的高度不在最后一位，则忽略掉这个高度
                if (index != rowSize.length - 1) {
                    return 0;
                }
                return totalHeight - offsetY(index);
            }

            function typeLayout(type) {
                return function (container) {
                    return {
                        "width": 0,
                        "height": 0
                    }
                };
            }

            that.preferred = typeLayout('preferred');
            that.minimum = typeLayout('minimum');
            that.maximum = typeLayout('maximum');

            return that;
        },
        borderlayout : function(spec) {
            var my = {},
                that = this.layout(spec, my),
                east = spec.east,
                west = spec.west,
                north = spec.north,
                south = spec.south,
                center = spec.center;
            that.layout = function (container) {
                var bounds = container.bounds(),
                    insets = container.insets(),
                    top = insets.top,
                    left = insets.left,
                    totalWidth = bounds.width - (insets.left + insets.right),
                    totalHeight = bounds.height - (insets.top + insets.bottom);
                var offsetTop = 0;
                var offsetLeft = 0;
                var centerWidth = totalWidth;
                var centerHeight = totalHeight;
                if (north && north.el && north.el.isVisible()) {
                    var nh = north.height || north.el.height();
                    north.el.bounds({
                        'x' : left,
                        'y' : top,
                        'width' : totalWidth,
                        'height' : nh
                    });
                    offsetTop = top + nh;
                    centerHeight = totalHeight - nh;
                    north.el.doLayout();
                }

                if (south && south.el && south.el.isVisible()) {
                    var sh = south.height || south.el.height();
                    south.el.bounds({
                        'x' : left,
                        'y' : totalHeight - sh,
                        'width' : totalWidth,
                        'height' : sh
                    });
                    centerHeight -= sh;
                    south.el.doLayout();
                }
                if (west && west.el && west.el.isVisible()) {
                    var ww = west.width || west.el.width();
                    west.el.bounds({
                        'x' : left,
                        'y' : offsetTop,
                        'width' : ww,
                        'height' : centerHeight
                    });
                    offsetLeft = left + ww;
                    centerWidth = totalWidth - ww;
                    west.el.doLayout();
                }
                if (east && east.el && east.el.isVisible()) {
                    var ew = east.width || east.el.width();
                    east.el.bounds({
                        'x' : totalWidth - ew,
                        'y' : offsetTop,
                        'width' : ew,
                        'height' : centerHeight
                    });
                    centerWidth = centerWidth - ew;
                    east.el.doLayout();
                }
                center.el.bounds({
                    'x' : offsetLeft,
                    'y' : offsetTop,
                    'width' : centerWidth,
                    'height' : centerHeight
                });
                center.el.doLayout();
            };
            function typeLayout(type) {
                return function (container) {
                    return {
                        "width": 0,
                        "height": 0
                    }
                };
            }

            that.preferred = typeLayout('preferred');
            that.minimum = typeLayout('minimum');
            that.maximum = typeLayout('maximum');

            return that;
        } ,
        card : function(spec) {
            var my = {},
                that = this.layout(spec, my),
                items = spec.items;
            that.layout = function (container) {
                var bounds = container.bounds(),
                    insets = container.insets(),
                    totalWidth = bounds.width - (insets.left + insets.right),
                    totalHeight = bounds.height - (insets.top + insets.bottom);
               for (var i = 0; i < items.length; i ++) {
                   var item = items[i];
                   if (item.el instanceof $ && item.el.isVisible()) {
                       item.el.bounds({
                           'x' : insets.left,
                           'y' : insets.top,
                           'width' : totalWidth,
                           'height' : totalHeight
                       });
                       item.el.doLayout();
                   }
               }
            };
            function typeLayout(type) {
                return function (container) {
                    return {
                        "width": 0,
                        "height": 0
                    }
                };
            }

            that.preferred = typeLayout('preferred');
            that.minimum = typeLayout('minimum');
            that.maximum = typeLayout('maximum');

            return that;
        },

        /**
         * Grid layout
         */
        grid: function (spec) {
            var my = {},
                that = this.layout(spec, my),
                items = spec.items || [],
            // initialize the number of columns to the number of items
            // we're laying out.
                columns = spec.columns || items.length,
                rows = spec.rows || 0;

            if (rows > 0) {
                columns = Math.floor((items.length + rows - 1) / rows);
            }
            else {
                rows = Math.floor((items.length + columns - 1) / columns);
            }

            // alex_mod 加两个属性,用来fix grid's height & width(因为原来的就是简单平均分配height & width)
            var widths = spec.widths || [], heights = spec.heights || [];
            $.each([
                {
                    ar: widths,
                    len: columns
                },
                {
                    ar: heights,
                    len: rows
                }
            ], function (idx, it) {
                while (it.ar.length < it.len) {
                    it.ar[it.ar.length] = -1
                }
            });

            that.layout = function (container) {
                var bounds = container.bounds();

                var i, j,
                    insets = container.insets(),
                    x = insets.left,
                    y = insets.top,
                    available_width = bounds.width - (insets.left + insets.right) - (columns - 1) * my.hgap,
                    available_height = bounds.height - (insets.top + insets.bottom) - (rows - 1) * my.vgap;
                // alex_mod 根据columns & rows重新计算ac_widths & ac_heights
                var ac_widths = Array.prototype.concat.call([], widths),
                    ac_heights = Array.prototype.concat.call([], heights);
                $.each([
                    {
                        ar: ac_widths,
                        len: available_width
                    },
                    {
                        ar: ac_heights,
                        len: available_height
                    }
                ], function (_i, it) {
                    var free_c = 0;
                    $.each(it.ar, function (idx, ilen) {
                        if (ilen >= 0) {
                            it.len -= ilen;
                        } else {
                            free_c++;
                        }
                    });
                    if (free_c > 0) {
                        var av_len = it.len / free_c;
                        $.each(it.ar, function (idx, ilen) {
                            if (ilen < 0) {
                                it.ar[idx] = av_len;
                            }
                        })
                    }
                });

                var wi = 0, hi = 0;
                for (i = 0; i < items.length; i++) {
                    var width = ac_widths[wi], height = ac_heights[hi];
                    items[i].bounds({
                        'x': x,
                        'y': y,
                        'width': width,
                        'height': height
                    });

                    if (wi < columns - 1) {
                        x += width + my.hgap;
                        wi++;
                    } else {
                        y += height + my.vgap;
                        x = insets.left;
                        wi = 0;
                        hi++;
                    }
                    items[i].doLayout();
                }

                return container;
            };

            function typeLayout(type) {
                return function (container) {
                    var i,
                        width = 0,
                        height = 0,
                        type_size,
                        insets = container.insets();

                    var ca_widths = Array.prototype.concat.call([], widths),
                        ca_heights = Array.prototype.concat.call([], heights);

                    var wi = 0, hi = 0;
                    for (var i = 0; i < items.length; i++) {
                        type_size = items[i][type + 'Size']();
                        var width = ca_widths[wi], height = ca_heights[hi];
                        if (widths[wi] < 0) {
                            ca_widths[wi] = Math.max(ca_widths[wi], type_size.width)
                        }
                        if (heights[hi] < 0) {
                            ca_heights[hi] = Math.max(ca_heights[hi], type_size.height)
                        }

                        if (wi < columns - 1) {
                            wi++;
                        } else {
                            wi = 0;
                            hi++;
                        }
                        items[i].doLayout();
                    }

                    // item的总的height & width
                    var ww = 0;
                    $.each(ca_widths, function (idx, w) {
                        if (w > 0) ww += w
                    });
                    var hh = 0;
                    $.each(ca_heights, function (idx, h) {
                        if (h > 0) hh += h
                    });

                    return {
                        'width': insets.left + insets.right + ww + (columns - 1) * my.hgap,
                        'height': insets.top + insets.bottom + hh + (rows - 1) * my.vgap
                    };
                };
            }

            // this creates the min and preferred size methods, as they
            // only differ in the function they call.
            that.preferred = typeLayout('preferred');
            that.minimum = typeLayout('minimum');
            that.maximum = typeLayout('maximum');
            return that;
        },

        /**
         * 居中布局
         */
        center : function(spec) {
            var my = {},
                that = this.layout(spec, my),
                item = spec.item || [];
            that.layout = function(container) {
                var bounds = container.bounds(),
                    insets = container.insets(),
                    x = insets.left,
                    y = insets.top,
                    totalWidth = bounds.width - (insets.left + insets.right),
                    totalHeight = bounds.height - (insets.top + insets.bottom);
                var width = item.width || 'auto', height = item.height || 'auto';
                if (width === 'auto') {
                    width = totalWidth;
                }
                if (height === 'auto') {
                    height = totalHeight;
                }
                if (item.el) {
                    item.el.bounds({
                        'x' : x + (totalWidth - width) * 0.5,
                        'y' : y + (totalHeight - height) * 0.5,
                        'width' : width,
                        'height' : height
                    });
                    item.el.doLayout();
                }
            };

            function typeLayout(type) {
                return function () {
                    return {
                        "width": 0,
                        "height": 0
                    }
                };
            }

            that.preferred = typeLayout('preferred');
            that.minimum = typeLayout('minimum');
            that.maximum = typeLayout('maximum');
            return that;
        }
    }


})();
/*!
 * JSizes - JQuery plugin v0.31
 *
 * Licensed under the revised BSD License.
 * Copyright 2008, Bram Stein
 * All rights reserved.
 */
/*global jQuery*/
;(function($){
	var num = function (value) {
		return parseFloat(value) || 0; // alex:因为我的chrome浏览器的边框宽度会变成1.900012之类的数值,所以用parseFloat
	};

	/**
	 * Sets or gets the values for min-width, min-height, max-width
	 * and max-height.
	 */
	$.each(['min', 'max'], function (i, name) {
		$.fn[name + 'Size'] = function (value) {
			var width, height;
			if (value) {
				if (value.width) {
					this.css(name + '-width', value.width);
				}
				if (value.height) {
					this.css(name + '-height', value.height);
				}
				return this;
			}
			else {
				width = this.css(name + '-width');
				height = this.css(name + '-height');
				// apparently Opera returns -1px instead of none
				return {'width': (name === 'max' && (width === 'none' || num(width) === -1) && Number.MAX_VALUE) || num(width),
						'height': (name === 'max' && (height === 'none' || num(height) === -1) && Number.MAX_VALUE) || num(height)};
			}
		};
	});

	/**
	 * Returns whether or not an element is visible.
	 */
	$.fn.isVisible = function () {
		return this.css('visibility') !== 'hidden' && this.css('display') !== 'none';
	};

	/**
	 * Sets or gets the values for border, margin and padding.
	 */
	$.each(['border', 'margin', 'padding'], function (i, name) {
		$.fn[name] = function (value) {
			if (value) {
				if (value.top) {
					this.css(name + '-top' + (name === 'border' ? '-width' : ''), value.top);
				}
				if (value.bottom) {
					this.css(name + '-bottom' + (name === 'border' ? '-width' : ''), value.bottom);
				}
				if (value.left) {
					this.css(name + '-left' + (name === 'border' ? '-width' : ''), value.left);
				}
				if (value.right) {
					this.css(name + '-right' + (name === 'border' ? '-width' : ''), value.right);
				}
				return this;
			}
			else {
				return {top: num(this.css(name + '-top' + (name === 'border' ? '-width' : ''))),
						bottom: num(this.css(name + '-bottom' + (name === 'border' ? '-width' : ''))),
						left: num(this.css(name + '-left' + (name === 'border' ? '-width' : ''))),
						right: num(this.css(name + '-right' + (name === 'border' ? '-width' : '')))};
			}
		};
	});
})(jQuery);
/*!
 * jLayout JQuery Plugin v0.11
 *
 * Licensed under the revised BSD License.
 * Copyright 2008, Bram Stein
 * All rights reserved.
 */
/*global jQuery jLayout*/
if (jQuery && jLayout) {
    (function($){
        $.fn.doLayout = function () {
            //wei : 换成jquery1.9后，jquery的css方法(主要是style方法)做了比较大的改动，做了验证boxmodel
            //的事情，比较耗时，可能因为同步的原因，当我们的表单过于复杂时，position:absolute不会生效，layout中做的
            //事情太多。
            this.css({
                position: 'absolute'
            });
            if (this.data('jlayout')) {
                this.data('jlayout').layout(this, arguments);
            }
        };

        // richer:容器在其各个边缘留出的空间
        $.fn.insets = function () {
            var p = this.padding(),
                b = this.border();
            return {
                'top': p.top,
                'bottom': p.bottom + b.bottom + b.top,
                'left': p.left,
                'right': p.right + b.right + b.left
            };
        };

        // richer:获取 && 设置jQuery元素的边界
        $.fn.bounds = function (value) {
            var tmp = {hasIgnoredBounds : true};

            if (value) {
                if (!isNaN(value.x)) {
                    tmp.left = value.x;
                }
                if (!isNaN(value.y)) {
                    tmp.top = value.y;
                }
                if (value.width != null) {
                    tmp.width = (value.width - (this.outerWidth(true) - this.width()));
                    tmp.width = (tmp.width >= 0) ? tmp.width : value.width;
                    // fix chrome
                    //tmp.width = (tmp.width >= 0) ? tmp.width : 0;
                }
                if (value.height != null) {
                    tmp.height = value.height - (this.outerHeight(true) - this.height());
                    tmp.height = (tmp.height >= 0) ? tmp.height : value.height;
                    // fix chrome
                    //tmp.height = (tmp.height >= 0) ? tmp.height : value.0;
                }
                if($(this).data('sizeFixed')) {
                    tmp.width = value.width;
                }
                this.css(tmp);
                // richer:触发_resize事件
                var oldTmp = this.data('tmp');
                if (!oldTmp || !FR.equals(oldTmp, tmp)) {
                    this.triggerHandler(FR.Events.RESIZE, [tmp]);
                    this.data('tmp', tmp);
                }

                return this;
            }
            else {
                // richer:注意此方法只对可见元素有效
                tmp = this.position();
                return {
                    'x': tmp.left,
                    'y': tmp.top,
                    // richer:这里计算外部宽度和高度的时候，都不包括边框
                    'width': this.outerWidth(),
                    'height': this.outerHeight()
                };
            }
        };

        $.each(['min', 'max'], function (i, name) {
            $.fn[name + 'imumSize'] = function (value) {
                if (this.data('jlayout')) {
                    return this.data('jlayout')[name + 'imum'](this);
                }
                else {
                    return this[name + 'Size'](value);
                }
            };
        });

        $.fn.preferredSize = function () {
            var minSize,
                maxSize,
                margin = this.margin(),
                size = {
                    width: 0,
                    height: 0
                };

            if (this.data('jlayout')) {
                size = this.data('jlayout').preferred(this);

                minSize= this.minimumSize();
                maxSize = this.maximumSize();

                size.width += margin.left + margin.right;
                size.height += margin.top + margin.bottom;

                if (size.width < minSize.width || size.height < minSize.height) {
                    size.width = Math.max(size.width, minSize.width);
                    size.height = Math.max(size.height, minSize.height);
                }
                else if (size.width > maxSize.width || size.height > maxSize.height) {
                    size.width = Math.min(size.width, maxSize.width);
                    size.height = Math.min(size.height, maxSize.height);
                }
            }
            else {
                size.width = this.bounds().width + margin.left + margin.right;
                size.height = this.bounds().height + margin.top + margin.bottom;
            }
            return size;
        };
    })(jQuery);
};
jQuery.extend({
    /**
     * 清除当前选择内容
     */
    unselectContents: function () {
        if (window.getSelection)
            window.getSelection().removeAllRanges();
        else if (document.selection)
            document.selection.empty();
    }
});

jQuery.fn.extend({
    /**
     * 选中内容
     */
    selectContents: function () {
        $(this).each(function (i) {
            var node = this;
            var selection, range, doc, win;
            if ((doc = node.ownerDocument) && (win = doc.defaultView) && typeof win.getSelection != 'undefined' && typeof doc.createRange != 'undefined'
                && (selection = window.getSelection()) && typeof selection.removeAllRanges != 'undefined') {
                range = doc.createRange();
                range.selectNode(node);
                if (i == 0) {
                    selection.removeAllRanges();
                }
                selection.addRange(range);
            } else if (document.body && typeof document.body.createTextRange != 'undefined' && (range = document.body.createTextRange())) {
                range.moveToElementText(node);
                range.select();
            }
        });
    },

    /**
     * 初始化对象以支持光标处插入内容
     */
    setCaret: function () {
        if (!$.browser.msie)
            return;
        var initSetCaret = function () {
            var textObj = $(this).get(0);
            textObj.caretPos = document.selection.createRange().duplicate();
        };
        $(this).click(initSetCaret).select(initSetCaret).keyup(initSetCaret);
    },

    /**
     * 在当前对象光标处插入指定的内容
     */
    insertAtCaret: function (textFeildValue) {
        var textObj = $(this).get(0);
        if (document.all && textObj.createTextRange && textObj.caretPos) {
            var caretPos = textObj.caretPos;
            caretPos.text = caretPos.text.charAt(caretPos.text.length - 1) == '' ? textFeildValue + '' : textFeildValue;
        } else if (textObj.setSelectionRange) {
            var rangeStart = textObj.selectionStart;
            var rangeEnd = textObj.selectionEnd;
            var tempStr1 = textObj.value.substring(0, rangeStart);
            var tempStr2 = textObj.value.substring(rangeEnd);
            textObj.value = tempStr1 + textFeildValue + tempStr2;
            textObj.focus();
            var len = textFeildValue.length;
            textObj.setSelectionRange(rangeStart + len, rangeStart + len);
            textObj.blur();
        } else {
            textObj.value += textFeildValue;
        }
    }
});
;
/**
 * 日期的扩展函数
 * @class Date
 */
$.extend(Date.prototype, {
    /**
     * 获取时区
     * @returns {String}
     */
    getTimezone: function () {
        // UTC时间与当前时区之间的差值和当前时区的缩写的Map
        // https://zh.wikipedia.org/wiki/%E6%97%B6%E5%8C%BA%E5%88%97%E8%A1%A8
        // 从正12到负12的时区全都有，接下来就等着销售把产品卖到这些国家和地区了！！！
        var UTCOffsetMap = {
            "-12": "IDL",
            "-11": "MIT",
            "-10": "HST",
            "-9:30": "MSIT",
            "-9": "AKST",
            "-8": "PST",
            "-7": "MST",
            "-6": "CST",
            "-5": "EST",
            "-4": "AST",
            "-3:30": "NST",
            "-3": "SAT",
            "-2": "BRT",
            "-1": "CVT",
            "0": "WET",
            "1": "CET",
            "2": "EET",
            "3": "MSK",
            "3:30": "IRT",
            "4": "META",
            "4:30": "AFT",
            "5": "METB",
            "5:30": "IDT",
            "5:45": "NPT",
            "6": "BHT",
            "6:30": "MRT",
            "7": "IST",
            "8": "CST",
            "8:30": "KRT",
            "9": "FET",
            "9:30": "ACST",
            "10": "AEST",
            "10:30": "FAST",
            "11": "VIT",
            "11:30": "NFT",
            "12": "PSTC"
        };

        var UTCOffset = this.getTimezoneOffset() * -1;
        var timezone = "";

        timezone = this.toString()
                        .replace(/^.* (?:\((.*)\)|([A-Z]{1,4})(?:[\-+][0-9]{4})?(?: -?\d+)?)$/, "$1$2")
                        .replace(/[^A-Z]/g, "");

        // 上面的各种replace操作可以在Mac上获取到时区的缩写（Linux不清楚），
        // 不过在Windows上得到的就是一个空字符串，所以如果得到的是空字符串的话，
        // 就根据当前时间与UTC时间之差来获取时区的缩写。
        if (timezone) {
            return timezone;
        }

        Object.keys(UTCOffsetMap).some(function (offset) {
            var hour = offset.split(":"),
                minutes = hour.length > 1 ? window.parseInt(hour[1]) : 0;

            hour = window.parseInt(hour[0]);

            if (Math.abs(UTCOffset - hour * 60 - minutes) < 1e-6) {
                timezone = UTCOffsetMap[offset];
                return true;
            }
        });

        return timezone;
    },


    /**
     * 获取每月的最后一天
     * @returns {Date}
     */
    getLastDateOfMonth: function () {
        return new Date(this.getFullYear(), this.getMonth(), this.getMonthDays());
    },

    /**
     * 获取该月总天数
     * @param {Number} month 有参数表示指定月份，无参数表示当前月份
     * @returns {*}
     */
    getMonthDays: function (month) {
        var MD = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        var year = this.getFullYear();
        if (typeof month == "undefined") {
            month = this.getMonth();
        }
        if (((0 === (year % 4)) && ( (0 !== (year % 100)) || (0 === (year % 400)))) && month === 1) {
            return 29;
        } else {
            return MD[month];
        }
    },

    /**
     * 获取当前日期属于该月的第几周
     * @returns {Number}
     */
    getWeekNumber: function () {
        var d = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);
        var DoW = d.getDay();
        d.setDate(d.getDate() - (DoW + 6) % 7 + 3);
        var ms = d.valueOf();
        d.setMonth(0);
        d.setDate(4);
        return Math.round((ms - d.valueOf()) / (7 * 864e5)) + 1;
    }

});
(function () {
    var compileJFmt = function (jfmt, date) {
        var str = jfmt.str, len = jfmt.len, ch = jfmt['char'];
        switch(ch){
            case 'E': //星期
                //跟java的效果一致
                str = len < 4 ? Date._SDN[date.getDay()] : Date._DN[date.getDay()];
                break;
            case 'y': //年
                if(len <= 3){
                    str = (date.getFullYear()+'').slice(2,4);
                }else{
                    str = date.getFullYear();
                }
                break;
            case 'M': //月
                if(len > 2){
                    str = len > 3 ? Date._MN[date.getMonth()] : Date._SMN[date.getMonth()];
                }else if(len < 2){
                    str = date.getMonth() + 1;
                }else{
                    str = String.leftPad(date.getMonth() + 1 +'',2,'0');
                }
                break;
            case 'd': //日
                if(len > 1){
                    str = String.leftPad(date.getDate()+'',2,'0');
                }else{
                    str = date.getDate();
                }
                break;
            case 'h': //时(12)
                var hour = date.getHours()%12;
                if(hour === 0){
                    hour = 12;
                }
                if(len > 1){
                    str = String.leftPad(hour +'',2,'0');
                }else{
                    str = hour;
                }
                break;
            case 'H': //时(24)
                if(len > 1){
                    str = String.leftPad(date.getHours()+'',2,'0');
                }else{
                    str = date.getHours();
                }
                break;
            case 'm':
                if(len > 1){
                    str = String.leftPad(date.getMinutes()+'',2,'0');
                }else{
                    str = date.getMinutes();
                }
                break;
            case 's':
                if(len > 1){
                    str = String.leftPad(date.getSeconds()+'',2,'0');
                }else{
                    str = date.getSeconds();
                }
                break;
            case 'a':
                str = date.getHours()<12 ? Date._NN[0] : Date._NN[1];
                break;
            case 'z':
                str = date.getTimezone();
                break;
            default:
                str = jfmt.str;
                break;
        }
        return str;
    };

    /**
     * 将Java提供的日期格式字符串装换为JS识别的日期格式字符串
     * @class FR.parseFmt
     * @param fmt 日期格式
     * @returns {String}
     */
    FR.parseFmt = function (fmt) {
        if (!fmt) {
            return '';
        }
        //日期
        fmt = String(fmt)
            //年
            .replace(/y{4,}/g, '%Y')//yyyy的时候替换为Y
            .replace(/y{2}/g, '%y')//yy的时候替换为y
            //月
            .replace(/M{4,}/g, '%b')//MMMM的时候替换为b，八
            .replace(/M{3}/g, '%B')//MMM的时候替换为M，八月
            .replace(/M{2}/g, '%X')//MM的时候替换为X，08
            .replace(/M{1}/g, '%x')//M的时候替换为x，8
            .replace(/a{1}/g, '%p')
        //天
        if (new RegExp('d{2,}', 'g').test(fmt)) {
            fmt = fmt.replace(/d{2,}/g, '%d');//dd的时候替换为d
        } else {
            fmt = fmt.replace(/d{1}/g, '%e');//d的时候替换为j
        }
        //时
        if (new RegExp('h{2,}', 'g').test(fmt)) {//12小时制
            fmt = fmt.replace(/h{2,}/g, '%I');
        } else {
            fmt = fmt.replace(/h{1}/g, '%I');
        }
        if (new RegExp('H{2,}', 'g').test(fmt)) {//24小时制
            fmt = fmt.replace(/H{2,}/g, '%H');
        } else {
            fmt = fmt.replace(/H{1}/g, '%H');
        }
        fmt = fmt.replace(/m{2,}/g, '%M')//分
            //秒
            .replace(/s{2,}/g, '%S')

        return fmt;
    };

    /**
     * 这个主要是针对IE支持的日期格式太少没法构造现成的日期进行判断的情况
     *
     *      @example
     *      format:yyyy-MM-dd  yyyyMM  M/yyyy  yyyy-M-d h:m    yyyyMd  yyyyMd
     *      date: 2012-01-01  201412  1/2013  2013-1-1 5:30    201311  2013111
     *
     * @class FR.matchDateFormat
     * @param date 日期
     * @param format 格式
     * @returns {*}
     */
    FR.matchDateFormat = function (date, format) {
        if (typeof date != 'string' || typeof format != 'string' || !date || !format) {
            return false;
        }

        //中文的年月日间隔符处理
        var zh_yMd = "[" + String.fromCharCode(24180) + String.fromCharCode(26376) + String.fromCharCode(26085) + "]";
        if (date.match(zh_yMd)) {
            if (format.match(zh_yMd)) {
                date = date.replaceAll(zh_yMd, '-');
                format = format.replaceAll(zh_yMd, '-');
                if (date.endWith('-') && format.endWith('-')) {
                    date = date.substring(0, date.length - 1);
                    format = format.substring(0, format.length - 1);
                }
            } else {
                return false;
            }
        } else if (format.match(zh_yMd)) {
            return false;
        }

        //首先判断上午下午a
        var isAM = null;
        var validAM = [
            ' am',
            ' AM',
            ' Am',
            ' 上午'
        ];
        var validPM = [
            ' pm',
            ' PM',
            ' Pm',
            ' 下午'
        ];
        function matchEndWith(str, suffixList) {
            for (var i = 0; i < suffixList.length; i++) {
                if (str.endWith(suffixList[i])) {
                    return i;
                }
            }
            return -1;
        }
        if (format.endWith(' a')) {
            format = format.substring(0, format.length-2);
            var matchAMIdx = matchEndWith(date, validAM);
            var matchPMIdx = matchEndWith(date, validPM);
            if (matchAMIdx >= 0 || matchPMIdx >= 0) {
                isAM = matchAMIdx >= 0;
                date = date.substring(0, date.length-3);
            } else {
                return false;
            }
        }

        //比较分隔符
        if (date.replace(/[0-9]/g, '') != format.replace(/[YyMmDdHhSsa]/g, '')) {
            return false;
        }

        var formatStr = format;
        var dateStr = date;
        var formatArr = [];
        var dateArr = [];
        if (format.indexOf(' ') == -1) {
            dateArr = shortMatch(dateStr, formatStr);
            if (!dateArr) {
                return false;
            }
        } else {
            var ff = format.split(' ');
            var dd = date.split(' ');
            for (var i = 0; i < ff.length; i++) {
                var temp = shortMatch(dd[i], ff[i]);
                if (!temp) {
                    return false;
                } else {
                    dateArr = dateArr.concat(temp);
                }
            }
        }
        function shortMatch(str, fmt) {
            var da = [];
            var fa = [];
            if (fmt.match(/[-/:.]/)) {
                fa = fmt.split(/[-/:.]/);
                formatArr = formatArr.concat(fa);
                var da = str.split(/[-/:.]/);
                return da;
            }
            while (fmt.length > 0) {
                var reg = new RegExp(fmt.substring(0, 1) + "+");
                var f = fmt.match(reg).toString();
                fa.push(f);
                formatArr.push(f);
                fmt = fmt.substring(f.length);
            }
            var len = 0;
            for (var i = 0; i < fa.length; i++) {
                var tmpLen = 0;
                if (fa[i].length === 1) {
                    if (i == fa.length - 1) {
                        tmpLen = str.length - len;
                    } else if (i == fa.length - 2) {
                        switch (str.length - len) {
                            case 2 :
                                tmpLen = 1;
                                break;
                            case 3 :
                                if (invalidStr(str.substring(len, len + 2), fa[i]) || fa[i + 1].length === 2) {
                                    tmpLen = 1;
                                } else if (fa[i + 1].length === 1 && invalidStr(str.substring(len + 1, len + 3), fa[i + 1])) {
                                    tmpLen = 2;
                                } else {
                                    tmpLen = 1;
                                }
                                break;
                            case 4 :
                                tmpLen = 2;
                                break;
                            default :
                                return false;
                        }
                    }
                } else {
                    tmpLen = fa[i].length;
                }
                da[i] = str.substring(len, len + tmpLen);
                len += tmpLen;
            }
            return da;
        }

        function invalidStr(str, fm) {
            return str.match(/[Mh]/) && parseInt(fm, 10) > 12 ||
                str.match(/[d]/) && parseInt(fm, 10) > 31 ||
                str.match(/[H]/) && parseInt(fm, 10) > 23 ||
                str.match(/[ms]/) && parseInt(fm, 10) > 59;
        }

        if (formatArr.length != dateArr.length || dateArr[dateArr.length - 1] === "") { //REPORT-7677 dateArr最后一位不能是空,是空,说明是2000-1-这种样式的..format的最后一个总不可能是分隔符吧...
            return false;
        } else {
            for (var i = 0; i < formatArr.length; i++) {
                var ff = formatArr[i].replace(/ /g, '');
                var vv = dateArr[i].replace(/ /g, '');
                if (ff.length === 1 && ((vv.length === 2 && vv.startWith('0')) || vv.length > 2) ||
                    ff.length === 2 && vv.length !== 2 ||
                    ff.length === 4 && vv.length !== 4) {
                    return false;
                }
            }
            // 先把年月日的顺序调整下
            var que = ['y', 'M', 'd', 'h', 'H', 'm', 's'];
            for (var i = 0; i < formatArr.length; i++) {
                if (formatArr[i].match(/[yMd]/)) {
                    for (var j = i + 1; j < formatArr.length; j++) {
                        if (formatArr[j].match(/[yMd]/) &&
                            que.indexOf(formatArr[i].substring(0, 1)) > que.indexOf(formatArr[j].substring(0, 1))) {
                            var tmp = formatArr[i];
                            formatArr[i] = formatArr[j];
                            formatArr[j] = tmp;
                            tmp = dateArr[i];
                            dateArr[i] = dateArr[j];
                            dateArr[j] = tmp;
                        }
                    }
                }
            }
            // 如果是match的 返回对应的日期
            if (!format.match(/[hHms]/)) {
                var dt = "";
                // 年份如果是两位改成四位
                for (var i = 0; i < dateArr.length; i++) {
                    var yMd = formatArr[i] == 'yy' ? "20" + dateArr[i] : dateArr[i];
                    dt = dt.length === 0 ? yMd : dt + '/' + yMd;
                }
                var res = new Date(dt);
                if (!FR.isInvalidDate(res)) {
                    /*
                     * new Date('2013/02/28')   --Thu Feb 28 2013 00:00:00 GMT+0800 (中国标准时间)
                     * new Date('2013/02/31')   --Mon Mar 03 2014 00:00:00 GMT+0800 (中国标准时间)
                     * new Date('2013/02/33')   --Invalid Date
                     */
                    if (!inMonthRange(res)) {
                        return false;
                    }
                    return res;
                } else if (!FR.isInvalidDate(new Date(dt + '/01'))) {
                    return new Date(dt + '/01');
                } else if (!FR.isInvalidDate(new Date(dt + '/01' + '/01'))) {
                    return new Date(dt + '/01' + '/01');
                }
            } else {
                if(checkHms(date)){
                    return date;
                }

                var dt = '';
                var spt = false;
                for (var i = 0; i < formatArr.length; i++) {
                    if (formatArr[i].match(/[yMd]/)) {
                        var yMd = formatArr[i] == 'yy' ? "20" + dateArr[i] : dateArr[i];
                        dt = dt.length === 0 ? yMd : dt + '/' + yMd;
                    } else {
                        var hms = dateArr[i];
                        if (formatArr[i].indexOf('h') != -1 && isAM === false && parseInt(hms) < 12) {
                            hms = parseInt(hms) + 12;
                        }
                        if (!spt) {
                            dt = dt + ' ' + hms;
                            spt = true;
                        } else {
                            dt = dt + ':' + hms;
                        }
                    }
                }
                var res = new Date(dt);
                if (!inMonthRange(res)) {
                    return false;
                }
                return res;
            }
        }
        function checkHms(timeStr){
            var parts;
            if(FR.isEmpty(timeStr)){
                return false;
            }
            parts = timeStr.split(':');

            if(FR.isEmpty(parts)){
                return false;
            }
            for (i = 0; i < parts.length; i++) {
                if (isNaN(parts[i])) {
                    return false;
                }
            }
            if (parts.length === 2) {
                h = parts[0]; //小時
                m = parts[1]; //分
                if(format.match(/[s]/)){

                    if (h < 0 || h > 59) {
                        return false;
                    }
                    if (m < 0 || m > 59) {
                        return false;
                    }
                }else{
                    if (h < 0 || h > 23) {
                        return false;
                    }
                    if (m < 0 || m > 59) {
                        return false;
                    }
                }
              return true;
            }else if (parts.length === 3){
                h = parts[0]; //小時
                m = parts[1]; //分
                s = parts[3];
                if (h < 0 || h > 23) {
                    return false;
                }
                if (m < 0 || m > 59) {
                    return false;
                }
                if(s < 0 || s > 59){
                    return false;
                }
            }
            return true;
        }
        function inMonthRange(res) {
            var d, m;
            for (var i=0; i<formatArr.length; i++) {
                if (formatArr[i].indexOf('d') != -1) {
                    d = dateArr[i].replace(/^[0]/, "");
                } else if (formatArr[i].indexOf('M') != -1) {
                    m = dateArr[i].replace(/^[0]/, "");
                }
            }
            if (d == null || m == null) {
                return true;
            }
            return parseInt(d) == res.getDate() && parseInt(m) == res.getMonth() + 1;
        }
    };

    /**
     * 把字符串按照对应的格式转化成日期对象
     *
     *      @example
     *      var result = FR.str2Date('2013-12-12', 'yyyy-MM-dd');//Thu Dec 12 2013 00:00:00 GMT+0800
     *
     * @class FR.str2Date
     * @param str 字符串
     * @param format 日期格式
     * @returns {*}
     */
    FR.str2Date = function (str, format) {
        if (typeof str != 'string' || typeof format != 'string') {
            return null;
        }
        var fmt = FR.parseFmt(format);
        return Date.parseDateTime(str, fmt);
    };

    /**
     * 把日期对象按照指定格式转化成字符串
     *
     *      @example
     *      var date = new Date('Thu Dec 12 2013 00:00:00 GMT+0800');
     *      var result = FR.date2Str(date, 'yyyy-MM-dd');//2013-12-12
     *
     * @class FR.date2Str
     * @param date 日期
     * @param format 日期格式
     * @returns {String}
     */
    FR.date2Str = function(date, format){
        if(!date){
            return '';
        }
        // O(len(format))
        var len = format.length, result = '';
        if (len > 0) {
            var flagch = format.charAt(0), start = 0, str = flagch;
            for (var i = 1; i < len; i++) {
                var ch = format.charAt(i);
                if (flagch !== ch) {
                    result += compileJFmt({
                        'char': flagch,
                        'str': str,
                        'len': i - start
                    }, date);
                    flagch = ch;
                    start = i;
                    str = flagch;
                }else{
                    str +=ch;
                }
            }
            result += compileJFmt({
                'char': flagch,
                'str': str,
                'len': len - start
            }, date);
        }
        return result;
    };

    Date.patterns = {
        ISO8601Long: "Y-m-d H:i:s",
        ISO8601Short: "Y-m-d",
        ShortDate: "n/j/Y",
        LongDate: "l, F d, Y",
        FullDateTime: "l, F d, Y g:i:s A",
        MonthDay: "F d",
        ShortTime: "g:i A",
        LongTime: "g:i:s A",
        SortableDateTime: "Y-m-d\\TH:i:s",
        UniversalSortableDateTime: "Y-m-d H:i:sO",
        YearMonth: "F, Y"
    };
    Date.parseFunctions = {count: 0};
    Date.parseRegexes = [];
    Date.formatFunctions = {count: 0};

    Date._MN = [FR.i18nText("FR-Base_January"),
        FR.i18nText("FR-Base_February"),
        FR.i18nText("FR-Base_March"),
        FR.i18nText("FR-Base_April"),
        FR.i18nText("FR-Base_May"),
        FR.i18nText("FR-Base_June"),
        FR.i18nText("FR-Base_July"),
        FR.i18nText("FR-Base_August"),
        FR.i18nText("FR-Base_September"),
        FR.i18nText("FR-Base_October"),
        FR.i18nText("FR-Base_November"),
        FR.i18nText("FR-Base_December")];

    Date._SMN = [
        FR.i18nText("FR-Base_Short_Jan"),
        FR.i18nText("FR-Base_Short_Feb"),
        FR.i18nText("FR-Base_Short_Mar"),
        FR.i18nText("FR-Base_Short_Apr"),
        FR.i18nText("FR-Base_Short_May"),
        FR.i18nText("FR-Base_Short_Jun"),
        FR.i18nText("FR-Base_Short_Jul"),
        FR.i18nText("FR-Base_Short_Aug"),
        FR.i18nText("FR-Base_Short_Sep"),
        FR.i18nText("FR-Base_Short_Oct"),
        FR.i18nText("FR-Base_Short_Nov"),
        FR.i18nText("FR-Base_Short_Dec")
    ];

    Date._DN=[
        FR.i18nText("FR-Base_Sche_Sunday"),
        FR.i18nText("FR-Base_Sche_Monday"),
        FR.i18nText("FR-Base_Sche_Tuesday"),
        FR.i18nText("FR-Base_Sche_Wednesday"),
        FR.i18nText("FR-Base_Sche_Thursday"),
        FR.i18nText("FR-Base_Sche_Friday"),
        FR.i18nText("FR-Base_Sche_Saturday")
    ];

    Date._SDN=[
        FR.i18nText("FR-Base_Sun"),
        FR.i18nText("FR-Base_Mon"),
        FR.i18nText("FR-Base_Tue"),
        FR.i18nText("FR-Base_Wed"),
        FR.i18nText("FR-Base_Thu"),
        FR.i18nText("FR-Base_Fri"),
        FR.i18nText("FR-Base_Sat")
    ];

    Date._NN=[
        FR.i18nText("FR-Base_Ante_Meridian"),
        FR.i18nText("FR-Base_Post_Meridian")
    ];


    Date.y2kYear = 50;


    Date.monthNumbers = {
        Jan: 0,
        Feb: 1,
        Mar: 2,
        Apr: 3,
        May: 4,
        Jun: 5,
        Jul: 6,
        Aug: 7,
        Sep: 8,
        Oct: 9,
        Nov: 10,
        Dec: 11};

    Date.getMonthNumber = function (name) {
        return Date.monthNumbers[name.substring(0, 1).toUpperCase() + name.substring(1, 3).toLowerCase()];
    };

    Date.parseDate = function (input, format) {
        if (Date.parseFunctions[format] == null) {
            Date.createParser(format);
        }
        var func = Date.parseFunctions[format];
        return Date[func](input);
    };

    Date.createParser = function (format) {
        var funcName = "parse" + Date.parseFunctions.count++;
        var regexNum = Date.parseRegexes.length;
        var currentGroup = 1;
        Date.parseFunctions[format] = funcName;

        var code = "Date." + funcName + " = function(input){\n"
            + "var y = -1, m = -1, d = -1, h = -1, i = -1, s = -1, ms = -1, o, z, u, v;\n"
            + "var d = new Date();\n"
            + "y = d.getFullYear();\n"
            + "m = d.getMonth();\n"
            + "d = d.getDate();\n"
            + "var results = input.match(Date.parseRegexes[" + regexNum + "]);\n"
            + "if (results && results.length > 0) {";
        var regex = "";

        var special = false;
        var ch = '';
        for (var i = 0; i < format.length; ++i) {
            ch = format.charAt(i);
            if (!special && ch == "\\") {
                special = true;
            }
            else if (special) {
                special = false;
                regex += String.escape(ch);
            }
            else {
                var obj = Date.formatCodeToRegex(ch, currentGroup);
                currentGroup += obj.g;
                regex += obj.s;
                if (obj.g && obj.c) {
                    code += obj.c;
                }
            }
        }

        code += "if (u)\n"
            + "{v = new Date(u * 1000);}" // give top priority to UNIX time
            + "else if (y >= 0 && m >= 0 && d > 0 && h >= 0 && i >= 0 && s >= 0 && ms >= 0)\n"
            + "{v = new Date(y, m, d, h, i, s, ms);}\n"
            + "else if (y >= 0 && m >= 0 && d > 0 && h >= 0 && i >= 0 && s >= 0)\n"
            + "{v = new Date(y, m, d, h, i, s);}\n"
            + "else if (y >= 0 && m >= 0 && d > 0 && h >= 0 && i >= 0)\n"
            + "{v = new Date(y, m, d, h, i);}\n"
            + "else if (y >= 0 && m >= 0 && d > 0 && h >= 0)\n"
            + "{v = new Date(y, m, d, h);}\n"
            + "else if (y >= 0 && m >= 0 && d > 0)\n"
            + "{v = new Date(y, m, d);}\n"
            + "else if (y >= 0 && m >= 0)\n"
            + "{v = new Date(y, m);}\n"
            + "else if (y >= 0)\n"
            + "{v = new Date(y);}\n"
            + "}return (v && (z || o))?\n" // favour UTC offset over GMT offset
            + "    (z ? v.add(Date.SECOND, (v.getTimezoneOffset() * 60) + (z*1)) :\n" // reset to UTC, then add offset
            + "        v.add(Date.HOUR, (v.getGMTOffset() / 100) + (o / -100))) : v\n" // reset to GMT, then add offset
            + ";}";

        Date.parseRegexes[regexNum] = new RegExp("^" + regex + "$", "i");
        eval(code);
    };

    Date.parseDateTime = function(str, fmt) {
        var today = new Date();
        var y, m, d;
        //wei : 对于fmt为‘YYYYMM’或者‘YYYYMMdd’的格式，str的值为类似'201111'的形式，因为年月之间没有分隔符，所以正则表达式分割无效，导致bug7376。
        var a = str.split(/\W+/);
        if(fmt.toLowerCase() == '%y%x' || fmt.toLowerCase() == '%y%x%d') {
            var tempStr = a.join('');
            var yearlength = 4;
            var otherlength = 2;
            a[0] = tempStr.substring(0, yearlength);
            a[1] = tempStr.substring(yearlength, yearlength+otherlength);
            a[2] = tempStr.substring(yearlength+otherlength, yearlength+otherlength*2);
        }
        var b = fmt.match(/%./g);
        var i = 0, j = 0, hr, min, sec;
        for (i = 0; i < a.length; ++i) {
            if (!a[i]){
                continue;
            }
            switch (b[i]) {
                case "%d":
                case "%e":
                    d = parseInt(a[i], 10);
                    break;

                case "%X":
                    m = parseInt(a[i], 10) - 1;
                    break;
                case "%x":
                    m = parseInt(a[i], 10) - 1;
                    break;

                case "%Y":
                case "%y":
                    y = parseInt(a[i], 10);
                    (y < 100) && (y += (y > 29) ? 1900 : 2000);
                    break;

                case "%b":
                case "%B":
                    for (j = 0; j < 12; ++j) {
                        if (Date._MN[j].substr(0, a[i].length).toLowerCase() == a[i].toLowerCase()) { m = j; break; }
                    }
                    break;

                case "%H":
                case "%I":
                case "%k":
                case "%l":
                    hr = parseInt(a[i], 10);
                    break;

                case "%P":
                case "%p":
                    if (/pm/i.test(a[i]) && hr < 12){
                        hr += 12;
                    }
                    else if (/am/i.test(a[i]) && hr >= 12){
                        hr -= 12;
                    }
                    break;

                case "%M":
                    min = parseInt(a[i], 10);
                case "%S":
                    sec = parseInt(a[i], 10);
                    break;
            }
        }
        if (isNaN(y)) {
            y = today.getFullYear();
        }
        if (isNaN(m)) {
            m = today.getMonth();
        }
        if (isNaN(d)) {
            d = today.getDate();
        }
        if (isNaN(hr)) {
            hr = today.getHours();
        }
        if (isNaN(min)) {
            min = today.getMinutes();
        }
        if (isNaN(sec)) {
            sec = today.getSeconds();
        }
        if (y !== 0){
            return new Date(y, m, d, hr, min, sec);
        }
        y = 0; m = -1; d = 0;
        for (i = 0; i < a.length; ++i) {
            if (a[i].search(/[a-zA-Z]+/) != -1) {
                var t = -1;
                for (j = 0; j < 12; ++j) {
                    if (Date._MN[j].substr(0, a[i].length).toLowerCase() == a[i].toLowerCase()) { t = j; break; }
                }
                if (t != -1) {
                    if (m != -1) {
                        d = m+1;
                    }
                    m = t;
                }
            } else if (parseInt(a[i], 10) <= 12 && m == -1) {
                m = a[i]-1;
            } else if (parseInt(a[i], 10) > 31 && y === 0) {
                y = parseInt(a[i], 10);
                (y < 100) && (y += (y > 29) ? 1900 : 2000);
            } else if (d === 0) {
                d = a[i];
            }
        }
        if (y === 0){
            y = today.getFullYear();
        }
        if (m !== -1 && d !== 0){
            return new Date(y, m, d, hr, min, sec);
        }
        return today;
    };

    Date.formatCodeToRegex = function (character, currentGroup) {
        switch (character) {
            case "d":
                return {g: 1,
                    c: "d = parseInt(results[" + currentGroup + "], 10);\n",
                    s: "(\\d{2})"}; // day of month with leading zeroes (01 - 31)
            case "D":
                for (var a = [], i = 0; i < 7; a.push(Date._SDN[i]), ++i) {
                }
                ; // get L10n short day names
                return {g: 0,
                    c: null,
                    s: "(?:" + a.join("|") + ")"};
            case "j":
                return {g: 1,
                    c: "d = parseInt(results[" + currentGroup + "], 10);\n",
                    s: "(\\d{1,2})"}; // day of month without leading zeroes (1 - 31)
            case "l":
                return {g: 0,
                    c: null,
                    s: "(?:" + Date.dayNames.join("|") + ")"};
            case "N":
                return {g: 0,
                    c: null,
                    s: "[1-7]"}; // ISO-8601 day number (1 (monday) - 7 (sunday))
            case "S":
                return {g: 0,
                    c: null,
                    s: "(?:st|nd|rd|th)"};
            case "w":
                return {g: 0,
                    c: null,
                    s: "[0-6]"}; // javascript day number (0 (sunday) - 6 (saturday))
            case "z":
                return {g: 0,
                    c: null,
                    s: "(?:\\d{1,3}"}; // day of the year (0 - 364 (365 in leap years))
            case "W":
                return {g: 0,
                    c: null,
                    s: "(?:\\d{2})"}; // ISO-8601 week number (with leading zero)
            case "F":
                return {g: 1,
                    c: "m = parseInt(Date.getMonthNumber(results[" + currentGroup + "]), 10);\n", // get L10n month number
                    s: "(" + Date._MN.join("|") + ")"};
            case "m":
                return {g: 1,
                    c: "m = parseInt(results[" + currentGroup + "], 10) - 1;\n",
                    s: "(\\d{2})"}; // month number with leading zeros (01 - 12)
            case "M":
                for (var a = [], i = 0; i < 12; a.push(Date._SMN[i]), ++i) {
                }
                ; // get L10n short month names
                return {g: 1,
                    c: "m = parseInt(Date.getMonthNumber(results[" + currentGroup + "]), 10);\n", // get L10n month number
                    s: "(" + a.join("|") + ")"};
            case "n":
                return {g: 1,
                    c: "m = parseInt(results[" + currentGroup + "], 10) - 1;\n",
                    s: "(\\d{1,2})"}; // month number without leading zeros (1 - 12)
            case "t":
                return {g: 0,
                    c: null,
                    s: "(?:\\d{2})"}; // no. of days in the month (28 - 31)
            case "L":
                return {g: 0,
                    c: null,
                    s: "(?:1|0)"};
            case "o":
            case "Y":
                return {g: 1,
                    c: "y = parseInt(results[" + currentGroup + "], 10);\n",
                    s: "(\\d{4})"}; // 4-digit year
            case "y":
                return {g: 1,
                    c: "var ty = parseInt(results[" + currentGroup + "], 10);\n"
                        + "y = ty > Date.y2kYear ? 1900 + ty : 2000 + ty;\n",
                    s: "(\\d{1,2})"}; // 2-digit year
            case "a":
                return {g: 1,
                    c: "if (results[" + currentGroup + "] == 'am') {\n"
                        + "if (h == 12) { h = 0; }\n"
                        + "} else { if (h < 12) { h += 12; }}",
                    s: "(am|pm)"};
            case "A":
                return {g: 1,
                    c: "if (results[" + currentGroup + "] == 'AM') {\n"
                        + "if (h == 12) { h = 0; }\n"
                        + "} else { if (h < 12) { h += 12; }}",
                    s: "(AM|PM)"};
            case "g":
            case "G":
                return {g: 1,
                    c: "h = parseInt(results[" + currentGroup + "], 10);\n",
                    s: "(\\d{1,2})"}; // 24-hr format of an hour without leading zeroes (0 - 23)
            case "h":
            case "H":
                return {g: 1,
                    c: "h = parseInt(results[" + currentGroup + "], 10);\n",
                    s: "(\\d{2})"}; //  24-hr format of an hour with leading zeroes (00 - 23)
            case "i":
                return {g: 1,
                    c: "i = parseInt(results[" + currentGroup + "], 10);\n",
                    s: "(\\d{2})"}; // minutes with leading zeros (00 - 59)
            case "s":
                return {g: 1,
                    c: "s = parseInt(results[" + currentGroup + "], 10);\n",
                    s: "(\\d{2})"}; // seconds with leading zeros (00 - 59)
            case "u":
                return {g: 1,
                    c: "ms = parseInt(results[" + currentGroup + "], 10);\n",
                    s: "(\\d{3})"}; // milliseconds with leading zeros (000 - 999)
            case "O":
                return {g: 1,
                    c: [
                        "o = results[", currentGroup, "];\n",
                        "var sn = o.substring(0,1);\n", // get + / - sign
                        "var hr = o.substring(1,3)*1 + Math.floor(o.substring(3,5) / 60);\n", // get hours (performs minutes-to-hour conversion also, just in case)
                        "var mn = o.substring(3,5) % 60;\n", // get minutes
                        "o = ((-12 <= (hr*60 + mn)/60) && ((hr*60 + mn)/60 <= 14))?\n", // -12hrs <= GMT offset <= 14hrs
                        "    (sn + String.leftPad(hr, 2, 0) + String.leftPad(mn, 2, 0)) : null;\n"
                    ].join(""),
                    s: "([+\\-]\\d{4})"}; // GMT offset in hrs and mins
            case "P":
                return {g: 1,
                    c: [
                        "o = results[", currentGroup, "];\n",
                        "var sn = o.substring(0,1);\n", // get + / - sign
                        "var hr = o.substring(1,3)*1 + Math.floor(o.substring(4,6) / 60);\n", // get hours (performs minutes-to-hour conversion also, just in case)
                        "var mn = o.substring(4,6) % 60;\n", // get minutes
                        "o = ((-12 <= (hr*60 + mn)/60) && ((hr*60 + mn)/60 <= 14))?\n", // -12hrs <= GMT offset <= 14hrs
                        "    (sn + String.leftPad(hr, 2, 0) + String.leftPad(mn, 2, 0)) : null;\n"
                    ].join(""),
                    s: "([+\\-]\\d{2}:\\d{2})"}; // GMT offset in hrs and mins (with colon separator)
            case "T":
                return {g: 0,
                    c: null,
                    s: "[A-Z]{1,4}"}; // timezone abbrev. may be between 1 - 4 chars
            case "Z":
                return {g: 1,
                    c: "z = results[" + currentGroup + "] * 1;\n" // -43200 <= UTC offset <= 50400
                        + "z = (-43200 <= z && z <= 50400)? z : null;\n",
                    s: "([+\\-]?\\d{1,5})"}; // leading '+' sign is optional for UTC offset
            case "c":
                var df = Date.formatCodeToRegex, calc = [];
                var arr = [df("Y", 1), df("m", 2), df("d", 3), df("h", 4), df("i", 5), df("s", 6), df("P", 7)];
                for (var i = 0, l = arr.length; i < l; ++i) {
                    calc.push(arr[i].c);
                }
                return {g: 1,
                    c: calc.join(""),
                    s: arr[0].s + "-" + arr[1].s + "-" + arr[2].s + "T" + arr[3].s + ":" + arr[4].s + ":" + arr[5].s + arr[6].s};
            case "U":
                return {g: 1,
                    c: "u = parseInt(results[" + currentGroup + "], 10);\n",
                    s: "(-?\\d+)"}; // leading minus sign indicates seconds before UNIX epoch
            default:
                return {g: 0,
                    c: null,
                    s: character.replace(/([.*+?^$}{()|[\]\/\\])/g, "\\$1")};
        }
    };

    // safari setMonth is broken
    if (FR.Browser.r.safari) {
        if (Date.brokenSetMonth) {
            return;
        }
        Date.brokenSetMonth = Date.prototype.setMonth;
        Date.prototype.setMonth = function (num) {
            if (num <= -1) {
                var n = Math.ceil(-num);
                var back_year = Math.ceil(n / 12);
                var month = (n % 12) ? 12 - n % 12 : 0;
                this.setFullYear(this.getFullYear() - back_year);
                return Date.brokenSetMonth.call(this, month);
            } else {
                return Date.brokenSetMonth.apply(this, arguments);
            }
        };
    }
})();
;
(function ($) {
    /**
     * 布局类，这个类是一个抽象类，不能直接使用
     * @class FR.Layout
     * @extends FR.Widget
     * @abstract
     *
     * @cfg {JSON} options 配置属性
     * @cfg {Boolean} [options.scrollable=false] 内部区域在显示不下的时候是否要显示滚动条
     * @cfg {Boolean} [options.scrollx=false] 内部区域在显示不下的时候是否要显示横向滚动条
     * @cfg {Boolean} [options.scrolly=false] 内部区域在显示不下的时候是否要显示纵向滚动条
     * @cfg {String} [options.widgetBackground=null] 布局容器的背景
     * @cfg {JSON} [options.border=null] 边框
     * @cfg {String} [options.border.type] 边框样式
     * @cfg {String} [options.border.color] 边框颜色
     * @cfg {String} [options.border.width] 边框宽度
     * @cfg {Boolean} [options.border.corner=false] 是否是圆角边框
     * @cfg {String} [options.border.borderStyle] 边框线阴影样式
     */
    FR.Layout = FR.extend(FR.Widget, {
        /**
         * @private
         */
        _defaultConfig: function () {
            return $.extend(FR.Layout.superclass._defaultConfig.apply(), {
                scrollable: false,
                scrollx: false,
                scrolly: false,
                widgetBackground: null,
                border: null,
                onClick: null
            });
        },
        /**
         * @private
         */
        _init: function () {
            FR.Layout.superclass._init.apply(this, arguments);
            this._init4Margin();
            this._init4Style();
            this._init4Scroll();
            this._init4Click();
        },
        /**
         * 初始化布局与外层容器的边间距
         * @private
         */
        _init4Margin: function () {
            if (this.options.marginTop) {
                this.element.css('marginTop', this.options.marginTop);
                this.marginHeight = (this.marginHeight || 0) + parseInt(this.options.marginTop);
            }
            if (this.options.marginLeft) {
                this.element.css('marginLeft', this.options.marginLeft);
                this.marginWidth = (this.marginWidth || 0) + parseInt(this.options.marginLeft);
            }
            if (this.options.marginBottom) {
                this.element.css('marginBottom', this.options.marginBottom);
                this.marginHeight = (this.marginHeight || 0) + parseInt(this.options.marginBottom);
            }
            if (this.options.marginRight) {
                this.element.css('marginRight', this.options.marginRight);
                this.marginWidth = (this.marginWidth || 0) + parseInt(this.options.marginRight);
            }
        },
        /**
         * 初始化布局样式，包括背景，边框，圆角
         * @private
         */
        _init4Style: function () {
            this._initBackGround();
            var border = this.options.border;
            if (border) {
                this.element.css('border-style', border.type);
                this.element.css('border-color', border.color);
                this.element.css('border-width', border.width);
                if (border.corner) {
                    this.element.css('border-radius', "15px 15px 15px 15px");
                    if (FR.Browser.msie) {
                        this.element.addClass('ie-border-radius');
                    }
                }
                if (!(FR.Browser.msie && FR.Browser.version < '9.0')) {
                    this.element.css('box-shadow', border.borderStyle);
                }
            }
        },
        _initBackGround: function () {
            //设置控件背景
            if (!this.options.widgetBackground) {
                return;
            }
            if (this.options.type && this.options.type == 'fit' || this.options.type == 'absolute') {
                this._initFitBackground();
                return;
            }
            var alpha = this.options.widgetOpacity;
            if (!alpha) {
                return;
            }
            //因为有透明度, 如果直接设置opacity属性, 会被子层div继承, 因此平级放一个背景div
            this.$background = $("<div class='widgetBackground'></div>");
            //IE
            this.$background.css('filter', 'alpha(opacity=' + alpha * 100 + ')');
            //Chrome ff
            this.$background.css('opacity', alpha);
            this.$background.prependTo(this.element);
        },
        /**
         * 自适应布局做为表单主体，背景要覆盖内边距区域,加一层同级div放在前面
         */
        _initFitBackground: function () {
            var extraBackground = FR.Core.Plugin.Background.action;
            if (extraBackground && extraBackground(this.element, this.options)) {
                return;
            }

            var parent = this.element.parent();
            var margin = this.element.margin();
            var w = this.element.width() + (margin.left || 0) + (margin.right || 0);
            var h = this.element.height() + (margin.top || 0) + (margin.bottom || 0);
            if (this.$background && parent.has(this.$background).length > 0) {
                this._updateSimpleStyle(w, h);
                return;
            }
            this.$background = $("<div class='widgetBackground'></div>");
            this.$background.css('position', 'absolute');
            var alpha = this.options.widgetOpacity;
            if (alpha) {
                //IE
                this.$background.css('filter', 'alpha(opacity=' + alpha * 100 + ')');
                //Chrome ff
                this.$background.css('opacity', alpha);
            }
            this._updateSimpleStyle(w, h);
            FR.setBackground(this.$background, this.options.widgetBackground, h);
            this.$background.prependTo(parent);
        },
        _updateSimpleStyle: function(w, h) {
            this.$background.css('width', (w || 0));
            this.$background.css('height', (h || 0));
            this.$background.css('top', this.element.css('top'));
            this.$background.css('left', this.element.css('left'));
        },
        /**
         * 初始化布局的滚动形态
         * @private
         */
        _init4Scroll: function () {
            if (!this.options.scrollable) {
                this.element.css("overflow", "hidden");
            } else {
                this.element.css("overflow", "auto")
            }
            if (this.options.scrollx) {
                this.element.css({
                    "overflow-x": "auto",
                    "overflow-y": "hidden"
                });
            }
            if (this.options.scrolly) {
                this.element.css({
                    "overflow-x": "hidden",
                    "overflow-y": "auto"
                });
            }
        },
        /**
         * 初始化点击事件
         * @private
         */
        _init4Click: function () {
            var self = this;
            this.element.click(function (e) {
                self.fireEvent(FR.Events.CLICK, e);
            });
            var opts = this.options;
            if ($.isFunction(opts.onClick)) {
                this.element.bind('click', opts.onClick.createDelegate(this));
            }
        },

        /**
         * 重新布局,一般在改变了布局内部组件的时候都需要重新布局
         */
        doLayout: function () {
            this.element.doLayout(arguments);
        },

        /**
         * 设置布局的最小宽度和最小高度
         */
        setMinSize: function () {
            if (this.element.length > 0 && this.element[0].tagName == "BODY") {
                var minSize = this.element["minimumSize"]();
                this.element.css({"min-width": minSize.width, "min-height": minSize.height});
                $("html").css("overflow", "auto");
            }
        },

        /**
         * 处理布局内部组件的显示和隐藏
         */
        setInnerWidgetVisible: function (widgetName, currentWidget, visible) {

        }
    });

    /**
     * 参数面板布局，里面所有的元素由有横坐标、纵坐标、长以及宽属性决定其位置和大小
     *
     *     @example
     *     var renderEl = $('body');
     *     var layout = new FR.ParameterLayout({
     *              renderEl : renderEl,
     *              items : [
     *                  {
     *                      type : 'button',
     *                      text : '(0, 0, 120, 24)',
     *                      x : 0,
     *                      y : 0,
     *                      width : 120,
     *                      height : 24
     *               },
     *               {
     *                      type : 'button',
     *                      text : '(0, 0, auto, auto)',
     *                      x : 40,
     *                      y : 30
     *               }
     *              ]
     *     });
     *     layout.doLayout();
     *
     * @class FR.ParameterLayout
     * @extends FR.Layout
     *
     * @cfg {JSON} options 配置属性
     * @cfg {Array} options.items 字组件数组
     */
    FR.ParameterLayout = FR.extend(FR.Layout, {

        _defaultConfig: function () {
            return $.extend(FR.ParameterLayout.superclass._defaultConfig.apply(), {
                baseCls: 'fr-absolutelayout',
                scrollable: false
            });
        },

        _init: function () {
            FR.ParameterLayout.superclass._init.apply(this, arguments);
            var opts = this.options;
            this.element.addClass(opts.baseCls);
            if (!$.isArray(opts.items)) {
                opts.items = [];
                return;
            }
            var items = opts.items, i, len = items.length;
            opts.widgets = [];
            var $container = this.element;
            if (opts.scrollable) {
                $container = $('<div class="fr-core-layout-scrollable">').css({
                    position: 'absolute',
                    top: 0,
                    left: 0
                }).appendTo(this.element);
                opts.scrollContainer = $container;
            }
            for (i = 0; i < len; i++) {
                var itemConfig = items[i];
                // richie:复制父容器的样式给子控件
                //itemConfig.style = o.style;
                //Sean：改成如果控件有自己定义的style，则不使用上级控件传递下来的style，所有布局都统一
                if (!itemConfig.style) {
                    itemConfig.style = opts.style;
                }
                if (itemConfig.type) {
                    itemConfig.el = itemConfig;
                }
                if (itemConfig.el.type) {
                    var widget = FR.createWidget($.extend(itemConfig.el, {
                        resultWidgets: opts.resultWidgets
                    }));
                    //Sean: TODO 表单改好后这个属性统一成resultWidgets，这个可以删
                    opts.widgets.push(widget);
                    var element = widget.element;
                    element.css({left: itemConfig.x, top: itemConfig.y, position: "absolute"});
                    // richer:由于已经生成了widget,就没必要再保存原来的JSON对象了
                    items[i].el = element;
                    $container.append(element);
                    widget.doResize({width: itemConfig.width, height: itemConfig.height});
                } else if (itemConfig.el instanceof $) {
                    var element = itemConfig.el;
                    element.css({left: itemConfig.x, top: itemConfig.y, position: "absolute"});
                    $container.append(element);
                }
            }
            this.element.data('jlayout', jLayout.parameter(opts));
            // IE杂项模式下,如果高度是0,会是几十像素的高度,有边框的情况宽度为0不显示
            if (FR.Browser.msie && !$.support.boxModel) {
                if (opts.height === 0) {
                    opts.height = 1;
                }
                if (opts.width === 0) {
                    opts.width = 1;
                }
            }
        },

        doResize: function (give) {
            FR.ParameterLayout.superclass.doResize.call(this, give);
            var opts = this.options;
            this.element.css({
                width: (give ? (give.width || opts.width) : opts.width),
                height: give ? (give.height || opts.height) : opts.height,
                left: give ? (give.left || opts.left) : opts.left,
                top: give ? (give.top || opts.top) : opts.top
            });
            //wei : 里面的控件也要doResize一下的。
            for (var i = 0, len = this.options.widgets.length; i < len; i++) {
                var widget = this.options.widgets[i];
                if ($.isFunction(widget.doResize)) {
                    //我们有的控件判断了doResize的参数是否空，是就用option.width/height，有的就没做判断，调用doResize会抛错。
                    widget.doResize({});
                }
            }
        },
        doLayout: function () {
            FR.ParameterLayout.superclass.doLayout.apply(this, arguments);
            for (var i = 0, len = this.options.widgets.length; i < len; i++) {
                var widget = this.options.widgets[i];
                if ($.isFunction(widget.doLayout)) {
                    widget.doLayout();
                }
            }
        }
    });
    $.shortcut('parameter', FR.ParameterLayout);

    /**
     * 流式布局
     *
     *     @example
     *     var $area = $('<div>').css({width: 300, height:300, background:'gray'}).appendTo('body');
     *     var editor = new FR.FlowLayout({
     *          renderEl : $area,
     *          hgap : 5,
     *          vgap : 5,
     *          items : [
     *              {el: {type: 'button', text: 'flow1', width: 60, height: 50}},
     *              {el: {type: 'button', text: 'flow2', width: 60, height: 30}},
     *              {el: {type: 'button', text: 'flow3', width: 60, height: 30}},
     *              {el: {type: 'button', text: 'flow4', width: 90, height: 30}},
     *              {el: {type: 'button', text: 'flow5', width: 90, height: 30}},
     *              {el: {type: 'button', text: 'flow6', width: 90, height: 30}},
     *              {el: {type: 'button', text: 'flow7', width: 90, height: 30}},
     *              {el: {type: 'button', text: 'flow8', width: 180, height: 30}}
     *          ]
     *     });
     *     editor.doLayout();
     *
     * @class FR.FlowLayout
     * @extends FR.Layout
     *
     * @cfg {JSON} options 配置属性
     * @cfg {Number} [options.hgap=5] 水平间隙
     * @cfg {Number} [options.vgap=5] 垂直间隙
     */
    FR.FlowLayout = FR.extend(FR.Layout, /**@class FR.FlowLayout*/{

        _defaultConfig: function () {
            return $.extend(FR.FlowLayout.superclass._defaultConfig.apply(), {
                hgap: 5,
                vgap: 5,
                baseCls: 'fr-flowlayout'
            });
        },

        _init: function () {
            FR.FlowLayout.superclass._init.apply(this, arguments);
            var opts = this.options;
            this.element.addClass(opts.baseCls);
            var items = opts.items, i, len = items.length;
            opts.widgets = [];
            for (i = 0; i < len; i++) {
                var itemConfig = items[i];
                if (itemConfig.el && itemConfig.el.type) {
                    if (!itemConfig.el.style) {
                        itemConfig.el.style = opts.style;
                    }
                    var widget = FR.createWidget($.extend(itemConfig.el, {
                        resultWidgets: opts.resultWidgets
                    }));
                    // 将子widget放到widgets对象里面,以便在doLayout的时候方便使用
                    opts.widgets.push(widget);
                    var element = widget.element;
                    // richer:由于已经生成了widget,就没必要再保存原来的JSON对象了
                    items[i].el = element;
                    this.element.append(element);
                } else if (itemConfig.el instanceof $) {
                    this.element.append(itemConfig.el);
                }
            }
            this.element.data('jlayout', jLayout.flow(opts));
        },

        doResize: function (give) {
            FR.FlowLayout.superclass.doResize.call(this, give);
            var opts = this.options;
            this.element.css({
                width: opts.width,
                height: opts.height,
                left: opts.left,
                top: opts.top
            });
        },

        doLayout: function () {
            FR.FlowLayout.superclass.doLayout.apply(this, arguments);
        }
    });
    $.shortcut("flow", FR.FlowLayout);

    /**
     * 格子布局
     *
     *     @example
     *     var $area = $('<div>').css({width: 300, height:300, background:'gray'}).appendTo('body');
     *     var layout = new FR.GridLayout({
     *              renderEl : $area,
     *              columns: 4,
     *              rows : 3,
     *              widths : ['auto', 30, 'auto', 'auto'],//手动设置宽度，auto表示把除手动设置的以外的宽度均分
     *              heights : ['auto', 'auto', 'auto'],//手动设置宽度，auto表示把除手动设置的以外的高度均分
     *              items : [
     *                  { column : 0,
     *                    row : 0,
     *                    el : {type : 'button', text : 'button1'}
     *                  },
     *                  { column : 1,
     *                    row : 1,
     *                    el : $('<div>').css({background : 'green'})
     *                  },
     *                  { column : 3,
     *                    row : 2,
     *                    el : $('<div>').css({background : 'red'})
     *                  }
     *              ]
     *     });
     *     layout.doLayout();
     *
     * @class FR.GridLayout
     * @extends FR.Layout
     *
     * @cfg {JSON} options 配置属性
     * @cfg {Number} [options.hgap=0] 子组件之间的水平间隙
     * @cfg {Number} [options.vgap=0] 子组件之间的垂直间隙
     * @cfg {Number} [options.leftGap=0] 左边留的空隙
     * @cfg {Number} [options.rightGap=0] 右边留的空隙
     * @cfg {Number} [options.topGap=0] 上边留的空隙
     * @cfg {Number} [options.bottomGap=0] 下边留的空隙
     */
    FR.GridLayout = FR.extend(FR.Layout, {

        _defaultConfig: function () {
            return $.extend(FR.GridLayout.superclass._defaultConfig.apply(), {
                hgap: 0,
                vgap: 0,
                // 左边留的空隙
                leftGap: 0,
                rightGap: 0,
                // 上边留的空隙
                topGap: 0,
                bottomGap: 0,
                baseCls: 'fr-gridlayout'
            });
        },

        _init: function () {
            FR.GridLayout.superclass._init.apply(this, arguments);
            var opts = this.options;
            this.element.addClass(opts.baseCls);
            var items = opts.items, len = items.length;
            opts.widgets = [];
            for (var j = 0; j < len; j++) {
                var itemConfig = items[j];
                if (itemConfig.el.type) {
                    // 根据items的配置文件生成控件
                    if (!itemConfig.el.style) {
                        itemConfig.el.style = opts.style;
                    }
                    var widget = FR.createWidget($.extend(itemConfig.el, {
                        resultWidgets: opts.resultWidgets
                    }));
                    opts.widgets.push(widget);
                    var element = widget.element;
                } else {
                    element = itemConfig.el;
                }
                itemConfig.el = element;
                this.element.append(element);
            }
            this.element.data('jlayout', jLayout.gridLayout(opts));
        },

        doResize: function (give) {
            FR.GridLayout.superclass.doResize.call(this, give);
            var opts = this.options;
            this.element.css({
                width: (give ? (give.width || opts.width) : opts.width),
                height: (give ? (give.height || opts.height) : opts.height),
                left: give ? (give.left || opts.left) : opts.left,
                top: give ? (give.top || opts.top) : opts.top
            });
        },

        doLayout: function () {
            FR.GridLayout.superclass.doLayout.apply(this, arguments);
        }
    });
    $.shortcut("grid", FR.GridLayout);


    /**
     * 冻结格子布局
     * @class FR.FrozenGridLayout
     * @extends FR.Layout
     * @private
     */
    FR.FrozenGridLayout = FR.extend(FR.Layout, /**FR.FrozenGridLayout*/{

        _init: function () {
            FR.FrozenGridLayout.superclass._init.apply(this, arguments);
            var $thisEl = this.element;
            var o = this.options;
            $.each(o.items || [], function (idx, item) {
                // alex:只有当regionEl.parent()不是container才调用appendTo方法,原因是appendTo会改变regionEl的位置
                if (item.parent()[0] != $thisEl[0]) {
                    item.appendTo($thisEl);
                }
            });
            $thisEl.data('jlayout', jLayout.grid(o));
            // 如果设置了layout,那么overflow必然要设置为hidden
        },

        doLayout: function () {
            this.element.doLayout();
        },

        doResize: function (give) {
            FR.FrozenGridLayout.superclass.doResize.apply(this, arguments);
            var opts = this.options;
            this.element.css({
                width: (give ? (give.width || opts.width) : opts.width) - (this.marginWidth || 0),
                height: (give ? (give.height || opts.height) : opts.height) - (this.marginHeight || 0),
                left: give ? (give.left || opts.left) : opts.left,
                top: give ? (give.top || opts.top) : opts.top
            });
        }
    });
    $.shortcut("frozengrid", FR.FrozenGridLayout);

    /**
     * 表格布局
     *
     *     @example
     *     var $area = $('<div>').css({width: 300, height:200, background:'gray'}).appendTo('body');
     *     var layout = new FR.TableLayout({
     *           renderEl : $area,
     *           items: [
     *               [
     *                  null,
     *                  {el : {type: 'label', value: 'label1'}},
     *                  {el : {type: 'button', text: '点击放大区域', handler : function() {
     *                           $area.css({width : 500});
     *                           layout.doLayout();
     *                  }}}
     *              ],
     *              [
     *                  null,
     *                  {el : {type: 'label', value: 'label2'}},
     *                  {el : {type: 'button', text: '点击缩小区域', handler : function() {
     *                          $area.css({width : 300});
     *                          layout.doLayout();
     *                  }}}
     *              ],
     *              [
     *
     *                  {el : $("<div>Space</div>")},
     *                  {el : {type: 'label', value: 'label3'}},
     *                  {el : $("<div>I am a div, align to left!</div>")}
     *              ]
     *          ],
     *          columnSize : [40, 0.4, 'fill'],
     *          rowSize : [24, 24, 24],
     *          vgap : 20
     *     });
     *     layout.doLayout();
     *
     * @class FR.TableLayout
     * @extends FR.Layout
     *
     * @cfg {JSON} options 配置属性
     * @cfg {Number} [options.vgap=5] 组件间的垂直间隙
     * @cfg {Array} options.items 子组件
     * @cfg {Array} options.columnSize 列宽数组，由数字组成，该数字的最后一个元素不是数字表示最后一列自适应剩下的宽度
     * @cfg {Array} options.rowSize 行高数组，由数字组成，该数字的最后一个元素不是数字表示最后一列自适应剩下的高度
     */
    FR.TableLayout = FR.extend(FR.Layout, {

        _defaultConfig: function () {
            return $.extend(FR.TableLayout.superclass._defaultConfig.apply(), {
                baseCls: 'fr-layout-table',
                vgap: 5,
                items: [],
                columnSize: [],
                rowSize: [],
                scrollable: false
            });
        },

        _init: function () {
            FR.TableLayout.superclass._init.apply(this, arguments);
            var opts = this.options;
            var items = opts.items;
            var $container = this.element;
            if (opts.scrollable) {
                $container = $('<div class="fr-core-layout-scrollable">').css({
                    position: 'absolute',
                    top: 0,
                    left: 0
                }).appendTo(this.element);
                opts.scrollContainer = $container;
            }
            for (var i = 0; i < items.length; i++) {
                var rowItems = items[i];
                for (var j = 0; j < rowItems.length; j++) {
                    var item = rowItems[j];
                    if (item == null) {
                        continue;
                    }
                    // richie:需要防止item为null的情况
                    if (item && item.el && item.el.type) {
                        if (!item.el.style) {
                            item.el.style = opts.style;
                        }
                        var widget = FR.createWidget($.extend(item.el, {
                            resultWidgets: opts.resultWidgets
                        }));
                        item.element = widget.element;
                    } else if (item && item.el instanceof $) {
                        item.element = item.el;
                    }
                    $container.append(item.element);
                }
            }
            this.element.data('jlayout', jLayout.tableLayout(opts));
        },

        /**
         * 设置表格布局的指定行的可见性，如果该行不可见，其余的行会依次填补掉不可见行的位置
         * @param {Number/Number[]} index 要改变的行或者行组成的数组
         * @param {Boolean} flag 可见性，true表示要设置为可见，false表示要设置为不可见
         */
        setRowVisible: function (index, flag) {
            if ($.isArray(index)) {
                for (var r = 0; r < index.length; r++) {
                    this.setRowVisible(index[r], flag);
                }
            } else {
                var currentItem = this.options.items[index];
                for (var i = 0; i < currentItem.length; i++) {
                    var item = currentItem[i];
                    if (item && item.element) {
                        if (flag === true) {
                            item.element.show();
                        } else {
                            item.element.hide();
                        }
                    }
                }
            }
        },

        /**
         * 判断该行是否可见
         * @param {Number} index 行数索引
         * @returns {Boolean} 返回是否可见
         */
        isRowVisible: function (index) {
            var currentItem = this.options.items[index];
            for (var i = 0; i < currentItem.length; i++) {
                var item = currentItem[i];
                if (item && item.element) {
                    if (!item.element.isVisible()) {
                        return false;
                    }
                }
            }
            return true;
        },

        /**
         * 重置行属性，并刷新布局
         * @param {Number[]} rowSize 行高数组
         */
        refreshRowSize: function (rowSize) {
            this.options.rowSize = rowSize;
            this.element.data('jlayout', jLayout.tableLayout(this.options));
            this.doLayout();
        },

        doResize: function (give) {
            FR.TableLayout.superclass.doResize.call(this, give);
            var opts = this.options;
            this.element.css({
                width: (give ? (give.width || opts.width) : opts.width),
                height: (give ? (give.height || opts.height) : opts.height),
                left: give ? (give.left || opts.left) : opts.left,
                top: give ? (give.top || opts.top) : opts.top
            });
            this.doLayout();
        },

        doLayout: function () {
            FR.TableLayout.superclass.doLayout.apply(this, arguments);
        }
    });
    $.shortcut("tablelayout", FR.TableLayout);

    /**
     * 边界布局
     *
     *     @example
     *     var $area = $('<div>').css({
     *          position : 'absolute',
     *          top : 5,
     *          left : 5,
     *          width: 300,
     *          height:120,
     *          background:'gray'}).appendTo('body');
     *     var editor = new FR.BorderLayout({
     *           renderEl : $area,
     *           items : [
     *               {
     *                   region: 'north',
     *                   height: 20,
     *                   el: {type: 'button', text: 'North'}
     *               },
     *               {
     *                  region: 'south',
     *                  height: 20,
     *                  el: {type: 'button', text: 'South'}
     *               },
     *               {
     *                   region: 'center',
     *                   el: {type: 'button', text: 'Center'}
     *               },
     *               {
     *                   region: 'east',
     *                   width: 30,
     *                  el: {type: 'button',text: 'East'}
     *               },
     *               {
     *                   region: 'west',
     *                   width: 30,
     *                   el: {type: 'button',text: 'West'}
     *               }
     *           ]
     *      });
     *      editor.doLayout();
     *
     * @class FR.BorderLayout
     * @extends FR.Layout
     *
     * @cfg {JSON} options 配置属性
     * @cfg {Array} options.items 布局容器中的内容
     */
    FR.BorderLayout = FR.extend(FR.Layout, {

        _defaultConfig: function () {
            return $.extend(FR.BorderLayout.superclass._defaultConfig.apply(), {
                baseCls: 'fr-quick-border-layout'
            });
        },

        _init: function () {
            FR.BorderLayout.superclass._init.apply(this, arguments);
            var opts = this.options;
            var items = opts.items;
            var regionsAvailable = ["north", "south", "east", "west", "center"];
            this.regionField = {};
            for (var i = 0; i < items.length; i++) {
                var item = items[i];
                var region = item['region'];
                if (regionsAvailable.indexOf(region) != -1) {
                    if (item.el && item.el.type) {
                        if (!item.el.style) {
                            item.el.style = opts.style;
                        }
                        var widget = FR.createWidget($.extend(item.el, {
                            width: item.width,
                            height: item.height,
                            resultWidgets: opts.resultWidgets
                        }));
                        item.el = widget.element;
                    }
                    this.element.append(item.el);
                    this.regionField[region] = item;
                }
            }
            this.element.data('jlayout', jLayout.borderlayout(this.regionField));
        },

        /**
         * 动态改变区域的尺寸
         * @param {"north"/"south"/"east"/"west"} region 区域，可以是东南西北四个位置的任意一个
         * @param {Number} wh 高度或者宽度值
         */
        setRegionWH: function (region, wh) {
            if (!region || isNaN(wh)) {
                return;
            }
            switch (region) {
                case 'north' :
                    this.regionField['north'].height = wh;
                    break;
                case 'south' :
                    this.regionField['south'].height = wh;
                    break;
                case 'east' :
                    this.regionField['east'].width = wh;
                    break;
                case 'west' :
                    this.regionField['west'].width = wh;
                    break;
                default :
            }
            this.element.data('jlayout', jLayout.borderlayout(this.regionField));
        },

        doResize: function (give) {
            FR.BorderLayout.superclass.doResize.call(this, give);
            var opts = this.options;
            this.element.css({
                width: (give ? (give.width || opts.width) : opts.width),
                height: (give ? (give.height || opts.height) : opts.height),
                left: give ? (give.left || opts.left) : opts.left,
                top: give ? (give.top || opts.top) : opts.top
            });
            this.doLayout();
        },

        doLayout: function () {
            FR.BorderLayout.superclass.doLayout.apply(this, arguments);
        }
    });
    $.shortcut('border', FR.BorderLayout);

    /**
     * 居中布局
     *
     *      @example
     *      var $wrapper = $('<div>').css({
     *          width : 300,
     *          height : 200,
     *          top : 5,
     *          left : 5,
     *          position : 'absolute',
     *          background : 'red'
     *      }).appendTo('body');
     *      var layout = FR.createWidget({
     *          renderEl : $wrapper,
     *          type : 'center',
     *          item : {
     *              width : 150,
     *              height : 150,
     *              el : $('<div>').css({background:'green'})
     *          }
     *      });
     *      layout.doLayout();
     *
     * @class FR.CenterLayout
     * @extends FR.Layout
     *
     * @cfg {JSON} options 居中布局的各种属性配置
     * @cfg {JSON} options.item 布局中的元素配置属性
     * @cfg {Number/'auto'} [options.item.width='auto'] 中间部分的宽度
     * @cfg {Number/'auto'} [options.item.height='auto'] 中间部分的高度
     * @cfg {JSON/jQuery} options.item.el 布局中元素对象，可以是一个JSON格式的控件配置属性，也可以是一个jQuery对象
     */
    FR.CenterLayout = FR.extend(FR.Layout, {
        _defaultConfig: function () {
            return $.extend(FR.CenterLayout.superclass._defaultConfig.apply(), {
                baseCls: 'fr-quick-center-layout'
            });
        },
        _init: function () {
            FR.CenterLayout.superclass._init.apply(this, arguments);
            var opts = this.options, item = opts.item;
            if (item && item.el) {
                if (item.el.type) {
                    if (!item.el.style) {
                        item.el.style = opts.style;
                    }
                    var widget = FR.createWidget($.extend(item.el, {
                        width: item.width,
                        height: item.height,
                        resultWidgets: opts.resultWidgets
                    }));
                    item.el = widget.element;
                } else if (!(item.el instanceof $)) {
                    FR.Msg.toast('el must be a widget or a jQuery element!');
                    item.el = $('<div>');
                }
                this.element.append(item.el);
            }
            this.element.data('jlayout', jLayout.center(opts));
        },
        doLayout: function () {
            FR.CenterLayout.superclass.doLayout.apply(this, arguments);
        }

    });
    $.shortcut('center', FR.CenterLayout);

    /**
     * 卡片布局
     * @class FR.CardLayout
     * @extends FR.Layout
     *
     * @cfg {JSON} options 配置属性
     * @cfg {Number} [options.defaultShowIndex=0] 默认加载完显示的tab子组件索引
     * @cfg {Function} [hideAction=null] 子组件隐藏函数，默认会调用jQuery的hide()
     * @cfg {JSON} hideAction.item 隐藏函数的参数，表示即将隐藏的当前项
     */
    FR.CardLayout = FR.extend(FR.Layout, {

        _defaultConfig: function () {
            return $.extend(FR.CardLayout.superclass._defaultConfig.apply(), {
                baseCls: 'fr-quick-card-layout',
                defaultShowIndex: 0,
                hideAction : null,
                showAction : null
            });
        },

        _init: function () {
            FR.CardLayout.superclass._init.apply(this, arguments);
            var opts = this.options;
            this.name2Index = {};
            this.cardsHasCreated = [];
            this._initNameMap();
            this.showCardByIndex(opts.defaultShowIndex);
        },
        /**
         * 初始化控件名索引
         * @private
         */
        _initNameMap: function () {
            var items = this.options.items;
            for (var i = 0; i < items.length; i++) {
                var name;
                if (items[i].el) {
                    name = items[i].el.widgetName;
                } else {
                    name = items[i].widgetName;
                }
                if (!FR.isEmpty(name)) {
                    this.name2Index[name] = i;
                }
            }
        },

        showPaneByIndex: function(index) {
            this.showCardByIndex(index);
        },

        /**
         * 显示指定位置的布局容器
         * @param index 位置索引
         */
        showCardByIndex: function (index) {
            var opts = this.options;
            var items = opts.items;
            this.showIndex = index;
            for (var h = 0; h < this.cardsHasCreated.length; h++) {
                var idx = this.cardsHasCreated[h];
                var it = items[idx];
                this._hideItem(it);
            }
            if (index > -1 && index < items.length) {
                var ii = this.cardsHasCreated.indexOf(index);
                if (ii == -1) {
                    var item = items[index];
                    if (!item.el) {
                        item.el = item;
                    }
                    if (item && item.el && item.el.type) {
                        var widget = FR.createWidget($.extend(item.el, {
                            resultWidgets: opts.resultWidgets
                        }));
                        item.el = widget.element;
                    }
                    item.el.hide();
                    this.element.append(item.el);
                    this.cardsHasCreated.push(index);
                    this.element.data('jlayout', jLayout.card(opts));
                    this._showItem(item);
                } else {
                    it = items[index];
                    this._showItem(it);
                }
            }
            this.doLayout();
        },

        _hideItem : function(item) {
            var opts = this.options;
            if ($.isFunction(opts.hideAction)) {
                opts.hideAction.apply(this, [item]);
            } else {
                item.el.hide();
            }
        },
        _showItem : function(item) {
            item.el.show();
        },

        /**
         * 获取当前所显示布局容器的索引位置
         * @returns {*}
         */
        getShowIndex: function(){
            return this.showIndex? this.showIndex:this.options.defaultShowIndex;
        },

        /**
         * 根据子容器的控件名显示指定位置的布局容器
         * @param name 控件名
         */
        showPaneByName: function(name) {
            return this.showCardByName(name);
        },

        /**
         * 根据子容器的控件名显示指定位置的布局容器
         * @param name 控件名
         */
        showCardByName: function (name) {
            if (FR.isEmpty(name)) {
                return;
            }
            this.showCardByIndex(this.name2Index[name.toUpperCase()]);
        },

        doResize: function (give) {
            FR.CardLayout.superclass.doResize.call(this, give);
            var opts = this.options;
            this.element.css({
                width: (give ? (give.width || opts.width) : opts.width),
                height: (give ? (give.height || opts.height) : opts.height),
                left: give ? (give.left || opts.left) : opts.left,
                top: give ? (give.top || opts.top) : opts.top
            });
            this.doLayout();
        },

        doLayout: function () {
            FR.CardLayout.superclass.doLayout.apply(this, arguments);
        }
    });
    $.shortcut('card', FR.CardLayout);

})(jQuery);
;
(function () {
    var dialog;
    var loadingDialog;
    var fileUploadDialog;

    /**
     * FR工具类
     *
     *
     * @class FR
     */
    $.extend(FR, {
        /**
         * 显示一个带有“确定”和“取消”按钮的对话框
         *
         *          @example
         *              var config = {title : '测试', height : 120};
         *              FR.showConfirmDialog(config);
         * @static
         *
         * @param {JSON} config 对话框的配置属性
         * @param {String} [config.title=' '] 对话框的标题
         * @param {String} [config.text4OK='确定'] 确认按钮的文字
         * @param {String} [config.text4Cancel='取消'] 取消按钮的文字
         * @param {Boolean} [config.destroyOnClose=true] 是否在关闭对话框的时候将对话框从dom中移除
         * @param {Number} [config.width=400] 对话框的宽度
         * @param {Number} [config.height=300] 对话框的高度
         * @param {String} [config.contentUrl] {@link FR.Panel#contentUrl}
         * @param {String} [config.contentHtml] {@link FR.Panel#contentHtml}
         * @param {Object} [config.contentWidget] {@link FR.Panel#contentWidget}
         * @param {String} [config.contentText] {@link FR.Panel#contentText}
         * @param {Object} [config.tools] {@link FR.Panel#tools}
         * @param {'blue'/'green'/'gray'} [config.style='blue'] 对话框的样式
         */
        showConfirmDialog: function (config) {
            FR.showUpdateDialog(config);
        },

        /**
         * @deprecated
         * {@link #showConfirmDialog}
         */
        showUpdateDialog: function (config) {
            var o = $.extend({
                title: " ",                 // 对话框的标题
                text4OK: FR.i18nText("FR-Basic_OK"),        // 确认按钮的文字
                text4Cancel: FR.i18nText("FR-Basic_Cancel"),// 取消按钮的文字
                onOK: FR.emptyFn(),         // 点击确认按钮后触发的事件
                onCancel: FR.emptyFn(),     // 点击取消按钮后触发的事件
                destroyOnClose: true,       // 是否在关闭对话框的时候将对话框从dom中移除
                width: 400,                 // 对话框的宽度
                height: 300,                // 对话框的高度
                modal: true,                // 是否是模态对话框（模态对话框将只有最上层的对话框可以被选中）
                confirm: true,              // 是否包含确定取消按钮面板，为false则弹出普通的对话框
                doSize: true,               // 初始化的时候是否需要计算内部元素大小，必须为true
                border: true,               // 对话框是否需要包含边框
                closable: true,             // 对话框是否可以被关闭，某些情况下需要通过API进行关闭此选项可以为false
                contentUrl: null,           // 通过ajax异步加载内容的url，需要返回html格式的文本
                contentHtml: null,          // 加载html标签，比如$("iframe")就能添加一个iframe到对话框中
                contentWidget: null,        // 添加一个已经生成的控件
                contentText: null,          // 对话框要显示的文本
                tools: null,                // 对话框的工具栏按钮
                style: null                 // 对话框的样式，默认为蓝色，总共有3种样式:blue,green,gray
            }, config);
            var dlg = new FR.Dialog(o);
            dlg.setVisible(true);
        },

        /**
         * 普通的对话框
         *
         *     @example
         *     var cfg = {title:'123', contentHtml: $('<div>sdfsdf</div>')};
         *     FR.showDialog(cfg);
         *
         * @param {JSON} config {@link #showConfirmDialog}对话框的配置属性
         * @param {String} [config.title] 对话框的标题
         * @param {Boolean} [config.destroyOnClose] 是否在关闭对话框的时候将对话框从dom中移除
         * @param {Number} [config.width] 对话框的宽度
         * @param {Number} [config.height] 对话框的高度
         * @param {jQuery} [config.contentHtml] 对话框内容
         * @static
         */
        showDialog: function (config) {
            if (arguments.length > 1) {
                // richie:用于兼容多参数的情况
                var content = arguments[3];
                //wikky:字符串还是包一层div放入contentHtml中吧。
                //如果用contentText的话可能会出现contentText和contentHtml交叉使用的情况，有时会导致显示内容出错。
                if (typeof arguments[3] === "string") {
                    content = "<div>" + arguments[3] + "</div>";
                }

                var width = arguments[1] ? Math.min(FR.windowWidth, arguments[1]) : 400;
                var height = arguments[2] ? Math.min(FR.windowHeight, arguments[2]) : 300;


                var l = $(window).width();
                var h = $(window).height();
                if (FR.Browser.isIE8Before()) {
                    l = FR.windowWidth;
                    h = FR.windowHeight;
                }
                var opts = {
                    title: arguments[0] || '' + (FR.PROJECTNAME == null ? '' : ' ' + FR.PROJECTNAME),
                    width: width,
                    height: height,
                    contentHtml: content || '',
                    left: (l - width) / 2 + $(document).scrollLeft(),   //dialog如果已经存在，不再进行初始化，dialog的位置会保持上一个dialog的位置
                    top: (h - height) / 2 + $(document).scrollTop()
                };
                //wikky：给IE特别的关照
                config = $.extend(true, {
                    modal: true,                // 是否是模态对话框（模态对话框将只有最上层的对话框可以被选中）
                    doSize: true,               // 初始化的时候是否需要计算内部元素大小，必须为true
                    border: true,               // 对话框是否需要包含边框
                    closable: true,              // 对话框是否可以被关闭，某些情况下需要通过API进行关闭此选项可以为false
                    destroyOnClose: FR.Browser.isIE() ? true : false   //对话框关闭时是否destroy，IE特殊照顾
                }, arguments[4], opts);
            }
            if (!dialog || FR.Browser.isIE()) {
                if (dialog) {                       //wikky:ie连续显示多个dialog时，必须把每个都destory后才能new。
                    FR.destroyDialog();
                }
                dialog = new FR.Dialog(config);
            } else {
                dialog.setTitle(config.title || '');
                dialog.setContent({
                    type: "contentHtml",
                    content: config.contentHtml
                });
            }
            dialog.doResize({
                width: config.width,
                height: config.height,
                left: config.left,
                top: config.top
            });
            dialog.setVisible(true);
        },

        /**
         * 嵌套一个网页作为内容的对话框
         *
         *     @example
         *     FR.showIframeDialog({title:'ttt', url:'http://www.baidu.com'});
         *     FR.showIframeDialog({title:'ttt', iframe: $("<iframe width='100%' height='100%' src='http://www.baidu.com'>")});
         *
         * @param {String/JSON} config 对话框配置属性
         * @param {String} [config.url] 网页地址
         * @param {jQuery} [config.iframe] iframe对象
         * @static
         * @returns {FR.Dialog} 显示的对话框
         */
        showIframeDialog: function (config) {
            if (typeof config == 'string') {
                config = {
                    url: config
                };
            }
            var $iframe;
            if (config.url) {
                // 如果没有加'_=' + $.now()，就给url加上
                config.url = config.url + ((/\?/.test(config.url) ? "&" : "?" ) + "_=" + $.now());
                // iframe嵌入在dialog中宽度留点,不然往里拖拽麻烦
                $iframe = $("<iframe width='100%' height='100%' scrolling='no' frameborder='0'>");
                $iframe.attr("src", config.url);
            } else if (config.iframe) {
                $iframe = $(config.iframe);
                if (config.widget) {
                    $iframe.asComponent(config.widget);
                }
            } else {
                $iframe = $("<iframe width='100%' height='100%' scrolling='no' frameborder='0'>");

            }

            return FR.showDialog(config.title, config.width || 350, config.height || 480, $iframe);
        },

        /**
         * 异步获取信息并执行相应回调函数的对话框
         * @static
         * @param {JSON} o 对话框配置属性 {@link showLoadingDialog}
         * @param {Function} o.callback 回调函数，参数为ajax的res和status
         */
        showAsyncDialog: function (o) {
            FR.showLoadingDialog(o);
            var callback = o.callback;
            FR.ajax($.extend({
                type: 'POST',
                complete: function (res, status) {
                    FR.hideLoadingDialog();
                    if (typeof (callback) == "function") {
                        callback(res, status);
                    }
                }
            }, o));
        },
        /**
         * 关闭当前显示的对话框
         * @static
         */
        closeDialog: function () {
            if (dialog != null) {
                dialog.setVisible(false);
            }
        },
        /**
         * 显示一个表示正在加载数据的小型对话框
         * @static
         * @param {JSON} [o] 对话框的配置属性
         * @param {Number} [o.width=200] 对话框宽度
         * @param {Number} [o.height=80] 对话框高度
         * @param {String} [o.title='正在加载'] 对话框标题
         * @param {Boolean} [o.closable=false] 对话框是否可以被手动关闭
         * @param {String} [o.contentHtml] 对话框内显示的内容
         * @param {String} [o.processURL] 默认对话框内容加上简单进度
         */
        showLoadingDialog: function (o) {
            o = o || {};
            o.width = o.width || 200;
            o.height = o.height || 80;
            o.title = o.title || FR.i18nText("FR-Basic_Loading");
            o.closable = o.closable || false;
            o.modal = true;
            o.animate = 0;
            o.contentHtml = o.contentHtml || "<div class='fr-core-panel-loading'>" + (o.text ? o.text : FR.i18nText("FR-Basic_Loading")) + "</div>";
            o.processURL = o.processURL;
            o.interval = o.interval || 1000;
            if (loadingDialog == null) {
                loadingDialog = new FR.Dialog(o);
            } else {
                loadingDialog.setTitle(o.title);
                loadingDialog.doResize({
                    width: o.width,
                    height: o.height
                });
                loadingDialog.setContent({
                    type: "contentHtml",
                    content: o.contentHtml
                });
            }
            loadingDialog.setVisible(true);
            if (o.processURL) {
                var process = function () {
                    FR.ajax({
                        type: 'POST',
                        url: o.processURL,
                        cache: false,
                        async: false,
                        success: function (res, status) {
                            if (res) {
                                $('.fr-core-panel-loading').html(o.text + res);
                            }
                        }
                    });
                }
                loadingDialog.interval = setInterval(process, o.interval);
            }
        },

        /**
         * 关闭用于表示正在加载数据的对话框，一般在数据加载完成后调用此方法
         * @static
         */
        hideLoadingDialog: function () {
            if (loadingDialog != null) {
                loadingDialog.setVisible(false);
                if (loadingDialog.interval) {
                    clearInterval(loadingDialog.interval);
                }
            }
        },

        /**
         * 销毁对话框，将对话框从dom上移除
         * @static
         */
        destroyDialog: function () {
            if (dialog != null) {
                dialog.destroy();
                dialog = null;
            }
        },
        /**
         * 展示邮件发送的对话框
         * @static
         * @param {Object} [o] 对话框的配置属性
         * @param {Number} [o.width=400] 邮件对话框宽度
         * @param {Number} [o.height=410] 邮件都会画框高度
         * @param {Function} [o.onFinish] 邮件发送完成时执行的函数
         */
        showEmailDialog: function (o) {
            o = o || {};
            o.width = o.width || 400;
            o.height = o.height || 410;
            o.title = FR.i18nText("FR-Basic_Email");
            o.onFinish = o.onFinish || FR.emptyFn();
            // 一些基本的常量，统一在开始声明
            var fontsize = 12, fontfamily = "simsun", label_color = '#4C4C4C', sessionID = o.sessionID || '',
                northHeight = 20, autoCloseTime = 8000, smallRightPadding = 37, mediumRightPadding = 71;
            var format_items = [
                {text: FR.i18nText("FR-Export_PDF"), value: "PDF"},
                {text: FR.i18nText("FR-Export_Excel"), value: "Excel"},
                {text: FR.i18nText("FR-Export_Word"), value: "Word"},
                {text: FR.i18nText("FR-Export_SVG"), value: "SVG"}
            ];
            var rh = 21;
            // 邮件发送面板采用tablelayout布局
            var tableLayout = FR.createWidget({
                type: 'tablelayout',
                columnSize: [90, 26, 245],
                rowSize: [rh, rh, rh, rh, rh, rh, 90, rh],
                vgap: 10,
                items: [
                    [
                        {
                            el: {
                                type: 'label',
                                color: label_color,
                                value: FR.i18nText("FR-Basic-Email_From"),
                                fontsize: fontsize,
                                verticalcenter: true,
                                textalign: 'right',
                                fontfamily: fontfamily
                            }
                        },
                        {el: $('<div>')},
                        {
                            el: {
                                type: 'border', items: [
                                    {region: 'east', el: $('<div>'), width: mediumRightPadding},
                                    {
                                        region: 'center',
                                        el: {
                                            type: 'text',
                                            widgetName: 'FROM',
                                            disabled: true,
                                            watermark: 'loading data...'
                                        }
                                    }
                                ]
                            }
                        }
                    ],
                    [
                        {
                            el: {
                                type: 'label',
                                color: label_color,
                                value: FR.i18nText("HJS-Mail_to"),
                                fontsize: fontsize,
                                verticalcenter: true,
                                textalign: 'right',
                                fontfamily: fontfamily
                            }
                        },
                        {el: $('<div>')},
                        {
                            el: {
                                type: 'border', items: [
                                    {region: 'east', el: $('<div>'), width: mediumRightPadding},
                                    {
                                        region: 'center',
                                        el: {
                                            type: 'combocheckbox',
                                            widgetName: 'TO',
                                            directEdit: true,
                                            widgetUrl: FR.servletURL + "?op=fr_email&cmd=get_contacts_name&sessionID=" + sessionID,
                                            supportTag: true
                                        }
                                    }
                                ]
                            }
                        }
                    ],
                    [
                        {
                            el: {
                                type: 'label',
                                color: label_color,
                                value: FR.i18nText("HJS-CC_to"),
                                fontsize: fontsize,
                                verticalcenter: true,
                                textalign: 'right',
                                fontfamily: fontfamily
                            }
                        },
                        {el: $('<div>')},
                        {
                            el: {
                                type: 'border', items: [
                                    {region: 'east', el: $('<div>'), width: mediumRightPadding},
                                    {
                                        region: 'center',
                                        el: {
                                            type: 'combocheckbox',
                                            widgetName: 'CC',
                                            directEdit: true,
                                            widgetUrl: FR.servletURL + "?op=fr_email&cmd=get_contacts_name&sessionID=" + sessionID,
                                            supportTag: true
                                        }
                                    }
                                ]
                            }
                        }
                    ],
                    [
                        {
                            el: {
                                type: 'label',
                                color: label_color,
                                value: FR.i18nText("HJS-BCC_to"),
                                fontsize: fontsize,
                                verticalcenter: true,
                                textalign: 'right',
                                fontfamily: fontfamily
                            }
                        },
                        {el: $('<div>')},
                        {
                            el: {
                                type: 'border', items: [
                                    {region: 'east', el: $('<div>'), width: mediumRightPadding},
                                    {
                                        region: 'center',
                                        el: {
                                            type: 'combocheckbox',
                                            widgetName: 'BCC',
                                            directEdit: true,
                                            widgetUrl: FR.servletURL + "?op=fr_email&cmd=get_contacts_name&sessionID=" + sessionID,
                                            supportTag: true
                                        }
                                    }
                                ]
                            }
                        }
                    ],
                    [
                        {
                            el: {
                                type: 'label',
                                color: label_color,
                                value: FR.i18nText("FR-Basic-Email_Format"),
                                fontsize: fontsize,
                                textalign: 'right',
                                fontfamily: fontfamily
                            }
                        },
                        {el: $('<div>')},
                        {
                            el: {
                                type: 'border', items: [
                                    {region: 'east', el: $('<div>'), width: mediumRightPadding},
                                    {
                                        region: 'center',
                                        el: {
                                            type: 'combo',
                                            widgetName: 'FORMAT',
                                            model: 'local',
                                            directEdit: true,
                                            items: format_items
                                        }
                                    }
                                ]
                            }
                        }
                    ],
                    [
                        {
                            el: {
                                type: 'label',
                                color: label_color,
                                value: FR.i18nText("FR-Basic-Email_Subject"),
                                fontsize: fontsize,
                                verticalcenter: true,
                                textalign: 'right',
                                fontfamily: fontfamily
                            }
                        },
                        {el: $('<div>')},
                        {
                            el: {
                                type: 'border', items: [
                                    {region: 'east', el: $('<div>'), width: smallRightPadding},
                                    {region: 'center', el: {type: 'text', widgetName: 'SUBJECT'}}
                                ]
                            }
                        }
                    ],
                    [
                        {
                            el: {
                                type: 'border', items: [
                                    {
                                        region: 'north',
                                        height: rh,
                                        el: {
                                            type: 'label',
                                            color: label_color,
                                            value: FR.i18nText("FR-Basic-Email_Message"),
                                            fontsize: fontsize,
                                            textalign: 'right',
                                            fontfamily: fontfamily
                                        }
                                    },
                                    {region: 'center', el: $('<div>')}
                                ]
                            }
                        },
                        {el: $('<div>')},
                        {el: {type: 'textarea', widgetName: 'MESSAGE', fontsize: fontsize}}
                    ],
                    [
                        {el: $('<div>')},
                        {el: $('<div>')},
                        {
                            el: {
                                type: 'checkbox',
                                widgetName: 'ISSHOWTPL',
                                text: FR.i18nText("Email-Can_Preview_Report_Content")
                            }
                        }
                    ]
                ]
            });
            // 异步的方式获取发件人地址，防止被卡死
            FR.ajax({
                url: FR.servletURL,
                type: 'POST',
                data: {
                    op: 'fr_dialog',
                    cmd: 'write_email_dialog',
                    sessionID: sessionID
                },
                complete: function (res, status) {
                    var from = tableLayout.getWidgetByName("FROM");
                    from.removeWaterMark();
                    if (status == 'success') {
                        from.setValue(res.responseText);
                    }
                }
            });
            // 点击确定按钮的时候开始发送邮件
            o.onOK = function () {
                FR.showLoadingDialog({
                    title: FR.i18nText("FR-Basic_Email"),
                    text: FR.i18nText("FR-Basic-Email_Sending") + "..."
                });
                FR.ajax({
                    url: FR.servletURL,
                    type: 'POST',
                    data: {
                        op: 'fr_email',
                        cmd: 'deal_email',
                        sessionID: sessionID,
                        FROM: tableLayout.getWidgetByName('FROM').getValue(),
                        TO: tableLayout.getWidgetByName('TO').getValue(),
                        SUBJECT: tableLayout.getWidgetByName('SUBJECT').getValue(),
                        CC: tableLayout.getWidgetByName('CC').getValue(),
                        BCC: tableLayout.getWidgetByName('BCC').getValue(),
                        MESSAGE: tableLayout.getWidgetByName('MESSAGE').getValue(),
                        FORMAT: tableLayout.getWidgetByName('FORMAT').getValue(),
                        ISSHOWTPL: tableLayout.getWidgetByName('ISSHOWTPL').getValue()
                    },
                    complete: function (res, status) {
                        o.onFinish.apply();
                        if (status == 'success') {
                            var responseText = FR.jsonDecode(res.responseText);
                            var text;
                            if (responseText.status == "success") {
                                text = FR.i18nText("FR-Basic_Email_Send_Success");
                            } else {
                                text = FR.i18nText("FR-Basic_Email_Send_Failed") + "\n" + FR.i18nText("FR-Basic_Email_Send_Error");
                            }
                            FR.hideLoadingDialog();
                            FR.Msg.alert(FR.i18nText("FR-Basic_Email"), text, autoCloseTime);
                        }
                    }
                });
            };
            o.contentWidget = {
                type: 'border',
                items: [
                    {region: 'north', el: $('<div>'), height: northHeight},
                    {region: 'center', el: tableLayout.element}
                ]
            };
            FR.showUpdateDialog(o);
        },

        /**
         * 文件上传对话框
         *
         *     @example
         *     var cfg = {
         *         title: "文件上传",
         *         url: "http://localhost:8080/WebReport/xxxServer"
         *     };
         *     FR.showUploadDialog(cfg);
         *
         * @static
         * @param {Object} o 文件上传对话框配置属性
         * @param {String} o.url 文件上传的服务器地址
         * @param {String} [o.allowTypes] 允许上传的文件后缀
         * @param {String} [o.err] 上传错误时的信息
         * @param {Boolean} [o.autoUpload=false] 自动上传
         * @param {Function} [o.callback] 上传完成的回调函数
         * @param {Function} [o.beforeAction] 上传前执行的函数
         * @param {Function} [o.afterAction] 上传完成后指定的函数
         */
        showUploadDialog: function (o) {
            o.title = FR.i18nText("FR-Basic_File_Upload");
            if (fileUploadDialog == null) {
                fileUploadDialog = new FR.Dialog(o);
            }
            fileUploadDialog.options = $.extend({
                url: '',
                el: this,
                allowTypes: '',
                err: '',
                callback: FR.emptyFn,
                autoUpload: false,
                beforeAction: FR.emptyFn,
                afterAction: FR.emptyFn
            }, o);
            fileUploadDialog.doResize({
                width: fileUploadDialog.options.autoUpload ? 360 : 440,
                height: 300
            });
            var fileupload = $('<input type="file" name="file" size="35" style="width:320px"/>').change(function () {
                FR.autoSubmit(fileUploadDialog.options, fileUploadDialog.$form);
            });
            var okbtn = $('<input type="button" value="' + FR.i18nText("FR-Basic_OK") + '" style="width:80px;margin-top:10px;"/>').click(function () {
                FR.autoSubmit(fileUploadDialog.options, fileUploadDialog.$form);
            });
            if (fileUploadDialog.options.autoUpload) {
                fileUploadDialog.$form = $('<form enctype="multipart/form-data" style="padding:10px"></form>').append(fileupload);
            } else {
                fileUploadDialog.$form = $('<form enctype="multipart/form-data" style="padding:10px"><input name="file" type="file" size="35" style="width:320px"/></form>').append(okbtn);
            }
            fileUploadDialog.setContent({
                type: "contentHtml",
                content: fileUploadDialog.$form
            });
            fileUploadDialog.setVisible(true);
        },

        /**
         * 清除当前页面上所有对话框
         */
        clearAllDialog: function () {
            $(".fr-core-window").remove();
            $(".fr-core-window-mask").remove();
        },

        /**
         * 图片预加载
         * @param {Array} imgs 图片路径集合
         * @private
         */
        preloadImgs: function (imgs) {
            for (var i = 0; i < imgs.length; i++) {
                jQuery("<img>").attr("src", imgs[i]);
            }
        },
        /**
         * @private
         */
        autoSubmit: function (options, $form) {
            var $file = $('input:file', $form);

            if (!$file.val()) {
                FR.Msg.toast(FR.i18nText("Function-The_selected_file_cannot_be_null") + '!');
                return;
            } else if (options.allowTypes) {
                var fileType = $file.val().substring($file.val().lastIndexOf(".") + 1);
                if (options.allowTypes && options.allowTypes.indexOf(fileType) == -1) {
                    FR.Msg.toast(options.err ? options.err : (fileType + FR.i18nText("FR-Basic_File_Not_Allow_To_Upload") + "," + FR.i18nText("FR-Basic_File_Allow_To_Upload_Contains") + options.allowTypes));
                    return false;
                }
            } else if (options.filter) {
                if ($file.val().toLowerCase().indexOf('.' + options.filter) == -1) {
                    FR.Msg.toast(FR.i18nText("FR-Basic_File_Should_Select_Excel_File"));
                    return;
                }
            }
            FR.showLoadingDialog({
                width: 310,
                height: 80
            });
            if ($.isFunction(options.beforeAction)) {
                options.beforeAction();
            }
            FR.domFormSubmit($form, {
                url: options.url,
                timeout: 3000000
            }, function (res, status) {
                FR.hideLoadingDialog();
                if (fileUploadDialog) {
                    fileUploadDialog.setVisible(false);
                }
                if ($.isFunction(options.callback)) {
                    options.callback(res, status, options.el);
                }
                if ($.isFunction(options.afterAction)) {
                    options.afterAction();
                }
            });
        },
        /**
         * wei:把文件大小改成合适的单位(KB,MB,GB..),初始参数size的单位应当为B.
         * @private
         */
        __fileSizeFormat__: function (size) {
            if (!size) {
                return "";
            }
            var index = 0;
            var units = ['B', 'KB', 'MB', 'GB', 'TB'];
            var returnValue = size + units[index];
            while (size > 1024 && index < units.length - 1) {
                size = size / 1024;
                index++;
            }
            returnValue = size.toFixed(2) + units[index];
            return returnValue;
        }
    })
})();

$.extend(FR, /**@class FR*/{
    sentMail: function (conf) {
        FR.showLoadingDialog({
            title: FR.i18nText("FR-Basic_Email"),
            text: FR.i18nText("FR-Basic-Email_Sending") + "..."
        });
        // 之前是同步的，改为和邮件对话框那边一样异步执行
        FR.ajax({
            url: FR.servletURL,
            type: 'POST',
            data: {
                op: 'fr_email',
                cmd: 'sent_email',
                sessionID: FR.SessionMgr.getSessionID(),
                mailXML: conf.xmlconf,
                paraMap: conf.paraMap || {}
            },
            complete: function (res, status) {
                if (status == 'success') {
                    var responseText = FR.jsonDecode(res.responseText);
                    var text;
                    // 不直接后台返回具体信息，不然移动端不好用
                    if (responseText.status == "success") {
                        text = FR.i18nText("FR-Basic_Email_Send_Success");
                    } else {
                        text = FR.i18nText("FR-Basic_Email_Send_Failed") + "\n" + FR.i18nText("FR-Basic_Email_Send_Error");
                    }
                    FR.hideLoadingDialog();
                    FR.Msg.alert(FR.i18nText("FR-Basic_Email"), text, 8000);
                }
            }
        });
    },

    /**
     * 修正和校验PNG图片
     * @private
     */
    correctPNG: function (img) {
        if (img instanceof $) {
            img = img[0];
        }
        var imgID = (img.id) ? "id='" + img.id + "' " : "";
        var imgClass = (img.className) ? "class='" + img.className + "' " : "";
        var imgTitle = (img.title) ? "title='" + img.title + "' " : "title='" + img.alt + "' ";
        var imgStyle = "display:inline-block;" + img.style.cssText;
        if (img.align == "left") {
            imgStyle = "float:left;" + imgStyle;
        }
        if (img.align == "right") {
            imgStyle = "float:right;" + imgStyle;
        }
        if (img.parentElement.href) {
            imgStyle = "cursor:hand;" + imgStyle;
        }
        var strNewHTML = "<span " + imgID + imgClass + imgTitle + "style=\"" + "width:" + img.width + "px; height:" + img.height + "px;" + imgStyle + ";"
            + "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader" + "(src='" + img.src + "', sizingMethod='scale');\"></span>";
        img.outerHTML = strNewHTML;
    },

    /**
     * 自动判断客户输入的网址选择是否加上协议默认使用http协议
     * @static
     * @param {String} address 要打开的网址的地址
     */
    open: function (address) {
        var temp = '';
        var url1 = /[a-zA-z]+:\/\/[^\s]*/;
        var url2 = /\/[^\s]*/;
        if (address.match(url1) || address.match(url2)) {
            temp = address;
        } else {
            temp = "http://" + address;
        }
        window.open(temp);
    },

    /**
     * 计算jQuery元素内容的实际宽度
     * @static
     * @param {jQuery} $element jQuery元素
     * @returns {Number} 宽度
     */
    fixBoxModelWidth: function ($element) {
        if ($.support.boxModel) {
            return $element.outerWidth() - $element.width();
        } else {
            return 0;
        }
    },

    /**
     * 计算jQuery元素内容的实际高度
     * @static
     * @param {jQuery} $element jQuery元素
     * @returns {Number} 高度
     */
    fixBoxModelHeight: function ($element) {
        if ($.support.boxModel) {
            return $element.outerHeight() - $element.height();
        } else {
            return 0;
        }
    },

    /**
     * 对字符串进行加密 {@link #decrypt}
     * @static
     * @param str 原始字符串
     * @param pwd 密钥
     * @returns {String} 加密后的字符串
     */
    encrypt: function (str, pwd) {
        if (str == "") {
            return "";
        }
        str = escape(str);
        if (!pwd || pwd == "") {
            var pwd = "655";
        }
        pwd = escape(pwd);
        if (pwd == null || pwd.length <= 0) {
            alert("Please enter a password with which to encrypt the message.");
            return null;
        }
        var prand = "";
        for (var I = 0; I < pwd.length; I++) {
            prand += pwd.charCodeAt(I).toString();
        }
        var sPos = Math.floor(prand.length / 5);
        var mult = parseInt(prand.charAt(sPos) + prand.charAt(sPos * 2) + prand.charAt(sPos * 3) + prand.charAt(sPos * 4) + prand.charAt(sPos * 5));

        var incr = Math.ceil(pwd.length / 2);
        var modu = Math.pow(2, 31) - 1;
        if (mult < 2) {
            alert("Algorithm cannot find a suitable hash. Please choose a different password. \nPossible considerations are to choose a more complex or longer password.");
            return null;
        }
        var salt = Math.round(Math.random() * 1000000000) % 100000000;
        prand += salt;
        while (prand.length > 10) {
            prand = (parseInt(prand.substring(0, 10)) + parseInt(prand.substring(10, prand.length), 10)).toString();
        }
        prand = (mult * prand + incr) % modu;
        var enc_chr = "";
        var enc_str = "";
        for (var I = 0; I < str.length; I++) {
            enc_chr = parseInt(str.charCodeAt(I) ^ Math.floor((prand / modu) * 255));
            if (enc_chr < 16) {
                enc_str += "0" + enc_chr.toString(16);
            } else {
                enc_str += enc_chr.toString(16);
            }
            prand = (mult * prand + incr) % modu;
        }
        salt = salt.toString(16);
        while (salt.length < 8) {
            salt = "0" + salt;
        }
        enc_str += salt;
        return enc_str;
    },

    /**
     * 对加密后的字符串解密 {@link #encrypt}
     * @static
     * @param str 加密过的字符串
     * @param pwd 密钥
     * @returns {String} 解密后的字符串
     */
    decrypt: function (str, pwd) {
        if (str == "") {
            return "";
        }
        if (!pwd || pwd == "") {
            var pwd = "655";
        }
        pwd = escape(pwd);
        if (str == null || str.length < 8) {
            return;
        }
        if (pwd == null || pwd.length <= 0) {
            return;
        }
        var prand = "";
        for (var I = 0; I < pwd.length; I++) {
            prand += pwd.charCodeAt(I).toString();
        }
        var sPos = Math.floor(prand.length / 5);
        var tempmult = prand.charAt(sPos) + prand.charAt(sPos * 2) + prand.charAt(sPos * 3) + prand.charAt(sPos * 4);
        if (sPos * 5 < prand.length) {
            tempmult += prand.charAt(sPos * 5);
        }
        var mult = parseInt(tempmult);
        var incr = Math.round(pwd.length / 2);
        var modu = Math.pow(2, 31) - 1;
        var salt = parseInt(str.substring(str.length - 8, str.length), 16);
        str = str.substring(0, str.length - 8);
        prand += salt;
        while (prand.length > 10) {
            prand = (parseInt(prand.substring(0, 10), 10) + parseInt(prand.substring(10, prand.length), 10)).toString();
        }
        prand = (mult * prand + incr) % modu;
        var enc_chr = "";
        var enc_str = "";
        for (var I = 0; I < str.length; I += 2) {
            enc_chr = parseInt(parseInt(str.substring(I, I + 2), 16) ^ Math.floor((prand / modu) * 255));
            enc_str += String.fromCharCode(enc_chr);
            prand = (mult * prand + incr) % modu;
        }
        return unescape(enc_str);
    },

    /**
     * 深克隆
     * @static
     * @param obj 被克隆的对象
     * @returns {Object} 克隆出来新对象
     */
    clone: function (obj) {
        if ($.isPlainObject(obj)) {
            return $.extend(true, {}, obj);
        }
        return obj;
    }
});
/**
 * 处理全局按键事件的类
 *
 * @class FR.Keys
 */
$.extend(FR, {
    Keys: function () {
        // alex:$(document).keydown的时候只处理第一个fn_array
        var fn_array = []; // 数组元素是Function或是{scope, fn}
        var enabled = true;
        $(document).keydown(function (e) {
            if (enabled) {
                if (fn_array.length > 0) {
                    var fn = fn_array[0];
                    if ($.isFunction(fn)) {
                        fn.call(window, e)
                    } else if ($.isFunction(fn.fn)) {
                        fn.fn.call(fn.scope || window, e)
                    }
                }
            }
        });
        return {
            /**
             * 给全局的document注册一个指定的函数
             * @param {Function} fn 事件函数
             */
            reg: function (fn) {
                // carl:先弄掉相同的
                fn_array.removeWeakEqual(fn);
                fn_array.unshift(fn);
            },

            /**
             * 从全局的document中移除指定的函数
             * @param {Function} fn 事件函数
             */
            unreg: function (fn) {
                fn_array.removeWeakEqual(fn)
            },

            /**
             * 控制给全局的document注册的事件是否起作用
             * @param {Boolean} state 事件是否有效
             * @returns {boolean} 有效返回true，无效返回false
             */
            enable: function (state) {
                if (typeof state == 'boolean') {
                    enabled = state;
                } else {
                    return enabled;
                }
            }
        }
    }()
});

/**
 * @class FR.PageLoader
 * 加载帮助类
 */
$.extend(FR, {

    HtmlLoader: function () {

        return {

            load: function (o) {
                var cfg = $.extend({
                    type: "GET",
                    timeout: 30000
                }, o || {});

                cfg.callback = cfg.callback || FR.emptyFn;
                var self = o.el;
                var animation = cfg.animation || this.loadingEffect;
                FR.ajax({
                    url: cfg.url,
                    type: cfg.type,
                    //BUG2960 true is better
                    async: cfg.params.async === false ? false : true,
                    dataType: 'html',
                    // alex:保证每次load都取不一样的值,主要是ie里面
                    data: $.extend({
                        _: new Date().getTime(),
                        __boxModel__: $.support.boxModel
                    }, cfg.params),
                    timeout: cfg.timeout,
                    beforeSend: function () {
                        animation.call(self, $.extend(o, {
                            show: true
                        }));
                    },
                    complete: function (res, status) {
                        var html = res.responseText;
                        if (html == '' || html.indexOf(FR.i18nText("FR-Server-All_Error") + FR.i18nText("FR-Engine_Page")) != -1) {
                            window.needLoadMore = false;
                        }
                        var scripts = [];
                        if (cfg.scripts === true) {
                            /*
                             * copy from Ext.Element.update
                             */
                            var hd = document.getElementsByTagName("head")[0];
                            // kunsnat: (?:(\n|\r|.))替换了中间((\n|\r|.)*?), FF6.0.2版本中. 针对地图 表达式太复杂无法解析
                            //改回((\n|\r|.)*?)去，执行html中的js，据kunsnat说上面bug可能只是字符太长了，遇到再调试。
                            var re = /(?:<script([^>]*)?>)((?:\n|\r|.)*?)(?:<\/script>)/ig;
                            var srcRe = /\ssrc=([\'\"])(.*?)\1/i;
                            var typeRe = /\stype=([\'\"])(.*?)\1/i;

                            var match;
                            while (match = re.exec(html)) {
                                var attrs = match[1];
                                var srcMatch = attrs ? attrs.match(srcRe) : false;
                                if (srcMatch && srcMatch[2]) {
                                    var s = document.createElement("script");
                                    s.src = srcMatch[2];
                                    var typeMatch = attrs.match(typeRe);
                                    if (typeMatch && typeMatch[2]) {
                                        s.type = typeMatch[2];
                                    }
                                    hd.appendChild(s);
                                } else if (match[2] && match[2].length > 0) {
                                    scripts.push(match[2]);
                                }
                            }
                            html = html.replace(/(?:<script([^>]*)?>)((?:\n|\r|.)*?)(?:<\/script>)/ig, "");
                        }
                        animation.call(self, $.extend(o, {
                            show: false
                        }));
                        if (o.notReplaceBody) {
                            var iframeStart = html.indexOf('iframe');
                            var start = html.indexOf('<body')
                            if (start > -1 && iframeStart == -1) {
                                html = html.substr(start)
                                start = html.indexOf('>');
                                var end = html.indexOf('</body>');
                                if (start > -1) {
                                    html = html.substr(start + 1, end - start - 1)
                                }
                            }
                        }
                        if ($.isFunction(cfg.loadHtml)) {
                            cfg.loadHtml.apply(self, [html]);
                        } else {
                            self.html(html);
                        }

                        $.each(scripts, function (i, n) {
                            if (window.execScript) {
                                window.execScript(n);
                            } else {
                                window.eval(n);
                            }
                        });
                        self.each(cfg.callback, [res.responseText, status, res]);
                        // cfg.callback.apply(self, [res.responseText, status, res])
                        /*b:filter处理，ie6 special，不针对所有ie6中的报表，性能影响较小,暂时没更好的方法*/
                        if (FR.Browser.isIE6()) {
                            setTimeout(function () {
                                if (!$('div.pageContentDIV')[0]) {
                                    return;
                                }
                                var tr = $('.pageContentDIV tr').last();
                                if (tr[0] && !tr.height() && !tr.is(':visible')) {
                                    tr.show();
                                }
                                var tds = $('.pageContentDIV td');
                                for (var i = 0, len = tds.length; i < len; i++) {
                                    var td = $(tds[i]);
                                    if (td.attr('rowspan') === 1) {
                                        td.attr('rowspan', 1);
                                        break;
                                    }
                                }
                            }, 25);
                        }
                    }
                });
                return this;
            },

            loadingMoreData: function (config) {
                this.loading(config);
            },


            loading: function (conf) {
                var config = $.extend({
                    show: false,
                    forceDisplay: false,
                    cssConfig: null,
                    loadingMoreData: false
                }, conf || {});
                var el = config.el;
                var $indicator = el.data('indicator');
                if (!$indicator) {
                    $indicator = $("<div class='loading-indicator'>" + FR.i18nText("FR-Basic_Loading") + "</div>");
                    var o = config.loadingMoreData ? {
                            position: 'relative',
                            width: '56px'
                        } : {
                            position: 'absolute',
                            left: 0,
                            top: 0
                        };
                    if (config.cssConfig) {
                        $.extend(o, config.cssConfig);
                    }
                    $indicator.css(o);
                    el.data('indicator', $indicator);
                }

                //b:延迟的前提保证类似settimeout(function(settimeout()))以确保执行顺序,1.5s的延迟实现方法延后
                if (!config.show) {
                    //b:没显示是因为调用settimeout，勇敢的少年啊快去创造奇迹
                    $indicator.detach();
                } else if (config.show && !$indicator.is(':visible')) {
                    $indicator.css('top', el.scrollTop());
                    el.append($indicator);
                }
            },

            /**
             * 加载动画
             * @param cfg
             */
            loadingEffect: function (cfg) {
                var el = cfg.el;
                var config = $.extend({
                    show: false,
                    overflow: false,
                    fixed: true
                }, cfg || {});
                cfg.overflowx = cfg.overflowx || cfg.overflow || 'auto';
                cfg.overflowy = cfg.overflowy || cfg.overflow || 'auto';
                var $indicator = el.data('indicator');
                if (!$indicator || $indicator.html() === "") {  // @CHART-1243
                    $indicator = $("<div class='load-indicator'></div>");
                    $("<div class='loading-ec-indicator'></div>").appendTo($indicator);
                    $("<div class ='text-indicator' style='font-size:11pt'>" + FR.i18nText("FR-Engine_Loading") + "</div>").appendTo($indicator);
                    //默认使用视窗居中,fixed=false的时候采用相对于el的居中
                    var o = cfg.fixed ? {
                            position: 'fixed',
                            margin: 'auto',
                            left: '0px',
                            right: '0px',
                            top: '0px',
                            bottom: '0px',
                            height: '64px',
                            width: '64px'
                        } : {
                            position: 'absolute',
                            width: '64px',
                            height: '64px',
                            left: '50%',
                            top: '50%'
                        };
                    $indicator.css(o);
                    el.data('indicator', $indicator);
                }

                if (!config.show) {
                    $indicator.detach();
                    //REPORT-6343 恢复设置的overflow
                    el.css('overflow-x', cfg.overflowx);
                    el.css('overflow-y', cfg.overflowy);
                } else if (config.show && !$indicator.is(':visible')) {
                    el.append($indicator);
                    //如果加载动画的高度宽度小于当前报表块的展示区域, 会出现滚动条, 所以要hidden
                    cfg.overflowx = el.css('overflow-x');
                    cfg.overflowy = el.css('overflow-y');
                    el.css('overflow', 'hidden');
                }
            }
        };
    }()
});
/**
 * 处理dom
 *
 * @class FR.DomTool
 */
$.extend(FR, {
    DomTool: function () {
        return {
            /**
             * 表格克隆
             * @param $targetTable 目标表格
             * @param $oSrcTable 源表格
             * @param iRowStart 开始行
             * @param iRowEnd 结束行
             * @param iColumnEnd 结束列
             */
            cloneTable: function ($targetTable, $oSrcTable, iRowStart, iRowEnd, iColumnEnd) {
                var iWidth = 0, iHeight = 0;
                this.mergeAttributes($oSrcTable, $targetTable);
                var Log = "";
                var rowspanValue = 0;
                var rowNumber = 0;
                var rowIndex;
                for (var i = iRowStart; i < iRowEnd; i++) {
                    var oldTr = $oSrcTable.find("tr").eq(i);
                    var trp = oldTr.parent();
                    var $newHead;
                    if (trp.get(0).tagName == "THEAD") {
                        if ($targetTable.find("thead").length > 0) {
                            $newHead = $targetTable.find("thead");
                        } else {
                            $newHead = $('<thead/>');
                            this.mergeAttributes($newHead, trp);
                            $targetTable.append($newHead);
                        }
                    }
                    var isSingleRowspan = false;
                    var rowspanCount = 0;
                    var colCount = 0;
                    var colNumber = 0;
                    for (var j = 0; j < (iColumnEnd == -1 ? oldTr.find("td").length : iColumnEnd); j++) {
                        var oidTd = oldTr.find("td").eq(j);
                        colNumber++;
                        var colspan = oidTd.attr("colspan");
                        if (typeof(colspan) == "undefined" || colspan == 1) {
                            colCount += 1;
                        } else {
                            colCount += colspan;
                        }
                        var rowspan = oidTd.attr("rowspan");
                        if (typeof(rowspan) != "undefined" && rowspan != 1) {
                            rowspanCount++;
                            rowIndex = i;
                            rowspanValue = rowspan;
                            rowNumber = rowspanCount;
                        }
                        if (colCount >= iColumnEnd && iColumnEnd != -1) {
                            break;
                        }
                    }
                    Log += i + "==" + rowIndex + "=" + rowspanCount + "=" + rowNumber + "=" + rowspanValue + "<br>";
                    if (i > rowIndex && i <= (rowIndex + rowspanValue - 1) && iColumnEnd != -1) {
                        if (rowNumber !== 0 && iColumnEnd == rowNumber) {
                            isSingleRowspan = true;
                        } else {
                            colNumber -= 1;
                            if (rowspanCount === 0) {
                                colNumber -= (rowNumber - 1);
                            }
                        }
                    }
                    if (colNumber !== 0) {
                        var newTr = $("<tr></tr>");
                        this.mergeAttributes(oldTr, newTr);
                        var jWidth = 0;
                        iHeight += oldTr.outerHeight(true);
                        for (var j = 0; j < colNumber; j++) {
                            if (isSingleRowspan) {
                                continue;
                            }
                            var oidTd = oldTr.find("td").eq(j);
                            var newTd = oidTd.clone(true);

                            newTd.height(oidTd.outerHeight(true) - 1);
                            newTd.width(oidTd.outerWidth(true));
                            jWidth += oidTd.outerWidth(true);
                            iWidth = Math.max(iWidth, jWidth);
                            newTr.append(newTd);
                        }
                        if (trp.get(0).tagName == "THEAD") {
                            $newHead.append(newTr);
                        } else {
                            $targetTable.append(newTr);
                        }
                    }
                }
                $targetTable.width(iWidth);
                $targetTable.height(iHeight);
            },
            /**
             *
             * @param $table 目标表格
             * @param iRowHead 冻结标题行标1,2,3,4 如果是2那么就意味着1,2两行冻结以此类推
             * @param iRowFoot 冻结结尾行标1,2,3,4
             * @param iColLeft 冻结列标1,2,3,4
             * @param otherConfig 其他配置,目前支持table传入table内部dom样式的class,传入固定表头所在的父div{'tableCls':**,'tableParent':**}
             */
            frozenTable: function ($table, iRowHead, iRowFoot, iColLeft, otherConfig) {//3,0,1
                otherConfig = otherConfig || {};
                var oTable = $table;
                var oTableId = oTable.attr("id") || _.uniqueId;
                var oDiv = otherConfig.tableParent || oTable.parent();
                if (oDiv.get(0).tagName != "DIV") return;
                oTable.find("td").attr("noWrap", "nowrap");
                $table.css("border-collapse", "collapse");

                if (oTable.width() > oDiv.width() && oTable.height() > oDiv.height()) {
                    if (iRowHead > 0 && iColLeft > 0) {
                        var oCloneTable = $("<table id='oTableLH_" + oTableId + "' class='fr-clone'></table>");//创建的是左侧列和行交集的表头
                        oDiv.parent().append(oCloneTable);
                        this.cloneTable(oCloneTable, oTable, 0, iRowHead, iColLeft);
                        oCloneTable.css("position", "absolute");
                        oCloneTable.css("left", "0px");
                        oCloneTable.css("border-bottom-style", 'none');
                        oCloneTable.css("border-top-style", 'none');
                        oCloneTable.css("top", "0px");
                        oCloneTable.css("z-index", "4004");
                        oCloneTable.css("table-layout", "fixed");
                    }
                    if (iRowFoot > 0 && iColLeft > 0) {
                        var oCloneTable = $("<table id='oTableLF_" + oTableId + "' class='fr-clone'></table>");
                        oDiv.parent().append(oCloneTable);
                        this.cloneTable(oCloneTable, oTable, oTable.find("tr").length - iRowFoot, oTable.find("tr").length, iColLeft);
                        oCloneTable.css("position", "absolute");
                        oCloneTable.css("left", "0px");
                        oCloneTable.css("top", (oDiv.outerHeight(true) - oCloneTable.outerHeight(true) - 17));
                        oCloneTable.css("z-index", "4003");
                    }
                }
                if (iRowHead > 0 && oTable.height() > oDiv.height()) {
                    var oCloneDiv = $("<div id='oDivH_" + oTableId + "' class='fr-clone'><table></table></div>");
                    oDiv.parent().append(oCloneDiv);
                    var oCloneTable = oCloneDiv.find("table")
                    this.cloneTable(oCloneTable, oTable, 0, iRowHead, -1);
                    if (otherConfig && otherConfig.tableCls) {
                        $.each(otherConfig.tableCls, function (idx, item) {
                            oCloneTable.addClass(item);
                        });
                    }
                    oCloneDiv.css("overflow", "hidden");
                    oCloneDiv.css("width", oDiv.outerWidth(true) - 17);
                    oCloneDiv.css("position", "absolute");
                    oCloneDiv.css("left", "0px");
                    oCloneDiv.css("top", "0px");
                    oCloneDiv.css("z-index", "4002");
                    oCloneDiv.css("table-layout", "fixed");
                }
                if (iRowFoot > 0 && oTable.height() > oDiv.height()) {
                    var oCloneDiv = $("<div id='oDivF_" + oTableId + "' class='fr-clone'><table></table></div>");
                    oDiv.parent().append(oCloneDiv);
                    var oCloneTable = oCloneDiv.find("table");
                    this.cloneTable(oCloneTable, oTable, oTable.find("tr").length - iRowFoot, oTable.find("tr").length, -1);
                    if (otherConfig && otherConfig.tableCls) {
                        $.each(otherConfig.tableCls, function (idx, item) {
                            oCloneTable.addClass(item);
                        });
                    }
                    oCloneDiv.css("overflow", "hidden");
                    oCloneDiv.css("width", oDiv.outerWidth(true) - 17);
                    oCloneDiv.css("position", "absolute");
                    oCloneDiv.css("left", "0px");
                    oCloneDiv.css("top", oDiv.outerHeight(true) - oCloneTable.outerHeight(true) - 17);
                    oCloneDiv.css("z-index", "4001");
                }
                if (iColLeft > 0 && oTable.width() > oDiv.width()) {
                    var oCloneDiv = $("<div id='oDivL_" + oTableId + "' class='fr-clone'><table></table></div>");
                    oDiv.parent().append(oCloneDiv);
                    var oCloneTable = oCloneDiv.find("table")
                    this.cloneTable(oCloneTable, oTable, 0, oTable.find("tr").length, iColLeft);
                    if (otherConfig && otherConfig.tableCls) {
                        $.each(otherConfig.tableCls, function (idx, item) {
                            oCloneTable.addClass(item);
                        });
                    }
                    oCloneDiv.css("overflow", "hidden");
                    oCloneDiv.css("height", oDiv.outerHeight(true) - 17);
                    oCloneDiv.css("position", "absolute");
                    oCloneDiv.css("top", "0px");
                    oCloneDiv.css("z-index", "4000");
                    oCloneDiv.css("table-layout", "fixed");
                }
                oDiv.scroll(function () {
                    if (typeof($("#oDivH_" + oTableId).get(0)) != 'undefined') {
                        $("#oDivH_" + oTableId).scrollLeft($(this).scrollLeft());
                    }
                    if (typeof($("#oDivF_" + oTableId).get(0)) != 'undefined') {
                        $("#oDivF_" + oTableId).scrollLeft($(this).scrollLeft());
                    }
                    if (typeof($("#oDivL_" + oTableId).get(0)) != 'undefined') {
                        $("#oDivL_" + oTableId).scrollTop($(this).scrollTop());
                    }
                });
            },
            mergeAttributes: function ($src, $target) {
                if (FR.Browser.isIE()) {
                    $target.get(0).mergeAttributes($src.get(0));
                } else {
                    var attrs = $src.get(0).attributes;
                    i = attrs.length - 1;
                    for (; i >= 0; i--) {
                        var name = attrs[i].name;
                        if (name.toLowerCase() === 'id' || attrs[i].value === "" || attrs[i].value == null || attrs[i].value == "null") {
                            continue;
                        }
                        try {
                            $target.attr(name, attrs[i].value);
                        } catch (e) {
                        }
                    }
                }
            }
        };
    }()
});
/*
 * jquery.watermark.js
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
(function ($) {

    $.extend($, {
        clearwatermarks: function () {
            $("[wmwrap='true']").find("input,textarea").watermark({remove: true});
        },
        addwatermarks: function () {
            $("[watermark]").each(function (num, el) {
                $(el).watermark($(el).attr("watermark"));
            });
        },
        watermark: function (o) {
            var defaultOffsetLeft = 3;
            // o.el is input: fr-texteditor
            o.el = $(o.el);
            if (o.remove) {
                if ($.browser.msie) {
                    if (o.el.parent().attr("wmwrap") == 'true') {
                        o.el.parent().replaceWith(o.el);
                    }
                } else {
                    o.el.removeAttr('placeholder');
                }
            } else if (o.clear) {
                if ($.browser.msie) {
                    if ($('label.fr-watermark-label', o.el.parent())) {
                        $('label.fr-watermark-label', o.el.parent()).hide();
                    }
                } else {
                    o.el.attr('placeholder', "");
                }
            } else {
                if ($.browser.msie) {
                    if (o.el.parent().attr("wmwrap") != 'true') {
                        o.el = o.el.wrap("<span wmwrap='true'/>");
                        var l = $("<label/>").addClass('fr-watermark-label');
                        if (o.html) {
                            l.html(o.html);
                        }
                        if (o.cls) {
                            l.addClass(o.cls);
                        }
                        if (o.css) {
                            l.css(o.css);
                        }
                        l.css({
                            position: "absolute",
                            left: defaultOffsetLeft + 'px',
                            top: "",
                            display: "inline",
                            cursor: "text",
                            width: o.el.width(),
                            height: o.el.height(),
                            overflow: "hidden",
                            "font-size": "9pt",
                            "white-space": "nowrap"
                        });
                        //直接显示控件的时候position需要变成relative
                        if (o.isEditable) {
                            l.css('left', o.offsetLeft || defaultOffsetLeft);
                        }
                        l.css("line-height", (o.el.height() + ($.support.boxModel ? 4 : 0)) + "px");

                        if (!o.cls && !o.css) {
                            l.css("color", l.getwatermarkcolor());
                        }

                        var focus = function () {
                            l.hide();
                        };

                        var blur = function () {
                            if (!o.el.val()) {
                                l.show();
                            } else {
                                l.hide();
                            }
                        };

                        var click = function () {
                            o.el.focus();
                        };

                        if (o.inherit) {
                            if (typeof o.inherit == "string") {
                                l.css(o.inherit, o.el.css(o.inherit));
                            } else {
                                for (var x = 0; x < o.inherit.length; x++) {
                                    l.css(o.inherit[x], o.el.css(o.inherit[x]));
                                }
                            }
                        }
                        if (!o.el.attr("disabled")) {
                            o.el.focus(focus).blur(blur);
                            // 绑定值改变事件
                            o.el[0].onpropertychange = function () {
                                if (!o.el.val()) {
                                    l.show();
                                } else {
                                    l.hide();
                                }
                            }
                            l.click(click);
                        }
                        o.el.before(l);
                        if (o.el.val()) {
                            l.hide();
                        }
                    }
                } else {
                    var clicked = false;
                    o.el.attr('placeholder', o.html);
                    o.el.focus(function () {
                        o.el.removeAttr('placeholder');
                        // 如果是firefox
                        if (FR.Browser.r.gecko) {
                            if (!clicked) {
                                clicked = true;
                                $(this).click();
                            } else {
                                clicked = false;
                            }
                        }
                    }).blur(function () {
                        o.el.attr('placeholder', o.html);
                    })
                }
            }
            return o.el;
        }
    });

    $.fn.watermark = function (o, isEditable) {
        var offestLeft = this.offset().left;
        return this.each(function () {
            if (typeof(o) == "string") {
                try {
                    o = eval("(" + o + ")");
                } catch (ex) {
                    o = {html: o};
                }
                if (typeof(o) == "number") {
                    o = {html: o};
                }
            }
            o.el = this;
            o.offsetLeft = offestLeft;
            o.isEditable = isEditable;
            return $.watermark(o);
        });
    };
    $.fn.watermarkValueChange = function () {

    };
    // 用"#ccc"赋值给color的话再取出来就是rgb(204, 204, 204)了
    $.fn.getwatermarkcolor = function () {
        return "rgb(204, 204, 204)";
    };
})(jQuery);

$().ready(function () {
    $.addwatermarks();
});
;
(function ($) {
    var otherButton = [];
    var d = $("<div style='position:absolute;top:-1000px;width:100px;height:100px;padding:5px'></div>").appendTo("body");
    $._boxModel = parseInt(d.width()) === 100;
    d.remove();

    $.fn._outerWidth = function (el) {
        if (el == undefined) {
            if (this[0] == window) {
                return this.width() || document.body.clientWidth;
            }
            return this.outerWidth() || 0;
        }
        return this.each(function () {
            if ($._boxModel) {
                $(this).width(el - ($(this).outerWidth() - $(this).width()));
            } else {
                $(this).width(el);
            }
        });
    };
    $.fn._outerHeight = function (el) {
        if (el == undefined) {
            if (this[0] == window) {
                return this.height() || document.body.clientHeight;
            }
            return this.outerHeight() || 0;
        }
        return this.each(function () {
            if ($._boxModel) {
                $(this).height(el - ($(this).outerHeight() - $(this).height()));
            } else {
                $(this).height(el);
            }
        });
    };
    /**
     * 面板容器
     *
     *     @example
     *     var $root = $("<div>").css({position:'absolute',top:5,left:10}).appendTo('body');
     *     var p = new FR.Panel({
     *          renderEl : $root,
     *          contentHtml : "Hello",
     *          width : 300,
     *          height : 100,
     *          title : "Test",
     *          border : true,
     *          doSize : true,
     *          closable : true
     *     });
     *
     * @class FR.Panel
     * @extends FR.Widget
     * @since 6.5.3
     *
     * @cfg {JSON} options 配置属性
     * @cfg {Number} [options.titleHeight=25] 标题高度（如果有标题）
     * @cfg {String} [options.headerBackground=null] 标题背景色
     * @cfg {Number/String} [options.borderRadius=false] 边框的圆角
     * @cfg {Boolean} [options.fit=false] 是否根据父容器自适应大小
     * @cfg {Boolean} [options.doSize=true] 是否需要在初始化的时候计算大小
     * @cfg {Boolean} [options.border=false] 是否需要边框
     * @cfg {Number} [options.borderWidth=1] 边框宽度，仅在border=true时生效。
     * @cfg {Boolean} [options.closable=false] 是否需要关闭按钮
     * @cfg {Boolean} [options.maximizable=false] 是否可以最大化
     * @cfg {Boolean} [options.minimizable=false] 是否可以最小化
     * @cfg {Boolean} [options.collapsible=false] 是否可以收缩和下拉
     * @cfg {Boolean} [options.autoScroll=true] 是否根据内容的多少自动显示滚动条
     * @cfg {Boolean} [options.closed=false] 初始化完成以后是否直接显示组件
     * @cfg {Boolean/Number} [options.animate=true] 显示和隐藏的时候是否需要动画效果，参数可以为一个整数表示动画持续的时间
     * @cfg {Number} [options.width=300] 控件的初始宽度
     * @cfg {Number} [options.height=200] 控件的初始高度
     * @cfg {String} [options.contentUrl=null] 容器内容（从给定的服务器地址获取。注意：该url不能跨域）
     * @cfg {String} [options.contentHtml=null] 容器内容（html文本）
     * @cfg {String} [options.contentText=null] 容器内容（普通文本）
     * @cfg {FR.Widget} [options.contentWidget=null] 容器内容（控件）
     * @cfg {"blue"/"green"/"gray"} [options.style="blue"] 控件的样式
     * @cfg {Array} [options.tools] 控件的工具栏按钮组，可以设置按钮的样式，宽度以及事件
     * @cfg {Number} [options.tools.width=24] 按钮的宽度
     * @cfg {String} options.tools.iconCls 按钮的css样式表
     * @cfg {Boolean} [options.tools.invisible=false] 按钮的不可见性
     * @cfg {String} options.tools.text 按钮上的文字
     * @cfg {Function} options.tools.handler 按钮点击时触发的事件
     * @cfg {Function} [options.onClose] 点击关闭按钮时触发的事件
     * @cfg {Function} [options.onBeforeClose] 点击关闭按钮前出发的事件
     */
    FR.Panel = FR.extend(FR.Widget, {

        _defaultConfig: function () {
            return $.extend(FR.Panel.superclass._defaultConfig.apply(this, arguments), {
                baseCls: "fr-core-panel",  // 基本样式
                titleHeight: 25,          // 标题栏的高度
                headerBackground: null,
                borderRadius: false,          // 边框的圆角
                fit: false,                // 是否根据父容器自适应大小
                doSize: true,             // 是否需要再初始化的时候计算大小
                border: false,             // 是否需要边框
                borderWidth: 1,            // 边框宽度
                closable: false,           // 是否需要关闭按钮
                maximizable: false,        // 是否可以最大化
                minimizable: false,        // 是否可以最小化
                collapsible: false,        // 是否可以收缩和下拉
                autoScroll: true,          // 是否根据内容的多少自动显示滚动条
                closed: false,             // 初始化完成以后是否直接显示组件
                animate: true,            // 显示和隐藏的时候是否需要动画效果，参数可以为一个整数表示动画持续的时间
                width: 300,                // 控件的初始宽度
                height: 200,               // 控件的初始高度
                tools: null,              // 控件的工具栏按钮，可以设置按钮的样式，宽度以及事件
                style: null,               // 控件的样式，默认为blue，具有blue,green以及gray共3种样式
                onBeforeClose: null,
                onClose: null
            });
        },
        _init: function () {
            var o = this.options;
            this.headerHeight = (!FR.isEmpty(o.title)) ? o.titleHeight : (o.miniExpand ? 8 : 0);
            // wei : 如果panel有可收缩的工具栏，那么先调整下它的高度。
            // 这里得考虑下传过来的o.height是不是"auto"或者百分比
            if (typeof o.height == 'number') {
                o.height += (!FR.isEmpty(o.title)) ? o.titleHeight : 0;
            }
            FR.Panel.superclass._init.apply(this, arguments);
            var self = this;
            var defaultStyle = "blue";
            $.each(["gray", "green", "blue"], function (i, item) {
                if (o.style && item == o.style.toLowerCase()) {
                    defaultStyle = o.style.toLowerCase();
                }
            });
            o.style = defaultStyle;
            this.element.addClass(o.baseCls);
            // 注意,这里需要先调用_addContent(),再调用_addHeader()方法
            this._addContent();
            if ((typeof o.height == 'number' && o.height > this.headerHeight) || typeof o.height != 'number') {
                this._addHeader();
            }
            this._addBorder();
            // 注意:必须要先doResize才能关闭,否则无法正确计算宽度和高度
            if (o.doSize === true) {
                this.doResize({
                    width: o.width,
                    height: o.height
                });
            }
            if (o.closed === true) {
                this.element.hide();
            }
            if (o.css) {
                this.element.css(o.css);
            }
            this.on("_resize", function () {
                if (self.options._resize) {
                    self.options._resize();
                }
            })
        },
        /**
         * autoScroll:是否显示panel内容的滚动条 url:数据加载有地址 html:包含html标签的内容 text:普通文本内容
         * url,html和text三种数据获取方式只能选一种
         * @private
         */
        _addContent: function () {
            var opts = this.options;
            // 先给panel的content套一层标识
            var top = FR.isEmpty(opts.title) ? 0 : opts.titleHeight;

            /**
             * @property {jQuery} panelBody 容器内容所在的dom
             */
            this.panelBody = $('<div class="fr-core-panel-body"></div>').css({
                position: 'absolute',
                top: top,
                left: 0
            }).appendTo(this.element);

            /**
             * @property {jQuery} $contentPane 容器内容所在的dom
             */
            this.$contentPane = this._createContentPane();

            this._loadContent(false);
        },

        /**
         * @private
         */
        _createContentPane: function () {
            if (this.options.autoScroll === false) {
                this.panelBody.css({
                    overflow: 'hidden'
                });
            }
            return this.panelBody;
        },

        /**
         * @private
         */
        _addBorder: function () {
            var o = this.options;
            if (o.border === true) {
                // 如果没有标题，那么样式也就没有意义了，所以这里不用加载css，只在有标题的时候加载css
                if (this.$header) {
                    /**
                     * @property {jQuery} $header 标题所在的dom元素
                     */
                    this.$header.removeClass('fr-core-panel-header-noborder');
                }
                this.borderFix4width = o.borderWidth * 2;
                this.borderFix4height = o.borderWidth * 2;
                this.panelBody
                    .addClass("fr-core-panel-body-border")
                    .removeClass('fr-core-panel-body-noborder')
                    .css({borderWidth: o.borderWidth});
                if (!FR.isEmpty(o.title)) {
                    this.borderFix4height = o.borderWidth;
                    this.panelBody.css({
                        borderTop: 'none'
                    });
                }
            } else {
                if (this.$header) {
                    this.$header
                        .addClass('fr-core-panel-header-noborder');
                }
                this.panelBody
                    .removeClass('fr-core-panel-body-border')
                    .addClass('fr-core-panel-body-noborder');
            }
        },
        _loadContent: function (forced) {
            var opts = this.options;
            var ct = this.$contentPane;
            // url不为空,需要强制加载或者还没有加载过时使用ajax异步加载内容
            if (opts.contentUrl && (!opts.isLoaded || forced === true)) {
                opts.isLoaded = false;
                ct.html($('<div class="fr-core-panel-loading"></div>')
                    .html("loading..."));
                FR.ajax({
                    url: opts.contentUrl,
                    type: "POST",
                    complete: function (res, status) {
                        var ht = res.responseText;

                        if ($.isFunction(opts.callback)) {
                            opts.callback(ct, ht);
                        } else {
                            ct.html(ht);
                        }
                        opts.isLoaded = true;
                    }
                });
            } else if (opts.contentWidget) {
                if (opts.contentWidget.type) {
                    opts.contentWidget.style = opts.style;
                    opts.contentWidget = FR.createWidget($.extend(opts.contentWidget,{
                        resultWidgets: opts.resultWidgets
                    }));
                }
                ct.append(opts.contentWidget.element);
            } else if (opts.contentHtml) {
                ct.html(opts.contentHtml);
                if (typeof opts.contentHtml === 'object') {
                    var newEl = $(opts.contentHtml)[0];
                    //wikky:$(newEl)如果hide后然后show，由于$loading的原因，会导致IE9的标准模式下$(newEl)大小为100*100。
                    if (newEl.tagName == 'IFRAME') {
//                        $(newEl).hide();
                        var topHeight = FR.isEmpty(opts.title) ? 0 : opts.titleHeight;
                        var loadTop = topHeight - opts.height;
                        var $loading = $('<div class="fr-core-panel-loading" style="position: relative"></div>')
                            .css({
                                width: opts.width,
                                height: 30,
                                top: loadTop
                            }).html(FR.i18nText("FR-Basic_Loading") + "...");
                        if (!opts.noLoading) {
                            ct.append($loading);
                        }
                        if (newEl.attachEvent) {
                            newEl.attachEvent("onload", function () {
//                                $(newEl).show();
                                $loading.remove();
                            });
                        } else {
                            newEl.onload = function () {
//                                $(newEl).show();
                                $loading.remove();
                            };
                        }
                    }
                }
            } else if (opts.contentText) {
                ct.text(opts.contentText);
            }
        },

        /**
         * title : 标题 tools ： 自定义的工具栏 closable : 是否可关闭 maximizable ： 是否可最大化
         * minimizable ：是否可最小化 collapsible ： 是否可收缩与伸展 miniExpand ： 只带箭头的收缩按钮
         * @private
         */
        _addHeader: function () {
            var self = this;
            var opts = this.options;
            if (!FR.isEmpty(opts.title)) {
                this.$header = $('<div class="fr-core-panel-header"></div>')
                    .addClass("fr-core-panel-style-" + opts.style)
                    .css({
                        position: 'absolute',
                        top: 0,
                        left: 0
                    }).appendTo(this.element);
                if (!opts.borderRadius) {
                    this.$header.css({borderRadius: 0});
                }
                if (opts.headerBackground) {
                    this.$header.css({background: opts.headerBackground});
                }
                var fix = $.support.boxModel ? 2 : 0;
                this.$innerHeader = $('<div class="fr-core-panel-header-inner"></div>').css({
                    position: 'absolute',
                    top: 0,
                    left: 0
                }).appendTo(this.$header);
                this.$titleText = $('<div></div>')
                    .text(opts.title)
                    .addClass('fr-core-panel-title')
                    .appendTo(this.$innerHeader);
                this.rightDistance = 7;
                if (opts.closable) {
                    $('<div class="fr-core-panel-tool-close"></div>')
                        .css({
                            position: 'absolute',
                            top: 0,
                            right: this.rightDistance,
                            width: 25,
                            height: opts.titleHeight - fix
                        })
                        .mouseout(function () {
                            $(this).removeClass("fr-core-panel-tool-close-hover")
                                .removeClass("fr-core-panel-tool-close-down")
                                .removeClass("fr-core-panel-tool-over")
                                .addClass("fr-core-panel-tool-close");
                        }).mousedown(function (e) {
                        //Sean：这里要取消冒泡，否则点击关闭按钮时会触发拖动。
                        //wei:没什么影响，就不取消冒泡了，不然定义在document上的下拉菜单收起事件就不执行了。
                        $(this).removeClass("fr-core-panel-tool-close-hover")
                            .addClass("fr-core-panel-tool-close-down");
//                            e.stopEvent();
                    }).mouseover(function () {
                        $(this).removeClass("fr-core-panel-tool-close")
                            .addClass("fr-core-panel-tool-over")
                            .addClass("fr-core-panel-tool-close-hover");
                    }).bind("click", function () {
                        self.doClose();
                    }).appendTo(this.$innerHeader);
                    this.rightDistance += 24;
                }

                if (opts.tools) {
                    for (var i = opts.tools.length - 1; i >= 0; i--) {
                        var item = opts.tools[i];
                        var itemWidth = item.width || 24,
                            itemHeight = item.height || opts.titleHeight - fix;
                        var t = $('<div></div>').css({
                            position: 'absolute',
                            top: 0,
                            width: itemWidth,
                            height: itemHeight,
                            lineHeight: itemHeight + 'px'
                        }).addClass(item.iconCls).hover(function () {
                            $(this).addClass("fr-core-panel-tool-over");
                            $(this).addClass(item.iconCls + "-over");
                        }, function () {
                            $(this).removeClass("fr-core-panel-tool-over");
                            $(this).removeClass(item.iconCls + "-over");
                        }).mousedown(function () {
                            $(this).addClass(item.iconCls + '-click');
                        }).mouseleave(function () {
                            $(this).removeClass(item.iconCls + '-over');
                            $(this).removeClass(item.iconCls + '-click');
                        }).mouseup(function () {
                            $(this).removeClass(item.iconCls + '-click');
                        })
                            .appendTo(this.$innerHeader);
                        item.el = t;
                        item.width = itemWidth;
                        if (item.invisible) {
                            t.hide();
                        }
                        if (item.handler) {
                            if ($.isFunction(item.handler)) {
                                t.bind('click', item.handler.createDelegate(t));
                            } else if (typeof(item.handler) === 'object') {
                                //扩展成可以将click动作拆分成3个动作，这样可以满足实现tool的点击效果。
                                if ($.isFunction(item.handler.mousedown)) {
                                    t.mousedown(item.handler.mousedown.createDelegate(t));
                                }
                                if ($.isFunction(item.handler.mouseleave)) {
                                    t.mouseleave(item.handler.mouseleave.createDelegate(t));
                                }
                                if ($.isFunction(item.handler.mouseup)) {
                                    t.mouseup(item.handler.mouseup.createDelegate(t));
                                }
                            } else {
                                t.bind('click', eval(item.handler));
                            }
                        }
                        if ($.isArray(item.hover) && item.hover.length > 1) {
                            t.hover(item.hover[0].createDelegate(t), item.hover[1].createDelegate(t));
                        }
                        if (item.text) {
                            t.text(item.text);
                        }
                        if (item.styleText) {
                            FR.applyStyles(t, item.styleText);
                        }

                    }
                    this._modifyToolsPosition();
                }
                this.panelBody.removeClass('fr-core-panel-body-noheader');
            } else if (opts.miniExpand) {
                var header = $("<div class='parameter-container-collapse'></div>")
                    .appendTo(self.element);
                header.css({
                    position: 'absolute',
                    top: opts.height - 8,
                    left: 0,
                    'width': '100%',
                    'height': '8px',
                    'background': 'none repeat scroll 0 0 #EEEEEE'
                });
                var collapseImagWrapper = $("<div/>").css({
                    width: '112px',
                    height: '8px',
                    'margin-left': 'auto',
                    'margin-right': 'auto',
                    'position': 'relative'
                }).appendTo(header);
                var collapseImag = $("<div class='parameter-container-collapseimg-up'/>")
                    .appendTo(collapseImagWrapper)
                    .click(eval(opts.miniExpand.handler));
            } else {
                this.panelBody.addClass('fr-core-panel-body-noheader');
            }
        },

        /**
         * 设置面板容器的标题
         * @param {String} title 要设置的新的标题
         */
        setTitle: function (title) {
            if (this.$innerHeader) {
                this.$innerHeader.find(">div.fr-core-panel-title")
                    .html(title);
            }
        },
        /**
         * 设置指定的工具栏按钮的可见性
         * @param {Number} index 要设置的按钮的索引
         * @param {Boolean} visible 是否设置为可见
         */
        setToolVisible: function (index, visible) {
            var opts = this.options;
            var ct = opts.tools[index];
            if (ct && ct.el && ct.el.isVisible() != visible) {
                visible ? ct.el.show() : ct.el.hide();
                this._modifyToolsPosition();
            }
        },

        _modifyToolsPosition: function () {
            var rd = this.rightDistance, opts = this.options;
            for (var i = opts.tools.length - 1; i >= 0; i--) {
                var item = opts.tools[i];
                if (item.el && item.el.isVisible()) {
                    item.el.css({right: rd});
                    rd += item.width;
                }
            }
        },

        /**
         * 展示面板
         */
        doOpen: function () {
            this.element.show();
            this.options.closed = false;
            if ($.isFunction(this.options.onOpen)) {
                this.options.onOpen.call(this);
            }
        },
        /**
         * 关闭面板
         */
        doClose: function () {
            var self = this;
            if ($.isFunction(self.options.onHide)) {
                self.options.onHide.call(self);
            }
            this.element.hide(self.options.animate ? "fast" : 0, function () {
                if ($.isFunction(self.options.onBeforeClose)) {
                    self.options.onBeforeClose.call(self);
                }
                self.options.closed = true;
                if ($.isFunction(self.options.onClose)) {
                    self.options.onClose.call(self);
                }
            });
        },
        /**
         * 面板新的位置
         * @param {Point} give 要移动到的新的位置
         * @param {Number} give.left 新位置距离父容器的左边距
         * @param {Number} give.top 新位置距离父容器的上边距
         */
        doMove: function (give) {
            var opts = this.options;
            if (give) {
                if (give.left != null) {
                    opts.left = give.left;
                }
                if (give.top != null) {
                    opts.top = give.top;
                }
            }
            this.element.css({
                left: opts.left,
                top: opts.top
            });

            if ($.isFunction(opts.onMove)) {
                opts.onMove.apply(this, [opts.left, opts.top]);
            }
        },
        enable: function () {
            if (this.mask) {
                this.mask.hide();
            }
        },

        disable: function () {
            if (!this.mask) {
                this.mask = $("<div/>").addClass("fr-core-window-mask").appendTo(this.element);
                this.mask.css({
                    zIndex: FR.widget.opts.zIndex++,
                    width: this.element.width() ? this.element.width() : this.options.width,
                    height: this.element.height() ? this.element.height() : this.options.height,
                    background: 'gray'
                });
            }
            this.mask.show();
        },

        doResize: function (give) {
            var opts = this.options;
            var self = this;
            // 如果有给定的尺寸,那么久使用给定的尺寸大小
            if (give) {
                if (give.width) {
                    opts.width = give.width;
                }
                if (give.height) {
                    opts.height = give.height;
                }
                if (give.left != null) {
                    opts.left = give.left;
                }
                if (give.top != null) {
                    opts.top = give.top;
                }
            }
            // 如果是自适应大小的,那么就根据父元素的大小的确定panel的大小
            if (opts.fit === true) {
                var p = this.element.parent();
                opts.width = p.width();
                opts.height = p.height();
            }
            this.element.css({
                left: opts.left,
                top: opts.top
            });
            if (opts.cls) {
                this.element.addClass(opts.cls);
            }
            if (this.$header && opts.headerCls) {
                this.$header.addClass(opts.headerCls);
            }
            if (opts.bodyCls) {
                this.panelBody.addClass(opts.bodyCls);
            }
            if (!isNaN(opts.width)) {
                if ($.support.boxModel === true) {
                    var panelWidth = opts.width - (this.element.outerWidth() - this.element.width());
                    this.element.width(panelWidth);
                    if (!FR.isEmpty(opts.title) && this.$header) {
                        this.$header.width(panelWidth - (this.$header.outerWidth() - this.$header.width()));
                        this.$innerHeader.width(panelWidth - (this.$header.outerWidth() - this.$header.width()));
                    }
                    this.panelBody.width(panelWidth - (this.panelBody.outerWidth() - this.panelBody.width()));
                } else {
                    this.element.width(opts.width);
                    if (!FR.isEmpty(opts.title) && this.$header) {
                        this.$header.width(opts.width);
                        this.$innerHeader.width(opts.width);
                    }
                    this.panelBody.width(opts.width - this.borderFix4width);
                }
            } else {
                this.element.width('auto');
                this.panelBody.width('auto');
            }
            if (!isNaN(opts.height)) {
                if ($.support.boxModel === true) {
                    var panelHeight = opts.height - (this.element.outerHeight() - this.element.height());
                    this.element.height(panelHeight);
                    if (!FR.isEmpty(opts.title) && this.$header) {
                        this.$header.height(this.headerHeight - (this.$header.outerHeight() - this.$header.height()));
                        this.$innerHeader.height(this.headerHeight - (this.$header.outerHeight() - this.$header.height()));
                        this.$titleText.css({lineHeight: this.headerHeight - (this.$header.outerHeight() - this.$header.height()) + "px"});
                    }
                    this.panelBody.height(panelHeight - this.headerHeight - (this.panelBody.outerHeight() - this.panelBody.height()));
                } else {
                    this.element.height(opts.height);
                    if (!FR.isEmpty(opts.title) && this.$header) {
                        this.$header.height(this.headerHeight);
                        this.$innerHeader.height(this.headerHeight);
                        this.$titleText.css({lineHeight: this.headerHeight + "px"});
                    }
                    this.panelBody.height(opts.height - this.headerHeight - this.borderFix4height);
                }
            } else {
                this.element.height('auto');
                this.$contentPane.height('auto');
            }
            if ($.isFunction(opts.onResize)) {
                opts.onResize.apply(this, [opts.width, opts.height]);
            }
            this._resizeContentWidget();
            // 触发panel的resize事件
            this.fireEvent(FR.Events.RESIZE);
            this.element.doLayout();
        },
        /**
         * @protected
         */
        _resizeContentWidget: function () {
            var opts = this.options;
            // alex:不知道为什么IE下面也要用这样的方式才可以取到height,但width却不需要用这种方式
            //wei : 宽度也会出问题..
            var pbodystylestring = this.$contentPane.attr("style");
            var pbodyheight = parseInt(pbodystylestring.replace(
                /.*height\:\s*(\d+).*/gi, "$1"));
            // ie6下iframeDialog时，iframe标签取宽度会受border-left-width等影响
            var pbodywidth = parseInt(pbodystylestring.replace(
                /.* width\:\s*(\d+).*/gi, "$1"));

            if (opts.contentWidget) {
                opts.contentWidget.doResize({
                    width: this.$contentPane.width(),
                    height: pbodyheight
                });
            } else if (opts.contentHtml && FR.Browser.isIE6()) {
                $(opts.contentHtml).css({
                    width: pbodywidth,
                    height: pbodyheight
                });
            }
        }
    });
    $.shortcut("panel", FR.Panel);

    /**
     * 带“确定”以及“取消”按钮的容器
     *
     *     @example
     *     var $root = $("<div>").css({position:'absolute',top:10,left:10}).appendTo('body');
     *     var editor = new FR.ConfirmPane({
     *               renderEl:$root,
     *               title: "ConfirmPane",
     *               width : 250,
     *               closable:true,
     *               height : 100,
     *               doSize:true,
     *               border:true,
     *     });
     *
     * @class FR.ConfirmPane
     * @extends FR.Panel
     * @since 7.0.5
     *
     * @cfg {JSON} options 配置属性
     * @cfg {String} [options.text4OK="确定"] “确定”按钮的文字
     * @cfg {String} [options.text4Cancel="取消"] “取消”按钮的文字
     * @cfg {Number} [options.width4OK=80] “确定”按钮的宽度
     * @cfg {Number} [options.width4Cancel=80] “取消”按钮的宽度
     * @cfg {Number} [options.height4OK=28] “确定”按钮的高度
     * @cfg {Number} [options.height4Cancel=80] “取消”按钮的高度
     * @cfg {Number} [options.controlPaneHeight=40] “确定”和“取消”按钮所在的区域的高度
     * @cfg {Number} [options.btnsGap=20] “确定”和“取消”按钮之间的距离
     * @cfg {Number} [options.firstBtnMargin=20] 第一个按钮与panel边界的距离,居左就是firstBtn为左边按钮，居右firstBtn为右边按钮
     * @cfg {Boolean/Number} [options.needSeparate=false] 是否显示分割线, 直接写分割线距离底下按钮的高度
     * @cfg {'right'/'left'/'center'} [options.btnsAlignment='right'] 按钮位置，默认在右边，右对齐时新添按钮从右向左添加，其他是从左向右添加
     * @cfg {Boolean} [options.closeAfterAction=true] 是否点击按钮事件结束后关闭Panel，默认关闭
     * @cfg {Function} [options.onOK] "确定"按钮点击事件
     * @cfg {Function} [options.onCancel] "取消"按钮点击事件
     */
    FR.ConfirmPane = FR.extend(FR.Panel, /**@class FR.ConfirmPane */{
        _defaultConfig: function () {
            return $.extend(FR.ConfirmPane.superclass._defaultConfig.apply(this, arguments), {
                text4OK: FR.i18nText("FR-Basic_OK"),
                text4Cancel: FR.i18nText("FR-Basic_Cancel"),
                width4OK: 80,
                width4Cancel: 80,
                height4OK: 28,
                height4Cancel: 28,
                controlPaneHeight: 40,
                btnsGap: 20,
                firstBtnMargin: 20,
                needSeparate: false,
                btnsAlignment: 'right',
                closeAfterAction: true,
                onOK: null,
                onCancel: null
            });
        },
        _init: function () {
            FR.ConfirmPane.superclass._init.apply(this, arguments);
        },

        _createContentPane: function () {
            var opts = this.options;
            var $contentPane = $('<div class="fr-core-panel-content">').css({
                position: 'absolute',
                top: 0,
                left: 0
            }).appendTo(this.panelBody);
            var self = this;
            //Sean： 为了兼容IE6必须再套一层
            this.okdiv = $('<div style="position:absolute"/>').appendTo(this.panelBody);
            this.canceldiv = $('<div style="position:absolute"/>').appendTo(this.panelBody);
            if (!FR.isEmpty(opts.text4OK)) {
                /**
                 * @property {FR.Widget} okButton “确定”按钮
                 */
                self.okButton = new FR.createWidget({
                    type: 'quickbutton',
                    text: opts.text4OK,
                    width: opts.width4OK,
                    height: opts.height4OK,
                    style: opts.style,
                    handler: function () {
                        if ($.isFunction(self.options.onOK)) {
                            var result = self.options.onOK.apply(self);
                            if (result === false) {
                                //不关闭对话框
                                return;
                            }
                        }
                        if (self.options.closeAfterAction) {
                            self.doClose();
                        }
                    }
                });
                this.okButton.element.appendTo(this.okdiv);
                this.okdiv.css({width: opts.width4OK, height: opts.height4OK});
            }

            if (!FR.isEmpty(opts.text4Cancel)) {
                /**
                 * @property {FR.Widget} cancelButton “取消”按钮
                 */
                self.cancelButton = new FR.createWidget({
                    type: 'quickbutton',
                    text: opts.text4Cancel,
                    //              style : opts.style, //Sean:取消按钮采用默认'gray'样式，不随主题样式变化
                    width: opts.width4Cancel,
                    height: opts.height4Cancel,
                    handler: function () {
                        if ($.isFunction(self.options.onCancel)) {
                            self.options.onCancel.apply(self);
                        }
                        if (self.options.closeAfterAction) {
                            self.doClose();
                        }
                    }
                });
                this.cancelButton.element.appendTo(this.canceldiv);
                this.canceldiv.css({width: opts.width4Cancel, height: opts.height4Cancel});
            }
            if (opts.needSeparate) {
                $contentPane.addClass("fr-core-panel-content-separate");
                this.okdiv && this.okdiv.css('margin-top', opts.needSeparate + 'px');
                this.canceldiv && this.canceldiv.css('margin-top', opts.needSeparate + 'px');
            }
            return $contentPane;
        },

        doResize: function (give) {
            FR.ConfirmPane.superclass.doResize.apply(this, arguments);
            var opts = this.options;
            var alignment = opts.btnsAlignment;
            var oktop = 0, canceltop = 0, okalign = 0, cancelalign = 0;
            var height = opts.height;
            if (opts.needSeparate) {
                height = height - opts.needSeparate;
            }
            if (!isNaN(height)) {
                if ($.support.boxModel === true) {
                    this.$contentPane.css({
                        height: height - this.headerHeight - opts.controlPaneHeight - (this.$contentPane.outerHeight() - this.$contentPane.height()),
                        width: opts.width - (this.panelBody.outerWidth() - this.panelBody.width())
                    });
                } else {
                    this.$contentPane.css({
                        height: height - this.headerHeight - opts.controlPaneHeight,
                        width: opts.width
                    });
                }
            }
            oktop = height - this.headerHeight - opts.controlPaneHeight;
            canceltop = height - this.headerHeight - opts.controlPaneHeight;
            if (alignment == 'right') {
                okalign = opts.width4Cancel + opts.firstBtnMargin + opts.btnsGap;
                cancelalign = opts.firstBtnMargin;
            }
            else if (alignment == 'left') {
                okalign = opts.firstBtnMargin;
                cancelalign = opts.width4OK + opts.firstBtnMargin + opts.btnsGap;
            }
            else {
                var allWidth = opts.width4OK + opts.width4Cancel + opts.btnsGap;
                var Left = (opts.width - allWidth) / 2;
                okalign = Left;
                cancelalign = Left + opts.width4OK + opts.btnsGap;
                alignment = 'left'; //center的时候，用left的距离来计算
            }
            if (this.okButton) {
                this.okdiv.css('top', oktop);
                this.okdiv.css(alignment, okalign);
            }
            if (this.cancelButton) {
                this.canceldiv.css('top', canceltop);
                this.canceldiv.css(alignment, cancelalign);
            }
            this._resizeContentWidget();
        },

        loading: function (isFetching) {
            this.okButton.setEnable(!isFetching);
        }
    });
    $.shortcut("confirm", FR.ConfirmPane);

    /**
     * 装载按钮的容器
     * @class FR.ButtonPane
     * @extends FR.Panel
     * @private
     */
    FR.ButtonPane = FR.extend(FR.Panel, {
        _defaultConfig: function () {
            return $.extend(FR.ButtonPane.superclass._defaultConfig.apply(this, arguments), {
                text4Cancel: FR.i18nText("FR-Basic_Cancel"),
                width4Cancel: 80,
                button4Other: [],           //wikky:添加两个以上的按钮[{bT:文字,bW:宽度,默认80,bF:按钮点击动作,bC:点击按钮后是否关闭Panel,默认false}，{…}}]
                controlPaneHeight: 40,
                btnsAlignment: 'right',
                closeAfterAction: true //Sean: 是否点击按钮事件结束后关闭Panel，默认关闭
            });
        },
        _init: function () {
            FR.ButtonPane.superclass._init.apply(this, arguments);
        },

        _createContentPane: function () {
            var opts = this.options;
            var $contentPane = $('<div class="fr-core-panel-content">').css({
                position: 'absolute',
                top: 0,
                left: 0
            }).appendTo(this.panelBody);
            var other = opts.button4Other;
            this.otherButton = [];
            this.otherButtonWrap = [];
            for (var i = 0; i < other.length; i++) {
                this.otherButtonWrap[i] = $('<div style="position:absolute"/>').appendTo(this.panelBody);
                this.otherButton[i] = new FR.createWidget({
                    type: 'quickbutton',
                    text: other[i].bT,
                    width: other[i].bW ? other[i].bW : 80,
                    baseCls: other[i].baseCls ? other[i].baseCls : '',
                    invisible: other[i].invisible,
                    style: opts.style,
                    handler: function () {
                        var onAct = this.element.data("func");
                        if ($.isFunction(onAct)) {
                            onAct.apply(self);
                        }
                        var aftAct = this.element.data("aftfunc");
                        if (aftAct) {
                            self.doClose();
                        }
                    }
                });
                this.otherButton[i].element.appendTo(this.otherButtonWrap[i]);
                this.otherButtonWrap[i].css({width: other[i].bW, height: opts.height4Cancel});

                this.otherButton[i].element.data("func", other[i].bF ? other[i].bF : FR.emptyFn());
                this.otherButton[i].element.data("aftfunc", other[i].bC ? other[i].bC : false);
            }
            var self = this;
            this.canceldiv = $('<div style="position:absolute"/>').appendTo(this.panelBody);
            this.cancelButton = new FR.createWidget({
                type: 'quickbutton',
                text: opts.text4Cancel,
                //              style : opts.style, //Sean:取消按钮采用默认'gray'样式，不随主题样式变化
                width: opts.width4Cancel,
                height: opts.height4Cancel,
                handler: function () {
                    if ($.isFunction(self.options.onCancel)) {
                        self.options.onCancel.apply(self);
                    }
                    if (self.options.closeAfterAction) {
                        self.doClose();
                    }
                }
            });
            this.cancelButton.element.appendTo(this.canceldiv);
            this.canceldiv.css({width: opts.width4Cancel, height: opts.height4Cancel});

            if (opts.needSeparate) {
                $contentPane.addClass("fr-core-panel-content-separate");
                this.canceldiv && this.canceldiv.css('margin-top', opts.needSeparate + 'px');
                for (var i = 0; i < this.otherButtonWrap.length; i++) {
                    this.otherButtonWrap[i] && this.otherButtonWrap[i].css('margin-top', opts.needSeparate + 'px');
                }
            }
            return $contentPane;

        },

        doResize: function (give) {
            FR.ButtonPane.superclass.doResize.apply(this, arguments);
            var opts = this.options;
            var other = opts.button4Other;
            var alignment = opts.btnsAlignment;
            var canceltop = 0, cancelalign = 0;
            var height = opts.height;
            if (opts.needSeparate) {
                height = height - opts.needSeparate;
            }
            if (!isNaN(height)) {
                if ($.support.boxModel === true) {
                    this.$contentPane.css({
                        height: height - this.headerHeight - opts.controlPaneHeight - (this.$contentPane.outerHeight() - this.$contentPane.height()),
                        width: opts.width - (this.panelBody.outerWidth() - this.panelBody.width())
                    });
                } else {
                    this.$contentPane.css({
                        height: height - this.headerHeight - opts.controlPaneHeight,
                        width: opts.width
                    });
                }
            }
            canceltop = height - this.headerHeight - opts.controlPaneHeight;
            var alignment = opts.btnsAlignment;
            if (alignment == 'right') {
                var right = opts.width4Cancel + 40;
                this.canceldiv.css(alignment, 20);
                this.canceldiv.css('top', canceltop);
                for (var i = 0; i < other.length; i++) {
                    this.otherButtonWrap[i].css(alignment, right);
                    this.otherButtonWrap[i].css('top', canceltop);
                    right = right + other[i].bW + 20;
                }

            }
            else if (alignment == 'left') {
                var left = opts.width4Cancel + 40;
                this.canceldiv.css(alignment, 20);
                this.canceldiv.css('top', canceltop);
                for (var i = 0; i < other.length; i++) {
                    this.otherButtonWrap[i].css(alignment, left);
                    this.otherButtonWrap[i].css('top', canceltop);
                    left = left + other[i].bW + 20;
                }
            }
            else {
                var allWidth = 0;
                for (var i = 0; i < other.length; i++) {
                    allWidth = allWidth + other[i].bW + 20;
                }
                allWidth = allWidth + opts.width4Cancel;
                var otherLeft = (opts.width - allWidth) / 2;
                for (var i = 0; i < other.length; i++) {
                    this.otherButtonWrap[i].css('left', otherLeft);
                    this.otherButtonWrap[i].css('top', canceltop);
                    otherLeft = otherLeft + other[i].bW + 20;
                }
                this.cancelButton.element.css('left', otherLeft);
            }
            this._resizeContentWidget();

        }
    });
    $.shortcut("otherbutton", FR.ButtonPane);

    /**
     * 窗体控件
     * @class FR.Window
     * @extends FR.Widget
     * @since 6.5.3
     *
     * @cfg {JSON} options 配置属性
     * @cfg {String} [options.title='Window'] 窗体的标题
     * @cfg {Number} [options.titleHeight=30] 窗体的标题高度
     * @cfg {Boolean} [options.modal=true] 是否为模态窗体，模态窗体不允许点击对话框下层的区域
     * @cfg {Boolean} [options.confirm=false] 是否为带“确定”和“取消”按钮的窗体
     * @cfg {Object} options.otherButton
     * @cfg {Boolean} [options.closable=true] 窗体是否可以关闭，如果可以关闭将会在左上角显示关闭按钮
     * @cfg {Boolean} [options.collapsible=false] 窗体是否可以收缩
     * @cfg {Boolean} [options.closed=true] 初始化完成后是否将窗体置为关闭状态
     * @cfg {Boolean} [options.destroyOnClose=false] 窗体关闭后是否立即销毁窗体对象
     * @cfg {Number} [options.width=300] 窗体的宽度
     * @cfg {Number} [options.height=200] 窗体的高度
     * @cfg {Boolean} [options.resizeable=true] 窗体是否可以拖拽调整大小
     * @cfg {Boolean} [options.draggable=true] 窗体是否可以被拖动
     * @cfg {JSON} [options.override] 覆盖内部FR.Panel属性的配置属性
     * @cfg {Function} [options.onDialogResize] 窗体调整大小时触发的函数
     * @cfg {JSON} [options.adaptivity] 窗体自适应配置，默认不开启。开启后，窗体大小始终根据浏览器窗口大小动态调整
     */
    FR.Window = FR.extend(FR.Widget, {
        _defaultConfig: function () {
            return $.extend(FR.Window.superclass._defaultConfig.apply(), {
                baseCls: "fr-core-window",
                title: "Window",
                titleHeight: 30,
                modal: true,
                confirm: false,
                otherButton: false,
                closable: true,
                collapsible: false,
                closed: true,
                destroyOnClose: false,
                width: 300,
                height: 200,
                resizeable: true,
                draggable: true,
                adaptivity: {
                    enabled: false,
                    minWidth: 300,
                    minHeight: 200,
                    topGap: 0,
                    leftGap: 0,
                    bottomGap: 0,
                    rightGap: 0
                }
            });
        },
        _init: function () {
            FR.Window.superclass._init.apply(this, arguments);
            var o = this.options;
            var win = this.win;
            if (!$.support.boxModel) {
                win.doResize({
                    // marro :这里比较特殊 win = this.el,
                    // 生成win的的时候大小由o确定了，而FR.Widget初始化时也会对this.el大小进行改变，并且还考虑了boxModel.因此，再reszie下。
                    width: o.width,
                    height: o.height
                })
            }
            var self = this;
            if (this.mask) {
                this.mask.remove();
            }
            if (o.modal === true) {
                this.mask = $('<div class="fr-core-window-mask"></div>')
                    .appendTo('body');
                this.mask.css({
                    zIndex: FR.widget.opts.zIndex++,
                    width: this._getPageArea().width,
                    height: this._getPageArea().height,
                    display: 'none'
                });
                this._doAdaptiveResize();
                $(window).resize(function () {
                    self.mask.css({
                        width: self._getPageArea().width,
                        height: self._getPageArea().height
                    });
                    self._doAdaptiveResize();
                });
            }
            this.element.css({
                zIndex: FR.widget.opts.zIndex++
            });
            if (win.options.left == null) {
                var width = win.options.width;
                if (isNaN(width)) {
                    width = this.element.outerWidth();
                }
                //  var l = $(window.document).width() bug64304,ie,ff下不能取document高度
                var l = $(window).width();
                if (FR.Browser.isIE8Before()) {
                    l = FR.windowWidth;
                }
                win.options.left = (l - width) / 2
                    + $(document).scrollLeft();
            }
            if (win.options.top == null) {
                var height = win.options.height;
                if (isNaN(height)) {
                    height = this.element.outerHeight();
                }
                var h = $(window).height();
                if (FR.Browser.isIE8Before()) {
                    h = FR.windowHeight;
                }
                win.options.top = (h - height) / 2
                    + $(document).scrollTop();
            }
            win.doMove();
            this.setVisible(!o.closed);
            if (this.options.draggable) {
                this.element.draggable({
                    handle: ">div.fr-core-panel-header",
                    onStartDrag: function (e) {
                        if (self.mask) {
                            self.mask.css('z-index', FR.widget.opts.zIndex.zIndex++);
                        }
                        if (self.shadow) {
                            self.shadow.css('z-index', FR.widget.opts.zIndex.zIndex++);
                        }
                        self.element.css('z-index', FR.widget.opts.zIndex.zIndex++);
                        var $contentDiv = $(self.element.children()[0]);
                        $contentDiv.css('z-index', 0);
                        var top = $contentDiv.css("top");
                        var height = $contentDiv.css("height");
                        var width = $contentDiv.css("width");
                        var transparentMask = $("#transparent-background");
                        if (transparentMask.length > 0) {
                            //假如已经存在了蒙层就删除掉
                            transparentMask.remove();
                        }
                        var $transparentDiv = $('<div id="transparent-background" style="position:absolute;filter:alpha(opacity=50);opacity:0.5;"></div>');
                        $transparentDiv.css('left', "0px").css('top', top).css('width', width).css('height', height);
                        $transparentDiv.css('z-index', 1);
                        self.element.append($transparentDiv);

                        if (!self.proxy) {
                            self.proxy = $('<div class="fr-core-window-proxy"></div>').insertAfter(self.element);
                        }
                        self.proxy.css({
                            display: 'none',
                            zIndex: FR.widget.opts.zIndex.zIndex++,
                            left: e.data.left,
                            top: e.data.top
                        });
                        self.proxy._outerWidth(self.element._outerWidth());
                        self.proxy._outerHeight(self.element._outerHeight());
                        setTimeout(function () {
                            if (self.proxy) {
                                self.proxy.show();
                            }
                        }, 500);
                    },
                    onDrag: function (e) {
                        var pluginLimit = FR.Window.PluginDialogLimit;
                        if (pluginLimit) {
                            e.data.top = pluginLimit.onDrag.pluginTopFn(e.data.top, self.element._outerHeight(), self._getPageArea().height);
                            e.data.left = pluginLimit.onDrag.pluginLeftFn(e.data.left, self.element._outerWidth(), self._getPageArea().width);
                        }

                        self.proxy.css({
                            display: 'block',
                            left: e.data.left,
                            top: e.data.top
                        });
                        return false;
                    },
                    onStopDrag: function (e) {
                        $("#transparent-background").remove();
                        self.proxy.remove();
                        self.proxy = null;
                    }
                });
            }
            if (this.options.resizeable) {
                this.element.resizable({
                    onStartResize: function (e) {
                        if (!self.pmask) {
                            self.pmask = $('<div class="fr-core-window-proxy-mask"></div>').insertAfter(self.element);
                        }

                        self.pmask.css({
                            zIndex: FR.widget.opts.zIndex++,
                            left: e.data.left,
                            top: e.data.top,
                            width: self.element._outerWidth(),
                            height: self.element._outerHeight()
                        });
                        if (!self.proxy) {
                            self.proxy = $('<div class="fr-core-window-proxy"></div>').insertAfter(self.element);
                        }
                        self.proxy.css({
                            zIndex: FR.widget.opts.zIndex++,
                            left: e.data.left,
                            top: e.data.top
                        });
                        self.proxy._outerWidth(e.data.width);
                        self.proxy._outerHeight(e.data.height);
                    },
                    onResize: function (e) {
                        if (!self.proxy) {
                            return;
                        }

                        self.proxy.css({
                            left: e.data.left,
                            top: e.data.top
                        });
                        self.proxy._outerWidth(e.data.width);
                        self.proxy._outerHeight(e.data.height);
                        return false;
                    },
                    onStopResize: function (e) {
                        var pluginLimit = FR.Window.PluginDialogLimit;
                        if (pluginLimit) {
                            e.data.height = pluginLimit.onResize.pluginHeightFn(e.data.top, self.element._outerHeight(), self._getPageArea().height);
                            e.data.width = pluginLimit.onResize.pluginWidthFn(e.data.left, self.element._outerWidth(), self._getPageArea().width);
                            e.data.top = pluginLimit.onResize.pluginTopFn(e.data.top, self.element._outerHeight(), self._getPageArea().height);
                            e.data.left = pluginLimit.onResize.pluginLeftFn(e.data.left, self.element._outerWidth(), self._getPageArea().width);
                        }
                        $.extend(self.options, {
                            left: e.data.left,
                            top: e.data.top,
                            width: e.data.width,
                            height: e.data.height
                        });
                        self.doResize({
                            top: self.options.top,
                            left: self.options.left,
                            width: self.options.width,
                            height: self.options.height
                        });
                        self.pmask.remove();
                        self.pmask = null;
                        if (self.proxy) {
                            self.proxy.remove();
                            self.proxy = null;
                        }
                    }
                });
            }
        },

        _defaultRoot: function () {
            var o = this.options, override = o.override;
            // PIE ie8标准模式有黑框
            if (FR.Browser.isIE() && !FR.Browser.r.quirks) {
                o.baseCls += " fr-core-window-no-hack";
            }
            var self = this;
            var panelType;
            if (o.confirm) {
                panelType = "confirm";
            } else if (o.otherButton) {
                panelType = "otherbutton";
            } else {
                panelType = "panel";
            }
            var winOpts = $.extend({}, o, {
                type: panelType,
                height: o.height - o.titleHeight,
                fit: false,
                renderEl: $('<div/>').appendTo("body"),
                doSize: true,
                border: true,
                borderRadius: 'auto',
                cls: o.baseCls,
                headerCls: 'fr-core-window-header',
                bodyCls: 'fr-core-window-body',
                onClose: function () {
                    if (self.mask) {
                        self.mask.hide();
                    }
                    if (o.destroyOnClose) {
                        self.destroy();
                    }
                    // 弹出框关闭时恢复全局快捷键
                    FR.Keys.enable(true);
                },
                onOpen: function () {
                    if (self.mask) {
                        self.mask.show();
                    }
                    // 弹出框显示时禁用全局快捷键
                    FR.Keys.enable(false);
                },
                onResize: function (width, heigh) {
                    if ($.isFunction(o.onDialogResize)) {
                        o.onDialogResize();
                    }
                },
                onMove: function (left, top) {

                }
            }, override);
            this.win = FR.createWidget(winOpts);
            return this.win.element;
        },

        _getPageArea: function () {
            if (document.compatMode == 'BackCompat') {
                return {
                    width: Math.max(document.body.scrollWidth,
                        document.body.clientWidth),
                    height: Math.max(document.body.scrollHeight,
                        document.body.clientHeight)
                }
            } else {
                return {
                    width: Math.max(document.documentElement.scrollWidth,
                        document.documentElement.clientWidth),
                    height: Math.max(
                        document.documentElement.scrollHeight,
                        document.documentElement.clientHeight)
                }
            }
        },

        _doAdaptiveResize: function () {
            var o = this.options;
            if (o.adaptivity.enabled) {
                var gave = {
                    top: o.adaptivity.topGap,
                    left: o.adaptivity.leftGap,
                    width: Math.max(this._getPageArea().width - o.adaptivity.leftGap - o.adaptivity.rightGap, o.adaptivity.minWidth),
                    height: Math.max(this._getPageArea().height - o.adaptivity.topGap - o.adaptivity.bottomGap, o.adaptivity.minHeight)
                };

                this.doResize(gave)
            }
        },

        /**
         * 关闭窗体
         */
        doClose: function () {
            this.win.doClose();

        },
        doResize: function (give) {
            this.win.doResize(give);

        },
        /**
         * 设置窗体的标题文本
         * @param title 新的标题
         */
        setTitle: function (title) {
            this.win.setTitle(title);
        },
        /**
         * 设置窗体的显示内容
         * @param {Object} c 新的窗体内容
         * @param {String} c.type 新内容的类型
         * @param {String} c.content 新内容的具体文本
         *
         *          setContent({type : "contentText" ,content : "1111"});
         *          setContent({type : "contentHtml" ,content : "<p><i>test</i></p>"});
         */
        setContent: function (c) {
            this.win.options[c.type] = c.content;
            // 强制加载对话框内容
            this.win._loadContent(true);
            if (FR.Browser.isIE8Before()) {
                var self = this;
                setTimeout(function () {
                    self.doResize({'width': undefined, 'height': undefined});
                }, 150);
            }
        },
        setVisible: function (flag) {
            // 需要设置为可见,并且该对话框当前是不可见的才去打开
            if (flag === true && this.win.options.closed === true) {
                this.win.doOpen();
            } else if (flag === false && this.win.options.closed === false) {
                this.win.doClose();
            }
        },
        // 销毁整个FR.Window
        destroy: function () {
            this.element.remove();
            this.mask.remove();
        },

        loading: function (isFetching) {
            this.win.loading(isFetching);
        }
    });
    $.shortcut("window", FR.Window);

    /**
     * 对话框。可以同时显示多了对话框，但是只有最上层的活跃状态
     *
     *     @example
     *     var dlg = new FR.Dialog({
     *            title : 'Dialog',
     *            height : 100,
     *            contentHtml : '<p>Hello Dialog!</p>'
     *     });
     *     dlg.setVisible(true);
     *
     * @class FR.Dialog
     * @extends FR.Window
     * @since 6.5.3
     */
    FR.Dialog = FR.extend(FR.Window, {});
    $.shortcut("dialog", FR.Dialog);

})(jQuery);
(function ($) {
    /**
     * 列表控件，用于展示一列数据
     *
     * @class FR.QuickList
     * @extends FR.Widget
     *
     * @cfg {JSON} options 配置属性
     * @cfg {Number} [options.with=200] 控件高度
     * @cfg {Number} [options.height=400] 控件宽度
     * @cfg {Number} [options.itemHeight=24] 控件中每一项的高度
     * @cfg {Array} options.items 控件的数据
     * @cfg {Boolean} [options.itemCanBeSelect=false] 控件的项是否可以被选中
     * @cfg {JSON} [options.tools] 工具栏
     * @cfg {JSON} [options.alwaysShowTools=true] 是否总是显示工具栏
     * @cfg {Function} [options.onItemToolClick=null] 点击工具栏时触发的事件
     * @cfg {Function} [options.showToolCondition=null] 展示每条记录工具栏的条件函数(返回true的时候展现工具栏,反之隐藏)
     * @cfg {Number} [options.onItemToolClick.index] 触发事件的工具栏索引
     * @cfg {Number} [options.onItemToolClick.selected] 列表中选中项的索引
     * @cfg {Function} [options.onItemSelect=null] 选中某一项时触发的事件
     * @cfg {JSON} [options.async=null] 异步加载数据配置
     * @cfg {String} options.async.url 加载数据的地址
     * @cfg {JSON} [options.async.data] 加载数据时传递的参数
     * @cfg {'GET'/'POST'} [options.async.type] ajax请求类型
     * @cfg {Function} [options.async.onAsyncSuccess] ajax获取数据成功时触发的事件
     * @cfg {Function} [options.dataFilter=null] 数据过滤函数
     * @cfg {Function} [options.onBeforeItemCreate=null] 列表项创建前触发的函数
     * @cfg {Boolean} [options.scrollLoading=false] 是否开启滚动加载，大数据量时推荐开启
     * @cfg {Number} [options.max=200] 单词最多夹杂的条目数量
     */
    FR.QuickList = FR.extend(FR.Widget, {
        _defaultConfig: function () {
            return $.extend(FR.QuickList.superclass._defaultConfig.apply(this, arguments), {
                baseCls: 'fr-core-list',
                width: 200,
                height: 400,
                itemHeight: 24,
                items: [],
                listItems: [],
                itemCanBeSelect: false,
                tools: null,
                index: 0,
                alwaysShowTools: true,
                onItemToolClick: null,
                onItemSelect: null,
                async: null,
                dataFilter: null,
                valueField: 'value',
                showField: 'text',
                onBeforeItemCreate: null,
                scrollLoading: false, //是否开启滚动加载
                max: 200,   //单次最多加载的条目数量
                showToolCondition: function (item) {//默认始终展示工具栏
                    return true;
                }
            });
        },
        _init: function () {
            FR.QuickList.superclass._init.apply(this, arguments);
            var opts = this.options;
            var self = this;
            this.element.css({
                width: opts.width,
                height: opts.height
            }).scroll(function () {
                self._onScroll(this);
            });
            if (opts.async) {
                this._addItemsByAjax();
            } else {
                this._addItemsByDefault();
            }
        },
        _addItemsByAjax: function () {
            var opts = this.options, self = this;
            var async = opts.async;
            var $loading = $('<div class="fr-core-panel-loading"></div>')
                .css({width: 100, height: 30}).html(FR.i18nText("FR-Engine_Loading") + "...");
            this.element.append($loading);
            FR.ajax({
                url: async.url,
                data: async.data,
                type: async.type ? async.type : 'POST',
                complete: function (res, status) {
                    if (status == 'success') {
                        $loading.remove();
                        var items = FR.jsonDecode(res.responseText);
                        if ($.isArray(items)) {
                            opts.items = items;
                            if (!opts.index) {
                                //index记录已经加载到第几条
                                opts.index = 0;
                            }
                            if (opts.index < opts.items.length && opts.items.length > opts.max) {
                                opts.need2Scroll = true;
                            }
                            self._addItemsByDefault();
                        }
                        FR.applyFunc(self, opts.onAsyncSuccess, [items], false);
                    }

                }
            });
        },
        _onScroll: function (target) {
            var o = this.options;
            if (!o.scrollLoading) {
                return;
            }
            if (o.need2Scroll && $(target).scrollTop() + $(target).height() >= target.scrollHeight) {
                if (o.isLoadingData) {
                    return;
                }
                o.isLoadingData = true;
                this._addItemsByDefault();
                o.isLoadingData = false;
            }
        },
        _addItemsByDefault: function () {
            var opts = this.options;
            if (!opts.scrollLoading) {
                opts.max = opts.items.length;
            }
            if (opts.items && opts.items.length > 0) {
                for (var i = opts.index; i < opts.index + opts.max; i++) {
                    if (i >= opts.items.length) {
                        opts.need2Scroll = false;
                        opts.index = opts.items.length;
                        return false;
                    }
                    var item = FR.applyFunc(this, opts.dataFilter, [opts.items[i]], opts.items[i]);
                    this.addItem(item);
                }
                opts.index = opts.index + opts.max;
            }
        },
        addItem: function (it, isPrepend) {
            var self = this;
            var opts = this.options;
            $.extend(it, {
                height: opts.itemHeight,
                tools: opts.tools,
                alwaysShowTools: opts.alwaysShowTools,
                onItemToolClick: opts.onItemToolClick,
                beforeSelect: opts.beforeSelect,
                itemCanBeSelect: opts.itemCanBeSelect,
                onCustomItemSelect: opts.onCustomItemSelect,
                showToolCondition: opts.showToolCondition,
                tooltype: opts.tooltype,
                toolUnEditAble: opts.toolUnEditAble,
                paddingRight: opts.paddingRight,
                toolMargin: opts.toolMargin,
                valueField: opts.valueField,
                showField: opts.showField,
                paddingLeft: opts.paddingLeft,
                onBeforeItemCreate: opts.onBeforeItemCreate,
                toolPadding: opts.toolPadding,
                toolAlign: opts.toolAlign,
                onItemSelect: function () {
                    for (var i = 0; i < opts.listItems.length; i++) {
                        var current = opts.listItems[i];
                        if (current != this) {
                            current.doUnselect();
                        } else {
                            self.selectedIndex = i;
                            if ($.isFunction(opts.onItemSelect)) {
                                opts.onItemSelect.apply(current);
                            }
                        }
                    }
                },
                onToolClick: function () {
                    for (var i = 0; i < opts.listItems.length; i++) {
                        var current = opts.listItems[i];
                        if (current === this) {
                            return i;
                        }
                    }
                }
            });
            var item = new FR.ListItem(it);
            if (isPrepend) {
                opts.listItems.unshift(item);
                this.element.prepend(item.element);
            } else {
                opts.listItems.push(item);
                this.element.append(item.element);
            }
        },
        refresh: function (data) {
            var o = this.options;
            this.clear();
            if (data && data.async) {
                o.async = data.async;
                this._addItemsByAjax();
            } else if (o.async) {
                this._addItemsByAjax();
            }
        },
        clear: function () {
            this.element.empty();
            this.options.items = [];
            this.options.listItems = [];
            this.options.index = 0;
            this.options.need2Scroll = false;
        },
        remove: function (index) {
            var item = this.options.listItems[index];
            this.options.listItems.removeWeakEqual(item);
            $(this.element.children()[index]).remove();
        },
        showToolByIndex: function (index) {
//        	var length = this.options.tools.length;
            this.element.find('div[toolid=' + index + ']').show();
            this.options.tools[index].invisible = false;
        },
        hideToolByIndex: function (index) {
//        	var length = this.options.tools.length;
            this.element.find('div[toolid=' + index + ']').hide();
            this.options.tools[index].invisible = true;
        },
        getValueAtIndex: function (index) {
            return this.options.listItems[index].getValue();
        },
        getTextAtIndex: function (index) {
            return this.options.listItems[index].getText();
        },
        setTextAtIndex: function (index, text) {
            return this.options.listItems[index].setText(text);
        },
        getValue: function () {
            if (this.options.tooltype === "check") {
                var result = [];
                for (var i = 0; i < this.options.listItems.length; i++) {
                    result.push(this.options.listItems[i].getValue());
                }
                return result;
            }
            if (!this.options.listItems[this.selectedIndex]) {
                return null;
            }
            return this.options.listItems[this.selectedIndex].getValue();
        },
        getText: function () {
            if (this.options.tooltype === "check") {
                var result = [];
                for (var i = 0; i < this.options.listItems.length; i++) {
                    result.push(this.options.listItems[i].getText());
                }
                return result;
            }
            if (!this.options.listItems[this.selectedIndex]) {
                return null;
            }
            return this.options.listItems[this.selectedIndex].getText();
        },
        //获取所有项目的显示值
        getAllItemText: function () {
            var result = [];
            for (var i = 0; i < this.options.listItems.length; i++) {
                result.push(this.options.listItems[i].getText());
            }
            return result;
        },
        //获取项目个数
        getItemLength: function () {
            return this.options.listItems.length;
        },
        //选中第index个项目
        selectItemByIndex: function (index, isTriggerEvent) {
            this.options.listItems[index].doSelect(0, isTriggerEvent);
            this.selectedIndex = index;
            this.scrollToIndex(index);
        },
        getSelectedIndex: function () {
            return this.selectedIndex;
        },
        removeSelect: function () {
            if (this.selectedIndex >= 0) {
                this.options.listItems[this.selectedIndex].doUnselect(0);
            }
        },
        clearState: function () {
            if (this.options.tooltype === "check") {
                var items = this.options.listItems;
                for (var i = 0; i < items.length; i++) {
                    for (var n = 0; n < this.options.tools.length; n++) {
                        items[i].doUnselect(n);
                    }
                }
            }
        },
        setValue: function (value) {
            for (var i = 0; i < this.options.listItems.length; i++) {
                var current = this.options.listItems[i];
                if (current.getValue() === value) {
                    current.doSelect();
                    this.selectedIndex = i;
                    //滚到这个位置
                    this.scrollToIndex(i);
                } else {
                    current.doUnselect();
                }
            }
        },
        scrollToIndex: function (index) {
            var elementHeight = this.element.height();
            var scrollHeight = this.options.itemHeight * (index + 1) - elementHeight;
            if (scrollHeight > 0) {
                this.element.scrollTop(scrollHeight);
            } else {
                this.element.scrollTop(0);
            }
        },
        setSelectedText: function (text) {
            this.options.listItems[this.selectedIndex].setText(text);
        },
        getItemById: function (id) {
            var items = this.options.listItems;
            for (var m = 0; m < items.length; m++) {
                if (items[m].options.id === id) {
                    return items[m];
                }
            }
        },
        selectByData: function (data) {
            var items = this.options.listItems;
            for (var i = 0; i < data.length; i++) {
                for (var m = 0; m < items.length; m++) {
                    if (items[m].options.id === data[i].id) {
                        for (var n = 0; n < this.options.tools.length; n++) {
                            if (data[i][this.options.tools[n].name] && data[i][this.options.tools[n].name] !== 0) {
                                items[m].doSelect(n);
                            }
                        }
                    }
                }
            }
        },
        selectByText: function (data) {
            var items = this.options.listItems;
            for (var i = 0; i < data.length; i++) {
                for (var m = 0; m < items.length; m++) {
                    if (items[m].options.text === data[i].text) {
                        for (var n = 0; n < this.options.tools.length; n++) {
                            if (data[i][this.options.tools[n].name] && data[i][this.options.tools[n].name] !== 0) {
                                items[m].doSelect(n);
                            }
                        }
                    }
                }
            }
        },
        hasNodeSelect: function (index) {
            var items = this.options.listItems;
            for (var m = 0; m < items.length; m++) {
                var item = items[m];
                if (item.options[item.toolName[index]] === 1) {
                    return true;
                }
            }
            return false;
        },
        selectAll: function (index) {
            var items = this.options.listItems;
            for (var m = 0; m < items.length; m++) {
                items[m].onToolDivClick(items[m].toolDivs[index], new $.Event(), true);
            }
        },
        deSelectAll: function (index) {
            var items = this.options.listItems;
            for (var m = 0; m < items.length; m++) {
                items[m].onToolDivClick(items[m].toolDivs[index], new $.Event(), false);
            }
        }
    });
    $.shortcut('quicklist', FR.QuickList);

    FR.ListItem = FR.extend(FR.Widget, {
        _defaultConfig: function () {
            return $.extend(FR.ListItem.superclass._defaultConfig.apply(this, arguments), {
                baseCls: 'fr-core-list-item',
                paddingLeft: 12,
                paddingRight: 1,//不推荐使用此属性,推荐使用toolPadding替代paddingRight 工具栏默认在右侧
                showField: 'text',
                valueField: 'value',
                onItemSelect: null,
                onBeforeItemCreate: null,
                toolAlign: 'right'//工具栏在文本左侧还是右侧
            });
        },
        _init: function () {
            FR.ListItem.superclass._init.apply(this, arguments);
            var opts = this.options, self = this;
            FR.applyFunc(this, opts.onBeforeItemCreate, [this.element, opts], false);
            var name = opts[opts.showField];
            this.$text = $('<span/>').text(name).css({
                height: opts.height,
                lineHeight: opts.height + 'px',
                "padding-left": opts.paddingLeft
            }).attr('title', name).appendTo(this.element);
            this.toolDivs = [];
            this.toolName = [];
            if (opts.tools && opts.tools.length > 0) {
                if (opts.toolAlign === "right") {
                    opts.toolPadding = opts.toolPadding || opts.paddingRight;
                }
                var right = opts.paddingRight;
                for (var i = 0, len = opts.tools.length; i < len; i++) {
                    var tool = opts.tools[i];
                    this.toolName.push(tool.name);
                    var $toolDiv = $('<div>').data('tool', tool).data('index', i)
                        .css({
                            position: 'absolute',
                            top: 0,
                            width: tool.width || opts.height,
                            height: opts.height,
                            lineHeight: opts.height + 'px'
                        }).appendTo(this.element);
                    if (opts.toolAlign === "right") {
                        $toolDiv.css('right', right);
                    } else if (opts.toolAlign === "left") {
                        $toolDiv.css('padding-left', opts.toolPadding);//左侧目前只支持单排复选框按钮,后面可以参照right扩展多排
                    }
                    if (opts.toolMargin) {
                        $toolDiv.css('margin-right', opts.toolMargin);
                        right += opts.toolMargin;
                    }
                    if (!opts.alwaysShowTools) {
                        $toolDiv.hide();
                        var show = function () {
                            if ($.isFunction(opts.showToolCondition) && opts.showToolCondition(self)) {
                                $(this).show();
                            }
                        }.createDelegate($toolDiv);
                        var hide = function () {
                            $(this).hide();
                        }.createDelegate($toolDiv);

                        this.element.hover(show, hide);
                    }
                    if (opts.tooltype === "check") {
                        $toolDiv.addClass("fs_tool_checkoff");
                        if (opts.toolUnEditAble) {
                            $toolDiv.addClass("fs_tool_disabled");
                        }
                        if (opts[tool.name] === 1) {
                            $toolDiv.addClass("fs_tool_checkon");
                        }
                        $toolDiv.click(function (e) {
                            self.onToolDivClick(this, e);
                        });
                    }
                    if (tool.iconCls) {
                        $toolDiv.addClass(tool.iconCls);
                        $toolDiv.mousedown(
                            function () {
                                $(this).addClass($(this).data('tool').iconCls4Click);
                            }).mouseleave(
                            function () {
                                $(this).removeClass($(this).data('tool').iconCls4Click);
                            }).mouseup(
                            function (e) {
                                $(this).removeClass($(this).data('tool').iconCls4Click);
                                if ($.isFunction(opts.onToolClick)) {
                                    var index = opts.onToolClick.call(self);
                                }
                                if ($.isFunction(opts.onItemToolClick)) {
                                    opts.onItemToolClick.call(this, $(this).data('index'), index, e);
                                }
                                e.stopEvent();
                            }
                        );
                        if (tool.iconCls4Hover) {
                            $toolDiv.hover(
                                function () {
                                    $(this).addClass($(this).data('tool').iconCls4Hover);
                                },
                                function () {
                                    $(this).removeClass($(this).data('tool').iconCls4Hover);
                                }
                            );
                        }
                    }
                    $toolDiv.attr('toolid', i);
                    if (this.options.tools[i].invisible) {
                        $toolDiv.hide();
                    }
                    right += (tool.width || opts.height);
                    this.toolDivs.push($toolDiv);
                }
            }
            this.element.hover(function () {
                $(this).addClass('fr-core-list-item-hover');
            }, function () {
                $(this).removeClass('fr-core-list-item-hover');
            });
            if (opts.itemCanBeSelect) {
                this.element.bind('mouseup', function () {
                    self.doSelect();
                    if ($.isFunction(opts.onItemSelect)) {
                        opts.onItemSelect.apply(self);
                    }
                    if ($.isFunction(opts.onCustomItemSelect)) {
                        opts.onCustomItemSelect.apply(self);
                    }
                });
            }
        },
        onToolDivClick: function (element, e, select) {
            var opts = this.options;
            if (opts.toolUnEditAble) {
                return;
            }
            var toolIndex = $(element).data('index');
            var isSelected = !$(element).hasClass("fs_tool_checkon");
            if (select === true || select === false) {
                isSelected = select;
            }
            if ($.isFunction(opts.onToolClick)) {
                var index = opts.onToolClick.call(this);
            }
            if ($.isFunction(opts.beforeSelect)) {
                var result = opts.beforeSelect.call(element, toolIndex, index, isSelected, e);
                if (result === "wait") {
                    return;
                }
            }
            if (!isSelected) {
                this.doUnselect(toolIndex);
            } else {
                this.doSelect(toolIndex);
            }
            if ($.isFunction(opts.onItemToolClick)) {
                opts.onItemToolClick.call(element, toolIndex, index, isSelected, e);
            }
        },
        getText: function () {
            return this.options[this.options.showField];
        },
        getValue: function () {
            var o = this.options;
            if (o.tooltype === "check") {
                var result = {
                    id: o.id,
                    value: o[o.valueField]
                };
                for (var i = 0; i < this.options.tools.length; i++) {
                    var toolName = this.options.tools[i].name;
                    result[toolName] = this.options[toolName];
                }
                return result;
            }
            return o[o.valueField];
        },
        doSelect: function (i, triggerEvent) {
            this.element.addClass('fr-core-list-item-selected');
            if (this.options.tooltype === "check") {
                this.options[this.toolName[i]] = 1;
                this.toolDivs[i].addClass("fs_tool_checkon");
            }
            if (triggerEvent === true) {
                var opts = this.options;
                if ($.isFunction(opts.onItemSelect)) {
                    opts.onItemSelect.apply(this);
                }
                if ($.isFunction(opts.onCustomItemSelect)) {
                    opts.onCustomItemSelect.apply(this);
                }
            }
        },
        doUnselect: function (i) {
            var self = this;
            if (this.options.tooltype === "check") {
                this.options[this.toolName[i]] = 0;
                this.toolDivs[i].removeClass("fs_tool_checkon");
            }
            var selectStatus = 0;
            $.each(this.toolName, function (idx, tool) {
                selectStatus |= self.options[tool];
            });
            if (!selectStatus) {
                this.element.removeClass('fr-core-list-item-selected');
            }
        },
        setText: function (text) {
            var o = this.options;
            o[o.showField] = text;
            this.$text.text(text).attr('title', text);
        }
    });
})(jQuery);
(function ($) {
    /**
     * 按钮控件。可以设置不同的按钮风格。
     *
     *      @example
     *      var $div = $('<div>').appendTo('body');
     *      var button = new FR.QuickButton({
     *              renderEl : $div,
     *              text : '按钮小学生',
     *              decoration : 'line-through',
     *              handler : function() {alert('我是一个小学生！')}
     *      });
     *
     * @class FR.QuickButton
     * @extends FR.Widget
     *
     * @cfg {JSON} options 配置属性
     * @cfg {'center'/'left'/'right'} [options.alignment='center'] 文字对齐方式
     * @cfg {String} options.text 按钮上的文字
     * @cfg {String} [options.icon] 按钮的图标。形如: css:fr-btn-icon获取直接fr-btn-icon
     * @cfg {String} [options.iconPath] 按钮的图标路径
     * @cfg {Number} [options.iconWidth=24] 图标的宽度
     * @cfg {Number} [options.iconHeight=16] 图标的高度
     * @cfg {Number} [options.width=80] 按钮的宽度
     * @cfg {Number} [options.height=28] 按钮的高度
     * @cfg {'blue'/'gray'/'green'} [options.style='blue'] 按钮的样式
     * @cfg {String} [options.fontfamily] 字体类型
     * @cfg {String} [options.fontstyle] 字体样式
     * @cfg {String} [options.fontweight] 字体粗细
     * @cfg {String} [options.fontsize] 字体大小，形如 12px
     * @cfg {'none'/'underline'/'overline'/'line-through'/'inherit'} [options.decoration]  文字的修饰类型
     * @cfg {String} [options.color] 文字的颜色
     */
    FR.QuickButton = FR.extend(FR.Widget, /**@class FR.QuickButton*/{
        /**
         * @private
         */
        _defaultConfig: function () {
            return $.extend(FR.QuickButton.superclass._defaultConfig.apply(this, arguments), {
                baseCls: 'fr-core-btn',
                alignment: "center",
                text: null,
                icon: null,
                iconPath: null,
                width: 80,
                height: 28,
                iconWidth: 24,
                iconHeight: 16,
                style: null  //可以有gray,green和blue共3种样式
            });
        },
        /**
         * @private
         */
        _init: function () {
            FR.QuickButton.superclass._init.apply(this, arguments);
            var opts = this.options;
            var self = this;
            // 默认样式为gray，如果设置了样式，检查其是否是合法样式
            var defaultStyle = "gray";
            $.each(["gray", "green", "blue", "white"], function (i, item) {
                if (opts.style && item == opts.style.toLowerCase()) {
                    defaultStyle = opts.style.toLowerCase();
                }
            });
            var hoverCls = 'fr-core-btn-hover' + '-' + defaultStyle;
            this.element.addClass("fr-core-btn-style-" + defaultStyle);
            this.$inner = $("<div class='fr-core-btn-inner'></div>").appendTo(this.element);
            /**
             * @property {jQuery} $text 显示按钮文字的dom对象
             */
            this.$text = $("<span class='fr-core-btn-text' onselectstart='return false'></span>").appendTo(this.$inner);
            this._initTextFont();
            this.$text.css({textAlign: opts.alignment});
            if (opts.text) {
                this.$text.text(opts.text);
            }
            opts.iconWidth = (opts.icon || opts.iconPath) ? opts.iconWidth : 0;
            if (opts.iconWidth > 0) {
                /**
                 * @property {jQuery} $icon 显示按钮图标的dom对象
                 */
                this.$icon = $("<span class='fr-core-btn-icon'></span>").css({
                    position: 'absolute',
                    width: opts.iconWidth,
                    height: opts.iconHeight,
                    top: 0,
                    left: 0
                }).appendTo(this.$inner);
                if (opts.icon) {
                    if (opts.icon.indexOf("css:") != -1) {
                        opts.icon = opts.icon.substring(4);
                    }
                    this.$icon.addClass(opts.icon);
                } else if (opts.iconPath) {
                    this.$icon.css({
                        background: "url('" + opts.iconPath + "') no-repeat center"
                    });
                }
            }
            this.$text.css({left: opts.iconWidth});
            this.doResize({width: opts.width, height: opts.height});
            if ($.isFunction(opts.handler)) {
                this.on(FR.Events.CLICK, opts.handler.createDelegate(opts.scope || this));
            }
            this.element.hover(function () {
                $(this).addClass(hoverCls);
            }, function () {
                $(this).removeClass(hoverCls);
            });
            this.$inner.click(function (e) {
                self.fireEvent(FR.Events.CLICK, e);
            });
        },
        /**
         * 初始化按钮上的文字样式
         * @private
         */
        _initTextFont: function () {
            var opts = this.options;
            if (opts.color) {
                this.$text.css('color', opts.color);
            }
            if (opts.decoration) {
                this.$text.css("text-decoration", opts.decoration);
            }
            if (opts.fontsize) {
                this.$text.css('fontSize', opts.fontsize);
            }
            if (opts.fontweight) {
                this.$text.css('fontWeight', opts.fontweight);
            }
            if (opts.fontstyle) {
                this.$text.css('fontStyle', opts.fontstyle);
            }
            if (opts.fontfamily) {
                this.$text.css('fontFamily', opts.fontfamily);
            }
        },

        setValue: function (v) {
            if (!FR.isEmpty(v)) {
                this.$text.text(v);
            }
        },

        getValue: function () {
            return this.$text.text();
        },

        setText: function (t) {
            this.setValue(t);
        },

        getText: function () {
            return this.getValue();
        },

        doResize: function (give) {
            var opts = this.options;
            if (give) {
                if (give.width) {
                    opts.width = give.width;
                }
                if (give.height) {
                    opts.height = give.height;
                }
                if (give.left != null) {
                    opts.left = give.left;
                }
                if (give.top != null) {
                    opts.top = give.top;
                }
            }
            if (opts.left || opts.top) {
                this.element.css({
                    position: 'absolute',
                    left: opts.left,
                    top: opts.top
                });
            }
            if (!isNaN(opts.width)) {
                var width = opts.width;
                var fixWidth = 0;
                if ($.support.boxModel === true) {
                    fixWidth = (this.element.outerWidth() - this.element.width());
                }
                if (!give.hasIgnoredBounds) {
                    width = width - fixWidth;
                }

                this.element.css({width: width});
                this.$inner.css({width: width});
                this.$text.css({width: width - opts.iconWidth});
            }
            if (!isNaN(opts.height)) {
                var height = opts.height;
                var fixHeight = 0;
                if ($.support.boxModel === true) {
                    fixHeight = this.element.outerHeight() - this.element.height();

                    this.$icon && this.$icon.css({
                        height: opts.iconHeight,
                        top: (this.element.outerHeight() - this.$icon.outerHeight()) / 2 - fixHeight
                    });
                } else {
                    this.$icon && this.$icon.css({
                        height: opts.iconHeight,
                        top: (opts.height - opts.iconHeight) / 2
                    })
                }
                if (!give.hasIgnoredBounds) {
                    height = height - fixHeight;
                }
                this.element.css({height: height});
                this.$text.css('line-height', height + 'px');
                this.$text.css('height', height);
                this.$inner.css('height', height);
                this.$text.css('display', 'block');//Sean：莫名其妙，IE7文本模式下不加这句话有时候按钮上的字会不显示，貌似要重新刷一下css
            }
        },

        setEnable: function (enable) {
            var opts = this.options;
            if ($.isFunction(opts.handler)) {
                if (!this.isEnabled() && enable === true) {
                    this.un(FR.Events.CLICK);
                    this.on(FR.Events.CLICK, opts.handler.createDelegate(opts.scope || this));
                } else if (enable === false) {
                    this.un(FR.Events.CLICK);
                }
            }
            FR.QuickButton.superclass.setEnable.apply(this, arguments);
        }
    });
    $.shortcut("quickbutton", FR.QuickButton);
})(jQuery);
/*
 * Copyright (c) 2001-2014,FineReport Inc, All Rights Reserved.
 */
;
(function ($) {

    /**
     * 表格控件的父类
     * @cfg {JSON} options 配置属性
     * @cfg {String} options.baseCls 控件基础类
     * @cfg {String} options.baseTableCls 表格dom的class
     * @cfg {String} options.baseContainerCls 表格dom容器的class
     * @cfg {String} options.tableId table的id属性
     * @cfg {Number} options.marginLeft 左间距
     * @cfg {Number} options.marginRight 右间距
     * @cfg {Array} options.items 数据
     * @cfg {Array} options.columnsConfig 列属性配置
     * @cfg {Array} options.localeArray 需要做国际化转换的列名数组
     * @cfg {Function} options.columnsConfig[columnIndex].onCellCreate 单元格生成事件
     * @cfg {Function} options.columnsConfig[columnIndex].onCellClick 单元格点击事件
     * @cfg {Function} options.columnsConfig[columnIndex].onHeadCellCreate 表头单元格生成事件
     * @cfg {Object} options.columnsConfig[columnIndex].css 单元格自定义样式
     * @cfg {Number} [options.pageCount=15] 分页后每页显示的数据数,分页时生效
     * @cfg {String} [options.footAlign='bottom'] 翻页按钮的位置,'bottom'|'top'
     * @cfg {Boolean} [options.isFootShow=true] 是否显示表尾控制按钮,page属性为true时生效
     * @cfg {Boolean} [options.isHeadShow=true] 是否显示表头
     * @cfg {Boolean} [options.intervalColor=false] 是否颜色相间
     * @cfg {Boolean} [options.multiSelect=false] 是否多选
     * @cfg {Boolean} [options.isInitWithData=true] 控件生成时是否初始化数据
     * @cfg {Boolean} [options.hasHoverCls=true] 是否有悬浮样式
     * @cfg {Function} options.onPageTurn 翻页事件
     * @cfg {Function} options.onBeforeRowCreate 行生成前事件
     * @cfg {Function} options.onAfterRowCreate 行生成后事件
     * @cfg {Function} options.onBeforeHeadCreate 表头行生成前事件
     * @cfg {Function} options.onAfterHeadCreate 表头行生成后事件
     * @cfg {Function} options.onRowClick 行点击事件
     * @cfg {Function} options.onRowMouseDown 行鼠标下按事件
     * @cfg {Function} options.onRowMouseOver 行鼠标悬浮事件
     * @cfg {Function} options.onRowMouseOut 行鼠标移出事件
     * @cfg {Function} options.onAsyncSuccess 异步请求成功事件,async属性配置后生效
     * @cfg {Function} options.onAsyncError 异步请求错误事件,async属性配置后生效
     * @cfg {Object} options.frozen.head 冻结标题行 /foot 冻结结尾行 /left冻结坐标列
     * @cfg {Object} options.background.thb 表头背景
     */
    FR.Grid = FR.extend(FR.Widget, /**@class FR.Grid*/{
        NAV: {
            FIRSTPAGE: 'first', //第一页
            PREVPAGE: 'prev', //上一页
            NEXTPAGE: 'next', //下一页
            LASTPAGE: 'last', //最后一页
            JUMPPAGE: 'jump'  //跳转至某页
        },
        _defaultConfig: function () {
            return $.extend(FR.Grid.superclass._defaultConfig.call(), {
                baseCls: 'fr-grid',
                baseTableCls: null,
                baseContainerCls: null,
                tableId: null,
                marginLeft: 10,
                marginRight: 10,
                items: [],
                columnsConfig: [],
                pageCount: 15,
                footAlign: 'bottom',
                isFootShow: true,
                isHeadShow: true,
                multiSelect: false,
                intervalColor: false,
                isInitWithData: true,
                async: null,
                hasHoverCls: true,
                onPageTurn: null,
                onAsyncSuccess: null,
                onAsyncError: null,
                onBeforeRowCreate: null,
                onAfterRowCreate: null,
                onBeforeHeadCreate: null,
                onAfterHeadCreate: null,
                localeArray: [],
                frozen: null,
                background: null
            });
        },

        _init: function () {
            FR.Grid.superclass._init.apply(this, arguments);
            var o = this.options;
            this.$container = $('<div class="fr-grid-table"/>');
            if (o.baseContainerCls) {
                this.$container.addClass(o.baseContainerCls);
            }
            this.element.append(this.$container);
            this.activedPage = 1;
            if (o.isInitWithData) {
                this.refresh();
            } else {
                this._initWidth();
                this._initTable();
                this._onCreateHead();
                this._onCreateFoot();
                this.$table.appendTo(this.$container);
            }
        },
        _initTable: function () {
            this.$table = $('<table cellPadding="0" cellSpacing="0" class="fr-grid-table-inner"/>');
            if (this.options.tableId) {
                this.$table.attr('id', this.options.tableId);
            }
            if (this.options.baseTableCls) {
                this.$table.addClass(this.options.baseTableCls);
            }
        },

        /**
         * 刷新数据并重建数据表格
         * @param {Array} items 需要刷新的静态数据或是异步取数时的其他需要传递的信息
         */
        refresh: function (items) {
        },

        /**
         * 重新构建数据表格,但不刷新原有数据
         */
        reBuild: function () {
            var self = this;

            this._clear();

            this._initTable();
            this._initWidth();

            this._onCreateHead();
            this._onCreateTable();
            this._onCreateFoot();
            this._bindEvts();
            this.$container.append(this.$table);
            setTimeout(function () {
                self._dealWithFrozen()
            }, 500);

        },

        _clear: function () {
            if (this.options.multiSelect) {
                this.allBoxes = [];
            }
            if (this.$table) {
                this.$table.remove();
                this.$table = null;
            }
            if (this.options.frozen) {
                var cloneElArr = $('.fr-clone', this.element);//移除已存在的clone Dom
                if (cloneElArr.length > 0) {
                    $.each(cloneElArr, function (idx, cloneItem) {
                        cloneItem.remove();
                    })
                }
            }
        },
        _dealWithFrozen: function () {
            var frozen = this.options.frozen;
            if (frozen) {
                this.$container.addClass("table-frozen");
                frozen = $.extend({
                    "head": 0,
                    "foot": 0,
                    "left": 0
                }, frozen);
                FR.DomTool.frozenTable(this.$table, frozen.head, frozen.foot, frozen.left, {
                    "wrapCls": ["fr-grid-table-inner"]
                });
            }
        },

        /**
         * 控件总宽度计算
         */
        _initWidth: function () {
            var width = 0, opts = this.options;
            for (var i = 0, len = opts.columnsConfig.length; i < len; i++) {
                width += opts.columnsConfig[i].width;
            }
            if (opts.multiSelect) {
                width += 25;
            }
            width += opts.marginLeft;
            width += opts.marginRight;
            opts.width = width;
            this.element.width(width);
        },

        /**
         * 生成表头
         * @private
         */
        _onCreateHead: function () {
            var opts = this.options, self = this;
            var needHead = opts.isHeadShow;
            this.$head = $('<thead/>');
            var $tr = $('<tr/>').appendTo(this.$head);
            if (opts.background && opts.background.thb) {
                $tr.css('background', opts.background.thb);
            }

            FR.applyFunc(this, opts.onBeforeHeadCreate, [$tr], false);
            $('<td/>').append($('<div/>').width(opts.marginLeft)).appendTo($tr);
            if (opts.multiSelect) {
                this.$AllCheck = new FR.CheckBox({
                    width: 25,
                    listeners: [
                        {
                            eventName: FR.Events.STATECHANGE,
                            action: function () {
                                if (!self.allBoxes) {
                                    return;
                                }
                                var isSel = this.isSelected();
                                for (var i = 0, len = self.allBoxes.length; i < len; i++) {
                                    var box = self.allBoxes[i];
                                    box.setValue(isSel);
                                }
                            }
                        }
                    ]
                });
                $('<td/>').append(this.$AllCheck.element).appendTo($tr);
            }
            for (var colIdx = 0, len = opts.columnsConfig.length; colIdx < len; colIdx++) {
                var itemcfg = opts.columnsConfig[colIdx];
                var $cell = $('<td/>').width(this._calculateWidth(itemcfg));
                var $el = FR.applyFunc(this, itemcfg.onHeadCellCreate, [colIdx, itemcfg], false);
                if ($el === false) {
                    $cell.css('text-align', itemcfg.textAlign ? itemcfg.textAlign : 'left')
                        .text(itemcfg.value ? itemcfg.value : itemcfg.key);
                } else {
                    $cell.append($el);
                }
                $cell.appendTo($tr);
            }
            $('<td/>').append($('<div/>').width(opts.marginRight)).appendTo($tr);
            FR.applyFunc(this, opts.onAfterHeadCreate, [$tr], false);
            if (needHead) {
                this.$table.append(this.$head);
            }
        },
        _calculateWidth: function (itemcfg) {
            if (itemcfg) {
                if (itemcfg.width > 0 && itemcfg.width < 1) {
                    return itemcfg.width * this.element.width();
                } else {
                    return itemcfg.width
                }
            }
            return 0;
        },
        /**
         * 生成表体
         * @private
         */
        _onCreateTable: function () {
            this.$tbody = $('<tbody/>');
            var o = this.options;
            var items = o.items;
            if (o.page && o.autoPage) {
                this.totalpages = Math.ceil(o.items.length / o.pageCount);
                items = o.items.slice(o.pageCount * (this.activedPage - 1), o.pageCount * this.activedPage);
            }
            for (var i = 0, len = items.length; i < len; i++) {
                var $row = this.onCreateRow(i, items[i]);
                this.$tbody.append($row);
            }
            this.$table.append(this.$tbody);
        },

        /**
         * 生成表尾的翻页按钮
         * @private
         */
        _onCreateFoot: function () {
            var self = this, o = this.options, nav = this.NAV;
            if (!o.page) {
                return;
            }
            if (this.$foot) {
                this.$foot.remove();
                this.$foot = null;
            }
            this.$foot = $('<div class="fr-grid-foot"/>').css({'margin-left': o.width - 240 - o.marginRight});
            //到第一页
            var mf = new FR.IconButton({
                imgsrc: 'fr-grid-foot-first',
                width: 24,
                height: 24,
                handler: function () {
                    setAllBtnDisable();
                    self.activedPage = 1;
                    if (!FR.applyFunc(self, o.onPageTurn, [self.activedPage, o.pageCount, nav['FIRSTPAGE']], false)) {
                        self.reBuild();
                    }
                }
            });
            //到前一页
            var mp = new FR.IconButton({
                imgsrc: 'fr-grid-foot-prev',
                width: 24,
                height: 24,
                handler: function () {
                    setAllBtnDisable();
                    self.activedPage--;
                    if (!FR.applyFunc(self, o.onPageTurn, [self.activedPage, o.pageCount, nav['PREVPAGE']], false)) {
                        self.reBuild();
                    }
                }
            });
            //到下一页
            var mn = new FR.IconButton({
                imgsrc: 'fr-grid-foot-next',
                width: 24,
                height: 24,
                handler: function () {
                    setAllBtnDisable();
                    self.activedPage++;
                    if (!FR.applyFunc(self, o.onPageTurn, [self.activedPage, o.pageCount, nav['NEXTPAGE']], false)) {
                        self.reBuild();
                    }
                }
            });
            //到最后一页
            var ml = new FR.IconButton({
                imgsrc: 'fr-grid-foot-last',
                width: 24,
                height: 24,
                handler: function () {
                    setAllBtnDisable();
                    self.activedPage = self.totalpages;
                    if (!FR.applyFunc(self, o.onPageTurn, [self.activedPage, o.pageCount, nav['LASTPAGE']], false)) {
                        self.reBuild();
                    }
                }
            });
            var pageLoader = $('<input class="fr-grid-foot-loader" type="text"/>')
                .val(this.activedPage).keydown(function (e) {
                    if (e.keyCode === 13) {
                        setAllBtnDisable();
                        self.activedPage = $(this).val();
                        if (!FR.applyFunc(self, o.onPageTurn, [self.activedPage, o.pageCount, nav['JUMPPAGE']], false)) {
                            self.reBuild();
                        }
                        e.stopEvent();
                    }
                });
            var showPage = this.totalpages ? this.totalpages : 1;
            if (this.activedPage >= showPage) {
                ml.setEnable(false);
                mn.setEnable(false);
            }
            if (this.activedPage <= 1) {
                mp.setEnable(false);
                mf.setEnable(false);
            }
            var totalPane = $('<div class="fr-grid-foot-page"/>').text(" /" + showPage + " " + FR.i18nText("FR-Basic_Page_Number"));
            var table = $('<table/>').attr({id: 'fr-grid-foot-table', cellPadding: 0, cellSpacing: 0});
            $('<tr/>').append($('<td/>').append(mf.element)).append($('<td>').append(mp.element))
                .append($('<td/>').addClass('fr-grid-foot-pageshow').append(pageLoader).append(totalPane))
                .append($('<td/>').append(mn.element)).append($('<td/>').append(ml.element)).appendTo(table);
            this.$foot.append(table);
            if (o.footAlign == 'top') {
                this.$foot.prependTo(this.element);
            } else {
                this.$foot.appendTo(this.element);
            }
            var setAllBtnDisable = function () {
                mf.setEnable(false);
                mp.setEnable(false);
                ml.setEnable(false);
                mn.setEnable(false);
            }
        },

        /**
         * 绑定事件
         * @private
         */
        _bindEvts: function () {
            var self = this, o = this.options;
            var proxy = function (event) {
                var target = event.target;
                var type = event.type;
                var $row = self._getTargetDom(target, 'TR');
                if (!$row) {
                    return;
                }
                if (type === 'mousedown') {
                    FR.applyFunc(self, o.onRowMouseDown, [$row], false);
                } else if (type === 'mouseover') {
                    o.hasHoverCls && $row.addClass('hover');
                    FR.applyFunc(self, o.onRowMouseOver, [$row], false);
                } else if (type === "mouseout") {
                    $row.removeClass('hover');
                    FR.applyFunc(self, o.onRowMouseOut, [$row], false);
                } else if (type === "mouseup") {
                    FR.applyFunc(self, o.onRowClick, [$row], false);
                }
            };
            this.element.bind("mousedown", proxy)
                .bind("mouseover", proxy)
                .bind("mouseup", proxy)
                .bind("mouseout", proxy);
        },

        /**
         * 回溯获取指定DOM层对象
         * @param {Object} curDom 当前DOM
         * @param {String} targetTag DOM节点的标签
         * @returns {*} 返回获取的DOM对象
         * @private
         */
        _getTargetDom: function (curDom, targetTag) {
            while (curDom && curDom.tagName) {
                if (curDom.tagName.toUpperCase() !== targetTag.toUpperCase()) {
                    curDom = curDom.parentNode;
                } else {
                    return $(curDom);
                }
            }
            return null;
        },

        /**
         * 生成行数据
         * @param rowIdx 行索引
         * @param item 数据项
         * @returns {*|jQuery|HTMLElement}
         */
        onCreateRow: function (rowIdx, item) {
            var o = this.options, self = this;
            var $row = $('<tr/>');
            FR.applyFunc(this, o.onBeforeRowCreate, [$row, rowIdx, item], false);
            $('<td/>').width(o.marginLeft).appendTo($row);
            if (o.multiSelect) {
                var $check = new FR.CheckBox({
                    width: 25,
                    gridRowData: item,
                    listeners: [{
                        eventName: FR.Events.STATECHANGE,
                        action: function () {
                            if (!self.$AllCheck) {
                                return;
                            }
                            if (this.isSelected()) {
                                var isAllsel = true;
                                for (var i = 0, len = self.allBoxes.length; i < len; i++) {
                                    var box = self.allBoxes[i];
                                    if (!box.isSelected()) {
                                        isAllsel = false;
                                        break;
                                    }
                                }
                                self.$AllCheck.setValue(isAllsel);
                            } else {
                                self.$AllCheck.setValue(false);
                            }
                        }
                    }]
                });
                this.allBoxes.push($check);
                $('<td/>').append($check.element).appendTo($row);
            }
            for (var colIdx = 0, len = o.columnsConfig.length; colIdx < len; colIdx++) {
                var colCfg = o.columnsConfig[colIdx];
                var $cell = this.onCellCreate(rowIdx, colIdx, item, colCfg);
                $cell.appendTo($row);
            }
            if (o.intervalColor && rowIdx % 2 === 0) {
                $row.addClass('even');
            }
            $('<td/>').width(o.marginRight).appendTo($row);
            FR.applyFunc(this, o.onAfterRowCreate, [$row, rowIdx, item, $check], false);
            return $row;
        },

        /**
         * 生成单元格事件
         * @param rowIdx 行索引
         * @param colIdx 列索引
         * @param item 数据项
         * @param colCfg 列属性配置
         * @returns {*|jQuery|HTMLElement}
         */
        onCellCreate: function (rowIdx, colIdx, item, colCfg) {
            var $td = $('<td/>'), self = this;
            var $cell = FR.applyFunc(this, colCfg.onCellCreate, [rowIdx, colIdx, item, colCfg], false);
            if ($cell === false) {
                if (!FR.isEmpty(colCfg.value)) {
                    var val = $.inArray(colCfg.key, self.options.localeArray) == -1 ? item[colCfg.key] : FR.i18nText(item[colCfg.key]);
                    $cell = $('<div class="cell"/>').width(self._calculateWidth(colCfg))
                        .text(val).attr('title', val)
                        .appendTo($td);
                }
            } else {
                $td.append($cell);
            }
            $td.click(function () {
                FR.applyFunc(self, colCfg.onCellClick, [rowIdx, colIdx, item, colCfg, $cell], false);
            });
            FR.applyStyles($cell, colCfg.css);
            return $td;
        },

        getValue: function () {
            return this.options.items;
        },

        /*API for Grid*/
        addRowData: function (item) {
            var self = this, o = this.options;
            if (o.async) {

            } else {
                var $row = this.onCreateRow(this.options.items.length, item);
                this.options.items.push(item);
                $row.appendTo(this.$tbody);
            }
        },

        /**
         * multiSelet为true时，可获取选中行的数据
         * @returns {Array} 返回所有选中的数据
         */
        getSelectedData: function () {
            var datas = [];
            if (this.allBoxes) {
                for (var i = 0, len = this.allBoxes.length; i < len; i++) {
                    var box = this.allBoxes[i];
                    if (box.isSelected()) {
                        datas.push(box.options.gridRowData);
                    }
                }
            }
            return datas;
        }

    });
}(jQuery));
/*
 * Copyright (c) 2001-2014,FineReport Inc, All Rights Reserved.
 */
;
(function ($) {

    /**
     * 表格控件
     *
     *     @example
     *     var grid = new FR.QuickGrid({
     *                  renderEl : $('body'),
     *                  baseCls: 'fr-grid',
     *                  marginLeft : 20,
     *                  marginRight :0,
     *                  items : [],
     *                  columnsConfig:[],
     *                  page : true,
     *                  pageCount: 15,
     *                  isFootShow :true,
     *                  isHeadShow :true,
     *                  multiSelect : false,
     *                  intervalColor : false,
     *                  isInitWithData : true,
     *                  async: false,
     *                  onBeforeRowCreate: null,
     *                  onAfterRowCreate: null,
     *                  onBeforeHeadCreate: null,
     *                  onAfterHeadCreate: null,
     *                  onRowClick: null,
     *                  items: [
     *                              {
     *                                  name: 'Task1',
     *                                  sender: 'peter',
     *                                  deadline: '2014-09-10',
     *                                  status: '0',
     *                                  operation: '1'
     *                              },
     *                              {
     *                                  name: 'Task2',
     *                                  sender: 'alex',
     *                                  deadline: '2005-12-10',
     *                                  status: '1',
     *                                  operation: '2'
     *                              }
     *                          ],
     *                  columnsConfig: [
     *                      {
     *                          key: 'name',
     *                          value: '任务名称',
     *                          width: 200
     *                      },
     *                      {
     *                          key: 'sender',
     *                          value: '发送人',
     *                          width: 85,
     *                      },
     *                     {
     *                          key: 'sendtime',
     *                          value: '发送时间',
     *                          width: 120
     *                      },
     *                      {
     *                          key: 'status',
     *                          value: '任务状态',
     *                          width: 120
     *                      },
     *                      {
     *                          key: 'operation',
     *                          value: '任务操作',
     *                          width: 120
     *                      },
     *                      {
     *                          onCellCreate: function(rowIdx, colIdx, item, colCfg){
     *                              if(item.operation == '1'){
     *                                  return $('<div/>').html('right');
     *                              }else{
     *                                  return $('<div/>').html('wrong');
     *                              }
     *                          },
     *                          width: 90
     *                      },
     *                      {
     *                          onCellCreate: function(rowIdx, colIdx, item, colCfg){
     *                              if(item.status == '1'){
     *                                  return $('<div/>').html('&lsaquo;');
     *                              }else{
     *                                  return $('<div/>').html('&rsaquo;');
     *                              }
     *                          },
     *                          width: 90
     *                      }
     *                  ]
     *          });
     * @class FR.QuickGrid
     * @extends FR.Grid
     * @since 7.0.6
     *
     * @cfg {JSON} options 配置属性
     * @cfg {String} options.baseCls 控件基础类
     * @cfg {String} options.baseId 控件唯一ID
     * @cfg {Number} options.marginLeft 左间距
     * @cfg {Number} options.marginRight 右间距
     * @cfg {Array} options.items 数据
     * @cfg {Array} options.columnsConfig 列属性配置
     * @cfg {Array} options.localeArray 需要做国际化转换的列名数组
     * @cfg {Function} options.columnsConfig[columnIndex].onCellCreate 单元格生成事件
     * @cfg {Function} options.columnsConfig[columnIndex].onCellClick 单元格点击事件
     * @cfg {Function} options.columnsConfig[columnIndex].onHeadCellCreate 表头单元格生成事件
     * @cfg {Object} options.columnsConfig[columnIndex].css 单元格自定义样式
     * @cfg {Boolean} [options.page=false] 是否分页
     * @cfg {Boolean} [options.autoPage=true] 是否自动计算分页
     * @cfg {Number} [options.pageCount=15] 分页后每页显示的数据数,page属性为true时生效
     * @cfg {String} [options.footAlign='bottom'] 翻页按钮的位置,'bottom'|'top'
     * @cfg {Boolean} [options.isFootShow=true] 是否显示表尾控制按钮,page属性为true时生效
     * @cfg {Boolean} [options.isHeadShow=true] 是否显示表头
     * @cfg {Boolean} [options.intervalColor=false] 是否颜色相间
     * @cfg {Boolean} [options.multiSelect=false] 是否多选
     * @cfg {Boolean} [options.isInitWithData=true] 控件生成时是否初始化数据
     * @cfg {Boolean} [options.hasHoverCls=true] 是否有悬浮样式
     * @cfg {Object} options.async 异步属性配置
     * @cfg {String} options.async.url 异步请求地址
     * @cfg {String} options.async.type 异步请求方式
     * @cfg {Object} options.async.data 异步请求参数
     * @cfg {Function} options.onPageTurn 翻页事件
     * @cfg {Function} options.onBeforeRowCreate 行生成前事件
     * @cfg {Function} options.onAfterRowCreate 行生成后事件
     * @cfg {Function} options.onBeforeHeadCreate 表头行生成前事件
     * @cfg {Function} options.onAfterHeadCreate 表头行生成后事件
     * @cfg {Function} options.onRowClick 行点击事件
     * @cfg {Function} options.onRowMouseDown 行鼠标下按事件
     * @cfg {Function} options.onRowMouseOver 行鼠标悬浮事件
     * @cfg {Function} options.onRowMouseOut 行鼠标移出事件
     * @cfg {Function} options.onAsyncSuccess 异步请求成功事件,async属性配置后生效
     * @cfg {Function} options.onAsyncError 异步请求错误事件,async属性配置后生效
     */
    FR.QuickGrid = FR.extend(FR.Grid, /**@class FR.QuickGrid*/{
        _defaultConfig: function () {
            return $.extend(FR.QuickGrid.superclass._defaultConfig.call(), {
                page: false,
                autoPage: true
            });
        },

        /**
         * 刷新数据并重建数据表格
         * @param {Array} items 需要刷新的静态数据或是异步取数时的其他需要传递的信息
         */
        refresh: function (items) {
            var self = this, o = this.options;
            if ($.isArray(items)) {
                this.options.items = items;
                this.reBuild();
            } else if (o.async) {
                FR.ajax({
                    url: o.async.url,
                    type: o.async.type ? o.async.type : 'POST',
                    data: o.async.data,
                    success: function (res, status) {
                        FR.applyFunc(self, o.onAsyncSuccess, [res, status, items]);
                        self.reBuild();
                    },
                    error: function (res, status) {
                        FR.applyFunc(self, o.onAsyncError, [res, status, items])
                    }
                });
            } else {
                this.reBuild();
            }
        }

    });
    $.shortcut("quickgrid", FR.QuickGrid);
}(jQuery));
/*
 * Copyright (c) 2001-2014,FineReport Inc, All Rights Reserved.
 */
;
(function ($) {

    /**
     * 异步的表格控件,通过async.url请求获取每页数据
     *
     *     @example
     *     var grid = new FR.AsygnGrid({
     *                  renderEl : $('body'),
     *                  baseCls: 'fr-grid',
     *                  marginLeft : 20,
     *                  marginRight :0,
     *                  columnsConfig:[],
     *                  pageCount: 15,
     *                  isFootShow :true,
     *                  isHeadShow :true,
     *                  multiSelect : false,
     *                  intervalColor : false,
     *                  isInitWithData : true,
     *                  async: {
     *                         url: *******,
     *                         type: 'POST',
     *                         data: {
     *                                   d1: **,
     *                            }
     *                  },
     *                  onBeforeRowCreate: null,
     *                  onAfterRowCreate: null,
     *                  onBeforeHeadCreate: null,
     *                  onAfterHeadCreate: null,
     *                  onRowClick: null
     *          });
     * @class FR.AsygnGrid
     * @extends FR.Grid
     * @since 8.0
     */
    FR.AsygnGrid = FR.extend(FR.Grid, /**@class FR.AsygnGrid*/{
        _defaultConfig: function () {
            return $.extend(FR.AsygnGrid.superclass._defaultConfig.call(), {
                page: true,
                autoPage: false
            });
        },
        /**
         * 重新刷新，展示第一页
         */
        refresh: function () {
            var self = this, o = this.options;
            if (o.async) {
                self.activedPage = 1;
                self.reBuild();
            }
        },
        /**
         * 重新构建当页数据
         */
        reBuild: function () {
            var self = this, o = this.options;
            var data = $.extend(
                {
                    pn: self.activedPage,
                    pageCount: o.pageCount
                }, o.async.data)
            FR.ajax({
                url: o.async.url,
                type: o.async.type ? o.async.type : 'POST',
                data: data,
                success: function (res, status) {
                    FR.applyFunc(self, o.onAsyncSuccess, [res, status]);
                    var result = FR.jsonDecode(res);
                    o.items = result.items;
                    self.totalpages = result.totalpages;
                    self._reBuildGrid();
                },
                error: function (res, status) {
                    FR.applyFunc(self, o.onAsyncError, [res, status])
                }
            });
        },

        _reBuildGrid: function () {
            FR.AsygnGrid.superclass.reBuild.apply(this);
        }
    });
    $.shortcut("asygngrid", FR.AsygnGrid);
}(jQuery));
FR.Core = FR.Core || {};

FR.Core.Plugin = FR.Core.Plugin || {};

/**
 * 构建下拉树插件接口
 * @example
 * $.extend(FR.Report.Plugin.Tree, {
 *     //返回一个含有getView()方法的对象，用于返回下拉树最外层的ul
 *    createForest: function (options,nodes) {
 *    }
 * });
 */
FR.Core.Plugin.Tree = FR.Core.Plugin.Tree || {};

/**
 * 自定义背景接口
 */
FR.Core.Plugin.Background = FR.Core.Plugin.Background || {};

/**
 * 浏览器兼容插件背景接口
 */
FR.Core.Plugin.LabelBackground = FR.Core.Plugin.LabelBackground || {};

/**
 * 上报离线报表接口
 */
FR.Core.Plugin.ProcessNeedOffCpt = FR.Core.Plugin.ProcessNeedOffCpt || {};
/**
 * Created by richie on 15/11/11.
 */
;(function ($) {
    FR.progressBar = function (sessionID, type) {
        var self = this;
        function isExportOver(_sessionID) {
            var isExportOver;
            FR.ajax({
                type: 'POST',
                url: FR.servletURL,
                cache: false,
                data: {
                    op: "export",
                    cmd: "export_polling",
                    sessionID: _sessionID,
                    type: type,
                    data: new Date().getTime()
                },
                async: false,
                success: function (res, status) {
                    var ro = FR.jsonDecode(res);
                    if (ro.isExporting) {
                        self.createProgressBar();
                    }  else {
                        self.removeProgressBar();
                        isExportOver = true;
                    }
                }
            });
            return isExportOver;
        }

        var isOverFunc = function () {
            if (!isExportOver(sessionID)) {
                return;
            }
            clearInterval(interval);
        };

        var interval = setInterval(isOverFunc, 5000);
    }
}(jQuery));
/**
 * Created by richie on 15/11/11.
 */
;(function($){
    FR.layoutFrozen = function ($container, pageTop, $content_container) {
        var $center = $('.frozen-center', $container);
        var $corner = $('.frozen-corner', $container);
        var $north = $('.frozen-north', $container);
        var $west = $('.frozen-west', $container);

        if ($center.length > 0 || $corner.length > 0 || $north.length > 0 || $west.length > 0) {

            if ($content_container != undefined) {
                $content_container.css({
                    overflow: 'hidden',
                    overflowX: 'hidden',
                    overflowY: 'hidden'
                });
            }

            var cornerNorthHeight = 0;
            $('.rows-height-counter', $north).each(function () {
                cornerNorthHeight += $(this).height();
            });
            var calculateDivHeight = function () {
                //引用传递, 不要改变pageTop
                var top = pageTop;
                var buttonBarHeight = 0;

                var pageHeight = FR.windowHeight - cornerNorthHeight;

                var tabPane = contentPane.$contentPane.data('TabPane');
                if (tabPane) {
                    top += tabPane.options.tabHeight;
                }

                if (FR.hasBottomToolbar) {
                    top += FR.toolbarHeight;
                }

                if (FR.parameterContainerHeight > 0) {
                    var parameterPane = $('.parameter-container');
                    var visibility = parameterPane.isVisible();
                    var parameterHeight = FR.parameterContainerHeight;
                    if (visibility && top < parameterHeight) {
                        top += parameterHeight;
                    } else if (!visibility && top > parameterHeight) {
                        top -= parameterHeight;
                    }
                }

                pageHeight -= top;

                return pageHeight;
            };

            var setFrozenDiv = function () {
                var pageWidth;
                var pageHeight = calculateDivHeight();

                var $contentDIV = $(".pageContentDIV", this.$contentPane);
                var isPageCenter = $contentDIV.hasClass("contentDIV");
                var isFrozen = false;
                if ($('.frozen-table', $container).length > 0) {
                    isFrozen = true;
                }
                if (isPageCenter) {//分页居中的处理方式
                    var left = parseInt($(".report-background").css('left'));
                    if (FR.Browser.isIE8Before()){
                        left = parseInt($("#fr-page-content").css('left'));
                    }
                    // ie读出来的left可能是auto left就是NaN
                    left = isNaN(left) ? 0 : left;
                    var contentdivWidth = $contentDIV.width();
                    var frozenWidth = Math.min($('.content-container').width(), contentdivWidth) - left;
                    $(".frozen-page").css('width', frozenWidth);
                    pageWidth = frozenWidth;
                    if (pageWidth == contentdivWidth) {
                        //当页面设置超出一个屏幕时, 就不需要减了, 因为取得是frozenpage的
                        pageWidth -= left;//左右边距
                    }
                    var top = parseInt($(".report-background").css('top'));
                    if (FR.Browser.isIE8Before()){
                        top = parseInt($("#fr-page-content").css('top'));
                    }
                    top = isNaN(top) ? 0 : top;
                    pageHeight -= (top + 24);//上下边距
                    // north center 的宽度应该是frozen-page的宽度减去corner的宽度
                    pageWidth -= $corner.width();
                } else {
                    var westWidth = 0;
                    var xtable = $('table.x-table', $west);
                    if (xtable.length > 0) {
                        westWidth = parseInt(xtable[0].style.width || 0);
                        if (westWidth > 0) {
                            westWidth += 1;
                        }
                    }
                    if (!westWidth || westWidth === 0) {
                        westWidth = $west.width();
                    }
                    if (isFrozen) {//非分页居中的冻结:分页居左，填报居左，填报居中，数据分析居左
                        pageWidth = FR.windowWidth - parseInt($container[0].style['margin-left'] || 0) - westWidth;
                    } else {
                        pageWidth = FR.windowWidth - westWidth;
                    }

                    pageHeight -= $(".HF-footer").height();
                    pageHeight -= $(".HF-header").height();
                }

                //IE下为负值可能会报参数错误
                if (pageWidth < 0) {
                    pageWidth = 0;
                }
                if (pageHeight < 0) {
                    pageHeight = 0;
                }

                if ($center.length > 0) {
                    $center[0].style.width = pageWidth + 'px';
                    $center[0].style.height = pageHeight + 'px';
                }
                if ($north.length > 0) {
                    $north[0].style.width = pageWidth + 'px';
                }
                if ($west.length > 0) {
                    $west[0].style.height = pageHeight + 'px';
                }

                // 火狐浏览器 north高度比较小的时候 不设置高度的话外框会比内部高
//                if ($.browser.mozilla) {
//                    $north.height($north.children().height());
//                }

            };

            var checkViewMultiSheet = function () {
                if ($west.width() === 0 && cornerNorthHeight === 0) {
                    //view下切换多sheet时, 会造成container变化, 导致$west,$north需要重新获取成当前lgp的
                    $container = $('.sheet-container');
                    var len = $('.frozen-center', $container).length;
                    for (var i = 0; i < len; i++) {
                        var tempWest = $($('.frozen-west', $container)[i]);
                        var tempNorth = $($('.frozen-north', $container)[i]);
                        if (tempWest.width() !== 0 && tempNorth.height() !== 0) {
                            $west = tempWest;
                            $north = tempNorth;
                            $center = $($('.frozen-center', $container)[i]);
                            $corner = $($('.frozen-corner', $container)[i]);
                            break;
                        }
                    }
                }
            };

            setFrozenDiv();
            // alex:$center_block滚动的时,north & west也要跟着滚
            var lastLeft = 0;
            var lastTop = 0;
            //$center和$west的scroll会相互影响使滚动变卡,所以$center滚动时暂时禁用$west的scroll事件
            var westScroll = function () {
                $center.scrollTop($west.scrollTop());
            }.createDelegate(this);
            var scrollTimerId = null;
            $center.scroll(function () {
                var left = $center.scrollLeft();
                var top = $center.scrollTop();
                if (left != lastLeft) {
                    $north.scrollLeft(left);
                    lastLeft = left;
                }
                if (top != lastTop) {
                    $west.off('scroll', westScroll);
                    $west.scrollTop(top);
                    if (scrollTimerId) {
                        clearTimeout(scrollTimerId);
                    }
                    scrollTimerId = setTimeout(function () {
                        $west.on('scroll', westScroll);
                        scrollTimerId = null;
                    }, 100);
                    lastTop = top;
                }
            }.createDelegate(this));

            //zack:页面搜索的时候会使得左边滚起来的，这样的话中间也要跟着滚bug:70678
            $west.on('scroll', westScroll);

            //当ie下div的overflow-y为scroll时，无论overflow-x如何设置，下层的table或iframe过宽时，都能通过鼠标进行左右滚动，
            //只好在ie下添加上center随north滚动的事件了。
            if(FR.Browser.isIE()){
                $north.scroll(function () {
                    $center.scrollLeft($north.scrollLeft());
                }.createDelegate(this));
            }

            window.onresize = function () {
                if (self.resizeid != null) {
                    clearTimeout(self.resizeid);
                    self.resizeid = null;
                }
                self.resizeid = setTimeout(function () {
                    checkViewMultiSheet();
                    setFrozenDiv();
                }, 200);
            };
        }
    };
})(jQuery);
/**
 * Created by richie on 15/11/11.
 */
;(function ($) {
    $.fn.extend({
        /*
         * 滚动container的滚动条以使this2view
         * hscroll true -> 滚动水平滚动条; false -> 不滚动水平滚动条
         * vscroll true -> 滚动垂直滚动条; false -> 不滚动垂直滚动条
         * copy from Ext
         */
        __scroll2View__: function (container, hscroll, vscroll) {
            var c = $(container)[0];

            return $.each(this, function (idx, el) {
                var el_os = $(el).offset();
                var c_os = $(c).offset();
                var l = el_os.left - c_os.left + c.scrollLeft, t = el_os.top - c_os.top + c.scrollTop, b = t + el.offsetHeight, r = l + el.offsetWidth;

                var ch = c.clientHeight;
                var ct = parseInt(c.scrollTop, 10);
                var cl = parseInt(c.scrollLeft, 10);
                var cb = ct + ch;
                var cr = cl + c.clientWidth;

                if (vscroll !== false) {
                    if (el.offsetHeight > ch || t < ct) {
                        c.scrollTop = t;
                    } else if (b > cb) {
                        c.scrollTop = b - ch;
                    }
                }

                if (hscroll !== false) {
                    if (el.offsetWidth > c.clientWidth || l < cl) {
                        c.scrollLeft = l;
                    } else if (r > cr) {
                        c.scrollLeft = r - c.clientWidth;
                    }
                }
            });
        }
    });
})(jQuery);
;
(function ($) {


    /**
     * 各种预览方式在浏览器中展示对象的基类
     * @abstract
     * @class FR.BasePane
     * @extends FR.Widget
     */
    FR.BasePane = FR.extend(FR.Widget, {
        type: "basepane",
        zoom: 1.0,

        _defaultConfig: function () {
            return $.extend(FR.BasePane.superclass._defaultConfig.apply(this, arguments), {});
        },

        _init: function () {
            FR.BasePane.superclass._init.apply(this, arguments);
        },

        /**
         * 根据报表所在窗体的宽度和高度自适应的放大和缩小表内容
         */
        autoScale: function () {
            if (window !== top && this.$contentPane && this.options.autoScale) { // denny:
                // 说明是iframe集成
                var $contentDiv = $('.pageContentDIV', this.$contentPane);

                if ($contentDiv) {
                    // var bHeight = window.document.body.scrollHeight;
                    // var dHeight = window.document.documentElement.scrollHeight;
                    var height = $contentDiv.height();

                    // var bWidth = window.document.body.scrollWidth;
                    // var dWidth = window.document.documentElement.scrollWidth;
                    // var width = $contentDiv.width();

                    var iframe_height = FR.windowHeight;
                    // var iframe_width = FR.windowWidth;

                    this.scale(iframe_height / height);
                }
            }
        },

        /**
         * 缩放报表页面
         *
         *     @example
         *     contentPane.scale('+');//放大
         *     contentPane.scale(1.5);//縮放到150%
         *
         * @param {'+'/'-'/Number} 按照指定的参数进行缩放
         */
        scale: (function () {
            // ["25%", "50%", "75%", "100%", "120%", "150%", "200%"]
            var zooms = [0.25, 0.5, 0.75, 1.0, 1.2, 1.5, 2.0];

            return function (zoom) {
                if (zoom === '+') {
                    for (var j = 0, len = zooms.length; j < len; j++) {
                        if (zooms[j] > this.zoom) {
                            return this.scale(zooms[j]);
                        }
                    }
                    if (j === zooms.length) {
                        return this.scale(zooms[zooms.length - 1]);
                    }
                } else if (zoom === '-') {
                    for (var i = (zooms.length - 1); i >= 0; i--) {
                        if (zooms[i] < this.zoom) {
                            return this.scale(zooms[i]);
                        }
                    }
                    if (i < 0) {
                        return this.scale(zooms[0]);
                    }
                } else if (typeof zoom === 'number') {
                    if (this.$contentPane) {
                        var $contentDiv = $('.pageContentDIV', this.$contentPane);
                        if (FR.Browser.r.gecko) {
                            $contentDiv.css('-moz-transform', 'scale(' + zoom + ',' + zoom + ')');
                            $contentDiv.css('-moz-transform-origin', 'top left');
                        } else if (FR.Browser.r.webkit) {
                            $contentDiv.css('-webkit-transform', 'scale(' + zoom + ',' + zoom + ')');
                            $contentDiv.css('-webkit-transform-origin', 'top left');
                        } else if (FR.Browser.r.opera) {
                            $contentDiv.css('-o-transform', 'scale(' + zoom + ',' + zoom + ')');
                            $contentDiv.css('-o-transform-origin', 'top left');
                        } else {
                            $contentDiv.css('zoom', zoom);
                        }
                        this.zoom = zoom;

                        this.fireEvent("zoomchanged");
                    }
                } else {
                    return this.zoom;
                }
            };
        })(),

        /**
         * 根据配置文件加载ReportPane。
         * 如果有参数，就加载ParameterPane + ContentPane,如果没有参数则加载ContentPane
         * @param options 配置
         * @protected
         */
        loadReportPane: function (options) {
            FR.$defaultImport('/com/fr/web/core/js/paramtemplate.js', 'js');
            this.fireEvent(FR.Events.INIT);
            options = options || {};
            options.param = $.extend({
                showType: 1
            }, options.param); // 默认不显示参数面板,showType为1:embed

            var items = [];
            var paramsTemplate = getParamsTemplate(this.currentSessionID);
            if (options.param.html) {
                this.parameterEl = this._createFormParameterPane(options, items, paramsTemplate);
            }

            this.$contentPane = this._createContentPane(options.sheets, options.browserbg, options.$paraContainer);
            items.push({
                region: 'center',
                el: this.$contentPane
            });

            // alex:设置布局为BorderLayout
            this._doReportPaneLayout(items, options, paramsTemplate);

            // james:初始化ContentPane的一些事件，目前主要是Tab的一些切换操作内容
            this.initContentPane();

            // 最后loadContentPane
            if (this.parameterEl === undefined || this.parameterEl === null) {
                this.loadContentPane();
            } else if (options.param.delay === false) {
                this.parameterCommit();
            }

            this.delay = options.param.delay;
        },

        _doReportPaneLayout: function (items, options, paramsTemplate) {
            var self = this;
            var borderLayout = new FR.BorderLayout({
                items: items,
                renderEl: this.options.renderEl
            });
            var showParamsTemplate = options.param.useParamsTemplate && paramsTemplate !== null;
            $(window).bind("resize", function () {
                if (self.resizeid !== undefined && self.resizeid !== null) {
                    clearTimeout(self.resizeid);
                    self.resizeid = null;
                }
                self.resizeid = setTimeout(function () {
                    if (options.$paraContainer) {
                        options.$paraContainer.width = document.body.offsetWidth;
                    }
                    var paramWidget = borderLayout.getWidgetByName(options.alignLayoutName);

                    if (paramWidget) {
                        paramWidget.element.css('width', options.param.width);
                        self.addParaPaneScrollBar(options.$paraContainer, paramWidget.element, options.param.height + (showParamsTemplate ? 30 : 0), self.scrollHeight);
                    }
                    borderLayout.doLayout();
                    $('[widgetname^=sortable]').removeAttr('style');
                }, 200);
            });
            var paramWidget = borderLayout.getWidgetByName(options.alignLayoutName);
            if (paramWidget) {
                this.addParaPaneScrollBar(options.$paraContainer, paramWidget.element, options.param.height + (showParamsTemplate ? 30 : 0), this.scrollHeight);
            }
            options.onCollapse = function (isCollapsed, layoutName, paraHeight) {
                borderLayout.getWidgetByName(layoutName).setVisible(!isCollapsed);
                if (borderLayout.getWidgetByName('paramsTemplatePane') !== undefined) {
                    borderLayout.getWidgetByName('paramsTemplatePane').setVisible(!isCollapsed);
                    borderLayout.getWidgetByName('saveBtn').setVisible(!isCollapsed);
                    borderLayout.getWidgetByName('newParamsBtn').setVisible(!isCollapsed);
                }
                borderLayout.setRegionWH('north', paraHeight);
                borderLayout.doLayout();
                $('[widgetname^=sortable]').removeAttr('style');
            };
            options.onCalculate = function (maxHeight, collapseHeight, $container) {
                options.param.height = maxHeight;
                $container.height(maxHeight + collapseHeight);
                borderLayout.doLayout();
                $('[widgetname^=sortable]').removeAttr('style');
            };
            borderLayout.doLayout();
            if (options.param.html) {
                initParameterTemplate(options.param, options.param.html.items, this.currentSessionID, borderLayout);
            }
        },

        _createContentPane: function (sheetsO, browserbg, $paraContainer) {
            sheetsO = sheetsO || [];
            var $contentPane = $("div.content-container");
            if ($contentPane.length !== 1) {
                $contentPane = $("<div id='content-container'>")
                    .appendTo(this.element).addClass("content-container");
            }
            $contentPane.css({overflow: 'hidden'});
            if (sheetsO && sheetsO.length > 1) {
                this._initSheetTabPane($contentPane, sheetsO, browserbg.background);
            } else {// 普通的单Sheet，就不需要用tabs啦
                // alex: overflow:auto 以显示滚动条查看所有报表内容
                // p: '0px solid #97A5B0'我改成了0px,这样既去掉了上边框,也能够显示滚动条了.
                $contentPane.css("overflow", "auto").css('border-top', '0px');
            }
            // 画网页背景
            // 为使背景固定，对不同浏览器使用不同策略
            if (browserbg.background !== null && browserbg.background !== undefined) {
                if (FR.Browser.isIE8Before()) {
                    $contentPane.css('background', browserbg.background + " fixed");
                    if (browserbg.filter !== undefined) {
                        $contentPane.css('filter', browserbg.filter);
                    }
                    if (FR.Browser.isIE6() && $paraContainer) {
                        $contentPane.css('background-position', '0px ' + $paraContainer.height() + 'px 0px 0px');
                    }
                } else {
                    $contentPane.css('background', browserbg.background);
                    var bgSize = browserbg["background-size"];
                    if (bgSize !== undefined) {
                        $contentPane.css('background-size', bgSize);
                    }
                }
            }
            return $contentPane;
        },

        addParaPaneScrollBar: function (container, mover, top, height) {
            if (container) {
                container.hScrollPane({
                    mover: mover, //指定container对象下的哪个元素需要滚动位置 | 必传项;
                    showArrow: false, //指定是否显示左右箭头，默认不显示 | 可选项;
                    top: top, //滚动条所在的top位置
                    height: height,//滚动条的高度
                    //moverW:function(){return $(".press").width();}(), //传入水平滚动对象的长度值,不传入的话默认直接获取mover的宽度值 | 可选项;
                    //handleMinWidth:100,//指定handle的最小宽度,要固定handle的宽度请在css中设定handle的width属性（如 width:28px!important;），不传入则不设定最小宽度 | 可选项;
                    dragable: false, //指定是否要支持拖动效果，默认可以拖动 | 可选项;
                    easing: false, //滚动是否需要滑动效果,默认有滑动效果 | 可选项;
                    // handleCssAlter:"draghandlealter", //指定拖动鼠标时滚动条的样式，不传入该参数则没有变化效果 | 可选项;
                    mousewheel: {bind: false, moveLength: 500} //mousewheel: bind->'true',绑定mousewheel事件; ->'false',不绑定mousewheel事件；moveLength是指定鼠标滚动一次移动的距离,默认值：{bind:true,moveLength:300} | 可选项;
                });
            }
        },
        /**
         * 展示页面设置的对话框
         * @param o 对话框的配置
         */
        showPageSetupDialog: function (o) {
            o = o || {};
            o.width = o.width || 400;
            o.height = o.height || 295;
            o.title = FR.i18nText("PageSetup-Page_Setup");
            var fontsize = 12, label_color = '#4C4C4C', fontfamily = "simsun", sessionID = o.sessionID || '',
                reportIndex = o.reportIndex,
                widgetPadding = 10, northHeight = 25, mediumRightPadding = 162, rh = 21, radioRightPadding = 234;
            var paperSize_items = [
                {text: "Letter", value: "Letter"},
                {text: "A2", value: "A2"},
                {text: "Legal", value: "Legal"},
                {text: "A0", value: "A0"},
                {text: "A1", value: "A1"},
                {text: "Note", value: "Note"},
                {text: "A3", value: "A3"},
                {text: "A4", value: "A4"},
                {text: "A5", value: "A5"},
                {text: "A6", value: "A6"},
                {text: "A7", value: "A7"},
                {text: "A8", value: "A8"},
                {text: "B0", value: "B0"},
                {text: "B1", value: "B1"},
                {text: "B2", value: "B2"},
                {text: "B3", value: "B3"},
                {text: "B4", value: "B4"},
                {text: "B5", value: "B5"},
                {text: "Tabloid", value: "Tabloid"},
                {text: "Ledger", value: "Ledger"},
                {text: "Halfletter", value: "Halfletter"}
            ];
            var tableLayout = FR.createWidget({
                type: 'tablelayout',
                columnSize: [72, 16, 312],
                rowSize: [rh, 52, 52],
                vgap: 20,
                items: [
                    [
                        {
                            el: {
                                type: 'label',
                                value: FR.i18nText("FR-Engine-PageSetup_Orientation"),
                                fontsize: fontsize,
                                verticalcenter: true,
                                textalign: 'right',
                                fontfamily: fontfamily
                            }
                        },
                        {el: $('<div>')},
                        {
                            el: {
                                type: 'border', items: [
                                    {
                                        region: 'center', el: {
                                        type: 'radio',
                                        widgetName: 'portrait',
                                        text: FR.i18nText("FR-Engine-PageSetup_Portrait"),
                                        fontSize: fontsize,
                                        listeners: [
                                            {
                                                eventName: 'statechange',
                                                action: function () {
                                                    if (this.getValue()) {
                                                        var radio_landscape = tableLayout.getWidgetByName("landscape");
                                                        if (radio_landscape) {
                                                            radio_landscape.setValue(false);
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                    },
                                    {
                                        region: 'east', width: radioRightPadding, el: {
                                        type: 'radio',
                                        widgetName: 'landscape',
                                        text: FR.i18nText("FR-Engine-PageSetup_Landscape"),
                                        fontSize: fontsize,
                                        listeners: [
                                            {
                                                eventName: 'statechange',
                                                action: function () {
                                                    if (this.getValue()) {
                                                        var radio_portrait = tableLayout.getWidgetByName("portrait");
                                                        if (radio_portrait) {
                                                            radio_portrait.setValue(false);
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                    }
                                ]
                            }
                        }
                    ],
                    [
                        {
                            el: {
                                type: 'label',
                                value: FR.i18nText("FR-Engine-PageSetup_Paper_Size"),
                                fontsize: fontsize,
                                textalign: 'right',
                                fontfamily: fontfamily
                            }
                        },
                        {el: $('<div>')},
                        {
                            el: {
                                type: 'border', items: [
                                    {
                                        region: 'north', height: rh, el: {
                                        type: 'border', items: [
                                            {
                                                region: 'center', el: {
                                                type: 'radio',
                                                widgetName: 'predefined',
                                                text: FR.i18nText("FR-Engine-PageSetup_Predefined"),
                                                fontSize: fontsize,
                                                listeners: [
                                                    {
                                                        eventName: 'afteredit', action: function () {
                                                        var value = this.getValue();
                                                        var tableWidget = tableLayout.getWidgetByName('papaersize_setup');
                                                        if (value === false) {
                                                            tableWidget.setRowVisible(0, false);
                                                        } else {
                                                            tableWidget.setRowVisible(0, true);
                                                        }
                                                        tableWidget.doLayout();
                                                    }
                                                    },
                                                    {
                                                        eventName: 'statechange', action: function () {
                                                        var tableWidget = tableLayout.getWidgetByName('papaersize_setup');
                                                        if (this.getValue()) {
                                                            tableWidget.setRowVisible(1, false);
                                                            var radio_customed = tableLayout.getWidgetByName("customed");
                                                            if (radio_customed) {
                                                                radio_customed.setValue(false);
                                                            }
                                                        } else {
                                                            tableWidget.setRowVisible(1, true);
                                                        }
                                                        tableWidget.doLayout();
                                                    }
                                                    }
                                                ]
                                            }
                                            },
                                            {
                                                region: 'east', width: radioRightPadding, el: {
                                                type: 'radio',
                                                widgetName: 'customed',
                                                text: FR.i18nText("FR-Engine_Custom"),
                                                fontSize: fontsize,
                                                listeners: [
                                                    {
                                                        eventName: 'afteredit', action: function () {
                                                        var value = this.getValue();
                                                        var tableWidget = tableLayout.getWidgetByName('papaersize_setup');
                                                        if (value === false) {
                                                            tableWidget.setRowVisible(1, false);
                                                        } else {
                                                            tableWidget.setRowVisible(1, true);
                                                        }
                                                        tableWidget.doLayout();
                                                    }
                                                    },
                                                    {
                                                        eventName: 'statechange', action: function () {
                                                        var tableWidget = tableLayout.getWidgetByName('papaersize_setup');
                                                        if (this.getValue()) {
                                                            tableWidget.setRowVisible(0, false);
                                                            var radio_predefined = tableLayout.getWidgetByName("predefined");
                                                            if (radio_predefined) {
                                                                radio_predefined.setValue(false);
                                                            }
                                                        } else {
                                                            tableWidget.setRowVisible(0, true);
                                                        }
                                                        tableWidget.doLayout();
                                                    }
                                                    }
                                                ]
                                            }
                                            }
                                        ]
                                    }
                                    },
                                    {region: 'center', height: widgetPadding, el: $('<div>')},
                                    {
                                        region: 'south', height: rh, el: {
                                        type: 'tablelayout',
                                        widgetName: 'papaersize_setup',
                                        columnSize: [302],
                                        rowSize: [rh, rh],
                                        vgap: 0,
                                        items: [
                                            [
                                                {
                                                    el: {
                                                        type: 'border', items: [
                                                            {
                                                                region: 'center', el: {
                                                                type: 'combo',
                                                                widgetName: 'paperSize',
                                                                allowBlank: false,
                                                                directEdit: true,
                                                                items: paperSize_items,
                                                                fontSize: fontsize,
                                                                listeners: [
                                                                    {
                                                                        eventName: 'afteredit', action: function () {
                                                                        FR.ajax({
                                                                            url: FR.servletURL,
                                                                            type: 'POST',
                                                                            data: {
                                                                                op: 'fr_utils',
                                                                                cmd: 'utils_papersize',
                                                                                paperSize: this.getValue()
                                                                            },
                                                                            complete: function (res) {
                                                                                var paper = FR.jsonDecode(res.responseText);
                                                                                tableLayout.getWidgetByName("user_width").setValue(paper.width);
                                                                                tableLayout.getWidgetByName("user_height").setValue(paper.height);
                                                                                tableLayout.getWidgetByName("predefined").setValue(true);
                                                                                tableLayout.getWidgetByName("customed").reset();
                                                                            }
                                                                        });
                                                                    }
                                                                    }
                                                                ]
                                                            }
                                                            },
                                                            {region: 'east', width: mediumRightPadding, el: $('<div>')}
                                                        ]
                                                    }
                                                }
                                            ],
                                            [
                                                {
                                                    el: {
                                                        type: 'tablelayout',
                                                        columnSize: [12, 12, 60, 5, 21, 14, 12, 12, 60, 5, 21, 68],
                                                        rowSize: [rh],
                                                        vgap: 0,
                                                        items: [
                                                            [
                                                                {
                                                                    el: {
                                                                        type: 'label',
                                                                        value: FR.i18nText("FR-Engine_Width"),
                                                                        fontsize: fontsize
                                                                    }
                                                                },
                                                                {el: $('<div>')},
                                                                {
                                                                    el: {
                                                                        type: 'number',
                                                                        widgetName: 'user_width',
                                                                        fontSize: fontsize
                                                                    }
                                                                },
                                                                {el: $('<div>')},
                                                                {
                                                                    el: {
                                                                        type: 'label',
                                                                        value: "mm",
                                                                        fontsize: fontsize,
                                                                        color: label_color,
                                                                        fontfamily: 'tahoma'
                                                                    }
                                                                },
                                                                {el: $('<div>')},
                                                                {
                                                                    el: {
                                                                        type: 'label',
                                                                        value: FR.i18nText("FR-Engine_Height"),
                                                                        fontsize: fontsize
                                                                    }
                                                                },
                                                                {el: $('<div>')},
                                                                {
                                                                    el: {
                                                                        type: 'number',
                                                                        widgetName: 'user_height',
                                                                        fontSize: fontsize
                                                                    }
                                                                },
                                                                {el: $('<div>')},
                                                                {
                                                                    el: {
                                                                        type: 'label',
                                                                        value: "mm",
                                                                        fontsize: fontsize,
                                                                        color: label_color,
                                                                        fontfamily: 'tahoma'
                                                                    }
                                                                },
                                                                {el: $('<div>')}
                                                            ]
                                                        ]
                                                    }
                                                }
                                            ]
                                        ]
                                    }
                                    }
                                ]
                            }
                        }
                    ],
                    [
                        {
                            el: {
                                type: 'label',
                                value: FR.i18nText("FR-Engine-PageSetup_Margin"),
                                fontsize: fontsize,
                                textalign: 'right',
                                fontfamily: fontfamily
                            }
                        },
                        {el: $('<div>')},
                        {
                            el: {
                                type: 'tablelayout',
                                columnSize: [30, 12, 60, 5, 21, 14, 36, 12, 60, 5, 21, 68],
                                rowSize: [rh, rh],
                                vgap: 10,
                                items: [
                                    [
                                        {el: {type: 'label', value: FR.i18nText("FR-Engine_Top"), fontsize: fontsize}},
                                        {el: $('<div>')},
                                        {el: {type: 'number', widgetName: 'margin_top', fontSize: fontsize}},
                                        {el: $('<div>')},
                                        {
                                            el: {
                                                type: 'label',
                                                value: "mm",
                                                fontsize: fontsize,
                                                color: label_color,
                                                fontfamily: 'tahoma'
                                            }
                                        },
                                        {el: $('<div>')},
                                        {
                                            el: {
                                                type: 'label',
                                                value: FR.i18nText("FR-Engine_Bottom"),
                                                fontsize: fontsize
                                            }
                                        },
                                        {el: $('<div>')},
                                        {el: {type: 'number', widgetName: 'margin_bottom', fontSize: fontsize}},
                                        {el: $('<div>')},
                                        {
                                            el: {
                                                type: 'label',
                                                value: "mm",
                                                fontsize: fontsize,
                                                color: label_color,
                                                fontfamily: 'tahoma'
                                            }
                                        },
                                        {el: $('<div>')}
                                    ],
                                    [
                                        {el: {type: 'label', value: FR.i18nText("FR-Engine_Left"), fontsize: fontsize}},
                                        {el: $('<div>')},
                                        {el: {type: 'number', widgetName: 'margin_left', fontSize: fontsize}},
                                        {el: $('<div>')},
                                        {
                                            el: {
                                                type: 'label',
                                                value: "mm",
                                                fontsize: fontsize,
                                                color: label_color,
                                                fontfamily: 'tahoma'
                                            }
                                        },
                                        {el: $('<div>')},
                                        {
                                            el: {
                                                type: 'label',
                                                value: FR.i18nText("FR-Engine_Right"),
                                                fontsize: fontsize
                                            }
                                        },
                                        {el: $('<div>')},
                                        {el: {type: 'number', widgetName: 'margin_right', fontSize: fontsize}},
                                        {el: $('<div>')},
                                        {
                                            el: {
                                                type: 'label',
                                                value: "mm",
                                                fontsize: fontsize,
                                                color: label_color,
                                                fontfamily: 'tahoma'
                                            }
                                        },
                                        {el: $('<div>')}
                                    ]
                                ]
                            }
                        }
                    ]
                ]
            });
            var widget_predefined = tableLayout.getWidgetByName('predefined');
            var widget_customed = tableLayout.getWidgetByName('customed');
            var widget_portrait = tableLayout.getWidgetByName('portrait');
            var widget_landscape = tableLayout.getWidgetByName('landscape');
            var widget_paperSize = tableLayout.getWidgetByName('paperSize');
            var widget_user_width = tableLayout.getWidgetByName('user_width');
            var widget_user_height = tableLayout.getWidgetByName('user_height');
            var widget_margin_top = tableLayout.getWidgetByName('margin_top');
            var widget_margin_bottom = tableLayout.getWidgetByName('margin_bottom');
            var widget_margin_left = tableLayout.getWidgetByName('margin_left');
            var widget_margin_right = tableLayout.getWidgetByName('margin_right');
            // 异步获取页面设置的信息,给控件赋默认值
            FR.ajax({
                url: FR.servletURL,
                type: 'POST',
                data: {
                    op: 'fr_dialog',
                    cmd: 'read_page_setup_tpl',
                    sessionID: sessionID,
                    reportIndex: reportIndex
                },
                complete: function (res) {
                    var result = FR.jsonDecode(res.responseText);
                    if (result !== null && result !== undefined) {
                        widget_predefined.setValue(result.predefined);
                        if (widget_predefined.getValue()) {
                            tableLayout.getWidgetByName('papaersize_setup').setRowVisible(0, true);
                            tableLayout.getWidgetByName('papaersize_setup').setRowVisible(1, false);
                        } else {
                            tableLayout.getWidgetByName('papaersize_setup').setRowVisible(0, false);
                            tableLayout.getWidgetByName('papaersize_setup').setRowVisible(1, true);
                        }
                        tableLayout.getWidgetByName('papaersize_setup').doLayout();
                        widget_customed.setValue(result.customed);
                        widget_portrait.setValue(result.portrait);
                        widget_landscape.setValue(result.landscape);
                        widget_paperSize.setValue(result.paperSize);
                        widget_user_width.setValue(result.user_width);
                        widget_user_height.setValue(result.user_height);
                        widget_margin_top.setValue(result.margin_top);
                        widget_margin_bottom.setValue(result.margin_bottom);
                        widget_margin_left.setValue(result.margin_left);
                        widget_margin_right.setValue(result.margin_right);
                    }
                }
            });
            o.onOK = function () {
                FR.ajax({
                    url: FR.servletURL,
                    type: 'POST',
                    data: {
                        op: 'fr_dialog',
                        cmd: 'change_page_setup',
                        sessionID: sessionID,
                        reportIndex: reportIndex,
                        predefined: widget_predefined.getValue(),
                        customed: widget_customed.getValue(),
                        portrait: widget_portrait.getValue(),
                        landscape: widget_landscape.getValue(),
                        paperSize: widget_paperSize.getValue(),
                        user_width: widget_user_width.getValue(),
                        user_height: widget_user_height.getValue(),
                        margin_top: widget_margin_top.getValue(),
                        margin_bottom: widget_margin_bottom.getValue(),
                        margin_left: widget_margin_left.getValue(),
                        margin_right: widget_margin_right.getValue()
                    },
                    complete: function () {
                        FR.closeDialog();
                    }
                });
            };
            o.contentWidget = {
                type: 'border',
                items: [
                    {region: 'north', el: $('<div>'), height: northHeight},
                    {region: 'center', el: tableLayout.element}
                ]
            };
            FR.showUpdateDialog(o);
        },

        _sheetPositionPane: function () {
            return "bottom";
        },

        _initSheetTabPane: function ($contentPane, sheetsO, bg) {
            var sheetPosition = this._sheetPositionPane();
            var writeTab = new FR.TabPane({
                background: bg,
                items: sheetsO,
                tabPosition: sheetPosition,
                renderEl: $contentPane
            });
            $contentPane.data("TabPane", writeTab);
        },

        _createFormParameterPane: function (options, layout, paramsTemplate) {
            var collapsePaneHeight = 8;
            options.alignLayoutName = '__layout4align__';
            var self = this, paramO = options.param;
            var config = paramO.html;
            self.scrollHeight = 6;
            //这边maxWidth 7.1的时候被改成了paramO.width, 导致web端的居右居中效果很奇怪
            var maxWidth = 0, maxHeight = 0;
            for (var i = 0; i < config.items.length; i++) {
                var item = config.items[i];
                maxWidth = Math.max(maxWidth, item.x + item.width);
                maxHeight = Math.max(maxHeight, item.y + item.height);
            }
            var deltaHeight = paramO.height - maxHeight;
            var formLayout;
            var barHeight = paramO.width > document.body.offsetWidth ? self.scrollHeight : 0;
            var $paraContainer = $("<div class='parameter-container' style='overflow: auto;'>").css({
                'height': paramO.height + barHeight + collapsePaneHeight,
                'width': document.body.offsetWidth
            });
            var paramsTemplateHeight = (paramO.useParamsTemplate && paramsTemplate !== null? 30 : 0);
            FR.parameterContainerHeight = paramO.height + barHeight + collapsePaneHeight + paramsTemplateHeight;
            options.$paraContainer = $paraContainer;
            config.onCalculate = function (currentMaxHeight) {
                if ($.isFunction(options.onCalculate)) {
                    options.onCalculate.call(this, currentMaxHeight + deltaHeight, collapsePaneHeight, $paraContainer);
                }
            };
            var $expandEl = $("<div class='parameter-container-collapseimg-up' style='cursor: pointer'></div>").click(function () {
                var resizeTime = new Date();
                self.lastResizeTime = resizeTime;
                setTimeout(function () {
                    if (resizeTime === self.lastResizeTime) {
                        delete self.lastResizeTime;
                        $paraContainer.animate({
                            height: (self.hasCollapsed ? "+=" : "-=") + (paramO.height + paramsTemplateHeight)
                        }, "fast", function () {
                            if (self.hasCollapsed) {
                                FR.parameterContainerHeight += (paramO.height + paramsTemplateHeight);
                            }
                            else {
                                FR.parameterContainerHeight -= (paramO.height + paramsTemplateHeight);
                            }
                            self.hasCollapsed = !self.hasCollapsed;
                            $expandEl.switchClass('parameter-container-collapseimg-down', 'parameter-container-collapseimg-up');
                            if ($.isFunction(options.onCollapse)) {
                                var height = $paraContainer.height();
                                options.onCollapse.call(this, self.hasCollapsed, options.alignLayoutName, height);
                                self.doAfterCollapse();
                                var $contentDiv = $('.pageContentDIV', this.$contentPane);
                                var size = {width : $contentDiv.width(), height: $contentDiv.height()};
                                self.resizeContent(size);
                            }
                        });
                    }
                }, 222);
            });

            var alignment = 'left';
            switch (paramO.alignLocation) {
                case 0 :
                    alignment = 'left';
                    break;
                case 1 :
                    alignment = 'center';
                    break;
                case 2 :
                    alignment = 'right';
                    break;
                default :
                    alignment = 'left';
            }
            var $center = $('<div class="pmeter-container"></div>').css({
                "height": paramO.height,
                "width": paramO.width
            });
            var paramstemplateHeight = 30;
            var paramstemplateContainer = {
                region: 'north',
                height: paramstemplateHeight,
                el: {
                    type: 'border',
                    widgetName: 'paramsTemplate',
                    items: [
                        {
                            region: 'east',
                            width: 138,
                            el: {
                                type: 'horizontal',
                                alignment: 'right',
                                items: [{
                                    el: {
                                        type: 'button',
                                        widgetName: 'saveBtn',
                                        text: FR.i18nText("FR-Designer_Save_As_Params_Template")
                                    }, width: 128
                                }, {
                                    el: $('<div>'), width: 10
                                }]
                            }
                        }, {
                            region: 'center',
                            el: {
                                type: 'horizontal',
                                widgetName: 'paramsTemplatePane',
                                width: paramO.width - 120,
                                minWidth: paramO.width - 120,
                                alignment: 'left',
                                items: []
                            }
                        }, {
                            region: 'west',
                            width: 30,
                            el: {
                                type: 'horizontal',
                                alignment: 'left',
                                items: [
                                    {
                                        el: {
                                            type: 'iconbutton',
                                            widgetName: 'newParamsBtn',
                                            width: 30,
                                            baseClass: 'fs-new-params-template-blue'

                                        },
                                        width: 30
                                    }
                                ]
                            }
                        }
                    ]
                }
            };

            if (!options.param.useParamsTemplate || paramsTemplate === null) {
                paramstemplateHeight = 0;
                paramstemplateContainer = {};
            }
            //定义一下用来滚动的对象
            var paraConfig = {
                renderEl: $paraContainer,
                type: 'border',
                items: [
                    paramstemplateContainer,
                    {
                        region: 'south', height: collapsePaneHeight, el: {
                        type: 'horizontal',
                        items: [
                            {el: $expandEl, width: 120}
                        ]
                    }
                    },
                    {
                        region: 'center', el: {
                        type: 'para_horizontal',
                        width: paramO.width,
                        minWidth: paramO.width,
                        widgetName: options.alignLayoutName,
                        alignment: alignment,
                        items: [
                            {el: $center, width: maxWidth}
                        ]
                    }
                    }
                ]
            };
            this._setBackground(paramO, $paraContainer);
            if (paramO.showType === 1) {
                layout.push({
                    region: 'north',
                    el: paraConfig,
                    height: paramO.height + collapsePaneHeight + barHeight + paramstemplateHeight
                });
            }
            if (paramO.showType === 0) {
                $paraContainer.css({
                    position: "absolute",
                    width: paramO.width,
                    height: paramO.height
                }).appendTo("body");
                config.listeners = [
                    {
                        once: true,
                        eventName: 'submitcomplete',
                        action: function () {
                            FR.closeDialog();
                        }
                    }
                ];
                config.renderEl = $paraContainer;
                formLayout = new FR.contentForm(config);
            } else {
                config.renderEl = $center;
                config.container = $paraContainer;
                formLayout = new FR.contentForm(config);
            }
            if (paramO.showType === 0) {
                formLayout.doLayout();
                FR.showDialog({
                    title: paramO.paramWindowTitle,
                    width: paramO.width + 20,
                    height: paramO.height + 45,
                    contentHtml: $paraContainer
                });
            }
            return formLayout;
        },

        _setBackground: function (paramO, $dom) {
            var bg = paramO.parambg;
            if (bg !== null && bg !== undefined) {
                FR.setBackground($dom, bg);
            }
        },

        doAfterCollapse: function () {
        },

        afterLoad: function () {

        },

        resizeContent: function (give) {

        },

        /**
         * 提交参数并加载报表主体内容
         *
         *     @example
         *     contentPane.parameterCommit();
         *
         * @param {Object} reloadOthers 配置
         */
        parameterCommit: function (reloadOthers) {
            if ($.isFunction(this.parameterEl.formSubmit)) {
                this.parameterEl.formSubmit({
                    url: FR.servletURL + "?op=fr_dialog&cmd=parameters_d&sessionID=" + _g().currentSessionID,
                    callback: function () {
                        _g().loadContentPane(reloadOthers);
                    }
                });
            }
        },

        /**
         * 改变在鼠标经过或者点击报表行时行的颜色
         *
         *     @example
         *     contentPane.makeHighlight('red', 'click');
         *
         * @param {String} color 需要变换成的颜色
         * @param {'click'/'mouseover'} [op='click'] 鼠标动作
         * @param deep 是否是加在td上面
         */
        makeHighlight: function (color, op, deep) {
            var self = this;
            if (!op) {
                op = 'click';
            }
            var container = $('div.content-container');
            var tr = $("tr", container);
            var changeTds = function (currentTR, lastTDColors) {
                var tds = currentTR.children();
                for (var i = 0; i < tds.length; i++) {
                    var td = tds.eq(i);
                    lastTDColors.push(td[0].style.backgroundColor);
                    td[0].style.backgroundColor = color;
                }
            };
            var highLightFun = function (e) {
                if (!$(e.target).is("td")) {
                    return;
                }
                var currentTR = $(e.target).parent();
                if ($(e.target).attr("hv")) {
                    // marro:如果是格子套格子的,PageCellWriter.getValueWrapper
                    currentTR = currentTR.closest("td").parent();
                }
                if (lastSelectedTR != null) {
                    if (deep === true) {
                        var tds = lastSelectedTR.children();
                        for (var i = 0; i < tds.length; i++) {
                            var td = tds.eq(i);
                            td[0].style.backgroundColor = lastTDColors[i] === "" ? "White" : lastTDColors[i];
                        }
                        lastTDColors.length = 0;
                        if (currentTR[0] !== lastSelectedTR[0]) {
                            changeTds(currentTR, lastTDColors);
                            lastSelectedTR = currentTR;
                            return;
                        }
                    } else {
                        lastSelectedTR[0].style.backgroundColor = 'White';
                        if (currentTR[0] !== lastSelectedTR[0]) {
                            currentTR[0].style.backgroundColor = (currentTR[0].style.backgroundColor === color ? 'White' : color);
                            lastSelectedTR = currentTR;
                            return;
                        }
                    }
                    lastSelectedTR = null;
                    return;
                }
                lastSelectedTR = currentTR;

                if (deep === true) {
                    changeTds(currentTR, lastTDColors);
                } else {
                    currentTR[0].style.backgroundColor = (currentTR[0].style.backgroundColor === color ? 'White' : color);
                }
            };

            var lastSelectedTR = null;
            var lastTDColors = [];
            var action = op.indexOf('over') !== -1 ? "mouseover" : "click";
            if (window.highfun !== null && window.highfun !== undefined) {
                container.unbind(action, window.highfun);
            }
            window.highfun = function (e) {
                highLightFun(e);
            };
            container.bind(action, window.highfun);
        },

        initContentPane: function () {
            var events = FR.Report.Plugin.Panel.Events;
            if ($.isArray(events)) {
                for (var i = 0, len = events.length; i < len; i++) {
                    var evt = events[i];
                    this.on(evt.name, evt.action.createDelegate(this));
                }
            }
        },

        /**
         * 零客户端打印
         */
        noClientPrint: function (isPopup) {
            FR.doNoClientPrint(this.currentSessionID, isPopup);
        },

        /**
         * (新)本地打印
         */
        newNativePrint: function (isPopup) {
            var self = this;
            FR.doNewNativePrint(this.currentSessionID, {
                //是否弹窗
                isPopUp : isPopup,
                currentPageIndex: self.currentPageIndex
            });
        },

        pdfPrint: function (isPopup) {
            if (this.fireEvent(FR.Events.BPDFPRINT) === false) {
                return;
            }
            if (FR.Browser.isIE()) {
                FR.doPDFPrint(this.currentSessionID, isPopup);
            } else {
                // james：pdfPrint需要用format=pdfPrint，服务器才能识别为是打印状态啊
                FR.doSimplePDFPrint(this.currentSessionID);
                this.fireEvent(FR.Events.APDFPRINT);
            }
        },
//wei:移动端支持自动刷新，pc不做事
        setAppearRefresh: function () {

        },
        /**
         * 根据sheet的序号加载sheet
         * @param index sheet序号
         */
        loadSheetByIndex: function (index) {
            var $contentPane = $("div.content-container");
            if (index && $contentPane && $contentPane.data && $contentPane.data('TabPane')) {
                $contentPane.data('TabPane').selectTabAt(index);
            }
        },
        /**
         * 根据sheet的名称加载sheet
         * @param sheetName sheet名称
         */
        loadSheetByName: function (sheetName) {
            var $contentPane = $("div.content-container");
            if (sheetName && $contentPane && $contentPane.data && $contentPane.data('TabPane')) {
                $contentPane.data('TabPane').selectTabByName(sheetName);
            }
        },
        /**
         * 文件下载
         * @param url 下载地址
         * @param type
         */
        downloadExportFile: function (url, type) {
            //新导出方式插件
            if (FR.Report.Plugin.XHR2FileSaveProcessor.item && FR.Plugin.validLevel(FR.Report.Plugin.XHR2FileSaveProcessor, FR.Report.Plugin.XHR2FileSaveProcessor.item)) {
                FR.Report.Plugin.XHR2FileSaveProcessor.item.action.call(this, url, type);
                return;
            }
            if (FR.Browser.r.gecko) {
                //火狐下使用window.location会导致gif卡住，使用表单提交下载
                var form = $("<form>");
                form.attr({"style": "display : none", "target": "", "method": "post", "action": url});
                var input = $("<input>");
                $("body").append(form);
                form.append(input);
                form.submit();
                form.remove();
            } else {
                window.location = url;
            }
            FR.progressBar.call(this, this.currentSessionID, type);
        },

        checkExportRegister: function () {
            function checkRegister() {
                var result = "";
                FR.ajax({
                    url: FR.servletURL,
                    data: {
                        op: 'export',
                        cmd: 'check_register',
                        sessionID: this.currentSessionID
                    },
                    async: false,
                    complete: function (res, status) {
                        try {
                            var returnData = FR.jsonDecode(res.responseText);
                            result = returnData.exception === 'FAILPASS';
                            if (result) {
                                FR.Msg.toast(FR.i18nText("FR-Engine-Export_Print_Not_Support"));
                            }
                        }
                        catch (Error)   {
                            FR.Msg.toast("AnalysisData Error!");
                        }

                    }
                });
                return !result;
            }

            this.on(FR.Events.BTOEXCEL, checkRegister);
            this.on(FR.Events.BTOIMAGE, checkRegister);
            this.on(FR.Events.BTOPDF, checkRegister);
            this.on(FR.Events.BTOWORD, checkRegister);
            this.on(FR.Events.BTOHTML, checkRegister);
        },

        createProgressBar: function () {
            if ($('#progressBar').length <= 0) {
                var progressBar = $('<div id = ' + '\"' + 'progressBar' + '\"' + '>' + '</div>').appendTo("body");
                var tips = $('<div>' + FR.i18nText("FR-Engine_Exporting") + '...' + '</div>').appendTo($('#progressBar'));
                var $maskDiv = $('<div id="transparent_mask" style="position:absolute;filter:alpha(opacity=50);opacity:0.5;"></div>');
                $maskDiv.css('left', "0px").css('top', "0px").css('width', "100%").css('height', "100%").css('z-index', 2001).appendTo("body");
                progressBar.addClass("progressBar");
                tips.addClass("progressBarTips");
            }
        },
        removeProgressBar: function () {
            $('#progressBar').remove();
            $('#transparent_mask').remove();
        }
    });
})(jQuery);
/**
 * Created by kerry on 2017/3/8.
 */
;(function () {
    $.extend(FR, {
        InsertMsg: function (message, target) {
            var messageType = message.messagetype;
            var op = messageType;
            switch (messageType) {
                case "alert_toast":
                    op = "system_toast";
                    break;
                case "remind_toast":
                    op = "system_toast";
                    break;
                case "system_message":
                    op = "fs_main";
                    break;
                default:
                    break;
            }
            var form = target.options ? target.options.form : null;
            var formParameters = form ? form.collectionValue() : {};
            var postData = {
                op: op,
                cmd: "save_message",
                message: message
            };
            if(FR.SessionMgr.getSessionID()){
                $.extend(postData, {
                    sessionID: FR.SessionMgr.getSessionID(),
                    __parameters__: formParameters
                });
            }
            FR.ajax({
                url: FR.servletURL,
                async: true,
                type: 'POST',
                data: postData,
                complete: function (res) {
                    var o = FR.jsonDecode(res.responseText);
                    if (!o.isLogin) {
                        FR.Msg.toast(FR.Msg.toast(FR.i18nText("FS-Msg-Not_Login")));
                        return;
                    }
                    if (o.sendState) {
                        FR.Msg.toast(FR.i18nText("FS-Msg-Send_Success"));
                    } else {
                        FR.Msg.toast(FR.i18nText("FS-Msg-Send_Failed"));
                    }
                }
            });
        }
    });
}());
/*
 * 打印相关的一些方法
 */
(function ($) {
    var $PrintDiv, $PDFReader, $flashIframe, $appletDiv, showFlashPrintSetting, fitPaper, showAppletPrintSetting = null;
    var appletJarName = '/fr-applet-8.0.jar';
    var isLoadingNativePrint = false;
    var nativePrintSocket;
    var nativePrintLoadingDialog;
    var nativePrintPreviewTimer;
    var floatRegexText = '^\\d+(\\.\\d+)?$';

    // alex:flash打印的时候是否显示打印设置的对话框
    function isShowFlashPrintSetting() {
        if (typeof showFlashPrintSetting != 'boolean') {
            // alex:去后台拿一下,要不要showFlashPrintSetting
            $(function () {
                FR.ajax({
                    url: FR.servletURL,
                    data: {
                        op: 'flash_print',
                        cmd: 'get_fp_setting'
                    },
                    async: false,
                    complete: function (res, status) {
                        if (status == 'success') {
                            showFlashPrintSetting = res.responseText == 'true';
                        }
                    }
                });
            });
        }

        return showFlashPrintSetting;
    }


    function isPrintAsPPAPI() {
        var isPPAPI = false;
        var type = 'application/x-shockwave-flash';
        var mimeTypes = navigator.mimeTypes;

        var endsWith = function (str, suffix) {
            return str.indexOf(suffix, str.length - suffix.length) !== -1;
        }

        if (mimeTypes && mimeTypes[type] && mimeTypes[type].enabledPlugin &&
            (mimeTypes[type].enabledPlugin.filename === "pepflashplayer.dll" ||
            mimeTypes[type].enabledPlugin.filename === "libpepflashplayer.so" ||
            mimeTypes[type].enabledPlugin.filename == "PepperFlashPlayer.plugin" ||
            endsWith(mimeTypes[type].enabledPlugin.filename, "Chrome.plugin"))) {
            isPPAPI = true;
        }

        return isPPAPI;
    }

    function isFitPaper() {
        if (!fitPaper) {
            $(function () {
                FR.ajax({
                    url: FR.servletURL,
                    data: {
                        op: 'flash_print',
                        cmd: 'fit_fs_paper'
                    },
                    async: false,
                    complete: function (res, status) {
                        if (status == 'success') {
                            fitPaper = res.responseText == 'true';
                        }
                    }
                })
            });
        }
        return fitPaper;
    }

    function supportPDFPrint() {
        return FR.Browser.isIE();
    }

    function supportCodebase() {
        return FR.Browser.isIE();
    }

    function checkPDFPrintRegister() {
        var result = "";
        FR.ajax({
            url: FR.servletURL,
            data: {
                op: 'fr_pdfprint',
                cmd: 'check_register'
            },
            async: false,
            complete: function (res, status) {
                try {
                    var returnData = FR.jsonDecode(res.responseText);
                    result = returnData.exception !== 'FAILPASS';
                } catch (Error) {
                    FR.Msg.toast("AnalysisData Error!");
                }

            }
        });
        return result;
    }

    //neil:设置是否静默打印
    function isShowAppletPrintSetting() {
        if (typeof showAppletPrintSetting != 'boolean') {
            $(function () {
                FR.ajax({
                    url: FR.servletURL,
                    data: {
                        op: 'fr_applet',
                        cmd: 'applet_print_setting'
                    },
                    async: false,
                    complete: function (res, status) {
                        var result = FR.jsonDecode(res.responseText);
                        if (result.exception === 'FAILPASS') {
                            showAppletPrintSetting = {exception: 'FAILPASS'};
                            return;
                        }
                        if (status === 'success') {
                            showAppletPrintSetting = res.responseText == 'true';
                        }
                    }
                });
            });
        } else {
            FR.ajax({
                url: FR.servletURL,
                data: {
                    op: 'fr_applet',
                    cmd: 'check_register'
                },
                async: false,
                complete: function (res, status) {
                    var result = FR.jsonDecode(res.responseText);
                    if (result.exception === 'FAILPASS') {
                        showAppletPrintSetting = {exception: 'FAILPASS'};
                    }
                }
            });
        }

        return showAppletPrintSetting;
    }

    //neil:去后台取是否打印结束
    function isAppletPrintOver(sessionID) {
        var appletPrintOver;
        //坑爹的IE对res.responseText有默认缓存, 加个data时间戳
        FR.ajax({
            url: FR.servletURL,
            data: {
                op: 'fr_applet',
                cmd: 'is_printover',
                sessionID: sessionID,
                data: new Date().getTime()
            },
            async: false,
            complete: function (res, status) {
                if (status == 'success') {
                    appletPrintOver = res.responseText == 'true';
                }
            }
        });

        return appletPrintOver;
    }

    //isSingleSheet
    function isSingleSheetFunc(sessionID) {
        var isSingleSheet;
        FR.ajax({
            url: FR.servletURL,
            data: {
                op: 'fr_applet',
                cmd: 'is_singleSheet',
                sessionID: sessionID
            },
            async: false,
            complete: function (res, status) {
                if (status == 'success') {
                    isSingleSheet = res.responseText == 'true';
                }
            }
        });

        return isSingleSheet;
    }

    /*
     * 检查是否正在导出PDF
     */
    function checkPDFPrint(sessionID, popupSetup) {
        FR.ajax({
            url: FR.servletURL,
            type: 'POST',
            data: {
                op: 'fr_pdfprint',
                cmd: 'pt_check',
                sessionID: sessionID
            },
            complete: function (res, status) {
                var resText = res.responseText;

                // 如果生成完了,就可以打印了
                if ('ok' == resText) {
                    (function () {
                        FR.closeDialog();
                        // alex:只有当popupSetup是true的时候才弹出打印对话框
                        if (popupSetup === true) {
                            $PDFReader[0].print();
                        } else {
                            $PDFReader[0].printAllFit(true);
                        }

                        // richer:拿不到设置框点确定时的事件
                        if (_g()) {
                            _g().fireEvent("afterpdfprint");
                        }
                    }).defer(2000); // alex:当初设置的值是400,会时不时第一次弹不出PDF的界面,所以把时间变长一些些,发现,居然可以了
                }
                // 如果正在生成,再次check
                else if ('gening' == resText) {
                    checkPDFPrint.defer(300, this, [sessionID, popupSetup]);
                } else {
                    FR.Msg.toast(resText);
                }
            }
        });
    }

    // 取url对应的sessionID
    // carl：传个config，支持form传参，支持data传参
    // 这边的url暂不删掉，主要兼容以前没有config参数的情况
    function __getSessionID__(opts) {
        var config = {};
        if (arguments.length === 1) {
            config = arguments[0];
        } else if (arguments.length === 2) {
            config.url = arguments[0];
            $.extend(config, arguments[1]);
        }

        var sessionID = null;
        var udata;
        config.url = config.url.replace('op=', 'op_=');

        // carl:支持form传参
        if (config && config.form) {
            var $form = $(config.form);
            udata = $.param($form.serializeArray().concat([
                {
                    name: 'op',
                    value: 'getSessionID'
                }
            ]));
        } else if (config && config['formid']) {
            $form = $('#' + config['formid']);
            udata = $.param($form.serializeArray().concat([
                {
                    name: 'op',
                    value: 'getSessionID'
                }
            ]));
        } else if (config && config.data) {
            udata = $.extend({
                op: 'getSessionID'
            }, config.data);
        } else {
            udata = {
                op: 'getSessionID'
            }
        }

        if (config.callback == null) {
            FR.ajax({
                url: config.url,
                type: 'POST',
                data: udata,
                async: false,
                complete: function (res, status) {
                    if (status == 'success') {
                        sessionID = res.responseText;
                    }
                }
            });
            return sessionID;
        } else {  // 跨域，异步
            FR.ajax({
                url: config.url,
                data: udata,
                dataType: 'jsonp',
                jsonp: 'callback',
                success: function (res) {
                    config.callback(res.sessionID);
                }
            });
        }

    }

    $.extend(FR, {

        /**
         * 通过js调用本地程序打印, 需要安装FinePrint.exe
         * @param {string} sessionID
         * @param {json} config 打印需要传递的参数
         * @param {string} printUrl 打印需要传递的参数
         *
         * FR.doNewNativePrint({
         *      //是否弹窗
         *      isPopUp : false,
         *      //打印指定页面1, 3, 5-6
         *      index : 0,
         *      //打印份数
         *      copy : 1,
         *      //指定打印机
         *      printerName : "",
         *      //需要打印的报表url
         *      url : "http://localhost:8075/WebReport/ReportServer?reportlet=GettingStarted.cpt"
         * });
         */
        doNewNativePrint: function (sessionID, config) {
            var printUrl = config.printUrl == null ? FR.serverURL + FR.servletURL : config.printUrl;
            nativePrintLoadingDialog = new FR.Dialog({
                destroyOnClose: true,
                animate: false,
                title: '',
                titleHeight: 0,
                border: false,
                resizeable: false,
                draggable: false,
                adaptivity: {
                    enabled: true,
                    minWidth: 1000,
                    minHeight: 560,
                    topGap: 0,
                    leftGap: 40,
                    bottomGap: 40,
                    rightGap: 40
                },
                contentHtml: ''
            });

            if (!config.isCustomPrint) {
                FR.$defaultImport('/com/fr/web/core/js/socket.io.js', 'js');
            }

            isLoadingNativePrint = true;

            if (nativePrintSocket == null) {
                nativePrintSocket = io.connect('http://localhost:9092');
            } else {
                // 清空监听，防止多次绑定
                nativePrintSocket.removeAllListeners();
                if (!nativePrintSocket.connected) {
                    nativePrintSocket.connect();
                }
            }

            nativePrintSocket.on('aliveChecking', function () {
                // 加个判断，防止多次触发 aliveChecking 事件，启动多个窗口
                if (isLoadingNativePrint) {
                    isLoadingNativePrint = false;
                    nativePrintSocket.emit('getConfigData', FR.jsonEncode(FR.getPureConfig(config)));
                }
            });
            nativePrintSocket.on('getConfigData', function (e) {
                var data = FR.jsonDecode(FR.cjkDecode(e.message));
                // debugger;
                if (data.config.quietPrint) {
                    // 静默打印，不需要其他参数
                    if (config.isCustomPrint) {
                        FR.newNativePrintWithArgs($.extend({
                            url: config.customFileUrl,
                            isCustomPrint: true
                        }, config));
                    }
                } else if (config.isPopUp) {
                    nativePrintLoadingDialog.destroy();
                    config.printers = data.printers;
                    config.paperSizeNames = data.paperSizeNames;
                    if (config.isCustomPrint) {
                        config = $.extend(data, config);
                        if (FR.isEmpty(config.printerName) && config.printers.length > 0) {
                            config.printerName = config.printers[0].text;
                        }
                        FR.startNewNativePrintPreview(sessionID, config, printUrl);
                    } else {
                        FR.getDefaultNewNativePrintConfig(sessionID, printUrl, function(data) {
                            config = $.extend(data, config);
                            if (FR.isEmpty(config.printerName) && config.printers.length > 0) {
                                config.printerName = config.printers[0].text;
                            }
                            FR.startNewNativePrintPreview(sessionID, config, printUrl);
                        });
                    }
                } else {
                    config = $.extend(data, config);
                    FR.defaultNewNativePrint(config, sessionID, printUrl);
                }

                // 如果客户端软件由于某种原因没有发送 beforePrint，也要确保关闭加载窗口
                setTimeout(function () {
                    nativePrintLoadingDialog.destroy();
                }, 5000);
            });
            nativePrintSocket.on('beforePrint', function () {
                nativePrintLoadingDialog.destroy();
            });
            nativePrintSocket.on('afterPrint', function() {
                if (config.isCustomPrint) {
                    if ($.isFunction(config.afterPrint)) {
                        config.afterPrint();
                    }
                    return;
                }
                _g().fireEvent(FR.Events.APRINT);
            });

            nativePrintSocket.emit('aliveChecking');

            // 如果 1s 内没有连接成功，说明 exe 没启动。这时出现加载界面
            setTimeout(function(){
                if (isLoadingNativePrint) {
                    nativePrintLoadingDialog.setVisible(true);
                    // "正在加载"提示
                    // 兼容 safari：先 setVisible(true)，再 setContent
                    var contentHtml = "<iframe width='100%' height='100%'  src='" + printUrl + "?op=resource&resource=/com/fr/web/core/dialog/nativePrintLoading.html'>";
                    if (config.isCustomPrint) {
                        contentHtml = "<iframe width='100%' height='100%'  src='resource/nativePrintLoading.html'>"
                    }
                    nativePrintLoadingDialog.setContent({
                        type:"contentHtml",
                        content:contentHtml
                    });
                    setTimeout(function(){
                        FR.checkNativePrintLoading(printUrl, config.isCustomPrint);
                    }, 10000);
                    FR.reconnectNativePrintSocket();
                }
            }, 1000);
        },

        // 生成一个 config 副本，过滤掉其中的函数
        getPureConfig : function (config) {
            var conf = {};
            for (var key in config) {
                if ($.isFunction(config[key])) {
                    continue;
                }
                conf[key] = config[key];
            }
            return conf;
        },

        reconnectNativePrintSocket : function() {
            setTimeout(function(){
                if (isLoadingNativePrint) {
                    nativePrintSocket.disconnect();
                    setTimeout(function(){
                        nativePrintSocket.connect();
                        nativePrintSocket.emit('aliveChecking');
                        FR.reconnectNativePrintSocket();
                    }, 2000);
                }
            }, 1000);
        },


        startNewNativePrintPreview : function (sessionID, config, printUrl) {
            var o = $.extend({
                isCustomPrint: false,
                currentPageIndex: 1,  // 默认使用第1页作为当前页
                reportTotalPage: 1,
                printers: [],
                printerName: '',
                copy: 1,
                pageType: 0,  // 0: 所有页  1: 当前页  2: 指定页
                pageIndex: 1,
                orientation: 0,  // 0: 纵向  1: 横向
                paperSize: 'A4',
                fitPaper: true,
                marginTop: 6.85,
                marginLeft: 19.05,
                marginBottom: 6.85,
                marginRight: 19.05
            }, config);

            var previewDialog;

            function checkDialogValid() {
                var isValid = true;
                var widgets = [
                    previewDialog.getWidgetByName('specifiedPages'),
                    previewDialog.getWidgetByName('printCopy'),
                    previewDialog.getWidgetByName('printMarginTop'),
                    previewDialog.getWidgetByName('printMarginLeft'),
                    previewDialog.getWidgetByName('printMarginBottom'),
                    previewDialog.getWidgetByName('printMarginRight')
                ];
                for (var i = 0; i < widgets.length; i++) {
                    if (!widgets[i].checkValid()) {
                        isValid = false;
                    }
                }
                previewDialog.getWidgetByName('startPrintButton').setEnable(isValid);
                return isValid;
            }

            var settingPaneConfig = {
                type: 'border',
                items: [
                    {
                        region: 'north',
                        height: 140,
                        background: '#F0F0F1',
                        el: {
                            type: 'tablelayout',
                            baseCls: 'grey-pane',
                            columnSize: [15, 156, 62, 10, 62, 15],
                            rowSize: [24, 22, 11, 17, 31, 20, 15],
                            vgap: 0,
                            items: [
                                [
                                    {el: $('<div>')}
                                ],
                                [
                                    {el: $('<div>')},
                                    {
                                        el: {
                                            type: 'label',
                                            fontsize: 16,
                                            fontFamily: 'SimSun',
                                            textalign: "left",
                                            value: FR.i18nText('FR-Engine_Print')
                                        }
                                    }
                                ],
                                [
                                    {el: $('<div>')}
                                ],
                                [
                                    {el: $('<div>')},
                                    {
                                        el: {
                                            type: 'label',
                                            fontsize: 12,
                                            fontFamily: 'SimSun',
                                            textalign: "left",
                                            value: FR.i18nText('FR-Engine_Total_Page_Number_X', o.reportTotalPage)
                                        }
                                    }
                                ],
                                [
                                    {el: $('<div>')}
                                ],
                                [
                                    {
                                        el: $('<div>')
                                    },
                                    {
                                        el: $('<div>')
                                    },
                                    {
                                        el: {
                                            type: 'quickbutton',
                                            text: FR.i18nText('FR-Engine_Print'),
                                            widgetName: 'startPrintButton',
                                            listeners: [{
                                                eventName: "click",
                                                action: function () {
                                                    if (!checkDialogValid()) {
                                                        return;
                                                    }
                                                    FR.confirmNativePrint(o, previewDialog, sessionID, printUrl);
                                                    previewDialog.doClose();
                                                }
                                            }]
                                        }
                                    },
                                    {
                                        el: $('<div>')
                                    },
                                    {
                                        el: {
                                            type: 'quickbutton',
                                            style: 'white',
                                            text: FR.i18nText('FR-Engine_Close'),
                                            listeners: [{
                                                eventName: "click",
                                                action: function() {
                                                    previewDialog.doClose();
                                                }
                                            }]
                                        }
                                    },
                                    {
                                        el: $('<div>')
                                    }
                                ]
                            ]
                        }
                    }, {
                        region: 'south',
                        height: 50,
                        el: {
                            type: 'tablelayout',
                            baseCls: 'grey-pane',
                            columnSize: [15, 305],
                            rowSize: [5, 20, 5],
                            vgap: 10,
                            items: [
                                [
                                    {el: $('<div>')}
                                ],
                                [
                                    {el: $('<div>')},
                                    {
                                        el: {
                                            type: 'checkbox',
                                            widgetName: 'quietPrintCheck',
                                            text: FR.i18nText('FR-Engine_Quiet_Print_Check_Tip'),
                                            manualSelect: true,
                                            listeners: [{
                                                eventName: 'afteredit',
                                                action: function () {
                                                    var isQuietPrint = this.getValue();  // 点击 checkbox 之前的值
                                                    if (!isQuietPrint) {
                                                        FR.showQuietPrintConfirm(previewDialog);
                                                    } else {
                                                        previewDialog.getWidgetByName('quietPrintCheck').setSelected(false);
                                                    }
                                                }
                                            }],
                                            selected: false
                                        }
                                    }
                                ],
                                [
                                    {el: $('<div>')}
                                ]
                            ]
                        }
                    }, {
                        region: 'center',
                        el: {
                            type: 'tablelayout',
                            columnSize: [15, 67, 223, 15],
                            // rowSize: [2, 20, 20, 70, 20, 20, 20, 60],
                            rowSize: [2, 20, 20, 70, 20, 20, 60],
                            vgap: 15,
                            items: [
                                [
                                    {el: $('<div>')}
                                ],
                                [
                                    {el: $('<div>')},
                                    {
                                        el: {
                                            type: 'label',
                                            fontsize: 12,
                                            fontFamily: 'SimSun',
                                            textalign: "left",
                                            value: FR.i18nText('FS-Generic-Simple_Printer') + ':'
                                        }
                                    },
                                    {
                                        el: {
                                            type: 'combo', widgetName: 'printerCombo',
                                            items: o.printers,
                                            value: o.printers.length > 0 ? o.printers[0] : ''
                                        }
                                    }
                                ],
                                [
                                    {el: $('<div>')},
                                    {
                                        el: {
                                            type: 'label',
                                            fontsize: 12,
                                            fontFamily: 'SimSun',
                                            textalign: "left",
                                            value: FR.i18nText('FR-Engine_Print_Copy') + ':'
                                        }
                                    },
                                    {
                                        el: {
                                            type: 'text',
                                            width: '60px',
                                            fontSize: 12,
                                            fontFamily: 'SimSun',
                                            widgetName: 'printCopy',
                                            regex: '^\\d+$',
                                            value: o.copy,
                                            listeners: [{
                                                eventName: 'afteredit',
                                                action: function () {
                                                    checkDialogValid();
                                                }
                                            }]
                                        }
                                    }
                                ],
                                [
                                    {el: $('<div>')},
                                    {
                                        el: {
                                            type: 'label',
                                            fontsize: 12,
                                            fontFamily: 'SimSun',
                                            textalign: "left",
                                            value: FR.i18nText('FR-Engine-Page_Number') + ':'
                                        }
                                    },
                                    {
                                        el: {
                                            type: 'tablelayout',
                                            columnSize: [60, 3, 160],
                                            rowSize: [20, 20, 20],
                                            vgap: 5,
                                            items: [
                                                [
                                                    {
                                                        el: {
                                                            type: 'radio',
                                                            widgetName: 'allPagesRadio',
                                                            text: FR.i18nText("FR-Engine_All_Pages"),
                                                            selected: true,
                                                            fontSize: 12,
                                                            fontFamily: 'SimSun',
                                                            only_be_selected: true,
                                                            listeners: [{
                                                                eventName: FR.Events.STATECHANGE,
                                                                action: function () {
                                                                    if (this.isSelected()) {
                                                                        previewDialog.getWidgetByName('currentPageRadio').setSelected(false);
                                                                        previewDialog.getWidgetByName('specifiedPagesRadio').setSelected(false);
                                                                        FR.resetSpecifiedPagesField(previewDialog);
                                                                    }
                                                                }
                                                            }]
                                                        }
                                                    }
                                                ],
                                                [
                                                    {
                                                        el: {
                                                            type: 'radio',
                                                            widgetName: 'currentPageRadio',
                                                            text: FR.i18nText("FR-Engine_Current_Page"),
                                                            fontSize: 12,
                                                            fontFamily: 'SimSun',
                                                            only_be_selected: true,
                                                            listeners: [{
                                                                eventName: FR.Events.STATECHANGE,
                                                                action: function () {
                                                                    if (this.isSelected()) {
                                                                        previewDialog.getWidgetByName('allPagesRadio').setSelected(false);
                                                                        previewDialog.getWidgetByName('specifiedPagesRadio').setSelected(false);
                                                                        FR.resetSpecifiedPagesField(previewDialog);
                                                                    }
                                                                }
                                                            }]
                                                        }
                                                    }
                                                ],
                                                [
                                                    {
                                                        el: {
                                                            type: 'radio',
                                                            widgetName: 'specifiedPagesRadio',
                                                            text: FR.i18nText("FR-Engine_Specified_Pages"),
                                                            fontSize: 12,
                                                            fontFamily: 'SimSun',
                                                            only_be_selected: true,
                                                            listeners: [{
                                                                eventName: FR.Events.STATECHANGE,
                                                                action: function () {
                                                                    if (this.isSelected()) {
                                                                        previewDialog.getWidgetByName('allPagesRadio').setSelected(false);
                                                                        previewDialog.getWidgetByName('currentPageRadio').setSelected(false);
                                                                        previewDialog.getWidgetByName('specifiedPages').setEnable(true);
                                                                    }
                                                                }
                                                            }]
                                                        }
                                                    },
                                                    {el: $('<div>')},
                                                    {
                                                        el: {
                                                            type: 'text',
                                                            fontSize: 12,
                                                            fontFamily: 'SimSun',
                                                            widgetName: 'specifiedPages',
                                                            regex: '^(\\d+-)?\\d+$',
                                                            value: '',
                                                            watermark: '(' + FR.i18nText("FR-Engine_Example") + ': 2,5,7-10,12)',
                                                            listeners: [{
                                                                eventName: 'afteredit',
                                                                action: function () {
                                                                    checkDialogValid();
                                                                }
                                                            }]
                                                        }
                                                    }
                                                ]
                                            ]
                                        }
                                    }
                                ],
                                [
                                    {el: $('<div>')},
                                    {
                                        el: {
                                            type: 'label',
                                            fontsize: 12,
                                            fontFamily: 'SimSun',
                                            textalign: "left",
                                            value: FR.i18nText('FR-Engine_Layout') + ':'
                                        }
                                    },
                                    {
                                        el: {
                                            type: 'tablelayout',
                                            columnSize: [60, 60],
                                            rowSize: [20],
                                            items: [
                                                [
                                                    {
                                                        el: {
                                                            type: 'radio',
                                                            widgetName: 'portraitLayoutRadio',
                                                            text: FR.i18nText('FR-Engine-PageSetup_Portrait'),
                                                            fontSize: 12,
                                                            fontFamily: 'SimSun',
                                                            selected: true,
                                                            only_be_selected: true,
                                                            listeners: [{
                                                                eventName: FR.Events.STATECHANGE,
                                                                action: function () {
                                                                    if (this.isSelected()) {
                                                                        previewDialog.getWidgetByName('landscapeLayoutRadio').setSelected(false);
                                                                    }
                                                                    FR.refreshNativePreviewFrame(o, sessionID, previewDialog, printUrl);
                                                                }
                                                            }]
                                                        }
                                                    },
                                                    {
                                                        el: {
                                                            type: 'radio',
                                                            widgetName: 'landscapeLayoutRadio',
                                                            text: FR.i18nText('FR-Engine-PageSetup_Landscape'),
                                                            fontSize: 12,
                                                            fontFamily: 'SimSun',
                                                            only_be_selected: true,
                                                            listeners: [{
                                                                eventName: FR.Events.STATECHANGE,
                                                                action: function () {
                                                                    if (this.isSelected()) {
                                                                        previewDialog.getWidgetByName('portraitLayoutRadio').setSelected(false);
                                                                    }
                                                                    FR.refreshNativePreviewFrame(o, sessionID, previewDialog, printUrl);
                                                                }
                                                            }]
                                                        }
                                                    }
                                                ]
                                            ]
                                        }
                                    }
                                ],
                                [
                                    {el: $('<div>')},
                                    {
                                        el: {
                                            type: 'label',
                                            fontsize: 12,
                                            fontFamily: 'SimSun',
                                            textalign: "left",
                                            value: FR.i18nText('FR-Engine_Paper') + ':'
                                        }
                                    },
                                    {
                                        el: {
                                            type: 'combo', widgetName: 'paperSettingCombo',
                                            items: o.paperSizeNames,
                                            value: 'A4',
                                            listeners: [{
                                                eventName: 'afteredit',
                                                action: function () {
                                                    FR.refreshNativePreviewFrame(o, sessionID, previewDialog, printUrl);
                                                }
                                            }]
                                        }
                                    }
                                ],
                                // TODO: 暂时隐去缩放选项，后面再做这个功能
                                // [
                                    // {el: $('<div>')},
                                    // {
                                    //     el: {
                                    //         type: 'label',
                                    //         fontsize: 12,
                                    //         fontFamily: 'SimSun',
                                    //         textalign: "left",
                                    //         value: FR.i18nText('FR-Engine_Enlarge_Or_Reduce') + ':'
                                    //     }
                                    // },
                                    // {
                                    //     el: {
                                    //         type: 'checkbox',
                                    //         widgetName: 'fitPaperSizeCheck',
                                    //         text: '根据纸张大小缩放打印',
                                    //         marginleft: 0,
                                    //         listeners: [{
                                    //             eventName: 'afteredit',
                                    //             action: function () {
                                    //                 var isFitPaperSize = this.getValue();
                                    //             }
                                    //         }],
                                    //         selected: o.fitPaper
                                    //     }
                                    // }
                                // ],
                                [
                                    {el: $('<div>')},
                                    {
                                        el: {
                                            type: 'label',
                                            fontsize: 12,
                                            fontFamily: 'SimSun',
                                            textalign: "left",
                                            value: FR.i18nText('FR-Engine_Print_Margin') + ':'
                                        }
                                    },
                                    {
                                        el: {
                                            type: 'tablelayout',
                                            columnSize: [17, 60, 26, 16, 17, 60, 26],
                                            rowSize: [20, 20],
                                            vgap: 10,
                                            items: [
                                                [
                                                    {
                                                        el: {
                                                            type: 'label',
                                                            fontsize: 12,
                                                            fontFamily: 'SimSun',
                                                            textalign: "left",
                                                            value: FR.i18nText('FR-Engine_Top')
                                                        }
                                                    },
                                                    {
                                                        el: {
                                                            type: 'text',
                                                            fontSize: 12,
                                                            fontFamily: 'SimSun',
                                                            widgetName: 'printMarginTop',
                                                            value: o.marginTop,
                                                            regex: floatRegexText,
                                                            listeners: [{
                                                                eventName: 'afteredit',
                                                                action: function () {
                                                                    if (checkDialogValid()) {
                                                                        FR.refreshNativePreviewFrame(o, sessionID, previewDialog, printUrl);
                                                                    }
                                                                }
                                                            }]
                                                        }
                                                    },
                                                    {
                                                        el: {
                                                            type: 'label',
                                                            fontsize: 12,
                                                            fontFamily: 'SimSun',
                                                            textalign: "right",
                                                            value: FR.i18nText('FR-Engine_Unit_MM')
                                                        }
                                                    },
                                                    { el: $('<div>') },
                                                    {
                                                        el: {
                                                            type: 'label',
                                                            fontsize: 12,
                                                            fontFamily: 'SimSun',
                                                            textalign: "left",
                                                            value: FR.i18nText('FR-Engine_Left')
                                                        }
                                                    },
                                                    {
                                                        el: {
                                                            type: 'text',
                                                            fontSize: 12,
                                                            fontFamily: 'SimSun',
                                                            widgetName: 'printMarginLeft',
                                                            value: o.marginLeft,
                                                            regex: floatRegexText,
                                                            listeners: [{
                                                                eventName: 'afteredit',
                                                                action: function () {
                                                                    if (checkDialogValid()) {
                                                                        FR.refreshNativePreviewFrame(o, sessionID, previewDialog, printUrl);
                                                                    }
                                                                }
                                                            }]
                                                        }
                                                    },
                                                    {
                                                        el: {
                                                            type: 'label',
                                                            fontsize: 12,
                                                            fontFamily: 'SimSun',
                                                            textalign: "right",
                                                            value: FR.i18nText('FR-Engine_Unit_MM')
                                                        }
                                                    }
                                                ],
                                                [
                                                    {
                                                        el: {
                                                            type: 'label',
                                                            fontsize: 12,
                                                            fontFamily: 'SimSun',
                                                            textalign: "left",
                                                            value: FR.i18nText('FR-Engine_Bottom')
                                                        }
                                                    },
                                                    {
                                                        el: {
                                                            type: 'text',
                                                            fontSize: 12,
                                                            fontFamily: 'SimSun',
                                                            widgetName: 'printMarginBottom',
                                                            value: o.marginBottom,
                                                            regex: floatRegexText,
                                                            listeners: [{
                                                                eventName: 'afteredit',
                                                                action: function () {
                                                                    if (checkDialogValid()) {
                                                                        FR.refreshNativePreviewFrame(o, sessionID, previewDialog, printUrl);
                                                                    }
                                                                }
                                                            }]
                                                        }
                                                    },
                                                    {
                                                        el: {
                                                            type: 'label',
                                                            fontsize: 12,
                                                            fontFamily: 'SimSun',
                                                            textalign: "right",
                                                            value: FR.i18nText('FR-Engine_Unit_MM')
                                                        }
                                                    },
                                                    { el: $('<div>') },
                                                    {
                                                        el: {
                                                            type: 'label',
                                                            fontsize: 12,
                                                            fontFamily: 'SimSun',
                                                            textalign: "left",
                                                            value: FR.i18nText('FR-Engine_Right')
                                                        }
                                                    },
                                                    {
                                                        el: {
                                                            type: 'text',
                                                            fontSize: 12,
                                                            fontFamily: 'SimSun',
                                                            widgetName: 'printMarginRight',
                                                            value: o.marginRight,
                                                            regex: floatRegexText,
                                                            listeners: [{
                                                                eventName: 'afteredit',
                                                                action: function () {
                                                                    if (checkDialogValid()) {
                                                                        FR.refreshNativePreviewFrame(o, sessionID, previewDialog, printUrl);
                                                                    }
                                                                }
                                                            }]
                                                        }
                                                    },
                                                    {
                                                        el: {
                                                            type: 'label',
                                                            fontsize: 12,
                                                            fontFamily: 'SimSun',
                                                            textalign: "right",
                                                            value: FR.i18nText('FR-Engine_Unit_MM')
                                                        }
                                                    }
                                                ]
                                            ]
                                        }
                                    }
                                ]
                            ]
                        }
                    }
                ]
            };

            var previewSrc = printUrl + "?op=fr_print&cmd=no_client&preview=true&sessionID=" + sessionID;
            if (FR.Browser.isIE11Before()) {
                previewSrc = printUrl + "?op=resource&resource=/com/fr/web/core/dialog/browserUnsupportPrintPreviewPrompt.html";
            }
            if (o.isCustomPrint) {
                previewSrc = "resource/unsupportPreview.html";  // 不支持预览
            }

            previewDialog = new FR.Dialog({
                destroyOnClose: true,
                animate: false,
                title: '',
                titleHeight: 0,
                border: false,
                resizeable: false,
                draggable: false,
                adaptivity: {
                    enabled: true,
                    minWidth: 340,
                    minHeight: 560,
                    topGap: 40,
                    leftGap: 440,
                    bottomGap: 40,
                    rightGap: 440
                },
                contentWidget: {
                    type: 'border',
                    widgetBackground: {
                        background: '#ffffff'
                    },
                    items: [
                        {
                            region: 'center',
                            width: 320,
                            el: settingPaneConfig
                        },
                        {
                            region: 'west',
                            width: 1,
                            el: $('<div>')
                        }
                    ]
                }
            });

            previewDialog.setVisible(true);

            // populate 数据
            previewDialog.getWidgetByName('printerCombo').setText(o.printerName);
            if (o.pageType === 0) {
                previewDialog.getWidgetByName('allPagesRadio').setSelected(true);
            } else if (o.pageType === 1) {
                previewDialog.getWidgetByName('currentPageRadio').setSelected(true);
            } else {
                previewDialog.getWidgetByName('specifiedPagesRadio').setSelected(true);
                previewDialog.getWidgetByName('specifiedPages').setText(o.pageIndex);
            }
            if (o.orientation === 0) {
                previewDialog.getWidgetByName('portraitLayoutRadio').setSelected(true);
            } else {
                previewDialog.getWidgetByName('landscapeLayoutRadio').setSelected(true);
            }
            previewDialog.getWidgetByName('paperSettingCombo').setText(o.paperSize);
        },

        resetSpecifiedPagesField: function(previewDialog) {
            var textField = previewDialog.getWidgetByName('specifiedPages');
            textField.setText('');
            textField.checkValid();
            textField.setEnable(false);
        },

        // 刷新打印预览的 iframe
        refreshNativePreviewFrame : function (config, sessionID, previewDialog, printUrl) {
            if (config.isCustomPrint) {
                return;
            }
            clearTimeout(nativePrintPreviewTimer);
            nativePrintPreviewTimer = setTimeout(function(){
                FR.refreshNativePreviewFrameImmediately(sessionID, previewDialog, printUrl);
            }, 500);
        },

        refreshNativePreviewFrameImmediately: function (sessionID, previewDialog, printUrl) {
            // 更新margin
            var paperConfig = {
                marginTop: previewDialog.getWidgetByName('printMarginTop').getText(),
                marginLeft: previewDialog.getWidgetByName('printMarginLeft').getText(),
                marginBottom: previewDialog.getWidgetByName('printMarginBottom').getText(),
                marginRight: previewDialog.getWidgetByName('printMarginRight').getText(),
                orientation: previewDialog.getWidgetByName('portraitLayoutRadio').isSelected() ? 0 : 1,
                paperSize: previewDialog.getWidgetByName('paperSettingCombo').getText()
            };
            FR.setPrintPaper(sessionID, paperConfig, printUrl, function(){
            });
        },

        checkNativePrintLoading : function (printUrl, isCustomPrint) {
            // 还在loading状态，说明本地打印软件启动失败
            if (isLoadingNativePrint) {
                nativePrintSocket.close();
                isLoadingNativePrint = false;
                var contentHtml = "<iframe width='100%' height='100%' src='" + printUrl + "?op=fr_print&cmd=native_print_loading_failed'>";
                if (isCustomPrint) {
                    contentHtml = "<iframe width='100%' height='100%' src='resource/nativePrintLoadingFailed.html'>";
                }
                nativePrintLoadingDialog.setContent({
                    type: "contentHtml",
                    content: contentHtml
                });
            }
        },

        // 弹出对话框后，点击"打印"
        confirmNativePrint : function (o, previewDialog, sessionID, printUrl) {
            var index; // 页码范围
            if (previewDialog.getWidgetByName('allPagesRadio').isSelected()) {
                index = '';
            } else if (previewDialog.getWidgetByName('currentPageRadio').isSelected()) {
                index = o.currentPageIndex;
            } else {
                index = previewDialog.getWidgetByName('specifiedPages').getText();
            }
            var configp = {
                printerName: previewDialog.getWidgetByName('printerCombo').getText(),
                copy: previewDialog.getWidgetByName('printCopy').getText(),
                index: index,
                orientation: previewDialog.getWidgetByName('portraitLayoutRadio').isSelected() ? 0 : 1,
                paperSize: previewDialog.getWidgetByName('paperSettingCombo').getText(),
                // fitPaper: previewDialog.getWidgetByName('fitPaperSizeCheck').isSelected(),
                marginTop: previewDialog.getWidgetByName('printMarginTop').getText(),
                marginLeft: previewDialog.getWidgetByName('printMarginLeft').getText(),
                marginBottom: previewDialog.getWidgetByName('printMarginBottom').getText(),
                marginRight: previewDialog.getWidgetByName('printMarginRight').getText(),
                quietPrint: previewDialog.getWidgetByName('quietPrintCheck').isSelected(),
                url: printUrl + "?sessionID=" + sessionID + "&op=fr_applet&cmd=print",
                sessionID: sessionID
            };
            if (o.isCustomPrint) {
                configp.url = o.customFileUrl;
                configp.isCustomPrint = true;
                configp.beforePrint = o.beforePrint;
            }
            FR.newNativePrintWithArgs(configp);
        },

        // 不弹对话框，使用服务器默认配置的参数
        defaultNewNativePrint : function(config, sessionID, printUrl) {
            if (config.isCustomPrint) {
                // 如果是自定义打印，不弹框的情况，要能通过 config 设置打印边距等项
                FR.newNativePrintWithArgs($.extend({
                    url: config.customFileUrl,
                    beforePrint: config.beforePrint,
                    isCustomPrint: true
                }, config));
                return;
            }

            FR.getDefaultNewNativePrintConfig(sessionID, printUrl, function(data) {
                var configp = $.extend(data, {
                    sessionID: sessionID,
                    url: printUrl + "?sessionID=" + sessionID + "&op=fr_applet&cmd=print"
                });
                FR.newNativePrintWithArgs(configp);
            });
        },

        // 从服务器获取本地打印属性设置
        getDefaultNewNativePrintConfig : function (sessionID, printUrl, callback) {
            FR.ajax({
                url: printUrl,
                data: {
                    op: 'fr_print',
                    cmd: 'get_native_print_attr',
                    sessionID: sessionID
                },
                dataType: 'jsonp',
                jsonp: 'callback',
                success: function (res) {
                    callback(res);
                }
            });
        },

        newNativePrintWithArgs : function(configp) {
            if (configp.isCustomPrint) {
                if ($.isFunction(configp.beforePrint)) {
                    configp.beforePrint();
                }
            } else if (_g().fireEvent(FR.Events.BPRINT) === false) {
                return;
            }
            nativePrintSocket.emit('startPrint', FR.jsonEncode(FR.getPureConfig(configp)));
        },

        showQuietPrintConfirm: function (previewDialog) {
            var quietPrintConfirmDialog = new FR.Dialog({
                title: FR.i18nText('FR-Engine_Save_Client_Habit'),
                text4OK: FR.i18nText('FS-Generic-Simple_Save'),
                text4Cancel: FR.i18nText('FS-Generic-Simple_Cancel'),
                onCancel: function () {
                    previewDialog.getWidgetByName('quietPrintCheck').setSelected(false);
                },
                onOK: function () {
                    previewDialog.getWidgetByName('quietPrintCheck').setSelected(true);
                },
                destroyOnClose: true,
                animate: false,
                width: 450,
                height: 180,
                confirm: true,
                border: true,
                closable: true,
                textAlign: 'center',
                align: 'center',
                contentWidget: {
                    type: 'tablelayout',
                    columnSize: [30, 410, 10],
                    rowSize: [30, 100, 40],
                    vgap: 0,
                    items: [
                        [
                            {el: $('<div>')}
                        ],
                        [
                            {el: $('<div>')},
                            {
                                el: $('<div>' + FR.i18nText('FR-Engine_Quiet_Print_Confirm_Tip') + '</div>')
                            }
                        ],
                        [
                            {el: $('<div>')}
                        ]
                    ]
                }
            });
            quietPrintConfirmDialog.setVisible(true);
        },

        /**
         * 零客户端打印
         *
         *     @example
         *     var sessionID = contentPane.currentSessionID;//获取sessionID
         *     FR.doNoClientPrint(sessionID, false);
         *
         */
        doNoClientPrint: function (sessionID, popupSetup, printUrl) {
            if (printUrl == null) {
                printUrl = FR.serverURL + FR.servletURL;
            }
            if (popupSetup) {
                var margin = {
                    top: 6.85,
                    left: 19.05,
                    bottom: 6.85,
                    right: 19.05
                };
                function checkDialogValid(dialog) {
                    var topW = dialog.getWidgetByName('PrintMarginTop');
                    var leftW = dialog.getWidgetByName('PrintMarginLeft');
                    var bottomW = dialog.getWidgetByName('PrintMarginBottom');
                    var rightW = dialog.getWidgetByName('PrintMarginRight');
                    var isValid = true;
                    var widgets = [topW, leftW, bottomW, rightW];
                    for (var i = 0; i < widgets.length; i++) {
                        if (!widgets[i].checkValid()) {
                            isValid = false;
                            break;
                        }
                    }
                    dialog.win.okButton.setEnable(isValid);
                    return isValid;
                }
                var dialog = new FR.Dialog({
                    title: FR.i18nText("FR-Engine_Setting"),
                    confirm: true,
                    resizeable: false,
                    width: 450,
                    height: 180,
                    contentWidget: {
                        type: 'tablelayout',
                        columnSize: [100, 40, 60, 30, 60, 60, 30],
                        rowSize: [15, 20, 20],
                        vgap: 15,
                        items: [
                            [{el: $('<div>')}],
                            [
                                {
                                    el: {
                                        type: 'label',
                                        fontsize: 12,
                                        fontFamily: 'SimSun',
                                        textalign: "right",
                                        value: FR.i18nText('FR-Engine_Print_Margin') + ': '
                                    }
                                },
                                {
                                    el: {
                                        type: 'label',
                                        fontsize: 12,
                                        fontFamily: 'SimSun',
                                        textalign: "right",
                                        value: FR.i18nText('FR-Engine_Top') + ': '
                                    }
                                },
                                {
                                    el: {
                                        type: 'text',
                                        fontSize: 12,
                                        fontFamily: 'SimSun',
                                        widgetName: 'PrintMarginTop',
                                        regex: floatRegexText,
                                        value: margin.top,
                                        listeners: [{
                                            eventName: 'afteredit',
                                            action: function () {
                                                checkDialogValid(dialog);
                                            }
                                        }]
                                    }
                                },
                                {
                                    el: {
                                        type: 'label',
                                        fontsize: 12,
                                        fontFamily: 'SimSun',
                                        textalign: "right",
                                        value: FR.i18nText('FR-Engine_Unit_MM')
                                    }
                                },
                                {
                                    el: {
                                        type: 'label',
                                        fontsize: 12,
                                        fontFamily: 'SimSun',
                                        textalign: "right",
                                        value: FR.i18nText('FR-Engine_Left') + ': '
                                    }
                                },
                                {
                                    el: {
                                        type: 'text',
                                        fontSize: 12,
                                        fontFamily: 'SimSun',
                                        widgetName: 'PrintMarginLeft',
                                        regex: floatRegexText,
                                        value: margin.left,
                                        listeners: [{
                                            eventName: 'afteredit',
                                            action: function () {
                                                checkDialogValid(dialog);
                                            }
                                        }]
                                    }
                                },
                                {
                                    el: {
                                        type: 'label',
                                        fontsize: 12,
                                        fontFamily: 'SimSun',
                                        textalign: "right",
                                        value: FR.i18nText('FR-Engine_Unit_MM')
                                    }
                                }
                            ],
                            [
                                {
                                    el: $('<div>')
                                },
                                {
                                    el: {
                                        type: 'label',
                                        fontsize: 12,
                                        fontFamily: 'SimSun',
                                        textalign: "right",
                                        value: FR.i18nText('FR-Engine_Bottom') + ': '
                                    }
                                },
                                {
                                    el: {
                                        type: 'text',
                                        fontSize: 12,
                                        fontFamily: 'SimSun',
                                        widgetName: 'PrintMarginBottom',
                                        regex: floatRegexText,
                                        value: margin.bottom,
                                        listeners: [{
                                            eventName: 'afteredit',
                                            action: function () {
                                                checkDialogValid(dialog);
                                            }
                                        }]
                                    }
                                },
                                {
                                    el: {
                                        type: 'label',
                                        fontsize: 12,
                                        fontFamily: 'SimSun',
                                        textalign: "right",
                                        value: FR.i18nText('FR-Engine_Unit_MM')
                                    }
                                },
                                {
                                    el: {
                                        type: 'label',
                                        fontsize: 12,
                                        fontFamily: 'SimSun',
                                        textalign: "right",
                                        value: FR.i18nText('FR-Engine_Right') + ': '
                                    }
                                },
                                {
                                    el: {
                                        type: 'text',
                                        fontSize: 12,
                                        fontFamily: 'SimSun',
                                        widgetName: 'PrintMarginRight',
                                        regex: floatRegexText,
                                        value: margin.right,
                                        listeners: [{
                                            eventName: 'afteredit',
                                            action: function () {
                                                checkDialogValid(dialog);
                                            }
                                        }]
                                    }
                                },
                                {
                                    el: {
                                        type: 'label',
                                        fontsize: 12,
                                        fontFamily: 'SimSun',
                                        textalign: "right",
                                        value: FR.i18nText('FR-Engine_Unit_MM')
                                    }
                                }
                            ]
                        ]
                    },
                    onOK: function () {
                        if (!checkDialogValid(dialog)) {
                            return false;
                        }
                        var marginConfig = {
                            marginTop: dialog.getWidgetByName('PrintMarginTop').getValue(),
                            marginLeft: dialog.getWidgetByName('PrintMarginLeft').getValue(),
                            marginBottom: dialog.getWidgetByName('PrintMarginBottom').getValue(),
                            marginRight: dialog.getWidgetByName('PrintMarginRight').getValue()
                        };
                        FR.doURLNoClientPrint(sessionID, marginConfig, printUrl);
                    }
                });
                dialog.setVisible(true);
            } else {
                FR.doURLNoClientPrint(sessionID, {}, printUrl);
            }
        },

        // 设置打印边距，并开始零客户端打印
        doURLNoClientPrint: function (sessionID, paperConfig, printUrl) {
            FR.setPrintPaper(sessionID, paperConfig, printUrl, function() {
                if (!checkPDFPrintRegister()) {
                    FR.Msg.toast(FR.i18nText("FR-Engine-Export_Print_Not_Support"));
                    return;
                }
                if (_g().fireEvent(FR.Events.BPRINT) === false) {
                    return;
                }
                var finalUrl = printUrl + "?op=fr_print&cmd=no_client&sessionID=" + sessionID;
                var printFrame = $('<iframe id="printPdf" src = "' + finalUrl + '" height="0px"></iframe>');
                // safari 下，pdf 中的打印脚本无效，需要在前台再调一次打印
                if (FR.isSafari()) {
                    printFrame.load(function() {
                        $('#printPdf')[0].contentWindow.print();
                    });
                } else if (FR.isFireFox()) {  // 火狐下，两种方式均无效，只能打开新标签页
                    window.open(finalUrl, "_blank");
                }

                printFrame.appendTo($('body'));
                _g().fireEvent(FR.Events.APRINT);
            });
        },

        isFireFox:function(){
            return/firefox/i.test(navigator.userAgent.toLowerCase())
        },

        isSafari:function(){
            return/safari/i.test(navigator.userAgent.toLowerCase())
        },

        setPrintPaper: function (sessionID, paperConfig, printUrl, callback) {
            var data = {
                op: 'fr_print',
                cmd: 'print_paper_setting',
                sessionID: sessionID
            };
            $.extend(data, paperConfig);
            FR.ajax({
                url: printUrl,
                data: data,
                dataType: 'jsonp',
                jsonp: 'callback',
                success: function(res) {
                    if (res.status == 'success') {
                        callback();
                    }
                }
            });
        },

        /**
         * 通用打印接口，可批量打印
         *
         *     @example
         *     var printurl="http://localhost:8077/TestCase/ReportServer";
         *     var reportlets ="[{reportlet: '1.cpt', p1: 'a'}, {reportlet: '1.cpt', p1: 'b'}]";
         *     var config = {
         *         printUrl : printurl,
         *         isPopUp : false,  // 是否弹出设置窗口，true为弹出，false为不弹出
         *         data : {
         *             reportlets: reportlets  // 需要打印的模版列表
         *         },
         *         printType : 0  // 打印类型，0为零客户端打印，1为本地打印
         *     };
         *     FR.doURLPrint(config);
         *
         */
        doURLPrint: function(config) {
            if (config.isCustomPrint) {
                // 自定义打印情况下，所有打印配置都可通过 config 传递
                if (config.index) {
                    config.pageIndex = config.index;
                }
                FR.doNewNativePrint("", $.extend({
                    customFileUrl: config.printUrl,
                }, config));
                return;
            }
            if (config.printUrl == FR.servletURL) {
                config.printUrl = FR.serverURL + FR.servletURL;
            }
            // 异步跨域回调。如果未定义config.callback，默认不跨域，同步执行并返回 sessionID 值
            config.callback = function(sessionID) {
                if (config.printType === 0){  // 零客户端打印
                    FR.doNoClientPrint(sessionID, config.isPopUp, config.printUrl);
                } else {  // 本地打印
                    var o = {
                        isPopUp: config.isPopUp,
                        printUrl: config.printUrl,
                        isCustomPrint: false
                    };
                    FR.doNewNativePrint(sessionID, o);
                }
            };
            __getSessionID__(config.printUrl, config);

        },

        /**
         * PDF打印
         *
         *     @example
         *     var sessionID = contentPane.currentSessionID;//获取sessionID
         *     FR.doPDFPrint(sessionID);//调用pdf打印
         *
         */
        doPDFPrint: function (sessionID, popupSetup) {
            var isShowDialog = false;
            FR.ajax({
                url: FR.servletURL,
                data: {
                    op: 'fr_pdfprint',
                    cmd: 'pdf_print_setting'
                },
                type: 'POST',
                async: false,
                complete: function (res, status) {
                    isShowDialog = res.responseText === 'true';
                }
            });
            var config = {
                'url': FR.servletURL + '?sessionID=' + sessionID,
                'isPopUp': isShowDialog
            };

            FR.doURLPDFPrint(config);
        },

        doSimplePDFPrint: function (sessionID) {
            if (!checkPDFPrintRegister()) {
                FR.Msg.toast(FR.i18nText("FR-Engine-Export_Print_Not_Support"));
                return;
            }
            window.open(FR.servletURL + "?op=fr_pdfprint&cmd=native&sessionID=" + sessionID, "_blank");
        },

        /**
         * 直接PDF打印
         * config: carl:不知道以后还需要添什么参数，干脆就config了
         */
        doURLPDFPrint: function (config) {
            var url = arguments[0];
            var isPopUp;

            //做下兼容，以前的两个参数为：url, isPopUp
            if (typeof url == "string") {
                isPopUp = arguments[1];
                config = arguments[2];
            } else {
                url = config.url;
                isPopUp = config.isPopUp;
            }

            // 先取得sessionID
            var sessionID = __getSessionID__(url, config);

            if (!checkPDFPrintRegister()) {
                FR.Msg.toast(FR.i18nText("FR-Engine-Export_Print_Not_Support"));
                return;
            }

            if (!supportPDFPrint()) {
                window.open(FR.servletURL + "?op=fr_pdfprint&cmd=native&sessionID=" + sessionID, "_blank");
                return;
            }

            if (FR.Report.Plugin.Print.pdfURLPrint) {
                FR.Report.Plugin.Print.pdfURLPrint(sessionID);
                return;
            }

            if ($PrintDiv == null) {
                $PrintDiv = $("<div>").appendTo("body");
            }

            FR.showDialog(FR.i18nText("FR-Engine_Printing"), 250, 100, FR.i18nText("FR-Engine-Loading_Component") + "...");
            // 再再fr_PDFPrint
            FR.ajax({
                url: FR.servletURL,
                data: {
                    sessionID: sessionID,
                    op: 'fr_pdfprint',
                    cmd: 'pt_print',
                    frandom: Math.random()
                },
                type: 'POST',
                complete: function (res, status) {
                    // 返回一个Object里面是PDFReader这个ActiveX控件,附Param[src:PDFFilePath]
                    if (status == 'success') {
                        var resText = res.responseText;
                        if (resText == 'timeout') {
                            FR.closeDialog();
                            return;
                        }
                        $PrintDiv[0].innerHTML = res.responseText;
                        $PDFReader = $PrintDiv.find("Object");
                        try {
                            $PDFReader[0].gotoFirstPage();
                            //james：能够调用gotoFirstPage，代表Adobe Reader ActiveX安装了
                            FR.showDialog(FR.i18nText("FR-Engine_Printing"), 250, 100, FR.i18nText("FR-Engine-Loading_PDF") + "...");
                            checkPDFPrint.defer(300, this, [sessionID, isPopUp]);

                        } catch (e) {
                            var content = "<div style=\"text-align:center;\">" + FR.i18nText("FR-Engine_Please_Install")
                                + " <a href=\"http://www.adobe.com/products/reader/\" target=\"_blank\">Adobe Reader</a>." + "</div>";
                            FR.showDialog(FR.i18nText("FR-Engine_Alert"), 200, 80, content);
                        }
                    }
                }
            });
        },

        /*
         * Applet打印
         */
        // james：直接打印URL
        doURLAppletPrint: function (config) {
            var url = arguments[0];
            var isShowDialog;
            var pageIndex;
            var loadJVM;
            var printerName;
            var choosePrinter;
            var copies;

            //做下兼容，以前的两个参数为：url, isPopUp
            if (typeof url == "string") {
                isShowDialog = arguments[1];
                if (isShowDialog == undefined || !(typeof isShowDialog == "boolean")) {
                    isShowDialog = isShowAppletPrintSetting();
                }
                config = arguments[2];
            } else {
                url = config.url;
                isShowDialog = config.isPopUp;
                pageIndex = config.pageIndex;
                loadJVM = config.loadJVM;
                choosePrinter = config.choosePrinter;
                printerName = config.printerName;
                copies = config.copies ? config.copies : 1;

                if (isShowDialog == undefined || !(typeof isShowDialog == "boolean")) {
                    isShowDialog = isShowAppletPrintSetting();
                }
            }

            if (isShowDialog.exception === 'FAILPASS') {
                FR.Msg.toast(FR.i18nText("FR-Engine-Export_Print_Not_Support"));
                return;
            }
            var index = 0;

            // IE9 有莫名其妙的bug，会打印多次，因此加个判断
            var isIE9 = FR.Browser.isIE9();

            if (isShowDialog) {

                var dialog = new FR.Dialog({
                    title: FR.i18nText("FR-Engine_Setting"),
                    confirm: true,
                    resizeable: false,
                    width: 450,
                    height: 190,
                    contentWidget: {
                        type: 'tablelayout',
                        columnSize: [20, 100, 155, 150],
                        rowSize: [10, 20, 20, 20],
                        vgap: 10,
                        items: [
                            [{el: $('<div>')}],
                            [
                                {el: $('<div>')},
                                {
                                    el: {
                                        type: 'radio',
                                        widgetName: 'All_Pages',
                                        text: FR.i18nText("HJS-All_Pages"),
                                        selected: true,
                                        fontSize: 12,
                                        fontFamily: 'SimSun',
                                        listeners: [{
                                            eventName: FR.Events.STATECHANGE,
                                            action: function () {
                                                if (this.isSelected()) {
                                                    dialog.getWidgetByName('Specified_Pages').setSelected(false);
                                                }
                                            }
                                        }]
                                    }
                                },
                                {el: $('<div>')},
                                {el: $('<div>')}
                            ],
                            [
                                {el: $('<div>')},
                                {
                                    el: {
                                        type: 'radio',
                                        widgetName: 'Specified_Pages',
                                        text: FR.i18nText("HJS-Specified_Pages") + ":",
                                        fontSize: 12,
                                        fontFamily: 'SimSun',
                                        listeners: [{
                                            eventName: FR.Events.STATECHANGE,
                                            action: function () {
                                                if (this.isSelected()) {
                                                    dialog.getWidgetByName('All_Pages').setSelected(false);
                                                }
                                            }
                                        }]
                                    }
                                },
                                {
                                    el: {
                                        type: 'text',
                                        width: '155px',
                                        fontSize: 12,
                                        fontFamily: 'SimSun',
                                        widgetName: 'CurrentPageNum',
                                        value: '1-1'
                                    }
                                },
                                {
                                    el: {
                                        type: 'label',
                                        fontsize: 12,
                                        fontFamily: 'SimSun',
                                        textalign: "right",
                                        value: '(' + FR.i18nText("FR-Engine_Example") + ': 2,5,7-10,12)'
                                    }
                                }
                            ],
                            [
                                {el: $('<div>')},
                                {
                                    el: {
                                        type: 'label',
                                        value: FR.i18nText("FR-Engine_Print_Copy") + ": ",
                                        fontSize: 12,
                                        fontFamily: 'SimSun',
                                        textalign: "left"
                                    }
                                },
                                {
                                    el: {
                                        type: 'text',
                                        width: '155px',
                                        fontSize: 12,
                                        fontFamily: 'SimSun',
                                        widgetName: 'Copies_txt',
                                        value: '1'
                                    }
                                }
                            ]
                        ]
                    },
                    onOK: function () {
                        FR.closeDialog();

                        if (dialog.getWidgetByName('Specified_Pages').isSelected()) {
                            index = dialog.getWidgetByName('CurrentPageNum').getValue();
                        }
                        copies = dialog.getWidgetByName('Copies_txt').getValue();

                        if ($appletDiv == null) {
                            $appletDiv = $("<div>").appendTo("body");
                        }
                        // james:有reportlet的时候需要先生成sessionID
                        var sessionID = __getSessionID__(url, config);
                        if (url.indexOf("reportlet") != -1 || url.indexOf("resultlets") != -1 || (config && config.data && config.data.reportlets)) {
                            if (url.indexOf("?") != -1) {
                                url += '&_=' + new Date().getTime();
                            } else {
                                url += '?_=' + new Date().getTime();
                            }
                            var sessionID = __getSessionID__(url, config);
                            url = FR.servletURL + "?sessionID=" + sessionID;
                        }
                        var isSingleSheet = isSingleSheetFunc(sessionID);
                        var attributes = null;
                        var parameters = null;
                        if (supportCodebase()) {
                            attributes = {
                                codebase: FR.server + '/jre.exe'
                            };
                            parameters = {
                                code: 'com.fr.print.PrintApplet',
                                archive: FR.server + appletJarName,
                                url: FR.serverURL + url + "&op=fr_applet&cmd=print",
                                isIE9: isIE9,
                                isShowDialog: isShowDialog || choosePrinter,
                                printerName: printerName,
                                index: index,
                                copies: copies,
                                isSingleSheet: isSingleSheet
                            };
                        } else {
                            attributes = {
                                code: 'com.fr.print.PrintApplet.class',
                                archive: FR.server + appletJarName,
                                width: 0,
                                height: 0
                            };
                            parameters = {
                                url: FR.serverURL + url + "&op=fr_applet&cmd=print",
                                isIE9: isIE9,
                                isShowDialog: isShowDialog || choosePrinter,
                                printerName: printerName,
                                index: index,
                                copies: copies,
                                isSingleSheet: isSingleSheet
                            };
                        }
                        deployJava.runApplet(attributes, parameters, '1.4');


                        FR.closeDialog();
                        var isOverFunc = function () {
                            if (!isAppletPrintOver(sessionID)) {
                                return;
                            }
                            clearInterval(sh);
                            if (_g()) {
                                _g().fireEvent("afterappletprint");
                            }

                            $('applet').remove();
                        };
                        var sh = setInterval(isOverFunc, 3000);
                    },
                    onCancel: function () {
                        index = 0;
                        FR.closeDialog();
                    }
                });
                dialog.setVisible(true);

            } else {
                if (pageIndex != undefined && (typeof pageIndex == "number")) {
                    index = pageIndex;
                }

                // james:有reportlet的时候需要先生成sessionID
                var sessionID = __getSessionID__(url, config);
                if (url.indexOf("reportlet") != -1 || url.indexOf("resultlets") != -1 || (config && config.data && config.data.reportlets)) {
                    if (url.indexOf("?") != -1) {
                        url += '&_=' + new Date().getTime();
                    } else {
                        url += '?_=' + new Date().getTime();
                    }
                    var sessionID = __getSessionID__(url, config);
                    url = FR.servletURL + "?sessionID=" + sessionID;
                }
                var isSingleSheet = isSingleSheetFunc(sessionID);
                if (supportCodebase()) {
                    attributes = {
                        codebase: FR.server + '/jre.exe'
                    };
                    parameters = {
                        code: 'com.fr.print.PrintApplet',
                        archive: FR.server + appletJarName,
                        url: FR.serverURL + url + "&op=fr_applet&cmd=print",
                        isIE9: isIE9,
                        isShowDialog: isShowDialog,
                        printerName: printerName,
                        index: index,
                        isSingleSheet: isSingleSheet
                    };
                } else {
                    var attributes = {
                        code: 'com.fr.print.PrintApplet.class',
                        archive: FR.server + appletJarName,
                        width: 0,
                        height: 0
                    }
                    var parameters = {
                        url: FR.serverURL + url + "&op=fr_applet&cmd=print",
                        isIE9: isIE9,
                        index: index,
                        isShowDialog: isShowDialog,
                        printerName: printerName,
                        isSingleSheet: isSingleSheet,
                        copies: copies
                    };
                }
                deployJava.runApplet(attributes, parameters, '1.4');

                FR.closeDialog();


                var isOverFunc = function () {
                    if (!isAppletPrintOver(sessionID)) {
                        return;
                    }
                    clearInterval(sh);
                    if (_g()) {
                        _g().fireEvent("afterappletprint");
                    }

                    $('applet').remove();
                };
                //neil：每3000毫秒，去后台看下是否打印结束
                var sh = setInterval(isOverFunc, 3000);
            }

        },

        /**
         * applet打印
         *
         * @param sessionID
         * @param choosePrinter 这个参数为true的话 即使静默打印也弹出选择打印机的窗口
         */
        doAppletPrint: function (sessionID, choosePrinter, printerName) {
            var url = FR.servletURL + "?sessionID=" + sessionID;
            if (_g().fireEvent("beforeappletprint") === false) {
                return;
            }
            var config = {'url': url, 'choosePrinter': choosePrinter, 'printerName': printerName};

            FR.doURLAppletPrint(config);
        },

        /**
         * Flash打印,currentPageIndex以1为始
         *
         * @param sessionID
         * @param currentPageIndex 打印的页码
         */
        doFlashPrint: function (sessionID, currentPageIndex) {
            if (_g().fireEvent("beforeflashprint") === false) {
                return;
            }
            var fitPaper = isFitPaper();
            FR.doPrintURL(FR.servletURL + "?sessionID=" + sessionID, currentPageIndex, fitPaper);
        },

        /**
         * @deprecated use doURLFlashPrint
         */
        doPrintURL: function (url, currentPageIndex, fitPaper, config) {
            var config = arguments[3];
            if (config == undefined) {
                config = {
                    'url': url,
                    'pageIndex': currentPageIndex,
                    'isAutoZoom': fitPaper
                };
            }
            FR.doURLFlashPrint(config);
        },

        /**
         *判断浏览器中是否安装了flash插件
         */
        isInstalledFlash: function () {
            if (this.$i_flash === true) {
                return true;
            }
            var i_flash = false;
            var n = navigator;
            if (n.plugins && n.plugins.length) {
                for (var ii = 0; ii < n.plugins.length; ii++) {
                    if (n.plugins[ii] && n.plugins[ii].name.indexOf('Shockwave Flash') != -1) {
                        i_flash = true;
                        break;
                    }
                }
            } else if (window.ActiveXObject) {
                for (var ii = 11; ii >= 2; ii--) {
                    try {
                        var fl = eval("new ActiveXObject('ShockwaveFlash.ShockwaveFlash." + ii + "');");
                        if (fl) {
                            i_flash = true;
                            break;
                        }
                    }
                    catch (e) {
                    }
                }
            }
            this.$i_flash = i_flash;
            return i_flash;
        },

        // 提示用户安装flash
        flashInstall: function () {
            // james:没有安装Flashplayer的时候，要提示用户
            var content;
            // carl:获取服务器中是否有安装文件
            FR.ajax({
                type: 'POST',
                url: FR.servletURL + '?op=flash_print&cmd=get_fp_installpath',
                complete: function (res, status) {
                    if (status == 'success') {
                        var path = res.responseText;
                        if (typeof path == 'string' && path.length > 0 && path.length < 150) {
                            content = "<div style=\"text-align:center;\">" + FR.i18nText("FR-Engine_Please_Install")
                                + " <a href=\"" + path + "\">FlashPlayer</a>."
                                + FR.i18nText("FR-Engine_Restart_Browser_After_Installation") + "</div>";
                        }
                    }
                    if (!content) {
                        content = "<div style=\"text-align:center;\">" + FR.i18nText("FR-Engine_Please_Install")
                            + " <a href=\"http://get.adobe.com/flashplayer/\" target=\"_blank\">FlashPlayer</a>."
                            + FR.i18nText("FR-Engine_Restart_Browser_After_Installation") + "</div>";
                    }
                    FR.showDialog(FR.i18nText("FR-Engine_Alert"), 305, 75, content);
                }
            });
        },

        /**
         * flash打印
         * 直接打印一个reportlet所对应的地址
         * eg.http://localhost:8080/WebReport/ReportServer?reportlet=abc.cpt
         * http://localhost:8080/WebReport/ReportServer?sessionID=1245323546335_1242
         * bug 5694 添加isPopUp是否弹窗参数
         *
         * @param config ｛
         *      url : "要打印的报表的地址",
         *      isPopUp : "是否需要弹出打印框"
         * ｝
         */
        doURLFlashPrint: function (config) {
            var url = arguments[0];
            var currentPageIndex;
            var isShowDialog;
            var isAutoZoom;

            //做下兼容，以前的两个参数为：url, isPopUp
            if (typeof url == "string") {
                isShowDialog = arguments[1];
                isAutoZoom = isFitPaper();
                if (isShowDialog == undefined || !(typeof isShowDialog == "boolean")) {
                    isShowDialog = isShowFlashPrintSetting();
                }
                config = arguments[2];
            } else {
                url = config.url;
                currentPageIndex = config.pageIndex;
                isShowDialog = config.isPopUp;
                isAutoZoom = config.isAutoZoom;

                if (isShowDialog == undefined || !(typeof isShowDialog == "boolean")) {
                    isShowDialog = isShowFlashPrintSetting();
                }

                if (isAutoZoom == undefined || !(typeof isAutoZoom == "boolean")) {
                    isAutoZoom = isFitPaper();
                }
            }
            if (FR.isInstalledFlash() === true) {
                if ($flashIframe == null) {
                    FR.__flash__ = function () {
                        FR.doPrintURL.call(this, url, currentPageIndex, isAutoZoom, config);
                        delete FR.__flash__;
                    }; // 临时生成一个方法,给flash里面调用
                    $flashIframe = $("<iframe>").css({
                        position: 'absolute',
                        left: -1000,
                        top: -1000
                    })
                        .attr('src', FR.servletURL + '?op=resource&resource=/com/fr/web/core/printer.html').appendTo('body');
                } else {
                    //boxModel=true标准模式, false为杂项
                    var checkVersion = FR.Browser.isIE() && (FR.Browser.isIE8Before() || !$.support.boxModel);
                    var fm = checkVersion ? $flashIframe[0].contentWindow["flashMovie"] : $flashIframe[0].contentDocument["flashMovie"];

                    if (fm != null && fm.doLoadFlash != null) {
                        var servletURL = url.split('?')[0];
                        currentPageIndex = currentPageIndex || 1;

                        var sessionID = __getSessionID__(url, config);
                        var isPPAPIPrint = isPrintAsPPAPI();

                        FR.ajax({
                            type: 'POST',
                            url: servletURL,
                            data: {
                                sessionID: sessionID,
                                op: 'flash_print',
                                cmd: 'get_fp_pageinfo'
                            },
                            complete: function (res, status) {
                                //b:falsh打印提示信息
                                if (!FR.versionRemind(res.responseText)) {
                                    return;
                                }
                                // 返回的信息为 100;0:200,200&20:300,300 表示有100页，前20页长宽是200和200，后面是300和300
                                var message_array = res.responseText.split("?");
                                var info_array = message_array[0].split(";");
                                if (info_array[0].indexOf("FAILPASS") != -1) {
                                    FR.Msg.toast(FR.i18nText("FR-Engine-Export_Print_Not_Support"));
                                    return;
                                }
                                // alex:初始的页码数,从第一页到最后一页
                                var init_page_setting = "1-" + info_array[0];
                                var offset = message_array.length > 1 ? message_array[1].split(";") : ["0.0", "0.0"];
                                // alex:根据页码设置来打印
                                var print_fn = function (page_setting, isAutoZoom, paperinfo, isPrintAsImage, isPPAPIPrint) {
                                    FR.showDialog(FR.i18nText("FR-Engine_Print"), 250, 100, FR.i18nText("FR-Engine_Start_Print") + '...');
                                    //loy: flash打印速度优化。暂时先把id参数放sessionID后面一起带上去，等flash插件里的doLoadFlash方法加上id参数后再修改下 REPORT-1262
                                    fm.doLoadFlash(servletURL, sessionID + '&id=' + (new Date().getTime()), FR.string2ints(page_setting).join(","), isAutoZoom, paperinfo, isPrintAsImage, isPPAPIPrint);
                                    $flashIframe = null;
                                    if (_g()) {
                                        _g().fireEvent("afterflashprint");
                                    }
                                };

                                // alex:根据是否需要弹出页码选择的对话框
                                if (isShowDialog) {

                                    var dialog = new FR.Dialog({
                                        title: FR.i18nText("FR-Engine_Setting"),
                                        confirm: true,
                                        resizeable: false,
                                        width: 450,
                                        height: 280,
                                        contentWidget: {
                                            type: 'border',
                                            width: 420,
                                            height: 240,
                                            items: [{
                                                region: 'north',
                                                el: {
                                                    type: 'tablelayout',
                                                    columnSize: [20, 100, 155, 150],
                                                    rowSize: [10, 20, 20, 20],
                                                    height: 120,
                                                    vgap: 10,
                                                    items: [
                                                        [{el: $('<div>')}],
                                                        [
                                                            {el: $('<div>')},
                                                            {
                                                                el: {
                                                                    type: 'radio',
                                                                    fontSize: 12,
                                                                    fontFamily: 'SimSun',
                                                                    widgetName: 'All_Pages',
                                                                    text: FR.i18nText("HJS-All_Pages"),
                                                                    selected: true,
                                                                    only_be_selected: true,
                                                                    listeners: [{
                                                                        eventName: FR.Events.STATECHANGE,
                                                                        action: function () {
                                                                            if (this.isSelected()) {
                                                                                dialog.getWidgetByName('Current_Page').setSelected(false);
                                                                                dialog.getWidgetByName('Specified_Pages').setSelected(false);
                                                                            }
                                                                        }
                                                                    }]
                                                                }
                                                            },
                                                            {el: $('<div>')},
                                                            {el: $('<div>')}
                                                        ],
                                                        [
                                                            {el: $('<div>')},
                                                            {
                                                                el: {
                                                                    type: 'radio',
                                                                    fontSize: 12,
                                                                    fontFamily: 'SimSun',
                                                                    widgetName: 'Current_Page',
                                                                    text: FR.i18nText("HJS-Current_Page") + ":",
                                                                    only_be_selected: true,
                                                                    listeners: [{
                                                                        eventName: FR.Events.STATECHANGE,
                                                                        action: function () {
                                                                            if (this.isSelected()) {
                                                                                dialog.getWidgetByName('All_Pages').setSelected(false);
                                                                                dialog.getWidgetByName('Specified_Pages').setSelected(false);
                                                                            }
                                                                        }
                                                                    }]
                                                                }
                                                            },
                                                            {
                                                                el: {
                                                                    type: 'label',
                                                                    fontsize: 12,
                                                                    fontFamily: 'SimSun',
                                                                    value: FR.i18nText("FR-Engine-Page_Number") + ' ' + FR.i18nText("FR-Engine_Is") + ' ' + currentPageIndex
                                                                }
                                                            },
                                                            {el: $('<div>')}
                                                        ],
                                                        [
                                                            {el: $('<div>')},
                                                            {
                                                                el: {
                                                                    type: 'radio',
                                                                    fontSize: 12,
                                                                    fontFamily: 'SimSun',
                                                                    widgetName: 'Specified_Pages',
                                                                    text: FR.i18nText('HJS-Specified_Pages') + ":",
                                                                    only_be_selected: true,
                                                                    listeners: [{
                                                                        eventName: FR.Events.STATECHANGE,
                                                                        action: function () {
                                                                            if (this.isSelected()) {
                                                                                dialog.getWidgetByName('All_Pages').setSelected(false);
                                                                                dialog.getWidgetByName('Current_Page').setSelected(false);
                                                                            }
                                                                        }
                                                                    }]
                                                                }
                                                            },
                                                            {
                                                                el: {
                                                                    type: 'text',
                                                                    fontSize: 12,
                                                                    fontFamily: 'SimSun',
                                                                    widgetName: 'SpecifiedPagesNum',
                                                                    value: '1-2'
                                                                }
                                                            },
                                                            {
                                                                el: {
                                                                    type: 'label',
                                                                    fontsize: 12,
                                                                    fontFamily: 'SimSun',
                                                                    textalign: "right",
                                                                    value: '(' + FR.i18nText("FR-Engine_Example") + ' : 2,5,7-10,12)'
                                                                }
                                                            }
                                                        ]
                                                    ]
                                                }
                                            },
                                                {
                                                    region: 'center', el: {
                                                    type: 'tablelayout',
                                                    columnSize: [16, 300],
                                                    rowSize: [20, 20],
                                                    vgap: 0,
                                                    items: [
                                                        [
                                                            {el: $('<div>')},
                                                            {
                                                                el: {
                                                                    type: 'checkbox',
                                                                    fontSize: 12,
                                                                    fontFamily: 'SimSun',
                                                                    widgetName: 'AsImage',
                                                                    text: FR.i18nText("FR-Engine-Print_As_Image"),
                                                                    selected: false,
                                                                    disabled: false
                                                                }
                                                            }
                                                        ],
                                                        [
                                                            {el: $('<div>')},
                                                            {
                                                                el: {
                                                                    type: 'checkbox',
                                                                    widgetName: 'FitPaperSize',
                                                                    fontSize: 12,
                                                                    fontFamily: 'SimSun',
                                                                    text: FR.i18nText("Print-Print_To_Fit_Paper_Size"),
                                                                    selected: isFitPaper(),
                                                                    disabled: false
                                                                }
                                                            }
                                                        ]
                                                    ]
                                                }
                                                },
                                                {
                                                    region: 'south', el: {
                                                    type: 'tablelayout',
                                                    columnSize: [20, 300],
                                                    rowSize: [25],
                                                    height: 35,
                                                    items: [
                                                        [
                                                            {el: $('<div>')},
                                                            {
                                                                el: {
                                                                    type: 'label',
                                                                    fontsize: 16,
                                                                    fontFamily: 'SimSun',
                                                                    color: 'red',
                                                                    value: FR.i18nText("FR-Engine-Print_Set_Printer_Offset") + ": X=" + offset[0] + "mm Y=" + offset[1] + "mm"
                                                                }
                                                            }
                                                        ]
                                                    ]
                                                }
                                                }
                                            ]
                                        },
                                        onOK: function () {
                                            FR.closeDialog();

                                            if (dialog.getWidgetByName('Current_Page').isSelected()) {
                                                init_page_setting = currentPageIndex + "";
                                            } else if (dialog.getWidgetByName('Specified_Pages').isSelected()) {
                                                init_page_setting = dialog.getWidgetByName('SpecifiedPagesNum').getValue();
                                            }

                                            var printAsImage = dialog.getWidgetByName('AsImage').isSelected();
                                            var isFit = dialog.getWidgetByName('FitPaperSize').isSelected();
                                            print_fn(init_page_setting, isFit, info_array[1] ? info_array[1] : "", printAsImage, isPPAPIPrint);
                                        },
                                        onCancel: function () {
                                            FR.closeDialog();
                                        }
                                    });
                                    dialog.setVisible(true);
                                } else {
                                    print_fn(init_page_setting, isAutoZoom, info_array[1] ? info_array[1] : "", false, isPPAPIPrint);
                                }
                            }
                        });
                    } else {
                        FR.flashInstall();
                    }
                }
            } else {
                FR.flashInstall();
            }
        }
    });
})(jQuery);
var deployJava = {debug:null,firefoxJavaVersion:null,myInterval:null,preInstallJREList:null,returnPage:null,brand:null,locale:null,installType:null,EAInstallEnabled:false,EarlyAccessURL:null,getJavaURL:'http://java.sun.com/webapps/getjava/BrowserRedirect?host=java.com',appleRedirectPage:'http://www.apple.com/support/downloads/',oldMimeType:'application/npruntime-scriptable-plugin;DeploymentToolkit',mimeType:'application/java-deployment-toolkit',launchButtonPNG:'http://java.sun.com/products/jfc/tsc/articles/swing2d/webstart.png',browserName:null,browserName2:null,getJREs:function() {
    var list = [];
    if (deployJava.isPluginInstalled()) {
        var plugin = deployJava.getPlugin();
        var VMs = plugin.jvms;
        for (var i = 0; i < VMs.getLength(); i++) {
            list[i] = VMs.get(i).version;
        }
    } else {
        var browser = deployJava.getBrowser();
        if (browser == 'MSIE') {
            if (deployJava.testUsingActiveX('1.7.0')) {
                list[0] = '1.7.0';
            } else if (deployJava.testUsingActiveX('1.6.0')) {
                list[0] = '1.6.0';
            } else if (deployJava.testUsingActiveX('1.5.0')) {
                list[0] = '1.5.0';
            } else if (deployJava.testUsingActiveX('1.4.2')) {
                list[0] = '1.4.2';
            } else if (deployJava.testForMSVM()) {
                list[0] = '1.1';
            }
        } else if (browser == 'Netscape Family') {
            deployJava.getJPIVersionUsingMimeType();
            if (deployJava.firefoxJavaVersion != null) {
                list[0] = deployJava.firefoxJavaVersion;
            } else if (deployJava.testUsingMimeTypes('1.7')) {
                list[0] = '1.7.0';
            } else if (deployJava.testUsingMimeTypes('1.6')) {
                list[0] = '1.6.0';
            } else if (deployJava.testUsingMimeTypes('1.5')) {
                list[0] = '1.5.0';
            } else if (deployJava.testUsingMimeTypes('1.4.2')) {
                list[0] = '1.4.2';
            } else if (deployJava.browserName2 == 'Safari') {
                if (deployJava.testUsingPluginsArray('1.7.0')) {
                    list[0] = '1.7.0';
                } else if (deployJava.testUsingPluginsArray('1.6')) {
                    list[0] = '1.6.0';
                } else if (deployJava.testUsingPluginsArray('1.5')) {
                    list[0] = '1.5.0';
                } else if (deployJava.testUsingPluginsArray('1.4.2')) {
                    list[0] = '1.4.2';
                }
            }
        }
    }
    if (deployJava.debug) {
        for (var i = 0; i < list.length; ++i) {
            alert('We claim to have detected Java SE ' + list[i]);
        }
    }
    return list;
},installJRE:function(requestVersion) {
    var ret = false;
    if (deployJava.isPluginInstalled()) {
        if (deployJava.getPlugin().installJRE(requestVersion)) {
            deployJava.refresh();
            if (deployJava.returnPage != null) {
                document.location = deployJava.returnPage;
            }
            return true;
        } else {
            return false;
        }
    } else {
        return deployJava.installLatestJRE();
    }
},installLatestJRE:function() {
    if (deployJava.isPluginInstalled()) {
        if (deployJava.getPlugin().installLatestJRE()) {
            deployJava.refresh();
            if (deployJava.returnPage != null) {
                document.location = deployJava.returnPage;
            }
            return true;
        } else {
            return false;
        }
    } else {
        var browser = deployJava.getBrowser();
        var platform = navigator.platform.toLowerCase();
        if ((deployJava.EAInstallEnabled == 'true') && (platform.indexOf('win') != -1) && (deployJava.EarlyAccessURL != null)) {
            deployJava.preInstallJREList = deployJava.getJREs();
            if (deployJava.returnPage != null) {
                deployJava.myInterval = setInterval("deployJava.poll()", 3000);
            }
            location.href = deployJava.EarlyAccessURL;
            return false;
        } else {
            if (browser == 'MSIE') {
                return deployJava.IEInstall();
            } else if ((browser == 'Netscape Family') && (platform.indexOf('win32') != -1)) {
                return deployJava.FFInstall();
            } else {
                location.href = deployJava.getJavaURL +
                                ((deployJava.returnPage != null) ? ('&returnPage=' + deployJava.returnPage) : '') +
                                ((deployJava.locale != null) ? ('&locale=' + deployJava.locale) : '') +
                                ((deployJava.brand != null) ? ('&brand=' + deployJava.brand) : '');
            }
            return false;
        }
    }
},runApplet:function(attributes, parameters, minimumVersion) {
    if (minimumVersion == 'undefined' || minimumVersion == null) {
        minimumVersion = '1.1';
    }
    var regex = "^(\\d+)(?:\\.(\\d+)(?:\\.(\\d+)(?:_(\\d+))?)?)?$";
    var matchData = minimumVersion.match(regex);
    if (deployJava.returnPage == null) {
        deployJava.returnPage = document.location;
    }
    if (matchData != null) {
        var browser = deployJava.getBrowser();
        if ((browser != '?') && ('Safari' != deployJava.browserName2)) {
            if (deployJava.versionCheck(minimumVersion + '+')) {
                deployJava.writeAppletTag(attributes, parameters);
            } else if (attributes && attributes.codebase) {
            	//neil:如果没有安装jre, 下载webreport中的jre
            	deployJava.writeAppletTag(attributes, parameters);
            } else if (deployJava.installJRE(minimumVersion + '+')) {
                deployJava.refresh();
                location.href = document.location;
                deployJava.writeAppletTag(attributes, parameters);
            }
        } else {
            deployJava.writeAppletTag(attributes, parameters);
        }
    } else {
        if (deployJava.debug) {
            alert('Invalid minimumVersion argument to runApplet():' +
                  minimumVersion);
        }
    }
},writeAppletTag:function(attributes, parameters) {
    deployJava.writePluginTag();
	if ($('applet').length > 0) {
		//neil:如果标签已存在，那就不重新生成了，直接用原来的即可
	    $("body").append($('applet'));
	    return;
	}
    if($('#AppletPrinter').length > 0){
        $('#AppletPrinter').remove();
    }
	if (FR.Browser.isIE()) {
		var array = [];
	    var s = "<" + "OBJECT ID='AppletPrinter' name='AppletPrinter' WIDTH='0' HEIGHT='0'" + " CLASSID='clsid:8AD9C840-044E-11D1-B3E9-00805F499D93'";
	    var codeAttribute = false;
	    for (var attribute in attributes) {
	        s += (' ' + attribute + '="' + attributes[attribute] + '"');
	    }
	    s += '>';
	    array[array.length] = s;
	    if (parameters != 'undefined' && parameters != null) {
	        for (var parameter in parameters) {
	            s = '<param name="' + parameter + '" value="' +
	                parameters[parameter] + '">';
	            array[array.length] = s;
	        }
	    }
	    array[array.length] = ('<' + '/' + 'OBJECT' + '>');
	    $("body").append(array.join(""));
	} else {
	    var array = [];
	    var s = '<' + 'applet ';
	    var codeAttribute = false;
	    for (var attribute in attributes) {
	        s += (' ' + attribute + '="' + attributes[attribute] + '"');
	        if (attribute == 'code') {
	            codeAttribute = true;
	        }
	    }
	    if (!codeAttribute) {
	        s += (' code="dummy"');
	    }
	    s += '>';
	    array[array.length] = s;
	    if (parameters != 'undefined' && parameters != null) {
	        var codebaseParam = false;
	        for (var parameter in parameters) {
	            if (parameter == 'codebase_lookup') {
	                codebaseParam = true;
	            }
	            s = '<param name="' + parameter + '" value="' +
	                parameters[parameter] + '">';
	            array[array.length] = s;
	        }
	        if (!codebaseParam) {
	            array[array.length] = ('<param name="codebase_lookup" value="false">');
	        }
	    }
	    array[array.length] = ('<' + '/' + 'applet' + '>');
	    $("body").append(array.join(""));
	}
},versionCheck:function(versionPattern)
{
    var index = 0;
    var regex = "^(\\d+)(?:\\.(\\d+)(?:\\.(\\d+)(?:_(\\d+))?)?)?(\\*|\\+)?$";
    var matchData = versionPattern.match(regex);
    if (matchData != null) {
        var familyMatch = true;
        var patternArray = [];
        for (var i = 1; i < matchData.length; ++i) {
            if ((typeof matchData[i] == 'string') && (matchData[i] != '')) {
                patternArray[index] = matchData[i];
                index++;
            }
        }
        if (patternArray[patternArray.length - 1] == '+') {
            familyMatch = false;
            patternArray.length--;
        } else {
            if (patternArray[patternArray.length - 1] == '*') {
                patternArray.length--;
            }
        }
        var list = deployJava.getJREs();
        for (var i = 0; i < list.length; ++i) {
            if (deployJava.compareVersionToPattern(list[i], patternArray, familyMatch)) {
                return true;
            }
        }
        return false;
    } else {
        alert('Invalid versionPattern passed to versionCheck: ' +
              versionPattern);
        return false;
    }
},isWebStartInstalled:function(minimumVersion) {
    var browser = deployJava.getBrowser();
    if ((browser == '?') || ('Safari' == deployJava.browserName2)) {
        return true;
    }
    if (minimumVersion == 'undefined' || minimumVersion == null) {
        minimumVersion = '1.4.2';
    }
    var retval = false;
    var regex = "^(\\d+)(?:\\.(\\d+)(?:\\.(\\d+)(?:_(\\d+))?)?)?$";
    var matchData = minimumVersion.match(regex);
    if (matchData != null) {
        retval = deployJava.versionCheck(minimumVersion + '+');
    } else {
        if (deployJava.debug) {
            alert('Invalid minimumVersion argument to isWebStartInstalled(): ' + minimumVersion);
        }
        retval = deployJava.versionCheck('1.4.2+');
    }
    return retval;
},getJPIVersionUsingMimeType:function() {
    for (var i = 0; i < navigator.mimeTypes.length; ++i) {
        var s = navigator.mimeTypes[i].type;
        var m = s.match(/^application\/x-java-applet;jpi-version=(.*)$/);
        if (m != null) {
            deployJava.firefoxJavaVersion = m[1];
            if ('Opera' != deployJava.browserName2) {
                break;
            }
        }
    }
},launchWebStartApplication:function(jnlp) {
    return false;
},createWebStartLaunchButtonEx:function(jnlp, minimumVersion) {
    if (deployJava.returnPage == null) {
        deployJava.returnPage = jnlp;
    }
    var url = 'javascript:deployJava.launchWebStartApplication(\'' + jnlp + '\');';
    document.write('<' + 'a href="' + url + '" onMouseOver="window.status=\'\'; ' + 'return true;"><' + 'img ' + 'src="' + deployJava.launchButtonPNG + '" ' + 'border="0" /><' + '/' + 'a' + '>');
},createWebStartLaunchButton:function(jnlp, minimumVersion) {
    if (deployJava.returnPage == null) {
        deployJava.returnPage = jnlp;
    }
    var url = 'javascript:' + 'if (!deployJava.isWebStartInstalled(&quot;' +
              minimumVersion + '&quot;)) {' + 'if (deployJava.installLatestJRE()) {' + 'if (deployJava.launch(&quot;' + jnlp + '&quot;)) {}' + '}' + '} else {' + 'if (deployJava.launch(&quot;' + jnlp + '&quot;)) {}' + '}';
    document.write('<' + 'a href="' + url + '" onMouseOver="window.status=\'\'; ' + 'return true;"><' + 'img ' + 'src="' + deployJava.launchButtonPNG + '" ' + 'border="0" /><' + '/' + 'a' + '>');
},launch:function(jnlp) {
    document.location = jnlp;
    return true;
},isPluginInstalled:function() {
    var plugin = deployJava.getPlugin();
    if (plugin && plugin.jvms) {
        return true;
    } else {
        return false;
    }
},isAutoUpdateEnabled:function() {
    if (deployJava.isPluginInstalled()) {
        return deployJava.getPlugin().isAutoUpdateEnabled();
    }
    return false;
},setAutoUpdateEnabled:function() {
    if (deployJava.isPluginInstalled()) {
        return deployJava.getPlugin().setAutoUpdateEnabled();
    }
    return false;
},setInstallerType:function(type) {
    deployJava.installType = type;
    if (deployJava.isPluginInstalled()) {
        return deployJava.getPlugin().setInstallerType(type);
    }
    return false;
},setAdditionalPackages:function(packageList) {
    if (deployJava.isPluginInstalled()) {
        return deployJava.getPlugin().setAdditionalPackages(packageList);
    }
    return false;
},setEarlyAccess:function(enabled) {
    deployJava.EAInstallEnabled = enabled;
},isPlugin2:function() {
    if (deployJava.isPluginInstalled()) {
        if (deployJava.versionCheck('1.6.0_10+')) {
            try {
                return deployJava.getPlugin().isPlugin2();
            } catch(err) {
            }
        }
    }
    return false;
},allowPlugin:function() {
    deployJava.getBrowser();
    var ret = ('Safari' != deployJava.browserName2 && 'Opera' != deployJava.browserName2);
    return ret;
},getPlugin:function() {
    deployJava.refresh();
    var ret = null;
    if (deployJava.allowPlugin()) {
        ret = document.getElementById('deployJavaPlugin');
    }
    return ret;
},compareVersionToPattern:function(version, patternArray, familyMatch) {
    var regex = "^(\\d+)(?:\\.(\\d+)(?:\\.(\\d+)(?:_(\\d+))?)?)?$";
    var matchData = version.match(regex);
    if (matchData != null) {
        var index = 0;
        var result = [];
        for (var i = 1; i < matchData.length; ++i) {
            if ((typeof matchData[i] == 'string') && (matchData[i] != ''))
            {
                result[index] = matchData[i];
                index++;
            }
        }
        var l = Math.min(result.length, patternArray.length);
        if (familyMatch) {
            for (var i = 0; i < l; ++i) {
                if (result[i] != patternArray[i]){
                	return false;
                }
            }
            return true;
        } else {
            for (var i = 0; i < l; ++i) {
                if (result[i] < patternArray[i]) {
                    return false;
                } else if (result[i] > patternArray[i]) {
                    return true;
                }
            }
            return true;
        }
    } else {
        return false;
    }
},getBrowser:function() {
    if (deployJava.browserName == null) {
        var browser = navigator.userAgent.toLowerCase();
        if (deployJava.debug) {
            alert('userAgent -> ' + browser);
        }
        if (browser.indexOf('msie') != -1) {
            deployJava.browserName = 'MSIE';
            deployJava.browserName2 = 'MSIE';
        } else if (browser.indexOf('firefox') != -1) {
            deployJava.browserName = 'Netscape Family';
            deployJava.browserName2 = 'Firefox';
        } else if (browser.indexOf('chrome') != -1) {
            deployJava.browserName = 'Netscape Family';
            deployJava.browserName2 = 'Chrome';
        } else if (browser.indexOf('safari') != -1) {
            deployJava.browserName = 'Netscape Family';
            deployJava.browserName2 = 'Safari';
        } else if (browser.indexOf('mozilla') != -1) {
            deployJava.browserName = 'Netscape Family';
            deployJava.browserName2 = 'Other';
        } else if (browser.indexOf('opera') != -1) {
            deployJava.browserName = 'Netscape Family';
            deployJava.browserName2 = 'Opera';
        } else {
            deployJava.browserName = '?';
            deployJava.browserName2 = 'unknown';
        }
        if (deployJava.debug) {
            alert('Detected browser name:' + deployJava.browserName + ', ' + deployJava.browserName2);
        }
    }
    return deployJava.browserName;
},testUsingActiveX:function(version) {
    var objectName = 'JavaWebStart.isInstalled.' + version + '.0';
    if (!ActiveXObject) {
        if (deployJava.debug) {
            alert('Browser claims to be IE, but no ActiveXObject object?');
        }
        return false;
    }
    try {
        return(new ActiveXObject(objectName) != null);
    } catch(exception) {
        return false;
    }
},testForMSVM:function() {
    var clsid = '{08B0E5C0-4FCB-11CF-AAA5-00401C608500}';
    if (typeof oClientCaps != 'undefined') {
        var v = oClientCaps.getComponentVersion(clsid, "ComponentID");
        if ((v == '') || (v == '5,0,5000,0')) {
            return false;
        } else {
            return true;
        }
    } else {
        return false;
    }
},testUsingMimeTypes:function(version) {
    if (!navigator.mimeTypes) {
        if (deployJava.debug) {
            alert('Browser claims to be Netscape family, but no mimeTypes[] array?');
        }
        return false;
    }
    for (var i = 0; i < navigator.mimeTypes.length; ++i) {
        s = navigator.mimeTypes[i].type;
        var m = s.match(/^application\/x-java-applet\x3Bversion=(1\.8|1\.7|1\.6|1\.5|1\.4\.2)$/);
        if (m != null) {
            if (deployJava.compareVersions(m[1], version)) {
                return true;
            }
        }
    }
    return false;
},testUsingPluginsArray:function(version) {
    if ((!navigator.plugins) || (!navigator.plugins.length)) {
        return false;
    }
    var platform = navigator.platform.toLowerCase();
    for (var i = 0; i < navigator.plugins.length; ++i) {
        s = navigator.plugins[i].description;
        if (s.search(/^Java Switchable Plug-in (Cocoa)/) != -1) {
            if (deployJava.compareVersions("1.5.0", version)) {
                return true;
            }
        } else if (s.search(/^Java/) != -1) {
            if (platform.indexOf('win') != -1) {
                if (deployJava.compareVersions("1.5.0", version) || deployJava.compareVersions("1.6.0", version)) {
                    return true;
                }
            }
        }
    }
    if (deployJava.compareVersions("1.5.0", version)) {
        return true;
    }
    return false;
},IEInstall:function() {
    location.href = deployJava.getJavaURL +
                    ((deployJava.returnPage != null) ? ('&returnPage=' + deployJava.returnPage) : '') +
                    ((deployJava.locale != null) ? ('&locale=' + deployJava.locale) : '') +
                    ((deployJava.brand != null) ? ('&brand=' + deployJava.brand) : '') +
                    ((deployJava.installType != null) ? ('&type=' + deployJava.installType) : '');
    return false;
},done:function(name, result) {
},FFInstall:function() {
    location.href = deployJava.getJavaURL +
                    ((deployJava.returnPage != null) ? ('&returnPage=' + deployJava.returnPage) : '') +
                    ((deployJava.locale != null) ? ('&locale=' + deployJava.locale) : '') +
                    ((deployJava.brand != null) ? ('&brand=' + deployJava.brand) : '') +
                    ((deployJava.installType != null) ? ('&type=' + deployJava.installType) : '');
    return false;
},compareVersions:function(installed, required) {
    var a = installed.split('.');
    var b = required.split('.');
    for (var i = 0; i < a.length; ++i) {
        a[i] = Number(a[i]);
    }
    for (var i = 0; i < b.length; ++i) {
        b[i] = Number(b[i]);
    }
    if (a.length === 2) {
        a[2] = 0;
    }
    if (a[0] > b[0]){
    	return true;
    }
    if (a[0] < b[0]){
    	return false;
    }
    if (a[1] > b[1]){
    	return true;
    }
    if (a[1] < b[1]){
    	return false;
    }
    if (a[2] > b[2]){
    	return true;
    }
    if (a[2] < b[2]){
    	return false;
    }
    return true;
},enableAlerts:function() {
    deployJava.browserName = null;
    deployJava.debug = true;
},poll:function() {
    deployJava.refresh();
    var postInstallJREList = deployJava.getJREs();
    if ((deployJava.preInstallJREList.length === 0) && (postInstallJREList.length !== 0)) {
        clearInterval(deployJava.myInterval);
        if (deployJava.returnPage != null) {
            location.href = deployJava.returnPage;
        }
        ;
    }
    if ((deployJava.preInstallJREList.length !== 0) && (postInstallJREList.length !== 0) && (deployJava.preInstallJREList[0] != postInstallJREList[0])) {
        clearInterval(deployJava.myInterval);
        if (deployJava.returnPage != null) {
            location.href = deployJava.returnPage;
        }
    }
},writePluginTag:function() {
    if(deployJava.isWritePluginTag){
        return;
    }
    deployJava.isWritePluginTag = true;
    var browser = deployJava.getBrowser();
    if (browser == 'MSIE') {
    	//neil: 偷懒偷懒, 临时处理, 有问题再来找我, 这边正规写法是搞个applet去取下客户端jre的version, 然后在1.6.10-19之间的用0000, 其他所有用0001
    	//1.6.20+支持both, 1.7.4之后只支持0001.
        $("body").append('<' + 'object classid="clsid:CAFEEFAC-DEC7-0000-0001-ABCDEFFEDCBA" ' + 'id="deployJavaPlugin" width="0" height="0">' + '<' + '/' + 'object' + '>');
    } else if (browser == 'Netscape Family' && deployJava.allowPlugin()) {
        deployJava.writeEmbedTag();
    }
},refresh:function() {
    navigator.plugins.refresh(false);
    var browser = deployJava.getBrowser();
    if (browser == 'Netscape Family' && deployJava.allowPlugin()) {
        var plugin = document.getElementById('deployJavaPlugin');
        if (plugin == null) {
            deployJava.writeEmbedTag();
        }
    }
},writeEmbedTag:function() {
    var written = false;
    var $plugin;
    if (navigator.mimeTypes != null) {
        for (var i = 0; i < navigator.mimeTypes.length; i++) {
            if (navigator.mimeTypes[i].type == deployJava.mimeType) {
                if (navigator.mimeTypes[i].enabledPlugin) {
                    $plugin=('<' + 'embed id="deployJavaPlugin" type="' +
                                   deployJava.mimeType + '" hidden="true"/>');
                    written = true;
                }
            }
        }
        if (!written){
	        for (var i = 0; i < navigator.mimeTypes.length; i++) {
	            if (navigator.mimeTypes[i].type == deployJava.oldMimeType) {
	                if (navigator.mimeTypes[i].enabledPlugin) {
	                    $plugin=('<' + 'embed id="deployJavaPlugin" type="' +
	                                   deployJava.oldMimeType + '" hidden="true" />');
	                }
	            }
	        }
        }
        if($plugin){
            $("body").append($plugin);
        }
    }
},do_initialize:function() {
//    deployJava.writePluginTag();
    if (deployJava.locale == null) {
        var loc = null;
        if (loc == null){
	        try {
	            loc = navigator.userLanguage;
	        } catch(err) {
	        }
        }
        if (loc == null){
		    try {
		        loc = navigator.systemLanguage;
		    } catch(err) {
		    }
		}
        if (loc == null){
	        try {
	            loc = navigator.language;
	        } catch(err) {
	        }
        }
        if (loc != null) {
            loc.replace("-", "_")
            deployJava.locale = loc;
        }
    }
}};
deployJava.do_initialize();
/**
 * Created by jinsihou on 15/12/11.
 */

/**
 * 引擎前端插件入口
 */
FR.Report = FR.Report || {};

FR.Report.Plugin = FR.Report.Plugin || {};

/**
 * 在新窗口打开上报和审核，而不是在原窗口刷新
 */
FR.Report.Plugin.OpenOnNewTabpane = {};

/**
 * 报表页面对象的接口
 */
FR.Report.Plugin.Panel = FR.Report.Plugin.Panel || {};

/**
 * 页面对象触发的事件
 */
FR.Report.Plugin.Panel.Events = [];

/**
 * 打印的一些自定义实现
 */
FR.Report.Plugin.Print = FR.Report.Plugin.Print || {};

/**
 * 填报的一些自定义实现
 * @type {{}}
 */
FR.Report.Plugin.Write = FR.Report.Plugin.Write || {};

/**
 * 后台自适应插件的接口
 */
FR.Report.Plugin.Fit = FR.Report.Plugin.Fit || {};

/**
 * 自定义滚动条插件的接口
 */
FR.Report.Plugin.ScrollProcessor = {
    version: 1.0
};

/**
 * 新导出方式接口
 */
FR.Report.Plugin.XHR2FileSaveProcessor = {
    version: 1.0
};

/**
 * 报表中邮件弹窗相关的插件接口
 * @example
 * $.extend(FR.Report.Plugin.Email, {
 *    //生成并打开邮件弹窗,options中传入sessionID: var sessionID = o.sessionID || '';
 *    showEmailDialog: function (options) {
 *    }
 * });
 */
FR.Report.Plugin.Email = FR.Report.Plugin.Email || {};

/**
 * 组件过场动画接口
 */
FR.Report.Plugin.AnimateProcessor = {
    version: 1.0,
    item: {
        action: function (target) {
        }
    }
};

(function($){
    $.extend(jQuery.easing,{
        easeOutQuint: function (x, t, b, c, d) {
            return c*((t=t/d-1)*t*t*t*t + 1) + b;
        }
    });

    $.fn.hScrollPane=function(settings){
        settings=$.extend(true,{},$.fn.hScrollPane.defaults,settings);
        this.each(function(){
            var container=$(this),
                mover=container.find(settings.mover),
                w=container.width(),
                c=settings.moverW || mover.width(),
                dragbar=(container.find(".hScrollPane_dragbar").length===0 && c>w ) ? container.append('<div class="hScrollPane_dragbar"><div class="hScrollPane_draghandle"></div></div>').find(".hScrollPane_dragbar") : container.find(".hScrollPane_dragbar"),//避免多次初始化时的重复append;
                handle=dragbar.find(".hScrollPane_draghandle");

            if(settings.showArrow){
                container.append('<a href="###" class="hScrollPane_leftarrow"></a><a href="###" class="hScrollPane_rightarrow"></a>');
                leftArrow=container.find(".hScrollPane_leftarrow");
                rightArrow=container.find(".hScrollPane_rightarrow");
                dragbar.css({
                    width:container.width()-leftArrow.outerWidth()*2,
                    left:leftArrow.outerWidth()
                });
                leftArrow.unbind();
                rightArrow.unbind();
            }else{
                dragbar.css("width",container.width());
            }
            mover.stop().css("left","0px");
            handle.css({
                top:settings.top,
                height:parseInt(settings.height) - 2
            });
            container.unbind();//避免多次初始化时的事件重复绑定;
            handle.unbind();
            dragbar.unbind();

            handle.stop().css({
                width:(w/c)*w >settings.handleMinWidth ? (w/c)*w : settings.handleMinWidth,
                left:0
            });

            if(c>w){
                dragbar.show();
            }else{
                dragbar.hide();
                return false;
            }

            var maxlen=parseInt(dragbar.width())-parseInt(handle.outerWidth());

            dragbar.bind("click",function(e){
                var flag=e.pageX>handle.offset().left+handle.outerWidth() ? -1 : 1;
                $.fn.hScrollPane.move(settings,mover,handle,w,c,maxlen,flag);
            });

            handle.bind("mousedown",function(e){
                var x=e.pageX;
                var hx=parseInt(handle.css("left"));
                if(settings.handleCssAlter){$(this).addClass(settings.handleCssAlter);}

                $(document).bind("mousemove",function(e){
                    var left=e.pageX-x+hx<0?0:(e.pageX-x+hx>=maxlen?maxlen:e.pageX-x+hx);
                    handle.stop().css({left:left});
                    if(settings.easing){
                        mover.stop().animate({
                            left:-left/maxlen*(c-w)
                        },{duration:1500,easing:'easeOutQuint',queue:false});
                    }else{
                        mover.css({left:-left/maxlen*(c-w)});
                    }

                    return false;
                });
                $(document).bind("mouseup",function(){
                    if(settings.handleCssAlter){handle.removeClass(settings.handleCssAlter);}
                    $(this).unbind("mousemove");
                });
                return false;
            }).click(function(){
                    return false;
                });

            if(settings.dragable){
                mover.bind("mousedown",function(e){
                    var x=e.pageX;
                    $(this).bind("mousemove",function(e){
                        $.fn.hScrollPane.move(settings,mover,handle,w,c,maxlen,x,e.pageX);
                        return false;
                    });
                    $(document).bind("mouseup",function(){
                        mover.unbind("mousemove");
                    })
                })
            }

            if(settings.mousewheel.bind){
                container.bind("mousewheel",function(event, delta){
                    $.fn.hScrollPane.move(settings,mover,handle,w,c,maxlen,delta);
                    return false;
                });
            }

            if(settings.showArrow){
                leftArrow.click(function(){
                    $.fn.hScrollPane.move(settings,mover,handle,w,c,maxlen,1);
                    return false;
                }).focus(function(){this.blur();});

                rightArrow.click(function(){
                    $.fn.hScrollPane.move(settings,mover,handle,w,c,maxlen,-1);
                    return false;
                }).focus(function(){this.blur();});
            }

            this.ondragstart=function(){return false;};
            this.onselectstart=function(){return false;};

        })
    };

    $.fn.hScrollPane.defaults = {
        showArrow:false,
        handleMinWidth:0,
        dragable:true,
        easing:true,
        mousewheel:{bind:true,moveLength:300}
    };

    $.fn.hScrollPane.move=function(settings,mover,handle,w,c,maxlen,x,nx){
        if(arguments.length===7){
            var left=parseInt(mover.css("left"))+x*settings.mousewheel.moveLength;
        }else{
            var left=parseInt(mover.css("left"))+((nx-x)/w)*(c-w);
        }
        left=left.toFixed(0);
        left=left>0?0:left<w-c?w-c:left;
        var handle_left=(left/(w-c))*maxlen;

        if(settings.easing){
            mover.stop().animate({
                left:left
            },{duration:1500,easing:'easeOutQuint',queue:false});

            handle.stop().animate({
                left:handle_left
            },{duration:1500,easing:'easeOutQuint',queue:false});
        }else{
            mover.stop().animate({
                left:left
            },{duration:5,queue:false});

            handle.css({left:handle_left});
        }
    }
})(jQuery);
// FR.Widget .start

/**
 * 表单,参数面板,图表(selector属性，TODO 最好能独立出去)
 * @class FR.Form
 * @extends FR.OB
 */
FR.Form = FR.extend(FR.OB, /**@class FR.Form*/{
    /**
     * @private
     */
    _init: function () {
        FR.Form.superclass._init.apply(this, arguments);
        this.name_widgets = {};
        var self = this;
        var selector = this.options.selector;
        if (typeof selector == "string") {
            var widget;
            $(selector, this.options.renderEl).each(function (idx, dom) {
                if (dom.hasInit !== true) {
                    widget = self.addWidget($(dom));
                    if (widget.options.widgetName != null) {
                        self.initLinkWidgetEvent(widget);
                    }
                }
            })
        }
    },

    /**
     * 初始化dom节点上的控件
     * @param {jQuery} $dom dom节点
     * @returns {FR.Widget} 返回该dom节点上生成的控件
     */
    addWidget: function ($dom) {
        // 加了个属性，防止联动的时候已经初始化了控件，表单里初始化又加了一次。
        $dom[0].hasInit = true;
        var widgetAttr = $dom.attr('widget');
        if (!widgetAttr && $dom.attr('widget-control')) {
            var idx = $dom.attr('idx');
            var id = $dom.attr('id');
            widgetAttr = this.editConfig[idx][id];
        }
        var editorConfig = FR.jsonDecode(widgetAttr);
        var temp_width = $dom.attr("widgetWidth");
        temp_width = temp_width > 0 ? temp_width : $dom.attr("width");
        var temp_height = $dom.attr("widgetHeight");
        temp_height = temp_height > 0 ? temp_height : $dom.attr("height");
        editorConfig.width = temp_width;
        editorConfig.height = temp_height;
        $.extend(editorConfig, {
            form: this
        });
        var $editor = $("<div/>").appendTo($dom);
        editorConfig.renderEl = $editor;
        if (editorConfig['jspath']) {
            var arr = editorConfig['jspath'].split(";");
            $.each(arr, function (i, item) {
                FR.$import(item, "js");
            });
        }
        if (editorConfig['csspath']) {
            var arr = editorConfig['csspath'].split(";");
            $.each(arr, function (i, item) {
                FR.$import(item, "css");
            });
        }
        var editorEl = FR.createWidget(editorConfig);
        return editorEl;
    },

    /**
     * 初始化和给定控件相关联的其他控件，主要用于联动
     * @param {FR.Widget} widget 给定的控件
     */
    initLinkWidgetEvent: function (widget) {
        if (!widget || !widget.options) {
            return;
        }
        var dependence = widget.options.dependence;
        var self = this;
        if (FR.isArray(dependence)) {
            $.each(dependence, function (idx, p) {
                var dependenceWidget = self.getWidgetByName(p);
                if (dependenceWidget != null && dependenceWidget != widget) {
                    if (!dependenceWidget.$linkWidget) {
                        dependenceWidget.$linkWidget = {
                            data: {},
                            value: {}
                        };
                        dependenceWidget.on(FR.Events.AFTEREDIT, function () {
                            self.fireWidgetValueChanged(dependenceWidget);
                        });
                    }
                    dependenceWidget.$linkWidget["data"][widget.options.widgetName] = widget;
                }
            })
        }
    },

    /**
     * 通知指定的控件值变化了，这个时候需要把关联了这个控件的其他控件都重置
     * @param {FR.Widget} widget 指定的控件
     */
    fireWidgetValueChanged: function (widget) {
        for (var w in widget.$linkWidget["data"]) {
            widget.$linkWidget["data"][w].reset();
        }
    },

    /**
     * 获取表单控件中指定名字的控件
     * @param {String} name 要获取的控件的名字
     * @returns {FR.Widget} 指定名字的控件,如果没有该名字的控件则返回null
     */
    getWidgetByName: function (name) {
        if (!name) {
            return null;
        }
        if (name.startWith("$")) {
            name = name.substring(1);
        }
        return this.name_widgets[name.toUpperCase()];
    },

    /**
     * 处理联动
     * @param variable {JSON} 联动参数
     * @returns {*}
     */
    resolveVariable: function (variable) {
        var res;
        if ($.isFunction(this.options.resolveVariable)) {
            res = this.options.resolveVariable(variable);
        }
        var depWidget;
        if (res == null) {
            depWidget = this.getWidgetByName(variable);
            //参数界面初始化时，控件未生成，getWidgetByName取不到相应控件，这里用form的items取控件值。
            if(depWidget == null){
                res = this._getValueByName(variable);
            }else{
                res =depWidget.getValue();
            }
        }
        return res;
    },
    /**
     * 从form的items中获取控件值
     * @param item 控件
     * @param name 空间名
     * @returns {*} 控件值
     * @private
     */
    _getValueByName:function(name){
        var items = this.options.items;

        if (!name || !items) {
            return null;
        }
        var len = items.length;
        var res;
        if (name.startWith("$")) {
            name = name.substring(1);
        }
        for (var i = 0; i < len; i++) {
            if (items[i].widgetName == name.toUpperCase()) {
                var optionItem = items[i];
                //华为升级bug日期控件前后台的值格式不一，后台使用格式化结果，711加入_showvalue()后，前台传递的是{date_mill:34211231的json格式}后台根据该参数值查不到数据
                res = this._dealWithValueFormat(optionItem);
                if (res) {
                    return res;
                }
            }
        }
    },
    _dealWithValueFormat: function (optionItem) {
        if (!optionItem) {
            return null;
        }
        var value;
        value = optionItem.value;
        if(value && value.date_milliseconds){
            var  milliseconds = value.date_milliseconds;
            if(optionItem.format){
                return FR.contentFormat(value.date_milliseconds,'D'+ optionItem.format);
            }
        }
        return value;


    },
    /**
     * 校验
     * @returns {Boolean} 返回是否符合规则
     */
    verify: function () {
        var isValidate = true
        for (var wn in this.name_widgets) {
            var widget = this.name_widgets[wn];
            // TODO carl:暂时判断是否有这个方法,没有肯定是不需要校验的
            // shoc:去掉widget.isVisible() && widget.isEnabled()条件，防止不可用或者不可见的绕过检验，bug27069
            if ($.isFunction(widget.isValidate) && !widget.isValidate()) {
                FR.Msg.toast(widget.errorMsg);
                isValidate = false;
            }
        }

        return isValidate;
    },

    collectionValue: function (data, isParamTemplate) {
        var collection = {};
        for (var w in this.name_widgets) {
            var editor = this.name_widgets[w];
            if (!(editor.options.needSubmit === true)) {
                continue;
            }
            if (editor.options.widgetName) {
                var val = editor.getValue(isParamTemplate);
                // 控件中有%的在这里转码下,不然到后台解码会出问题
                val = FR.encodePrecentPlus(val);
                if (val == undefined) {
                    val = null;
                }
                collection[editor.options.widgetName.toUpperCase()] = val;
            }
        }
        if (data) {
            $.each(data, function (i, item) {
                collection[i] = item;
            });
        }
        return FR.jsonEncode(collection);
    },

    /**
     * 提交入库
     * @param {JSON} o 配置属性
     * @param {String} o.xmlconf xml配置
     * @param {Function} o.callback 回调函数
     * @param {Object} o.feedbackMap 回调对象
     * @param {JSON} target 目标对象
     */
    dbCommit: function (o, target) {
        if (_g().saveReport) {
            _g().saveReport((function () {
                this.formSubmit({
                    url: FR.servletURL + "?op=dbcommit",
                    data: {
                        location: target
                            ? target.options.location
                            : null,
                        sheetNum: _g().selectedIndex,
                        xmlconf: o.xmlconf,
                        callback: o.callback,
                        feedbackMap: o.feedbackMap,
                        sessionID: _g().currentSessionID||_g().sessionID
                    }
                });
            }).createDelegate(this));
        } else {
            this.formSubmit({
                url: FR.servletURL + "?op=dbcommit",
                data: {
                    xmlconf: o.xmlconf,
                    callback: o.callback,
                    feedbackMap: o.feedbackMap,
                    sessionID: _g().currentSessionID||_g().sessionID
                }
            });
        }
    },

    /**
     * 表单提交
     */
    formSubmit: function () {
        // 检验参数面板控件值
        if (!this.verify()) {
            if (this.QueryBtn) {
                this.QueryBtn.enable();
            }
            return;
        }
        // 填报页面重载前检验是否有未提交的数据
        if (_g() && _g().options && _g().options.type == 'write') {
            _g().stopEditing();
            if (_g().isDirtyPage() && _g().options.unloadCheck !== false) {
                if (!confirm(FR.i18nText('FR-Engine_Unload_Check_Msg') + "!\n" + FR.i18nText('FR-Engine_SQLWizard-would_you_like_to_continue') + "？")) {
                    if (this.QueryBtn) {
                        this.QueryBtn.enable();
                    }
                    return;
                }
            }
        }
        var config = arguments[0];
        if (config.url == null) {
            return;
        }
        var o = this.config = $.extend({
            asyn: true
        }, config);
        this.$sform = $($('.form-submit', this.element)[0]);
        var self = this;
        if (o.asyn) {
            FR.ajax({
                url: o.url,
                type: "POST",
                data: {
                    __parameters__: this.collectionValue(o.data)
                },
                complete: function (res, status) {
                    var response = FR.jsonDecode(res.responseText);
                    if (o.callback) {
                        o.callback.call(self, res, status);
                    }
                    if (response.callback) {
                        res.responseText = response.oldres;
                        response.callback.call(self, res, status);
                    }
                    self._fireSubmitEvents(status);
                }
            });
        } else {
            this.$sform.attr('method', 'post');
            this.$sform.attr('action', config.url);
            if (config.target) {
                this.$sform.attr('target', config.target);
            }

            if (!this.$sform_hidden) {
                this.$sform_hidden = $("<input name = '__parameters__' type='hidden'/>")
                    .appendTo(this.$sform);
                this.$sform_hidden.attr('value', FR.cjkEncode(this
                    .collectionValue(o.data)));
            }
            this.$sform.submit();
        }
    },
    /**
     * 控件事件－发送邮件
     * @param {JSON} mail 邮件信息对象
     */
    sentMail: function (mail) {
        FR.ajax({
            url: FR.servletURL,
            type: 'POST',
            async: false,
            data: {
                op: 'fr_email',
                cmd: 'sent_email',
                sessionID: FR.SessionMgr.getSessionID(),
                mailXML: mail.xmlconf,
                paraMap: mail.paraMap || {},
                __parameters__: this.collectionValue()
            }
        });
    },

    /**
     * 自定义提交
     * @param {JSON} conf 配置信息
     */
    customSubmit: function (conf) {
        FR.ajax({
            url: FR.servletURL,
            type: 'POST',
            async: false,
            data: {
                op: 'customevent',
                reportIndex: _g().curLGP.idx,
                sessionID: FR.SessionMgr.getSessionID(),
                xmlconf: conf.xmlconf,
                reportXML: _g().generateReportXML(true),
                paraMap: conf.paraMap || {}
            }
        })
    },
    /**
     * 触发提交事件,包括提交成功,提交失败,提交完成事件
     * @param {String} status 提交是否成功的结果
     * @private
     */
    _fireSubmitEvents: function (status) {
        if (status == 'success') {
            this.fireEvent(FR.Events.SS);
        } else {
            this.fireEvent(FR.Events.SF);
        }
        this.fireEvent(FR.Events.SC);
    },

    /**
     * 根据控件名获取控件值
     * @param {String} widgetName 控件名
     * @returns {*} 控件值
     */
    getValueByName: function (widgetName) {
        var widget = this.getWidgetByName(widgetName);
        if (widget && widget.getValue) {
            return widget.getValue();
        }
    },

    /**
     * 将控件集合中的所有控件设置可见
     * @param {Array} widgetNames  控件名集合
     * @param {Boolean} label  控件是否可见
     */
    visible: function (widgetNames, label) {
        if ($.isArray(widgetNames)) {
            for (var i = 0, len = widgetNames.length; i < len; i++) {
                var widget = this.getWidgetByName(widgetNames[i]);
                if (widget) {
                    widget.visible(label);
                }
            }
        }
    },

    /**
     * 将控件集合中的所有控件设置不可见
     * @param {Array} widgetNames  控件名集合
     * @param {Boolean} label 控件是否可见
     */
    invisible: function (widgetNames, label) {
        if ($.isArray(widgetNames)) {
            for (var i = 0, len = widgetNames.length; i < len; i++) {
                var widget = this.getWidgetByName(widgetNames[i]);
                if (widget) {
                    widget.invisible(label);
                }
            }
        }
    }
});
$.shortcut("fr_form", FR.Form);

/**
 * 表单
 * @class FR.contentForm
 * @extends FR.Form
 */
FR.contentForm = FR.extend(FR.Form, /**@class FR.contentForm*/{

    _init: function () {
        this.name_widgets = {};
        this.datakey_widgets = [];
        this.options.form = this;
        this.sessionID = this.options.widgetUrl ? this.options.widgetUrl.getQuery('sessionID') : this.options.sessionID;
        this.content = this.createConfig2Form();
        this.content.fireEvent(FR.Events.AFTERINIT);
    },

    /**
     * 初始化表单中的控件
     */
    createConfig2Form: function () {
        var options = this.options;
        var initListenerListHere = this.afterInitEventList == undefined;
        if (initListenerListHere) {
            this.afterInitEventList = {};
        }
        var config = this._createConfig4Form(options);
        var content = FR.createWidget(config);
        this.rootWidget = content;
        for (var i in content.options.resultWidgets) {
            this.add(content.options.resultWidgets[i]);
        }
        this.name_widgets = content.options.resultWidgets;
        var self = this;
        $.each(this.name_widgets, function (i, widget) {
            if (widget.options.widgetName != null) {
                self.initLinkWidgetEvent(widget);
            }
        });
        if (initListenerListHere) {
            var afterInitEventList = this.afterInitEventList;
            delete this.afterInitEventList;
            content.on(FR.Events.AFTERINIT, function () {
                for (var w in afterInitEventList) {
                    var event = afterInitEventList[w];
                    var widget = self.getWidgetByName(w);
                    if (widget && FR.isArray(event)) {
                        for (var i = 0; i < event.length; i++) {
                            var fns = event[i].action
                                .createDelegate(event[i].target
                                    ? event[i].target
                                    : widget);
                            if (fns.apply(widget) === false) {
                                break;
                            }
                        }
                        delete afterInitEventList[w];
                    }
                }
            });
            var events = FR.Form.Plugin.Panel.Events;
            if ($.isArray(events)) {
                for (var i = 0, len = events.length; i < len; i ++) {
                    var evt = events[i];
                    content.once(evt.name, evt.action.call(this));
                }
            }
        }
        return content;
    },

    /**
     * 获取控件结构树上根节点上的控件
     * @returns {*} 返回控件对象
     */
    getRootWidget: function () {
        return this.rootWidget;
    },

    /**
     * 在表单中给每个控件加上this.options.form属性，并记录初始化后事件
     * @param {JSON} config 控件的配置属性
     * @returns {*} 返回控件的新配置属性
     * @private
     */
    _createConfig4Form: function (config) {
        config.form = this;
        if (config.items) {
            for (var i = 0; i < config.items.length; i++) {
                var childConfig;
                if (config.items[i].el) {
                    childConfig = config.items[i].el;
                } else if (config.items[i]) {
                    childConfig = config.items[i];
                }
                if (childConfig) {
                    this._createConfig4Form(childConfig);
                }
            }
        }
        if (config.listeners != null) {
            for (var i = 0; i < config.listeners.length; i++) {
                var lis = config.listeners[i];
                if (lis.eventName == "afterinit") {
                    if (config.form.afterInitEventList[config.widgetName] == null) {
                        config.form.afterInitEventList[config.widgetName] = [];
                    }
                    config.listeners.removeWeakEqual(lis);
                    i--;
                    config.form.afterInitEventList[config.widgetName].push(lis);
                }
            }
        }
        return config;
    },

    /**
     * 添加控件，记录数据绑定的控件，并为每个控件都添加load方法
     * @param {FR.Widget} widget 控件对象
     */
    add: function (widget) {
        if (widget.options.Databinding) {
            var tempDataBinding = widget.options.Databinding;
            tempDataBinding.widget = widget;
            this.datakey_widgets.push(tempDataBinding);
        }
        var form = this;
        // 给form中每个控件个load()方法，调用后可以重新加载数据；
        widget.load = function () {
            form.loadContentData(this);
        }
    },

    /**
     * 表单中使用getWidgetByCell直接抛错
     */
    getWidgetByCell: function () {
        throw (" \"getWidgetByCell\" is not a function in form");
    },

    /**
     * 表单页面全部处理完后，包括事件，应该自动doLayout下
     * @private
     */
    _confirmEvents: function () {
        this.fireEvent(FR.Events.AFTERINIT);
        this.doLayout();
    },

    /**
     * 初始化联动控件的事件
     * @param {FR.Widget} widget 要建立联动的控件
     */
    initLinkWidgetEvent: function (widget) {
        if (!widget || !widget.options) {
            return;
        }
        FR.contentForm.superclass.initLinkWidgetEvent.apply(this, arguments);
        var dependence = widget.options.widgetExeDependence;
        var self = this;
        if (FR.isArray(dependence)) {
            $.each(dependence, function (idx, p) {
                var dependenceWidget = self.getWidgetByName(p);
                if (dependenceWidget != null && dependenceWidget != widget) {
                    if (!dependenceWidget.$linkWidget) {
                        dependenceWidget.$linkWidget = {
                            data: {},
                            value: {}
                        };
                        dependenceWidget.on(FR.Events.AFTEREDIT, function () {
                            self.fireWidgetValueChanged(dependenceWidget)
                        });
                    }
                    dependenceWidget.$linkWidget["value"][widget.options.widgetName] = widget;
                }
            })
        }
    },

    /**
     * 控件联动触发事件
     * ju：用户停止输入600毫秒之后再执行改方法
     * @param {FR.Widget} widget 控件对象
     */
    fireWidgetValueChanged: _.debounce(function (widget) {
        if (!widget.$linkWidget) {
            return;
        }
        for (var w in widget.$linkWidget["data"]) {
            widget.$linkWidget["data"][w].reset();
        }
        var para = FR.jsonDecode(this.collectionValue());
        var widgetList = {};
        var itemsList = {
            widgetNameList : [],
            chartWidgets : [],
            elementCaseWidgets : []
        };
        var widgetNameList = [];
        var chartWidgets = [];
        var elementCaseWidgets = [];
        //预处理联动的组件, 将其放入对应的list中
        this.pushLinkWidgetIntoList(widget, widgetList, itemsList, para);
        //计算联动的控件
        this.executeWidgets(itemsList.widgetNameList, widgetList, para);
        //计算联动的图表
        this.executeCharts(itemsList.chartWidgets);
        //计算联动的报表块
        this.executeElements(itemsList.elementCaseWidgets);
    }, 600),
    pushLinkWidgetIntoList: function (widget, widgetList, itemsList, para) {
        var linkWidget = widget.$linkWidget;
        if (!linkWidget) {
            return;
        }

        var widgetNameList = itemsList.widgetNameList;
        var chartWidgets = itemsList.chartWidgets;
        var elementCaseWidgets = itemsList.elementCaseWidgets;

        for (var w in linkWidget["value"]) {
            var _widget = linkWidget["value"][w];
            if (_widget.xtype == "chartwidget") {
                // 图表.setValue的方式行不通，因为图表需要width,heigt。想不到好的办法
                chartWidgets.push(_widget);
            } else if (_widget.xtype == "elementcase"){
                elementCaseWidgets.push(_widget);
            } else {
                widgetList[w] = _widget;
                widgetNameList.push(w);
                para[w] = "";
                this.pushLinkWidgetIntoList(_widget, widgetList, itemsList, para);
            }
        }
        for (var w in linkWidget["data"]) {
            var _widget = linkWidget["data"][w];
            widgetNameList.push(w);
            para[w] = "";
            this.pushLinkWidgetIntoList(_widget, widgetList, itemsList, para);
        }
    },

    executeWidgets: function (widgetNameList, widgetList, para) {
        if (widgetNameList.length === 0) {
            return;
        }
        var self = this;
        var sourceUrl = FR.buildServletUrl({
            _: new Date().getTime(),
            op: 'fr_form',
            cmd: 'form_getsource',
            sessionID: this.options.form.sessionID,
            __widgetname__: widgetNameList
        });
        FR.ajax({
            url: sourceUrl,
            type: 'POST',
            async: false,
            data: {
                __parameters__: FR.jsonEncode(para)
            },
            complete: function (res, status) {
                if (status == 'success') {
                    var source = FR.jsonDecode(res.responseText);
                    for (var w in source) {
                        if (widgetList[w]) {
                            widgetList[w].setSource(source[w]);
                        } else if (widgetList[w.toUpperCase()]) {
                            widgetList[w.toUpperCase()].setSource(source[w]);
                        }
                    }
                }
            }
        });
    },

    executeCharts: function (chartWidgets) {
        if (chartWidgets.length > 0) {
            $.each(chartWidgets, function (idx, chart) {
                chart.executeChart();
            })
        }
    },

    executeElements: function (elementCaseWidgets) {
        var self = this;
        if (elementCaseWidgets.length > 0) {
            $.each(elementCaseWidgets, function (idx, elementcase) {
                elementcase.gotoPage(1, self.collectionValue(), 't', true);
            })
        }
    },

    /**
     * 加载控件数据
     * @param {FR.Widget} content 控件对象
     */
    loadContentData: function (content) {
        var contentWidgets = {}
        var form = {
            add: function (widget) {
                contentWidgets[widget.options.widgetName] = widget;
            },
            remove: function (widget) {
                delete contentWidgets[widget.options.widgetName];
            }
        }
        for (var i in content.options.resultWidgets) {
            form.add(content.options.resultWidgets[i]);
        }
        var self = this;

        var sourceUrl = FR.buildServletUrl({
            op: 'fr_form',
            cmd: 'form_getsource',
            sessionID: this.options.form.sessionID,
            __isContent__: true,
            __widgetname__: content.options.widgetName
        });
        FR.ajax({
            url: sourceUrl,
            type: 'POST',
            async: false,
            data: {
                __parameters__: self.collectionValue()
            },
            complete: function (res, status) {
                if (status == 'success') {
                    var source = FR.jsonDecode(res.responseText);
                    for (var w in source) {
                        if (contentWidgets[w]) {
                            contentWidgets[w].setSource(source[w]);
                        }
                    }
                } else {
                }
            }
        });
    },
    /**
     * 提交参数并加载表单正文内容
     *
     * @param {Object} reloadOthers 配置
     */
    parameterCommit: function (reloadOthers) {
        if (this.parameterEl) {
            this.parameterEl.formSubmit({
                url: FR.servletURL
                + "?op=fr_dialog&cmd=parameters_d&sessionID="
                + this.sessionID,
                callback: function () {
                    _g().loadContentPane(reloadOthers);
                }
            });
        }else {
            _g().loadContentPane();
        }
    },
    /**
     * 加载表单正文内容
     */
    loadContentPane: function(noBindResize){
        var self = this;
        var config;
        var sessionID = this.sessionID;
        FR.ajax({
            url : FR.servletURL,
            data : {
                _ : new Date().getTime(),
                op : 'fr_form',
                cmd : 'load_content',
                sessionID: sessionID
            },
            beforeSend: function () {
                FR.HtmlLoader.loadingEffect({
                    el: $('.content-container'),
                    show: true
                });
            },
            async : true,
            complete : function(res, status) {
                if (status == 'success') {
                    var contenConfig = FR.jsonDecode(res.responseText);
                    if(!contenConfig || contenConfig.length == 0){
                        $('.content-container').html(res.responseText);
                        return;
                    }
                    if(FR.Form.getFitConfigFromServer){
                        contenConfig = FR.Form.getFitConfigFromServer(contenConfig);
                    }
                    self.isFitInBrowser = !contenConfig.__FIT__;
                    var paraEl = window.globalForm.parameterEl;
                    var contentContainer = $('.content-container');
                    var paraContainer = $('.para-container');
                    if(contentContainer){
                        contentContainer.remove();
                    }

                    var $body = $("body");
                    var items = [];

                    contentContainer = $("<div class='content-container'>");
                    contenConfig.renderEl = contentContainer;
                    var form = new FR.contentForm(contenConfig);
                    items.push({
                        region: 'center',
                        el: contentContainer
                    });
                    form.parameterEl = paraEl;
                    items.push({
                        region: 'north',
                        el: paraContainer
                    });

                    var borderLayout = new FR.BorderLayout({
                        items: items,
                        renderEl: $body
                    });

                    FR.SessionMgr.register(sessionID, form);
                    _g().name_widgets = form.name_widgets;
                    borderLayout.doLayout();
                    contentContainer.css('overflow', 'auto');
                    var width = FR.windowWidth;
                    var height = FR.windowHeight;
                    $(window).resize(function() {
                        if(!form.scaleProcess(borderLayout, width, height)){
                            borderLayout.doLayout();
                        }
                        if (FR.Browser.isIE()) {
                            setTimeout(function () {
                                width = FR.windowWidth;
                                height = FR.windowHeight;
                            }, 0);
                        }else {
                            width = FR.windowWidth;
                            height = FR.windowHeight;
                        }
                    });

                    FR.HtmlLoader.loadingEffect({
                        el: contentContainer
                    });
                }
            }
        });
        this.fireEvent(FR.Events.AFTERLOAD);
        if(FR.Form.bindFitResize){
            FR.Form.bindFitResize(this, noBindResize);
        }
    },
    /**
     * 为控件添加的load函数
     */
    load: function () {
        this.loadContentData(this.content);
    },

    /**
     * 移除控件，解除数据绑定
     * @param {FR.Widget} widget 控件对象
     */
    remove: function (widget) {
        var self = this;
        if (widget.options.Databinding) {
            $.each(self.datakey_widgets, function (idx, item) {
                if (item
                    && item.Name == widget.options.Databinding.Name
                    && item.Key == widget.options.Databinding.Key) {
                    self.datakey_widgets.splice(idx, 1);
                }
            });
        }
        delete this.name_widgets[widget.options.widgetName];
    },

    _fireSubmitEvents: function (status) {
        if (status == 'success') {
            this.content.fireEvent(FR.Events.SS);
        } else {
            this.content.fireEvent(FR.Events.SF);
        }
        this.content.fireEvent(FR.Events.SC);
    },

    /**
     * 让参数界面高度调整到合适的位置
     */
    preferredLayout: function () {
        var maxHeight = 0, minY = 2147483647, maxY = 0, maxLastVisibileY = 0;
        $.each(this.rootWidget.options.items, function (idx, item) {
            if (!item.el.isVisible()) {
                minY = Math.min(minY, item.y);
                maxY = Math.max(maxY, item.y + item.height);
            }
        });
        $.each(this.rootWidget.options.items, function (idx, item) {
            if (item.el.isVisible() && (item.y + item.height) < minY) {
                maxLastVisibileY = Math.max(item.y + item.height, maxLastVisibileY);
            }
        });
        $.each(this.rootWidget.options.items, function (idx, item) {
            if (item.el.isVisible()) {
                if (item.y > minY) {
                    item.delta = maxLastVisibileY - maxY;
                } else {
                    item.delta = 0;
                }
            }
        });
        $.each(this.rootWidget.options.items, function (idx, item) {
            if (item.el.isVisible()) {
                maxHeight = Math.max(maxHeight, item.y + item.height + item.delta);
            }
        });
        if ($.isFunction(this.options.onCalculate)) {
            this.options.onCalculate.call(this, maxHeight);
        }
    },

    /**
     * 调整布局尺寸
     */
    doLayout: function () {
        if (this.content) {
            this.content.setMinSize();
            this.content.doLayout();
        }
    },


    /*
     * * 缩放处理
     */
    scaleProcess: function(borderLayout, width, height){
        var bounds = borderLayout.element.bounds();
        //REPORT-432 ie兼容模式和低版本ie会不断或者多次触发resize而且宽高还有1 2px误差,这边弄个5px的模糊界限
        var invalidHeight = Math.abs(height - bounds.height) < 5;
        var invalidWidth = Math.abs(width - bounds.width) < 5;
        return invalidHeight && invalidWidth ;
    }
});
$.shortcut("fr_contentform", FR.contentForm);

/**
 * form提交相关的一些方法
 */
$.extend(FR, {
    /**
     * 根据控件获取联动所需的数值,不止form应用
     */
    getDependence: function (widget) {
        if (widget.getDependenceObj) {
            return widget.getDependenceObj();
        }
    },
    /**
     * 用ajax的方式提交formID对应的Form selector to get jQuery对象,也可以就是一个jQuery对象
     * params为form提交过程中的需要的参数，尤其是{context : '',
     * url:''},如果formID中没有默认的action,则调用定义在这里的url,context表示form所在的范围
     * callback为form提交后的操作，不管提交成功还是失败,例:callback = function(res, status,
     * options);//res为返回内容，status为状态，success,notmodified表示成功了
     * options为callback操作的参数，{scope: ''}可以指定callback的this范围
     */
    domFormSubmit: function (selector, params, callback, options) {
        if (!FR.notCloseDialogOnSubmit) {
            FR.closeDialog();
        }
        params = $.extend({
            cjkEncode: true
        }, params);
        var $form;
        if (params.context) {
            $form = $(selector, params.context);
        } else {
            $form = $(selector);
        }
        if ($form.length === 0) {
            return;
        }

        options = $.extend({
            scope: this
        }, options);

        // james:对form提交进行cjkEncode
        /**
         * !!!!!!注意!!!!!!用这个方法，form中需要进行提交的控件中需要有name这个Attribute，否则serializeArray是不成功的
         */
        var rawParams = $form.serializeArray();// james：返回值是[{name: paramName,
        // value: paramValue},...]的形式
        var ripeParams = {};
        for (var i = 0; i < rawParams.length; i++) {
            var rawParam = rawParams[i];
            if (params.cjkEncode === true) {
                // james:做cjkEncode处理
                ripeParams[FR.cjkEncode(rawParam.name)] = FR
                    .cjkEncode(rawParam.value);
            } else {
                ripeParams[rawParam.name] = rawParam.value;// james:作了一个处理，变成{paramName:paramValue,...}的形式
            }
        }
        $.extend(ripeParams, params);// james；加需要传输的其他参数

        var ajax_op = {
            type: 'POST',
            data: ripeParams, // 参数
            url: params.url || $form[0].action, // james:没有默认的action，则看看options中是不是有url参数
            complete: function (res, status) {
                $.isFunction(callback)
                && callback.call(options.scope, res, status, options);
            }
        };
        // james：支持file提交
        var $files = $('input:file', $form);
        if ($files.length > 0) {// james：TODOJ，要判断没有值吗？先不判断吧
            // james：有file的时候要利用iframe方式进行传输，因为AJAX不知道文件的传输的
            // hack to fix Safari hang (thanks to Tim Molendijk for this)
            // see:
            // http://groups.google.com/group/jquery-dev/browse_thread/thread/36395b7ab510dd5d
            if (FR.Browser.webkit && ajax_op.closeKeepAlive) {// james:closeKeepAlive不知道干嘛的
                $.get(ajax_op.closeKeepAlive, fileUpload);
            }
            else {
                fileUpload();
            }
        } else {
            // james：普通模式
            FR.ajax(ajax_op);
        }
        // james:利用iframe实现AJAX效果的文件上传
        // Examples and documentation at: http://malsup.com/jquery/form/
        function fileUpload() {
            var form = $form[0];

            if ($(':input[name=submit]', form).length) {
                alert('Error: Form elements must not be named "submit".');
                return;
            }

            // james:必须有success，不然会报错的，因为本来sucess支持多个callback的
            ajax_op.success = ajax_op.success || FR.emptyFn;

            var opts = $.extend({}, $.ajaxSettings, ajax_op);
            var s = jQuery.extend(true, {}, $.extend(true, {}, $.ajaxSettings),
                opts);

            var id = 'jqFormIO' + (new Date().getTime());
            var $io = $('<iframe id="' + id + '" name="' + id + '" />');
            var io = $io[0];

            if (FR.Browser.isIE() || FR.Browser.opera) {
                io.src = 'javascript:false;document.write("");';
            }
            $io.css({
                position: 'absolute',
                top: '-1000px',
                left: '-1000px'
            });

            var xhr = { // mock object
                aborted: 0,
                responseText: null,
                responseXML: null,
                status: 0,
                statusText: 'n/a',
                getAllResponseHeaders: function () {
                },
                getResponseHeader: function () {
                },
                setRequestHeader: function () {
                },
                abort: function () {
                    this.aborted = 1;
                    $io.attr('src', 'about:blank'); // abort op in progress
                }
            };

            var g = opts.global;
            // trigger ajax global events so that activity/block indicators work
            // like normal
            if (g && !$.active++) {
                $.event.trigger("ajaxStart");
            }
            if (g) {
                $.event.trigger("ajaxSend", [xhr, opts]);
            }

            if (s.beforeSend && s.beforeSend(xhr, s) === false) {
                s.global && jQuery.active--;
                return;
            }
            if (xhr.aborted) {
                return;
            }
            var cbInvoked = 0;
            var timedOut = 0;

            // add submitting element to data if we know it
            var sub = form.clk;
            if (sub) {
                var n = sub.name;
                if (n && !sub.disabled) {
                    ajax_op.extraData = ajax_op.extraData || {};
                    ajax_op.extraData[n] = sub.value;
                    if (sub.type == "image") {
                        ajax_op.extraData[name + '.x'] = form.clk_x;
                        ajax_op.extraData[name + '.y'] = form.clk_y;
                    }
                }
            }

            // take a breath so that pending repaints get some cpu time before
            // the upload starts
            setTimeout(function () {
                // make sure form attrs are set
                var t = $form.attr('target'), a = $form.attr('action');
                $form.attr({
                    target: id,
                    method: 'POST',
                    action: opts.url
                });

                // ie borks in some cases when setting encoding
                if (!ajax_op.skipEncodingOverride) {
                    $form.attr({
                        encoding: 'multipart/form-data',
                        enctype: 'multipart/form-data'
                    });
                }

                // support timout
                if (opts.timeout) {
                    setTimeout(function () {
                        timedOut = true;
                        cb();
                    }, opts.timeout);
                }

                // add "extra" data to form if provided in ajax_op
                var extraInputs = [];
                try {
                    if (ajax_op.extraData) {
                        for (var n in ajax_op.extraData) {
                            extraInputs
                                .push($('<input type="hidden" name="'
                                    + n
                                    + '" value="'
                                    + ajax_op.extraData[n]
                                    + '" />')
                                    .appendTo(form)[0]);
                        }
                    }

                    // add iframe to doc and submit the form
                    $io.appendTo('body');
                    io.attachEvent ? io.attachEvent('onload', cb) : io
                        .addEventListener('load', cb, false);
                    form.submit();
                } finally {
                    // reset attrs and remove "extra" input elements
                    $form.attr('action', a);
                    t ? $form.attr('target', t) : $form
                        .removeAttr('target');
                    $(extraInputs).remove();
                }
            }, 10);
            function cb() {
                if (cbInvoked++) {
                    return;
                }

                io.detachEvent ? io.detachEvent('onload', cb) : io
                    .removeEventListener('load', cb, false);

                var operaHack = 0;
                var ok = true;
                try {
                    if (timedOut) {
                        throw 'timeout';
                    }
                    // extract the server response from the iframe
                    var data, doc;

                    doc = io.contentWindow
                        ? io.contentWindow.document
                        : io.contentDocument
                            ? io.contentDocument
                            : io.document;

                    if (doc.body == null && !operaHack && FR.Browser.opera) {
                        // In Opera 9.2.x the iframe DOM is not always
                        // traversable when
                        // the onload callback fires so we give Opera 100ms to
                        // right itself
                        operaHack = 1;
                        cbInvoked--;
                        setTimeout(cb, 100);
                        return;
                    }

                    xhr.responseText = doc.body ? doc.body.innerHTML : null;
                    xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;
                    xhr.getResponseHeader = function (header) {
                        var headers = {
                            'content-type': opts.dataType
                        };
                        return headers[header];
                    };

                    if (opts.dataType == 'json' || opts.dataType == 'script') {
                        var ta = doc.getElementsByTagName('textarea')[0];
                        xhr.responseText = ta ? ta.value : xhr.responseText;
                    } else if (opts.dataType == 'xml' && !xhr.responseXML
                        && xhr.responseText != null) {
                        xhr.responseXML = toXml(xhr.responseText);
                    }
                    data = httpData(xhr, opts.dataType);
                } catch (e) {
                    ok = false;
                    handleError(opts, xhr, 'error', e);
                }

                // ordering of these callbacks/triggers is odd, but that's how
                // $.ajax does it
                if (ok) {
                    opts.success(data, 'success');
                    if (g) {
                        $.event.trigger("ajaxSuccess", [xhr, opts]);
                    }
                }
                if (g) {
                    $.event.trigger("ajaxComplete", [xhr, opts]);
                }
                if (g && !--$.active) {
                    $.event.trigger("ajaxStop");
                }
                if (opts.complete) {
                    opts.complete(xhr, ok ? 'success' : 'error');
                }

                // clean up
                setTimeout(function () {
                    $io.remove();
                    xhr.responseXML = null;
                }, 100);
            }

            ;

            function handleError(s, xhr, status, e) {
                // If a local callback was specified, fire it
                if (s.error) {
                    s.error.call(s.context || window, xhr, status, e);
                }

                // Fire the global callback
                if (s.global) {
                    (s.context ? jQuery(s.context) : jQuery.event).trigger(
                        "ajaxError", [xhr, s, e]);
                }
            }

            ;

            function httpData(xhr, type, s) {
                var ct = xhr.getResponseHeader("content-type") || "", xml = type === "xml"
                    || !type && ct.indexOf("xml") >= 0, data = xml
                    ? xhr.responseXML
                    : xhr.responseText;

                if (xml && data.documentElement.nodeName === "parsererror") {
                    throw "parsererror";
                }

                // Allow a pre-filtering function to sanitize the response
                // s is checked to keep backwards compatibility
                if (s && s.dataFilter) {
                    data = s.dataFilter(data, type);
                }

                // The filter can actually parse the response
                if (typeof data === "string") {
                    // Get the JavaScript object, if JSON is used.
                    if (type === "json" || !type && ct.indexOf("json") >= 0) {
                        // Make sure the incoming data is actual JSON
                        // Logic borrowed from http://json.org/json2.js
                        if (/^[\],:{}\s]*$/
                                .test(data
                                    .replace(
                                        /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
                                        "@")
                                    .replace(
                                        /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
                                        "]").replace(
                                        /(?:^|:|,)(?:\s*\[)+/g, ""))) {

                            // Try to use the native JSON parser first
                            if (window.JSON && window.JSON.parse) {
                                data = window.JSON.parse(data);

                            } else {
                                data = (new Function("return " + data))();
                            }

                        } else {
                            throw "Invalid JSON: " + data;
                        }

                        // If the type is "script", eval it in global context
                    } else if (type === "script" || !type
                        && ct.indexOf("javascript") >= 0) {
                        jQuery.globalEval(data);
                    }
                }

                return data;
            }

            ;

            function toXml(s, doc) {
                if (window.ActiveXObject) {
                    doc = new ActiveXObject('Microsoft.XMLDOM');
                    doc.async = 'false';
                    doc.loadXML(s);
                } else {
                    doc = (new DOMParser()).parseFromString(s, 'text/xml');
                }
                return (doc && doc.documentElement && doc.documentElement.tagName != 'parsererror')
                    ? doc
                    : null;
            }

            ;
        }
    },

    /**
     * form提交后简单地显示成功或失败的callback 用于com/fr/web/core/dialog/printServer.html
     * &com/fr/web/core/dialog/email.html
     */
    formSubmitCallback: function (res, status, options) {
        FR.Msg.toast(status == 'success' && res.responseText == "true"
            ? FR.i18nText('HJS-Send_Successfully') + '!'
            : FR.i18nText('HJS-Send_Failed') + '!');
    },

    /**
     * 页面设置提交后重新刷新页面 用于com/fr/web/core/dialog/pageSetup.html
     */
    pagesetupSubmitCallback: function (res, status, options) {
        FR.closeDialog();

        var sessionID = options.sessionID;
        var wbPane = _g();
        if (wbPane != null) {
            wbPane.loadContentPane();
        }
    },
    recalculateElementTitle : function(para, widgetName, noCache){
        FR.ajax({
            url: FR.servletURL,
            type: 'POST',
            data: {
                op: 'fr_form',
                cmd: 'recalculate_element_title',
                sessionID: _g().currentSessionID||_g().sessionID,
                widgetName: widgetName,
                __parameters__: this.encodePara(para),
                noCache : noCache || '',
                _: new Date().getTime(),
                __boxModel__: $.support.boxModel
            },
            beforeSend: function () {

            },
            async: true,
            complete: function (res, status) {
                if (status == 'success') {
                    var source = FR.jsonDecode(res.responseText);
                    if(_g().name_widgets[widgetName]) {
                        _g().name_widgets[widgetName].setSource(source[widgetName]);
                    }
                }
            }
        });
    },
    encodePara : function(para){
        if(!para){
            return '';
        }

        //不确定过来的是一个json对象还是一个字符串, 因为可以被自定义调用
        if(typeof para === 'string'){
            para = FR.jsonDecode(para);
        }
        $.each(para, function (pName, pValue) {
            if (typeof pValue === 'string') {
                //如果参数写出abc"efg, 转化为abc\"efg;
                para[pName] = encodeURIComponent(FR.cjkDecode(pValue.replaceAll('"', '\\"')));
            }
        });

        return para;
    }
});
/**
 * Created by harry on 2017-2-8.
 */

/**
 * 表单前端插件接口
 */
FR.Form = FR.Form || {};

FR.Form.Plugin = FR.Form.Plugin || {};
/**
 * 表单页面对象的接口
 */
FR.Form.Plugin.Panel = FR.Form.Plugin.Panel || {};

/**
 * 表单页面对象触发的事件
 */
FR.Form.Plugin.Panel.Events = [];
;
(function($) {
    if (window.jLayout) {
        $.extend(window.jLayout, {
       	/**
         * 控件原样缩放时的布局容器
         */
        scale: function (spec) {
            var my = {},
                items = spec.items || [],
                that = this.layout(spec, my),
                scrollable = spec.scrollable,
                scrollContainer = spec.scrollContainer;
            that.layout = function (container) {
                var bounds = container.bounds(),
                    insets = container.insets(),
                    totalWidth = bounds.width - (insets.left + insets.right),
                    totalHeight = bounds.height - (insets.top + insets.bottom),
                    maxOffsetX = 0, maxOffsetY = 0;
                for (var i = 0; i < items.length; i ++) {
                    var item = items[i];
                    var width = (scrollable || totalWidth === 0) ? item.width : totalWidth;
                    item.el.bounds({
                        'x' : 0,
                        'y' : 0,
                        'width' : width,
                        'height' : 21
                    });
                    item.el.doLayout();
                }
            };

            function typeLayout(type) {
                return function () {
                    return {
                        "width": 0,
                        "height": 0
                    }
                };
            }

            that.preferred = typeLayout('preferred');
            that.minimum = typeLayout('minimum');
            that.maximum = typeLayout('maximum');

            return that;
        },

        /**
         * 控件有标题样式时的布局
         */
        title: function (spec) {
            var my = {},
                items = spec.items || [],
                that = this.layout(spec, my),
                scrollable = spec.scrollable,
                scrollContainer = spec.scrollContainer;
            that.layout = function (container) {
                var bounds = container.bounds(),
                    insets = container.insets(),
                    totalWidth = bounds.width - (insets.left + insets.right),
                    totalHeight = bounds.height - (insets.top + insets.bottom),
                    maxOffsetX = 0, maxOffsetY = 0;
                var elementcaseH = items.length > 1 ? totalHeight - 38 : totalHeight;
                var elementY = items.length > 1 ? 38 : 0;
                for (var i = 0; i < items.length; i ++) {
                    var item = items[i];
                    var isTitle = item.type != 'elementcase' && item.type != 'chartwidget';
                    var height = isTitle ? 38 : elementcaseH;
                    var y = isTitle ? 0 : elementY;
                    item.el.bounds({
                        'x' : 0,
                        'y' : y,
                        'width' : totalWidth,
                        'height' : height
                    });
                    item.el.doLayout();
                     //ie杂项模式下报表块div和标题边框不对齐,计算完后修改下width属性
                    var isLowIE =  FR.Browser.isIE8Before() && !$.support.boxModel;
                    if (item.type == 'elementcase' && isLowIE) {
                    	item.el.css('width', "100%");
                    	// 高度因为有标题，要重新设下css属性，不然ie低版本高度也不对齐
                    	item.el.css('height', elementcaseH);
                    }
                }
            };

            function typeLayout(type) {
                return function () {
                    return {
                        "width": 0,
                        "height": 0
                    }
                };
            }

            that.preferred = typeLayout('preferred');
            that.minimum = typeLayout('minimum');
            that.maximum = typeLayout('maximum');

            return that;
        },

		/**
		 * 绝对布局
		 * @param spec
		 */
		absolute: function(spec) {
			var my = {},
				items = spec.items || [],
				that = this.layout(spec, my),
				scrollable = spec.scrollable,
				scrollContainer = spec.scrollContainer,
			//布局的缩放逻辑，适应区域还是固定大小
				absoluteCompState = spec.absoluteCompState;
			that.layout = function (container) {
				var preBounds = container.data('preBounds');
				var bounds = container.bounds(),
					insets = container.insets(),
					totalWidth = bounds.width - (insets.left + insets.right),
					totalHeight = bounds.height - (insets.top + insets.bottom);
				//备份之前的布局大小和改变的百分比,default = 1;
				var preHeight = getPreHeight(preBounds), preWidth = getPreWidth(preBounds);
				var percentWidth = 1, percentHeight = 1;
				var dx = 0, dy = 0, dw = 0, dh = 0;
				if (preBounds && bounds && preBounds.width > 0){
					percentWidth = parseFloat(bounds.width / preWidth);
					dw = Math.abs(bounds.width - preWidth);
				}
				if (preBounds && bounds&& preBounds.height > 0){
					percentHeight = parseFloat(bounds.height / preHeight);
					dh = Math.abs(bounds.height - preHeight);
				}

				var hasMinWidth = false;
				for (var i = 0; i < items.length; i++){
					var item = items[i];
					var width = item.width;
					if(width <= 21 && width !== 0){
						hasMinWidth = true;
					}
				}

				for (var i = 0; i < items.length; i++) {
					var item = items[i];
					var width = item.width;
					var height = item.height;
					var x = item.x;
					var y = item.y;
					if (absoluteCompState === 0 && !hasMinWidth){
						x = calculate(percentWidth, x);
						y = calculate(percentHeight, y);
						width = calculate(percentWidth, width + item.x) - x;
						height = calculate(percentHeight, height + item.y) - y;
						item.x = x;
						item.y = y;
						item.width = width;
						item.height = height;
					}
					item.el.bounds({
						'x' : x,
						'y' : y,
						'width' : width,
						'height' : height
					});
					item.el.doLayout();
				}

				function getPreWidth(preBounds) {
					return preBounds ? preBounds.width : 0;
				}

				function getPreHeight(preBounds) {
					return preBounds ? preBounds.height : 0;
				}

				function calculate(percent, curLocation) {
					if (percent !== 0 && curLocation) {
						return parseInt(curLocation * percent);
					}
					else{
						return curLocation;
					}
				}

				if (!preBounds || dw > 5 || dh > 5) {
					container.data('preBounds', bounds);
				}
			};

			function typeLayout(type) {
				return function () {
					return {
						"width": 0,
						"height": 0
					}
				};
			}

			that.preferred = typeLayout('preferred');
			that.minimum = typeLayout('minimum');
			that.maximum = typeLayout('maximum');

			return that;
		},

        /**
         * 自适应布局，表单内组件大小根据界面大小进行自适应调整
         */
        adaptive: function (spec) {
            var my = {},
                items = spec.items || [],
                that = this.layout(spec, my),
                scrollable = spec.scrollable,
                hasVertiBar = false,
                hasAddInterval = false,
                hasResized = spec.hasResized,
                //布局的状态 充满还是按比例缩放
                compState = spec.compState,
                // 布局内控件间隔
                compInterval = spec.compInterval;
        	that.layout = function (container) {
	            var bounds = container.bounds(),
	                insets = container.insets(),
	                totalWidth = bounds.width - (insets.left + insets.right),
	                totalHeight = bounds.height - (insets.top + insets.bottom),
	                maxOffsetX = 0, maxOffsetY = 0;
	            //pre备份之前的容器大小
                var preHeight = getPreHeight(), preWidth = getPreWidth(), percent;
                var finalWidth = 0, finalHeight = 0, dH = 0, dW = 0;
	            if (totalWidth !== 0) {
               		// 去掉间隔后 布局容器的实际大小
	            	finalWidth = getFinalWidth();
	                finalHeight = compState === 0 ? getFinalHeight() : getScaleHeight();
	            	dW = finalWidth - preWidth;
	            	dH = finalHeight - preHeight;
	            	if (finalHeight > getFinalHeight()) {
	            		$(container).css({"overflow-y" : "scroll"});
	            		hasVertiBar = true;
	            	} else {
	            		$(container).css({"overflow-y" : "hidden"});
	            		hasVertiBar = false;
	            	}
	            }

                if (totalWidth === 0 && totalHeight === 0) {
                	 for (var i = 0; i < items.length; i ++) {
                   		 var citem = items[i];
                   		 citem.el.bounds({
	                        'x' : citem.x,
	                        'y' : citem.y ,
	                        'width' : citem.width,
	                        'height' : citem.height
	                    });
	                    citem.el.doLayout();
                	 }
                }
                var changeContainerSize = dW !== 0 || dH !== 0;
            	if (hasAddInterval && changeContainerSize) {
            		resetItemsBoundsSize();
            	}
                if (dW !== 0) {
                    if(!hasResized) {
                        percent = parseFloat(dW / preWidth);
                        // 处理过间隔后调整web大小，先重置下宽度
                        widthResize(percent);
                    }
                	// 初始化后调整大小，items的bounds已经加入了间隔，所以不放在一起更新
                	updateItemsHor(compInterval);
                }
                if (dH !== 0) {
                    if(!hasResized) {
                        percent = parseFloat(dH / preHeight);
                        heightResize(percent);
                    }
                	updateItemsVerti(compInterval);
                }
                var hasChanged = totalWidth !== 0 && (dW !== 0 || dH !== 0);

                if (hasChanged && compInterval > 0) {
                	// 加上间隔
                	var vertis = getVertiValues();
                	var hors = getHroValues();
                	var minW = hors.length * 21 + (hors.length-1) * compInterval;
                	var minH = vertis.length * 21 + (vertis.length-1) * compInterval;
                	if (minW > totalWidth || compState === 0 && minH > totalHeight) {
                		return;
                	}
                	for (var i = 0; i < items.length; i ++) {
                   		 var citem = items[i];
                   		 var numx = hasResized ? 0 : getNearestNum(hors, citem.x);
                   		 var numy = hasResized ? 0 : getNearestNum(vertis, citem.y);
                   		 var numw = hasResized ? 0 : getNearestNum(hors, citem.x + citem.width) - numx - 1;
                   		 var numh = hasResized ? 0 : getNearestNum(vertis, citem.y + citem.height) - numy - 1;
                   		 citem.el.bounds({
	                        'x' : citem.x + numx*compInterval,
	                        'y' : citem.y + numy*compInterval,
	                        'width' : citem.width + numw*compInterval,
	                        'height' : citem.height + numh*compInterval
	                    });
	                    citem.el.doLayout();
                	 }
                	 hasAddInterval = true;
                }
                // 非初始化时且容器大小发送变化，此时有报表块的话调整大小
                if (hasChanged) {
                	for (var i = 0; i < items.length; i ++) {
                   		var citem = items[i];
                		if (citem.type != 'elementcase') {
                			continue;
                		}
                   		// 可能有间隔
                   		var bound = citem.el.bounds();
                   		var x = bound.x,
                   			y = bound.y,
               				w = bound.width,
               				h = bound.height;
                   		if (citem.marginTop) {
			                y = bound.y + parseInt(citem.marginTop);
			            }
			            if (citem.marginLeft) {
			                x = bound.x + parseInt(citem.marginLeft);
			            }
			            if (citem.marginBottom) {
			                h = bound.height - parseInt(citem.marginBottom) - parseInt(citem.marginTop);
			            }
			            if (citem.marginRight) {
			                w = bound.width - parseInt(citem.marginRight) - parseInt(citem.marginLeft);
			            }
                   		 citem.el.bounds({
	                        'x' : x,
	                        'y' : y,
	                        'width' : w,
	                        'height' : h
	                    });
	                    citem.el.doLayout();
                	 }
                	 hasAddInterval = true;
                }

                function getNearestNum(array, value) {
                    var index = array.indexOf(value);
                    if (index != -1) {
                        return index;
                    }

                    for (var i = 0; i < array.length; i++) {
                        //后台自适应, 由于bounds是int, 如果有小数, 会存在1px的误差
                        if (Math.abs(array[i] - value) <= 1) {
                            return i;
                        }
                    }

                    return index;
                }

                function getFinalWidth() {
                	var hlength = getHroValues().length - 2;
                	//多屏设置有竖直滚动条时去掉下宽度
                	var vertiBar = hasVertiBar ? 16 : 0;
                	return totalWidth - vertiBar - hlength*compInterval;
                }

                function getFinalHeight() {
                	var vlength = getVertiValues().length - 2;
                	return totalHeight- vlength*compInterval;
                }

                /**
                 * 返回原样缩放时，web端的高度
                 */
                function getScaleHeight() {
                	var vlength = getVertiValues().length - 2;
                	return parseInt(finalWidth/preWidth*preHeight) - vlength*compInterval;
                }

                function updateItemsHor(compInterval) {
                	var num = items.length;
                	for (var i=0; i<num; i++) {
                		var item = items[i];
                		var bound = item.el.bounds();
                		if(!bound.x){
                			bound.x = parseInt(item.el.css('left'));
                		}
                		//zhouping:bound四舍五入处理一下，否则会出现精度误差，1.99999这种
                		var _x = Math.round(bound.x);
                		item.x = item.el.isVisible() ? _x : parseInt(item.el.css('left'));
                		item.width = bound.width;
                	}
                }

                function updateItemsVerti(compInterval) {
                	var num = items.length;
                	for (var i=0; i<num; i++) {
                		var item = items[i];
                		var bound = item.el.bounds();
                		if(!bound.y){
                			bound.y = parseInt(item.el.css('top'));
                		}
                		//zhouping:bound四舍五入处理一下，否则会出现精度误差，1.99999这种
                		var _y = Math.round(bound.y);
                		// 不可见时，重置正确的y计算大小，否则后面判断会出问题
                		item.y = item.el.isVisible() ? _y : parseInt(item.el.css('top'));
                		item.height = bound.height;
                	}
                }

                 /**
                 * 计算过间隔后，再次调整大小，组件去掉加上的间隔
                 */
                function resetItemsBoundsSize() {
                	var num = items.length;
                	for (var i=0; i<num; i++) {
                		var item = items[i];
                		item.el.bounds({
		                    'x' : item.x, 'y' : item.y, 'width' : item.width, 'height' : item.height
		                });
                		item.el.doLayout();
                	}
                }

	            //宽度变化时调整所有组件位置、宽度
	            function widthResize(percent) {
	            	var hroValues = getHroValues();
					var num = hroValues ? hroValues.length : 0;
					var x, dw, nextX;
					for (var i=0; i<num-1; i++) {
						x = hroValues[i];
						nextX = hroValues[i+1];
						dw = parseInt((nextX-x)*percent);
						//自适应布局里，控件的最小宽度也为21
						if (nextX-x < 21-dw) {
							justCalculateX(x);
						} else {
							calculateLayoutWidth(x, dw);
						}
					}
	            }

	            //只调整x坐标值
	            function justCalculateX(x) {
	            	var xWidgets = getWidgetsAtX(x);
					if (!xWidgets) {
	            		return;
	            	}
	            	var posX = 0;
					for (var i=0, size=xWidgets.length; i<size; i++) {
						var item = xWidgets[i];
						if (x === 0) {
							return ;
						}
						if (item.x < x) {
							continue;
						}
						var leftItem = getWidgetSizeAt(item.x-5, item.y);
						if (leftItem) {
							var leftbound = leftItem.el.bounds();
							var leftX = leftItem.el.isVisible() ? leftbound.x : parseInt(leftItem.el.css('left'));
							leftX = leftX ? leftX : parseInt(leftItem.el.css('left'));
							posX = leftbound.width + leftX;
							//在布局最右侧,且满足调整此组件时符合只调整y的要求，此时同样调整宽度
							width = item.x+item.width==preWidth ? finalWidth-posX : item.width;
						}
						item.el.bounds({
		                    'x' : posX, 'width' : width
		                });
	                	item.el.doLayout();
					}

	            }

	            //相同x坐标，组件宽度比较大的会多循环几次进行缩放宽度
	            //宽度减小时，防止有组件已达到最小宽度，减小的宽度为左右最小差值（x坐标）乘以百分比
	            function calculateLayoutWidth(x, dw) {
	            	var xWidgets = getWidgetsAtX(x);
	            	if (!xWidgets) {
	            		return;
	            	}
	            	for (var i=0, size=xWidgets.length; i<size; i++) {
						var item = xWidgets[i];
						if(item.width === 0){
							continue;
						}
							if (item.x < x) {
							//在布局最右侧时，不再调整宽度
							if (item.x+item.width==preWidth) {
								continue;
							}
							var actualWidth = item.el.bounds().width;
							item.el.bounds({
			                    'width' : dw + actualWidth
			                });
			                item.el.doLayout();
			                continue;
						}
						calculateWidgetWidth({item:item, dw:dw, x:x});
	                	item.el.doLayout();
					}
	            }

	            function calculateWidgetWidth(o) {
	            	var item = o.item,
	            		dw = o.dw,
	            		x = o.x;
            		var posX = 0;
            		var width = item.el.bounds().width + dw;
					var leftItem = getWidgetSizeAt(item.x-5, item.y);
					if (leftItem) {
						var leftbound = leftItem.el.bounds();
						var leftX = leftItem.el.isVisible() ? leftbound.x : parseInt(leftItem.el.css('left'));
						leftX = leftX ? leftX : parseInt(leftItem.el.css('left'));
						posX = leftbound.width + leftX;
					}
					//在布局最右侧的宽度
					width = item.x+item.width==preWidth ? finalWidth-posX : width;
					width = width<21 ? 21 : width;
	            	item.el.bounds({
	                    'x' : posX, 'width' : width
	                });
	            }

	            //高度缩放时，同一x位置的控件按照指定高度缩放
	            function heightResize(percent) {
	            	var vertiValues = getVertiValues();
					var num = vertiValues ? vertiValues.length-1 : 0;
					var y, dh, nextY;
					for (var i=0; i<num; i++) {
						y = vertiValues[i];
						nextY = vertiValues[i+1];
						dh = parseInt((nextY-y)*percent);
						if (nextY-y < 21-dh) {
							justCalculateY(y);
						} else {
							calculateLayoutHeight(y, dh);
						}
					}
	            }

	             // 只调整y，不缩小高度
	            function justCalculateY(y) {
	            	var xWidgets = getWidgetsAtY(y);
					if (!xWidgets) {
	            		return;
	            	}
					var posY = 0;
					for (var i=0, size=xWidgets.length; i<size; i++) {
						var item = xWidgets[i];
						if (y === 0) {
							return ;
						}
						if (item.y < y) {
							continue;
						}
						var topItem = getWidgetSizeAt(item.x, item.y-5);
						if (topItem) {
							var topBound = topItem.el.bounds();
							var topX = topItem.el.isVisible() ? topBound.y : parseInt(topItem.el.css('top'));
							topX = topX ? topX : parseInt(topItem.el.css('top'));
							posY = topBound.height + topX;
							// 存在十字交叉点时，此时移动交叉点一侧的组件a，在刚好满足竖直方向上y坐标间的差值不用缩小高度
							// 此时a又是底部挨着容器边界，则要调整高度
                            // 这边应该只调节位置不调节高度，看不出来这个注释的应用场景，先这么改，出了问题再看
                            var height = item.height;
						}
						item.el.bounds({
		                     'y' : posY, 'height' : height
		                });
	                	item.el.doLayout();
					}
	            }

	            //相同y坐标，组件高度比较大的会多循环几次进行缩放
	            //高度减小时，防止有组件已达到最小高度，减小的高度为上下最小差值（y坐标）乘以百分比
	            function calculateLayoutHeight(y, dh) {
	            	var xWidgets = getWidgetsAtY(y);
					if (!xWidgets) {
	            		return;
	            	}
					for (var i=0, size=xWidgets.length; i<size; i++) {
						var item = xWidgets[i];
						if(item.height === 0){
							continue;
						}
						if (item.y<y) {
							//在布局最下侧时，不再调整高度
							if (item.y+item.height==preHeight) {
								continue;
							}
							var actualHeight = item.el.bounds().height;
							item.el.bounds({
			                     'height' : actualHeight+dh
			                });
			                item.el.doLayout();
			                continue;
						}
		                calculateWidgetHeight({item:item, dh:dh, y:y});
	                	item.el.doLayout();
					}
	            }

	             function calculateWidgetHeight(o) {
	            	var item = o.item,
	            		dh = o.dh,
	            		y = o.y;
            		var posY = 0;
            		var actualHeight = item.el.bounds().height;
					var topItem = getWidgetSizeAt(item.x, item.y-5);
					if (topItem) {
						var topBound = topItem.el.bounds();
						var topX = topItem.el.isVisible() ? topBound.y : parseInt(topItem.el.css('top'));
						topX = topX ? topX : parseInt(topItem.el.css('top'));
						posY = topBound.height + topX;
					}
					// 布局最下侧的高度
					var height = item.y+item.height==preHeight ? finalHeight-posY : actualHeight+dh;
					height = height<21 ? 21 : height;
	            	item.el.bounds({
	                     'y' : posY, 'height' : height
	                });
	            }

	            /**
	             * //返回指定位置的item，根据item的坐标和实际宽高来定当前控件的坐标
	             */
	            function getWidgetSizeAt(x, y) {
	            	for (var i=0,size=items.length; i<size; i++) {
	            		var item = items[i];
	            		var posx = item.x;
						var posy = item.y;
						var isCurrent = posx<=x && x<posx+item.width
							&& posy<=y && y<posy+item.height;
						if (isCurrent) {
							return item;
						}
					}
					return null;
	            }

	            // 返回没调整前，x位置的widgets
	            function getWidgetsAtX(x) {
	            	var xWidgets = [];
	            	for (var i=0,size=items.length; i<size; i++) {
	            		var item = items[i];
	            		var posX = item.x;
	            		var isLowX = posX<x && x<posX+item.width;
	            		if (isLowX || posX==x) {
							xWidgets.push(item);
						}
	            	}
	            	return xWidgets;
	            }

	            // 返回没调整前，y位置的widgets
	            function getWidgetsAtY(y) {
	            	var xWidgets = [];
	            	for (var i=0,size=items.length; i<size; i++) {
	            		var item = items[i];
	            		var posY = item.y;
	            		var isLowY = posY<y && y<posY+item.height;
	            		if (isLowY || posY==y) {
							xWidgets.push(item);
						}
	            	}
	            	return xWidgets;
	            }

	            //取布局内所有组件的水平坐标
	            function getHroValues() {
	            	var x, posX = [];
	            	posX.push(0);
	            	// 容器宽度(组件大小调整后的)加入数组作为最大值
	            	posX.push(getPreWidth());
	            	for (var i = 0; i < items.length; i ++) {
		                var item = items[i];
		                x = item.x;
		                if (posX.indexOf(x) == -1) {
		                	posX.push(x);
		                }
	            	}
	            	return posX.sort(function(a,b){return a>b?1:-1});
	            }

	            function getVertiValues() {
	            	var y, posY = [];
	            	posY.push(0);
	            	posY.push(getPreHeight());
	            	for (var i = 0; i < items.length; i ++) {
		                var item = items[i];
		                y = item.y;
		                if (posY.indexOf(y) == -1) {
		                	posY.push(y);
		                }
	            	}
	            	return posY.sort(function(a,b){return a>b?1:-1});
	            }


	            function getPreWidth() {
	            	var y, w;
	            	var preW = 0;
	            	for (var i = 0; i < items.length; i ++) {
		                var bound = items[i];
		                y = items[i].el.isVisible() ? bound.y : parseInt(items[i].el.css('top'));
		                w = items[i].el.css("display")==="none" ? 0 : bound.width;
		                if (y === 0) {
		                	preW += w;
		                }
	            	}
	            	return preW;
	            }

	            function getPreHeight() {
	            	var x, h;
	            	var preH = 0;
	            	for (var i = 0; i < items.length; i ++) {
		                var bound = items[i];
		                x = items[i].el.isVisible() ? bound.x : parseInt(items[i].el.css('left'));
		                h = items[i].el.css("display")==="none" ? 0 : bound.height;
		                if (x === 0) {
		                	preH += h;
		                }
	            	}
	            	return preH;
	            }
            	return container;
        	};

            function typeLayout(type) {
                return function () {
                    return {
                        "width": 0,
                        "height": 0
                    }
                };
            }

            that.preferred = typeLayout('preferred');
            that.minimum = typeLayout('minimum');
            that.maximum = typeLayout('maximum');

            return that;
        	}
        });
    }
})(jQuery);
;
(function($){
    /**
     * 有标题样式的组件配置的容器
     *
     *     @example
     *     var renderEl = $('body');
     *     var layout = new FR.TitleLayout({
     *              renderEl : renderEl,
     *              items : [
     *                  {
     *                      type : 'button',
     *                      text : 'titlepane',
     *               }
     *              ]
     *     });
     *     layout.doLayout();
     *
     * @class FR.TitleLayout
     * @extends FR.Layout
     */
    FR.TitleLayout = FR.extend(FR.Layout, {

        _defaultConfig: function () {
            return $.extend(FR.TitleLayout.superclass._defaultConfig.apply(), {
                baseCls: 'fr-titlelayout',
                scrollable: false
            });
        },

        _init: function () {
            FR.TitleLayout.superclass._init.apply(this, arguments);
            var opts = this.options;
            this.element.addClass(opts.baseCls);
            if (!$.isArray(opts.items)) {
                opts.items = [];
                return;
            }
            var items = opts.items, i, len = items.length;
            opts.widgets = [];
            var $container = this.element;
            for (i = 0; i < len; i++) {
                var item = items[i];
                if (!item.style) {
                    item.style = opts.style;
                }
                if (item.type) {
                    item.el = item;
                }
                if (item.el.type) {
                    var widget = FR.createWidget($.extend(item.el, {
                        resultWidgets: opts.resultWidgets
                    }));
                    widget.titleWidget = this;
                    opts.widgets.push(widget);
                    item.el = widget.element;
                    $container.append( item.el);
                }
            }
            this.element.data('jlayout', jLayout.title(opts));
        },

        doResize: function (give) {
            FR.TitleLayout.superclass.doResize.call(this, give);
            var opts = this.options;
            this.element.css({
                width: (give ? (give.width !== undefined ? give.width : opts.width) : opts.width),
                height: give ? (give.height !== undefined ? give.height : opts.height) : opts.height,
                left: give ? (give.left !== undefined ? give.left : opts.left) : opts.left,
                top: give ? (give.top !== undefined ? give.top : opts.top) : opts.top
            });
            this.doLayout();
        },
        doLayout: function () {
            FR.TitleLayout.superclass.doLayout.apply(this, arguments);
        }
    });
    $.shortcut('title', FR.TitleLayout);

    /**
     * 水平布局
     *
     *     @example
     *     var $area = $('<div>').css({width: 500, height:150, background:'gray'}).appendTo('body');
     *     var editor = new FR.HorizontalLayout({
     *          renderEl : $area,
     *          alignment : "center",
     *          hgap : 10,     //水平间距
     *          vgap : 5,     //垂直间距
     *          minWidth: 0    //布局最小宽度（可选属性）
     *          items : [
     *              {el:{type : "button", text : '1'}, width : 30},
     *              {el:{type : "button", text : '2'}, width : 30},
     *              {el:{type : "button", text : '3'}, width : 60},
     *              {el:$('<div>').css({background:'red'}), width : 120}
     *          ]
     *     });
     *     editor.doLayout();
     * @class FR.HorizontalLayout
     * @extends FR.Layout
     *
     * @cfg {JSON} options 配置属性
     * @cfg {Number} [options.hgap=0] 子组件之间的水平间隙
     * @cfg {Number} [options.vgap=0] 子组件之间的垂直间隙
     */
    FR.HorizontalLayout = FR.extend(FR.Layout, {

        _defaultConfig: function () {
            return $.extend(FR.HorizontalLayout.superclass._defaultConfig.apply(), {
                alignment: "center",
                hgap: 0,
                vgap: 0,
                baseCls: 'fr-horizontalboxlayout'
            });
        },

        _init: function () {
            FR.HorizontalLayout.superclass._init.apply(this, arguments);
            var opts = this.options;
            this.element.addClass(opts.baseCls);
            //bug92426 增加一个最小宽度的属性
            this.element.css('min-width', opts.minWidth);
            var items = opts.items, i, len = items.length;
            opts.widgets = [];
            for (i = 0; i < len; i++) {
                var itemConfig = items[i];
                if (!itemConfig.el.style) {
                    itemConfig.el.style = opts.style;
                }
                if (itemConfig.el && itemConfig.el.type) {
                    var widget = FR.createWidget($.extend(itemConfig.el, {
                        resultWidgets: opts.resultWidgets
                    }));
                    // 将子widget放到widgets对象里面,以便在doLayout的时候方便使用
                    opts.widgets.push(widget);
                    var element = widget.element;
                    // richer:由于已经生成了widget,就没必要再保存原来的JSON对象了
                    items[i].el = element;
                    this.element.append(element);
                } else if (itemConfig.el instanceof $) {
                    this.element.append(itemConfig.el);
                }

            }
            this.element.data('jlayout', jLayout.horizontal(opts));
        },

        doResize: function (give) {
            FR.HorizontalLayout.superclass.doResize.call(this, give);
            var opts = this.options;
            this.element.css({
                width: (give ? (give.width || opts.width) : opts.width),
                height: (give ? (give.height || opts.height) : opts.height),
                left: give ? (give.left || opts.left) : opts.left,
                top: give ? (give.top || opts.top) : opts.top
            });
        },

        doLayout: function () {
            FR.HorizontalLayout.superclass.doLayout.apply(this, arguments);
        }
    });
    $.shortcut("horizontal", FR.HorizontalLayout);

    /**
     * 参数面板水平布局
     * ie8 quirks模式下参数面板显示有问题而且不支持min-width，所以单独处理
     * @class FR.ParaHorizontalLayout
     * @extends FR.HorizontalLayout
     *
     * @cfg {JSON} options 配置属性
     * @cfg {Number} [options.hgap=0] 子组件之间的水平间隙
     * @cfg {Number} [options.vgap=0] 子组件之间的垂直间隙
     */
    FR.ParaHorizontalLayout = FR.extend(FR.HorizontalLayout, {
        _init: function () {
            FR.ParaHorizontalLayout.superclass._init.apply(this, arguments);
            if(FR.Browser.isIE8Before() && !$.support.boxModel){
                this.element.css('overflow', 'visible');
            }
        }
    });
    $.shortcut("para_horizontal", FR.ParaHorizontalLayout);

    /**
     * 垂直布局
     *
     *     @example
     *     var $area = $('<div>').css({width: 300, height:130, background:'gray'}).appendTo('body');
     *     var editor = new FR.VerticalBoxLayout({
     *           renderEl : $area,
     *           hgap : 20,
     *           vgap : 10,
     *           scrollable : true,
     *           items : [
     *               {el:{type : "button", text : '1'}, height : 30},
     *               {el:{type : "button", text : '2'}, height : 30},
     *               {el:{type : "button", text : '3'}, height : 30},
     *               {el:{type : "button", text : '4'}, height : 30},
     *               {el:{type : "button", text : '5'}, height : 30}
     *          ]
     *      });
     *      editor.doLayout();
     *
     * @class FR.VerticalBoxLayout
     * @extends FR.Layout
     * @cfg {JSON} options 配置属性
     * @cfg {Number} [options.hgap=0] 子组件之间的水平间隙
     * @cfg {Number} [options.vgap=0] 子组件之间的垂直间隙
     */
    FR.VerticalBoxLayout = FR.extend(FR.Layout, /**@class FR.VerticalBoxLayout*/{

        _defaultConfig: function () {
            return $.extend(FR.VerticalBoxLayout.superclass._defaultConfig.apply(), {
                hgap: 5,
                vgap: 5,
                baseCls: 'fr-verticalboxlayout'
            });
        },

        _init: function () {
            FR.VerticalBoxLayout.superclass._init.apply(this, arguments);
            var opts = this.options;
            this.element.addClass(opts.baseCls);
            var items = opts.items, i, len = items.length;
            opts.widgets = [];
            var $container = this.element;
            if (opts.scrollable) {
                $container = $('<div class="fr-core-layout-scrollable">').css({
                    position: 'absolute',
                    top: 0,
                    left: 0
                }).appendTo(this.element);
                opts.scrollContainer = $container;
            }
            for (i = 0; i < len; i++) {
                var itemConfig = items[i];
                if (!itemConfig.el.style) {
                    itemConfig.el.style = opts.style;
                }
                if (itemConfig.el && itemConfig.el.type) {
                    var widget = FR.createWidget($.extend(itemConfig.el, {
                        resultWidgets: opts.resultWidgets
                    }));
                    // 将子widget放到widgets对象里面,以便在doLayout的时候方便使用
                    opts.widgets.push(widget);
                    var element = widget.element;
                    // richer:由于已经生成了widget,就没必要再保存原来的JSON对象了
                    items[i].el = element;
                    $container.append(element);
                } else if (itemConfig.el instanceof $) {
                    $container.append(itemConfig.el);
                }

            }
            this.element.data('jlayout', jLayout.vertical(opts));
        },

        doResize: function (give) {
            FR.VerticalBoxLayout.superclass.doResize.call(this, give);
            var opts = this.options;
            this.element.css({
                width: opts.width,
                height: opts.height,
                left: opts.left,
                top: opts.top
            });
        },

        doLayout: function () {
            FR.VerticalBoxLayout.superclass.doLayout.apply(this, arguments);
        }
    });
    $.shortcut("vertical", FR.VerticalBoxLayout);

    FR.CardBorder = FR.extend(FR.BorderLayout, {
        _init: function () {
            FR.CardBorder.superclass._init.apply(this, arguments);
        },

        _initBackGround: function () {
            if (!this.options.widgetBackground) {
                return;
            }

            FR.CardBorder.superclass._initFitBackground.apply(this, arguments);
        },

        doResize: function (give) {
            if (!give || (this.options.width == give.width && this.options.height == give.height)) {
                return;
            }

            if (this.element.height() > 0) {
                this._initBackGround();
            }

            FR.CardBorder.superclass.doResize.call(this, give);
        }
    });
    $.shortcut('cardborder', FR.CardBorder);

    /**
     * 卡片布局的标题部分
     * @class FR.CardTagLayout
     * @extends FR.HorizontalLayout
     */
    FR.CardTagLayoutH = FR.extend(FR.HorizontalLayout, {

        _init: function () {
            FR.CardTagLayoutH.superclass._init.apply(this, arguments);
        },

        checkCardShowIndex:  function (index) {
            var  showIndex = 0, opts = this.options;
            var items = opts.items, len = items.length;
            for(var i = index; i < len; i++){
                if(items[i].el.isVisible()){
                    showIndex = i;
                    break;
                }
                if (i === len - 1) {
                    i = -1;
                }
                if (i === index - 1) {
                    showIndex = -1;
                    break;
                }
            }
            return showIndex;
        },

        _initBackGround: function () {
            if (!this.options.widgetBackground) {
                return;
            }

            FR.CardTagLayoutH.superclass._initFitBackground.apply(this, arguments);
        },

        setTabVisible :function (tabName, visible) {
            var opts = this.options;
            if(!opts.cardLayoutName){
                return;
            }
            var cardLayout = opts.form.getWidgetByName(opts.cardLayoutName);
            if(!cardLayout){
                return;
            }
            cardLayout.setTabVisible(tabName, visible);
        },

        doResize: function (give) {
            if (!give || (this.options.width == give.width && this.options.height == give.height)) {
                return;
            }

            if (this.element.height() > 0) {
                this._initBackGround();
            }
            FR.CardTagLayoutH.superclass.doResize.call(this, give);
        },

        /**
         * 获取当前所显示布局容器的索引位置
         * @returns {*}
         */
        getShowIndex: function(){
            var opts = this.options;
            if(!opts.cardLayoutName){
                return;
            }
            var cardLayout = opts.form.getWidgetByName(opts.cardLayoutName);
            if(!cardLayout){
                return;
            }
            return cardLayout.getShowIndex();
        },


        showCardByIndex: function (index){
            var opts = this.options;
            if(!opts.cardLayoutName){
                return;
            }
            var cardLayout = opts.form.getWidgetByName(opts.cardLayoutName);
            if(!cardLayout){
                return;
            }

            cardLayout.showCardByIndex(index);

        },
        showSelectTab: function (index) {
            if(index === -1){
                this.setVisible(false);
            }
            var opts = this.options;
            var items = opts.items, i, len = items.length;
            //如果有tab不在当前屏幕内, 需要获取移动的距离
            var delta = this.getMoveDelta(len, items);
            if(delta === 0){
                return;
            }

            for (i = 0; i < len; i++) {
                var _left = parseInt(items[i].el.css('left'));
                items[i].el.css('left', _left + delta + 'px');
            }

        },
        getMoveDelta: function (len, items){
            for (var i = 0; i < len; i++) {
                var _width = items[i].el.width();
                if(_width <= 0){
                    continue;
                }

                if(items[i].el.css('opacity') === "1"){
                    var _left = parseInt(items[i].el.css('left'));
                    if(_width + _left > this.element.width()){
                        return this.element.width() - _width - _left - this.options.hgap;
                    }
                    if(_left < 0){
                        return -_left + this.options.hgap;
                    }

                    return 0;
                }
            }
        }
    });
    $.shortcut('cardtaglayouth', FR.CardTagLayoutH);

    FR.CardTagLayoutV = FR.extend(FR.VerticalBoxLayout, {
        _init: function () {
            FR.CardTagLayoutV.superclass._init.apply(this, arguments);
        },

        checkCardShowIndex:  function (index) {
            var  showIndex = 0, opts = this.options;
            var items = opts.items, len = items.length;
            for(var i = index; i < len; i++){
                if(items[i].el.isVisible()){
                    showIndex = i;
                    break;
                }
                if (i === len - 1) {
                    i = -1;
                }
                if (i === index - 1) {
                    showIndex = -1;
                    break;
                }
            }
            return showIndex;
        },

        _initBackGround: function () {
            if (!this.options.widgetBackground) {
                return;
            }

            FR.CardTagLayoutV.superclass._initFitBackground.apply(this, arguments);
        },

        doResize: function (give) {
            if (!give || (this.options.width == give.width && this.options.height == give.height)) {
                return;
            }

            if (this.element.height() > 0) {
                this._initBackGround();
            }

            FR.CardTagLayoutV.superclass.doResize.call(this, give);
        },
        setTabVisible :function (tabName, visible) {
            var opts = this.options;
            if(!opts.cardLayoutName){
                return;
            }
            var cardLayout = opts.form.getWidgetByName(opts.cardLayoutName);
            if(!cardLayout){
                return;
            }
            cardLayout.setTabVisible(tabName, visible);
        },

        /**
         * 获取当前所显示布局容器的索引位置
         * @returns {*}
         */
        getShowIndex: function(){
            var opts = this.options;
            if(!opts.cardLayoutName){
                return;
            }
            var cardLayout = opts.form.getWidgetByName(opts.cardLayoutName);
            if(!cardLayout){
                return;
            }
            return cardLayout.getShowIndex();
        },

        showCardByIndex: function (index){
            var opts = this.options;
            if(!opts.cardLayoutName){
                return;
            }
            var cardLayout = opts.form.getWidgetByName(opts.cardLayoutName);
            if(!cardLayout){
                return;
            }

            cardLayout.showCardByIndex(index);

        },
        showSelectTab: function (index) {
            var opts = this.options;
            var items = opts.items, i, len = items.length;
            //如果有tab不在当前屏幕内, 需要获取移动的距离
            var delta = this.getMoveDelta(len, items);
            if(delta === 0){
                return;
            }

            for (i = 0; i < len; i++) {
                var _top = parseInt(items[i].el.css('top'));
                items[i].el.css('top', _top + delta + 'px');
            }

        },
        getMoveDelta: function (len, items){
            for (var i = 0; i < len; i++) {
                var _height = items[i].el.height();
                if(_height <= 0){
                    continue;
                }

                if(items[i].el.css('opacity') === "1"){
                    var _top = parseInt(items[i].el.css('top'));

                    if(_height + _top > this.element.height()){
                        return this.element.height() - _height - _top - this.options.vgap;
                    }
                    if(_top < 0){
                        return -_top + this.options.hgap;
                    }
                    return 0;
                }
            }
        }
    });
    $.shortcut('cardtaglayoutv', FR.CardTagLayoutV);

    /**
     * 用于表单中的卡片布局容器
     * @class FR.FormCardLayout
     * @extends FR.Layout
     *
     * @cfg {JSON} options 配置属性
     * @cfg {Number} [options.defaultShowIndex=0] 默认显示的卡片布局容器子组件的索引
     */
    FR.FormCardLayout = FR.extend(FR.Layout, {

        _defaultConfig: function () {
            return $.extend(FR.FormCardLayout.superclass._defaultConfig.apply(), {
                baseCls: 'fr-quick-form-card-layout',
                defaultShowIndex: 0
            });
        },

        _init: function () {
            FR.FormCardLayout.superclass._init.apply(this, arguments);
            var self = this;
            this.tabID = self.options.widgetName;
            this.element.attr('id', this.tabID);

            var amount = self.options.items.length;
            var $leftSlider = $('<button class="fr-slider-left">').css({
            }).appendTo(this.element).click(function () {
                if (amount === 1) {
                    return;
                }
                var current = self.getShowIndex();
                var next = (current + amount - 1) % amount;
                self.showCardByIndex(next);
            }).mouseover(function () {
                self.sliderShow();
            }).mouseout(function () {
                self.sliderBlank();
            });

            var $rightSlider = $('<button class="fr-slider-right">').css({
            }).appendTo(this.element).click(function () {
                if (amount === 1) {
                    return;
                }
                var current = self.getShowIndex();
                var next = (current + amount + 1) % amount;
                self.showCardByIndex(next);
            }).mouseover(function () {
                self.sliderShow();
            }).mouseout(function () {
                self.sliderBlank();
            });

            if (!self.options.isCarousel){
                $leftSlider.hide();
                $rightSlider.hide();
            }else {
                var firstPosition = 51;
                for (var i = 0; i < amount; i++) {
                    var $dot = $("<span/>").css({
                        left: firstPosition - amount + 2 * i + '%'
                    }).addClass("slider-dot");
                    var $singleDot = $("<div/>").append($dot).appendTo(this.element).click({
                        index: i,
                        sb: self
                    }, function (e) {
                        if (amount === 1) {
                            return;
                        }
                        e.data.sb.showCardByIndex(e.data.index);
                    });
                }
            }

            var opts = this.options;
            this.name2Index = {};
            this.cardsHasCreated = [];
            this._initNameMap();

            if (opts.showAllCardOnInit) {
                //showAllCardOnInit的时候不进行动画隐藏
                var showAllCardOnInit = true;
                // 先临时这么搞一下, 后台计算似乎没考虑精度问题, 到前台有几率错乱.
                for (var i = opts.items.length - 1; i >= 0; i-- ) {
                    this.showCardByIndex(i, showAllCardOnInit);
                }
            } else {
                this.showCardByIndex(this.getShowIndex());
            }
            this.clock = null;
            if (self.options.isCarousel) {
                this.animate();
            }
        },
        _initBackGround: function () {
            if (!this.options.widgetBackground) {
                return;
            }

            FR.FormCardLayout.superclass._initFitBackground.apply(this, arguments);
        },

        sliderShow: function () {
            $("#" + this.tabID + " > .fr-slider-left").css('opacity','1.0');
            $("#" + this.tabID + " > .fr-slider-right").css('opacity','1.0');
            $("#" + this.tabID + " .slider-dot").css('float', 'left').css('display', 'inline');
        },

        sliderBlank: function () {
            $('.fr-slider-left').css('opacity','0.0');
            $('.fr-slider-right').css('opacity','0.0');
            $('.slider-dot').css('display','none');
        },

        /**
         * 初始化控件名索引
         * @private
         */
        _initNameMap: function () {
            var items = this.options.items;
            for (var i = 0; i < items.length; i++) {
                var name;
                if (items[i].el) {
                    name = items[i].el.widgetName;
                } else {
                    name = items[i].widgetName;
                }
                if (!FR.isEmpty(name)) {
                    this.name2Index[name] = i;
                }
            }
        },

        showPaneByIndex: function(index) {
            this.showCardByIndex(index);
        },

        showPrevCard: function(){
            if(!FR.isEmpty(this.showIndex)){
                this.showCardByIndex(this.showIndex - 1);
            }
        },

        showNextCard: function(){
            if(!FR.isEmpty(this.showIndex)){
                this.showCardByIndex(this.showIndex + 1);
            }
        },

        showCardTab: function(index){
            var opts = this.options;
            if(!opts.tagLayoutName){
                return;
            }
            var tagLayout = opts.form.getWidgetByName(opts.tagLayoutName);
            if(!tagLayout){
                return;
            }

            //将选中的tab放到当前标题栏的显示区域
            tagLayout.showSelectTab(index);
        },

        showUnCachedTab: function (index, items, opts){
            var self = this;
            var item = items[index];
            if (!item.el) {
                item.el = item;
            }
            if (item && item.el && item.el.type) {
                var widget = FR.createWidget($.extend(item.el, {
                    resultWidgets: opts.resultWidgets
                }));
                item.el = widget.element;
                item.el.bind("visible", function (event, visible) {
                    event.stopPropagation();
                    var _current_btn = self.getRelateTabButton(opts, index);
                    var tagLayout = opts.form.getWidgetByName(opts.tagLayoutName);
                    if(_current_btn){
                        _current_btn.setVisible(visible);
                        if(tagLayout){
                            tagLayout.doLayout();
                        }
                    }else{
                        if(tagLayout && tagLayout.options.templateStyle !== "default"){
                            tagLayout.setItemVisible(index, visible);
                        }
                    }
                    if(visible){
                        self.showCardByIndex(index);
                        return;
                    }
                    //隐藏的tab是当前显示的tab
                    if(self.showIndex === index){
                        self.showCardByIndex(index + 1);
                    } else {
                        self.showCardByIndex(self.showIndex);
                    }

                });
                if(opts.form && opts.form.initLinkWidgetEvent){
                    //show出来的时候再处理绑定联动
                    $.each(opts.resultWidgets, function (i, widget) {
                        if (widget.options.widgetName != null) {
                            opts.form.initLinkWidgetEvent(widget);
                        }
                    });

                    if (!FR.isNull(opts.form.content)) {
                        opts.form.content.fireEvent(FR.Events.AFTERINIT);
                    }
                }
            }
            //切换生成的tab在append之前需要进行一次dolayout，初始化内部组件大小
            item.el.doLayout();
            this.element.append(item.el);
            this.cardsHasCreated.push(index);
            this.element.data('jlayout', jLayout.card(opts));
        },

        setTabVisible :function (tabName, visible) {
           var index = -1;
            for(var i =0; i<this.options.items.length;i++){
                if(this.options.items[i].widgetName === tabName.toUpperCase()){
                    index = i;
                    break;
                }
            }
            var ii = this.cardsHasCreated.indexOf(index);
            if(ii === -1){
                this.showUnCachedTab(index, this.options.items, this.options);
            }
            var tab = this.options.form.getWidgetByName(tabName);
            tab.setVisible(visible);
            tab.element.trigger("visible", visible);
        },

        checkCardShowIndex:  function (opts, index) {
            if(!opts.tagLayoutName){
                return;
            }
            var tagLayout = this._getWidgetFromResultWidget(opts, opts.tagLayoutName);
            if(tagLayout){
                return tagLayout.checkCardShowIndex(index);
            }
            return index;
        },
        /**
         * 显示指定位置的布局容器
         * @param index 位置索引
         * @param showAllCardOnInit showAllCardOnInit的时候不进行动画隐藏
         */
        showCardByIndex: function (index, showAllCardOnInit ) {
            var opts = this.options;
            //先判断当前展示tab是否不可见
            index = this.checkCardShowIndex(this.options, index);
            if (this.showIndex === index) {
                return;
            }

            //初始化的时候不需要fire
            if (!FR.isEmpty(this.showIndex)) {
                //留做兼容
                this.fireEvent(FR.Events.CARDCHANGE);
                if(!opts.tagLayoutName){
                    return;
                }
                var tagLayout = this._getWidgetFromResultWidget(opts, opts.tagLayoutName);
                if(tagLayout){
                    tagLayout.fireEvent(FR.Events.CARDCHANGE);
                }
            }

            var items = opts.items;
            if (index > -1 && index < items.length) {
                //设置所有按钮的背景
                this.changeAllBackground(opts, index);
                //隐藏tab
                //这边消失的
                var old = this.showIndex;
                this.showIndex = index;
                var ii = this.cardsHasCreated.indexOf(index);
                if (ii == -1) {
                    if (old != undefined) {
                        items[old].el.css('visibility', 'hidden');
                    }
                    this.showUnCachedTab(index, items, opts);
                } else {
                    //这边show的
                    var showTimes = 10;
                    var timeIncrease = 0.1;
                    var intervalTime = 60;
                    items[index].el.css('visibility', 'visible');
                    items[index].el.css('opacity', '0.0');
                    var times = 0;
                    var setIntervalId = setInterval(function () {
                        times += 1;
                        if (times == showTimes) {
                            clearInterval(setIntervalId);
                            items[index].el.css('opacity', 1);
                            items[index].el.css('visibility', 'visible');
                            if(old !== undefined ){
                                items[old].el.css('opacity', 0);
                                items[old].el.css('visibility', 'hidden');
                            }
                            return;
                        }
                        var currentOpacity = items[index].el.css('opacity');
                        var nextOpacity = parseFloat(currentOpacity) + timeIncrease;
                        items[index].el.css('opacity', nextOpacity);
                        if(old !==  undefined ){
                            var oldOpacity = items[old].el.css('opacity');
                            var nextOldOpacity = parseFloat(oldOpacity) - timeIncrease;
                            items[old].el.css('opacity', nextOldOpacity);
                        }

                    }, intervalTime);
                }
            }
            this.doLayout();

            this.showCardTab(index);
            var $slider_dots = $("#" + this.tabID + " .slider-dot");
            if ($slider_dots.length === 0) {
                return;
            }
            if (this.options.isCarousel) {
                var amount = this.options.items.length;
                for (var j = 0; j < amount; j++) {
                    var current_dot = $slider_dots.eq(j);
                    if (j === index) {
                        current_dot.css('background', 'url("' + FR.servletURL + '?op=resource&resource=/com/fr/web/core/js/demo/image/dot-click.png' + '")');
                    } else {
                        current_dot.css('background', 'url("' + FR.servletURL + '?op=resource&resource=/com/fr/web/core/js/demo/image/dot-unclick.png' + '")');
                    }
                }
            }
        },

        getRelateTabButton: function (opts, i) {
            if(!opts.allTagName){
                return;
            }
            var allTagName = opts.allTagName;
            return this._getWidgetFromResultWidget(opts, allTagName[i]);

        },

        changeAllBackground: function(opts, index){
            if(!opts.allTagName){

                return;
            }
            var allTagName = opts.allTagName;
            for(var i = 0; i < allTagName.length; i++){
                var _current_btn = this._getWidgetFromResultWidget(opts, allTagName[i]);
                if(!_current_btn){
                    continue;
                }

                if(index === i){
                    if (_current_btn.options.click) {
                        _current_btn.setBackground(_current_btn.options.click);
                    }
                    _current_btn.element.css('opacity', '1');
                    _current_btn.selected = true;
                    continue;
                }
                if (_current_btn.options.initial) {
                    _current_btn.setBackground(_current_btn.options.initial);
                }
                _current_btn.selected = false;
                _current_btn.element.css('opacity', '0.6');
            }
        },

        _getWidgetFromResultWidget : function (opts, name) {
            if (!name || !opts.resultWidgets) {
                return null;
            }
            if(name !== null){
                return opts.resultWidgets[name.toUpperCase()];
            }
        },

        /**
         * 获取当前所显示布局容器的索引位置
         * @returns {*}
         */
        getShowIndex: function(){
            return this.showIndex? this.showIndex:this.options.defaultShowIndex;
        },

        showPaneByName: function(name) {
            return this.showCardByName(name);
        },

        /**
         * 根据子容器的控件名显示指定位置的布局容器
         * @param name 控件名
         */
        showCardByName: function (name) {
            if (FR.isEmpty(name)) {
                return;
            }
            this.showCardByIndex(this.name2Index[name.toUpperCase()]);
        },

        doResize: function (give) {
            if (!give || (this.options.width == give.width && this.options.height == give.height)) {
                return;
            }

            if (this.element.height() > 0) {
                this._initBackGround();
            }

            var opts = this.options;

            //其他的就从父类里做resize
            FR.FormCardLayout.superclass.doResize.call(this, give);

            this.element.css({
                width: opts.width,
                height: opts.height,
                left: opts.left,
                top: opts.top
            });
            this.doLayout();
        },



        doLayout: function () {
            FR.FormCardLayout.superclass.doLayout.apply(this, arguments);
        },

        animate: function () {
            var self = this;
            if (!self.options.isCarousel) {
                return;
            }
            var timeInterval = self.options.carouselInterval * 1000;
            self.clock = setInterval(function() {
                $("#" + self.tabID).mouseenter(function() {
                    self.sliderShow();
                    clearInterval(self.clock);
                }).mouseleave(function() {
                    self.sliderBlank();
                    clearInterval(self.clock);
                    self.animate();
                });
                self.gotoNextTab();
            }, timeInterval);
        },

        gotoNextTab: function () {
            var amount = this.options.items.length;
            var current = this.getShowIndex();
            var next = (current + 1) % amount;
            this.showCardByIndex(next);
        }
    });
    $.shortcut('cardlayout', FR.FormCardLayout);

    /**
     * 自适应布局
     *
     * 		@example
     * 		var renderEl = $('body');
     *     	var layout = new FR.AdaptiveLayout({
 	 *              renderEl : renderEl,
     *              items : [
     *                  {
     *                      type : 'button',
     *                      text : '(0, 0, 120, 24)',
     *                      x : 0,
     *                      y : 0,
     *                      width : 120,
     *                      height : 24
     *               },
     *               {
     *                      type : 'button',
     *                      text : '(0, 0, auto, auto)',
     *                      x : 40,
     *                      y : 30
     *               }
     *              ]
     *     });
     *     layout.doLayout();
     *
     * @class FR.AdaptiveLayout
     * @extends FR.Layout
     */
    FR.AdaptiveLayout = FR.extend(FR.Layout, /**@class FR.AdaptiveLayout*/ {

        _defaultConfig: function () {
            /**继承父类的方法*/
            return $.extend(FR.AdaptiveLayout.superclass._defaultConfig.apply(), {
                baseCls: 'fr-quick-adaptive-layout'
            });
        },

        _init : function () {
            FR.AdaptiveLayout.superclass._init.apply(this, arguments);
            var opts = this.options;
            if (!$.isArray(opts.items)) {
                opts.items = [];
                return;
            }
            var items = opts.items;
            opts.widgets = [];
            for (var i = 0; i < items.length; i++) {
                var itemConfig = items[i];
                if (!itemConfig.style) {
                    itemConfig.style = opts.style;
                }
                if (itemConfig && itemConfig.type) {
                    var widget = FR.createWidget($.extend(itemConfig, {
                        width: itemConfig.width,
                        height: itemConfig.height,
                        resultWidgets: opts.resultWidgets
                    }));
                    // 将子widget放到widgets对象里面,以便在doLayout的时候方便使用
                    opts.widgets.push(widget);
                    var element = widget.element;
                    itemConfig.el = element;
                    this.element.append(element);
                    widget.options.adaptiveLayoutItems = items;
                    widget.options.layout  = this;
                }

            }
            this.element.data('jlayout', jLayout.adaptive(opts));
        },

        doResize: function (give) {
            if (this.element.height() > 0) {
                FR.AdaptiveLayout.superclass._initBackGround.apply(this, arguments);
            }
            var opts = this.options;
            if (opts.width == give.width && opts.height == give.height) {
                return;
            }
            var self = this;
            FR.AdaptiveLayout.superclass.doResize.call(self, give);

            self.element.css({
                width: give ? (give.width || opts.width) : opts.width,
                height: give ? (give.height || opts.height) : opts.height,
                left: give ? (give.left || opts.left) : opts.left,
                top: give ? (give.top || opts.top) : opts.top
            });
            self.doLayout();
        },

        doLayout: function () {
            FR.AdaptiveLayout.superclass.doLayout.apply(this, arguments);
        },

        setInnerWidgetVisible: function (widgetName, currentWidget, visible) {
            var self = this;
            var params = {
                op: 'fr_form',
                cmd: 'visible_config',
                widgetName: widgetName,
                visibility: visible,
                sessionID: FR.SessionMgr.getSessionID(),
                _SHOWPARA: $('.parameter-container-collapseimg-down').length === 0,
                _SHOWPARATEMPLATE : $('[widgetName=paramsTemplate]').length !== 0
            };
            var browserSize = {
                totalWidth:  FR.windowWidth,
                totalHeight:  FR.windowHeight
            };
            $.extend(params, browserSize);
            FR.ajax({
                url: FR.servletURL,
                type: 'POST',
                async: false,
                data: params,
                complete: function (res, status) {
                    if(!res.responseText){
                        return;
                    }
                    var response = FR.jsonDecode(res.responseText);
                    if(response.status !== "success"){
                        return;
                    }
                    self.dealWidgetVisible(res, currentWidget, visible);
                }
            });

        },
        dealWidgetVisible : function (res, currentWidget, visible) {
            var self = this;

            function getItemByName(name) {
                var items = self.options.items;
                for (var t = 0; t < items.length; t++) {
                    if (items[t].widgetName && items[t].widgetName.toLowerCase() === name.toLowerCase()) {
                        return items[t];
                    }
                }
                return null;
            }

            var form = this.options.form;
            var response = FR.jsonDecode(res.responseText);
            //处理组件可见情况
            if (visible) {
                currentWidget.options.invisible = false;
                currentWidget.element.show();
                if (response.widgetSizeInfo) {
                    var widgetSizeInfo = response.widgetSizeInfo;
                    for (var i = widgetSizeInfo.length - 1; i >= 0; i--) {
                        var name = widgetSizeInfo[i].widgetName;
                        var widget = form.getWidgetByName(name);
                        var item = getItemByName(name);
                        widget.reload();
                        if (widget.titleWidget) {
                            widget = widget.titleWidget;
                        }
                        var widgetX = widgetSizeInfo[i].x;
                        var widgetY = widgetSizeInfo[i].y;
                        var width = widgetSizeInfo[i].width;
                        var height = widgetSizeInfo[i].height;
                        item.x = widgetX;
                        item.y = widgetY;
                        item.width = width;
                        item.height = height;
                        widget.doResize({"left": widgetX, "top": widgetY, "width": width, "height": height});

                    }
                    return;
                }
            }
            //处理组件不可见情况
            var currentItem = getItemByName(currentWidget.getName());
            if (currentItem && currentItem.width === 0 || currentItem.height === 0) {
                return;
            }

            function calculateInterval(array) {
                for (var i = 0; i < array.length; i++) {
                    if (!array[i].trisection) {
                        var name = array[i].widgetName,
                            direction = array[i].extendDirection,
                            tempItem = getItemByName(name);
                        //处理布局三等分情形的间隔
                        if (direction === "down") {
                            return tempItem.y - currentItem.y - currentItem.height;
                        }
                        if (direction === "up") {
                            return currentItem.y - tempItem.y - tempItem.height;
                        }
                    }
                }
            }

            if (response.extendInfo.length > 0) {
                for (var i = 0; i < response.extendInfo.length; i++) {
                    var aName = response.extendInfo[i].widgetName,
                        direction = response.extendInfo[i].extendDirection,
                        tempItem = getItemByName(aName);
                    if (direction === "right") {
                        tempItem.width = tempItem.width + tempItem.x - currentItem.x;
                        tempItem.x = currentItem.x;
                        var tempR = form.getWidgetByName(aName);
                        tempR.reload();
                        tempR = tempR.titleWidget ? tempR.titleWidget : tempR;
                        tempR.doResize({"left": tempItem.x, "width": tempItem.width});
                    }
                    if (direction === "left") {
                        tempItem.width = currentItem.width + currentItem.x - tempItem.x;
                        var tempL = form.getWidgetByName(aName);
                        tempL.reload();
                        tempL = tempL.titleWidget ? tempL.titleWidget : tempL;
                        tempL.doResize({"width": tempItem.width});
                    }
                    if (direction === "down") {
                        if (response.extendInfo[i].trisection) {
                            var interval = calculateInterval(response.extendInfo);
                        }
                        tempItem.height = response.extendInfo[i].trisection ? tempItem.height - currentItem.height - interval : tempItem.y + tempItem.height - currentItem.y;
                        tempItem.y = response.extendInfo[i].trisection ? tempItem.y + currentItem.height + interval : currentItem.y;
                        var tempD = form.getWidgetByName(aName);
                        tempD.reload();
                        tempD = tempD.titleWidget ? tempD.titleWidget : tempD;
                        tempD.doResize({
                            "top": tempItem.y,
                            "height": tempItem.height
                        });
                    }
                    if (direction === "up") {
                        if (response.extendInfo[i].trisection) {
                            var interval = calculateInterval(response.extendInfo);
                        }
                        tempItem.height = response.extendInfo[i].trisection ? tempItem.height - currentItem.height - interval : currentItem.y + currentItem.height - tempItem.y;
                        var tempU = form.getWidgetByName(aName);
                        tempU.reload();
                        tempU = tempU.titleWidget ? tempU.titleWidget : tempU;
                        tempU.doResize({"height": tempItem.height});
                    }
                }
            }
            currentItem.width = 0;
            currentItem.height = 0;
            currentWidget.doResize({"width": 0, "height": 0});
            currentWidget.options.invisible = true;
            currentWidget.element.hide();
        }

    });
    $.shortcut("fit", FR.AdaptiveLayout);

    /**
     * 控件专属的原样缩放布局，即布局里只放一个控件，控件高度为21，宽度和布局容器一样
     *
     *     @example
     *     var renderEl = $('body');
     *     var layout = new FR.ScaleLayout({
     *              renderEl : renderEl,
     *              items : [
     *                  {
     *                      type : 'button',
     *                      text : 'scale',
     *               }
     *              ]
     *     });
     *     layout.doLayout();
     *
     * @class FR.ScaleLayout
     * @extends FR.Layout
     */
    FR.ScaleLayout = FR.extend(FR.Layout, /**@class FR.ScaleLayout*/{

        _defaultConfig: function () {
            return $.extend(FR.ScaleLayout.superclass._defaultConfig.apply(), {
                baseCls: 'fr-scalelayout',
                scrollable: false
            });
        },

        _init: function () {
            FR.ScaleLayout.superclass._init.apply(this, arguments);
            var opts = this.options;
            this.element.addClass(opts.baseCls);
            if (!$.isArray(opts.items)) {
                opts.items = [];
                return;
            }
            var items = opts.items, i, len = items.length;
            opts.widgets = [];
            var $container = this.element;
            for (i = 0; i < len; i++) {
                var item = items[i];
                if (!item.style) {
                    item.style = opts.style;
                }
                if (item.type) {
                    item.el = item;
                }
                if (item.el.type) {
                    var widget = FR.createWidget($.extend(item.el, {
                        resultWidgets: opts.resultWidgets
                    }));
                    opts.widgets.push(widget);
                    item.el = widget.element;
                    $container.append( item.el);
                }
            }
            this.element.data('jlayout', jLayout.scale(opts));
        },

        doResize: function (give) {
            FR.ScaleLayout.superclass.doResize.call(this, give);
            var opts = this.options;
            this.element.css({
                width: (give ? (give.width || opts.width) : opts.width),
                height: give ? (give.height || opts.height) : opts.height,
                left: give ? (give.left || opts.left) : opts.left,
                top: give ? (give.top || opts.top) : opts.top
            });
            this.doLayout();
        },
        doLayout: function () {
            FR.ScaleLayout.superclass.doLayout.apply(this, arguments);
        }
    });
    $.shortcut('scale', FR.ScaleLayout);

    /**
     * 绝对布局，里面所有的元素由有横坐标、纵坐标、长以及宽属性决定其位置和大小
     *
     *     @example
     *     var renderEl = $('body');
     *     var layout = new FR.AbsoluteLayout({
     *              renderEl : renderEl,
     *              items : [
     *                  {
     *                      type : 'button',
     *                      text : '(0, 0, 120, 24)',
     *                      x : 0,
     *                      y : 0,
     *                      width : 120,
     *                      height : 24
     *               },
     *               {
     *                      type : 'button',
     *                      text : '(0, 0, auto, auto)',
     *                      x : 40,
     *                      y : 30
     *               }
     *              ]
     *     });
     *     layout.doLayout();
     *
     * @class FR.AbsoluteLayout
     * @extends FR.Layout
     *
     * @cfg {JSON} options 配置属性
     * @cfg {Array} options.items 字组件数组
     */
    FR.AbsoluteLayout = FR.extend(FR.Layout, {
        _defaultConfig: function () {
            return $.extend(FR.AbsoluteLayout.superclass._defaultConfig.apply(), {
                baseCls: 'fr-absolutelayout',
                scrollable: false
            });
        },

        _init: function () {
            FR.AbsoluteLayout.superclass._init.apply(this, arguments);
            var opts = this.options;
            if (opts.absoluteCompState === 1) {
                this.element.css({
                    overflow: 'auto'
                });
            }
            this.element.addClass(opts.baseCls);
            if (!$.isArray(opts.items)) {
                opts.items = [];
                return;
            }
            var items = opts.items, i, len = items.length;
            opts.widgets = [];
            var $container = this.element;
            for (i = 0; i < len; i++) {
                var itemConfig = items[i];
                if (opts.absoluteCompState === 0 && !opts.hasResize){//后台调整过了之后不用再次调整了
                    if(opts.absoluteResolutionScaleW && opts.absoluteResolutionScaleH){
                        itemConfig.x = parseInt(itemConfig.x / opts.absoluteResolutionScaleW);
                        itemConfig.y = parseInt(itemConfig.y / opts.absoluteResolutionScaleH);
                        itemConfig.width = parseInt(itemConfig.width / opts.absoluteResolutionScaleW);
                        //xiaxiang: WTitleLayout.TITLE_HEIGHT = 36, title高度固定，应该先减去title的高度再缩放
                        if(itemConfig.type === "title") {
                            itemConfig.height = parseInt(((itemConfig.height - 36) / opts.absoluteResolutionScaleH) + 36);
                        } else {
                            itemConfig.height = parseInt(itemConfig.height / opts.absoluteResolutionScaleH);
                        }
                    }
                }
                if (!itemConfig.style) {
                    itemConfig.style = opts.style;
                }
                if (itemConfig.type) {
                    itemConfig.el = itemConfig;
                }
                if (itemConfig.el.type) {
                    var widget = FR.createWidget($.extend(itemConfig.el, {
                        resultWidgets: opts.resultWidgets
                    }));
                    opts.widgets.push(widget);
                    var element = widget.element;
                    element.css({left: itemConfig.x, top: itemConfig.y, position: "absolute"});
                    items[i].el = element;
                    $container.append(element);
                    widget.doResize({width: itemConfig.width, height: itemConfig.height});
                    widget.options.layout  = this;
                } else if (itemConfig.el instanceof $) {
                    var element = itemConfig.el;
                    element.css({left: itemConfig.x, top: itemConfig.y, position: "absolute"});
                    $container.append(element);
                }
            }
            this.element.data('jlayout', jLayout.absolute(opts));
            if (FR.Browser.msie && !$.support.boxModel) {
                if (opts.height === 0) {
                    opts.height = 1;
                }
                if (opts.width === 0) {
                    opts.width = 1;
                }
            }
        },

        setInnerWidgetVisible: function (widgetName, currentWidget, visible) {
            var self = this;
            var params = {
                op: 'fr_form',
                cmd: 'visible_config',
                widgetName: widgetName,
                visibility: visible,
                sessionID: FR.SessionMgr.getSessionID(),
                _SHOWPARA: $('.parameter-container-collapseimg-down').length === 0,
                _SHOWPARATEMPLATE : $('[widgetName=paramsTemplate]').length !== 0
            };
            var browserSize = {
                totalWidth:  FR.windowWidth,
                totalHeight:  FR.windowHeight
            };
            $.extend(params, browserSize);
            FR.ajax({
                url: FR.servletURL,
                type: 'POST',
                async: false,
                data: params,
                complete: function (res, status) {
                    if (!res.responseText) {
                        return;
                    }
                    var response = FR.jsonDecode(res.responseText);
                    if (response.status !== "success") {
                        return;
                    }
                    self.dealWidgetVisible(currentWidget, visible);
                }
            });
        },

        dealWidgetVisible : function (currentWidget, visible) {
            if (visible) {
                currentWidget.options.invisible = false;
                currentWidget.element.show();
            }else{
                currentWidget.options.invisible = true;
                currentWidget.element.hide();
            }
        },

        doResize: function (give) {
            if (this.element.height() > 0) {
                FR.AbsoluteLayout.superclass._initBackGround.apply(this, arguments);
            }
            FR.AbsoluteLayout.superclass.doResize.call(this, give);
            var opts = this.options;
            this.element.css({
                width: (give ? (give.width || opts.width) : opts.width),
                height: give ? (give.height || opts.height) : opts.height,
                left: give ? (give.left || opts.left) : opts.left,
                top: give ? (give.top || opts.top) : opts.top
            });
            //wei : 里面的控件也要doResize一下的。
            for (var i = 0, len = this.options.widgets.length; i < len; i++) {
                var widget = this.options.widgets[i];
                if ($.isFunction(widget.doResize)) {
                    //我们有的控件判断了doResize的参数是否空，是就用option.width/height，有的就没做判断，调用doResize会抛错。
                    widget.doResize({});
                }
            }
        },
        doLayout: function () {
            FR.AbsoluteLayout.superclass.doLayout.apply(this, arguments);
            for (var i = 0, len = this.options.widgets.length; i < len; i++) {
                var widget = this.options.widgets[i];
                if ($.isFunction(widget.doLayout)) {
                    widget.doLayout();
                }
            }
        }
    });
    $.shortcut('absolute', FR.AbsoluteLayout);

    FR.LazyAbsoluteLayout = FR.extend(FR.AbsoluteLayout, {

        lazyAddItem: function (items) {
            if (items === undefined || items === null) {
                return;
            }
            var opts = this.options;
            var $container = this.element;
            var len = items.length;
            for (i = 0; i < len; i++) {
                var item = items[i];
                //后台调整过了之后不用再次调整了
                if (opts.absoluteCompState === 0 && !opts.hasResize) {
                    if (opts.absoluteResolutionScaleW && opts.absoluteResolutionScaleH) {
                        item.x = parseInt(item.x / opts.absoluteResolutionScaleW);
                        item.y = parseInt(item.y / opts.absoluteResolutionScaleH);
                        item.width = parseInt(item.width / opts.absoluteResolutionScaleW);
                        //xiaxiang: WTitleLayout.TITLE_HEIGHT = 36, title高度固定，应该先减去title的高度再缩放
                        if (item.type === "title") {
                            item.height = parseInt(((item.height - 36) / opts.absoluteResolutionScaleH) + 36);
                        } else {
                            item.height = parseInt(item.height / opts.absoluteResolutionScaleH);
                        }
                    }
                }
                if (!item.style) {
                    item.style = opts.style;
                }
                if (item.type) {
                    item.el = item;
                }
                var element = {};
                if (item.el.type) {
                    var widget = FR.createWidget($.extend(item.el, {
                        resultWidgets: opts.resultWidgets
                    }));
                    opts.widgets.push(widget);
                    element = widget.element;
                    element.css({left: item.x, top: item.y, position: "absolute"});
                    items[i].el = element;
                    $container.append(element);
                    widget.doResize({width: item.width, height: item.height});
                    widget.options.layout = this;
                } else if (item.el instanceof $) {
                    element = item.el;
                    element.css({left: item.x, top: item.y, position: "absolute"});
                    $container.append(element);
                }
            }
            this.element.data('jlayout', jLayout.absolute(opts));
        }
    });
    $.shortcut('lazyabsolute', FR.LazyAbsoluteLayout);


    FR.CardTagLayoutS = FR.extend(FR.Layout, {

        _init: function () {
            FR.CardTagLayoutS.superclass._init.apply(this, arguments);
            this.canvas = document.createElement("canvas");
            this.context = this.canvas.getContext("2d");
            this.element.append($(this.canvas));
            this.mouseInTab = -1;
            this.delta = 0;
            this.selectTabIdx = this.checkCardShowIndex(0);
            this._drawTabs(this.context, "initial");
            this._addMouseEventListener();
            this.canvas.style.position = "absolute";
        },

        checkCardShowIndex:  function (index) {
            var  showIndex = 0, opts = this.options;
            var items = opts.items, len = items.length;
            for(var i = index; i < len; i++){
                if(!items[i].el.invisible){
                    showIndex = i;
                    break;
                }
                if (i === len - 1) {
                    i = -1;
                }
                if (i === index - 1) {
                    showIndex = -1;
                    break;
                }
            }
            return showIndex;
        },

        //向canvas画布注册鼠标事件
        _addMouseEventListener: function () {
            var self = this;
            var M = {
                onMouseOut: function (e) {
                    self._triggerMouseEvent(e, self, "initial");
                    self.mouseInTab = -1;
                },
                onMouseDown: function (e) {
                    self._triggerMouseEvent(e, self, "click");
                },
                onMouseUp: function (e) {
                    self._triggerMouseEvent(e, self, "initial");
                },
                onMouseMove: function (e) {
                    self._triggerMouseEvent(e, self, "over");
                }
            };
            $(this.canvas).mouseout(M.onMouseOut)
                .mousedown(M.onMouseDown)
                .mouseup(M.onMouseUp)
                .mousemove(M.onMouseMove);
        },


        //判断鼠标位置进行相应事件触发
        _triggerMouseEvent: function (e, self, type) {
            // 取得画布上被单击的点
            var clickX = e.offsetX - self.canvas.offsetLeft;
            var clickY = e.offsetY - self.canvas.offsetTop;
            var items = self.options.items;
            var context = this.context;
            var scaleX = this.canvas.width / this.options.width;
            var scaleY = this.canvas.height / this.options.height;
            var currentMouseInPath = -1;
            // 查找被单击的tab
            for (var i = 0; i < items.length; i++) {
                var tab = items[i];
                //不绘制不可见tab
                if(tab.el && tab.el.invisible){
                    continue;
                }
                if (tab.el.type === "cardswitch") {
                    var point = {"x": clickX * scaleX, "y": clickY * scaleY, isPointInPath: false};
                    //模拟路径确定鼠标所在位置，不进行绘制
                    context.save();
                    self._translateOrigin(tab);
                    self._createTabPath(tab, i, point);
                    if (point.isPointInPath) {
                        currentMouseInPath = i;
                    }
                    context.restore();
                }
            }
            //点击的时候先判断是否已经选中
            if (type === "click" && items[currentMouseInPath].el.listeners && self.selectTabIdx !== currentMouseInPath) {
                $.each(items[currentMouseInPath].el.listeners, function (idx, listener) {
                    listener.action.apply(self);
                    self.selectTabIdx = currentMouseInPath;
                })
            }
            if (currentMouseInPath !== -1) {
                this.canvas.style.cursor = "pointer";
            } else {
                this.canvas.style.cursor = "initial";
            }
            //防止鼠标移动的时候重复绘制
            if (type === "over" && self.mouseInTab === currentMouseInPath) {
                context.restore();
                return;
            }
            self.mouseInTab = currentMouseInPath;

            self._drawTabs(self.context, type);
        },

        setTabVisible :function (tabName, visible) {
            var opts = this.options;
            if(!opts.cardLayoutName){
                return;
            }
            var cardLayout = opts.form.getWidgetByName(opts.cardLayoutName);
            if(!cardLayout){
                return;
            }
            //先加载未初始化的tab
            cardLayout.setTabVisible(tabName, visible);
        },

        setItemVisible : function (index, visible) {
            this.options.items[index].el.invisible = !visible;
            this._reDrawTabs();
        },

        _translateOrigin: function(tab){
        },

        //绘制tabs
        _drawTabs: function (context, type) {
            //画布缩放比例，调整文字图片显示效果
            var scale = 2.5;
            //imgPool 用来加载所有要绘制的图片
            var imgPool = [];
            var self = this;
            this._calculateOriginPoint();
            this.canvas.width = this.options.width * scale;
            this.canvas.height = this.options.height * scale;
            this.canvas.style.width = this.options.width + "px";
            this.canvas.style.height = this.options.height + "px";
            var scaleX = this.canvas.width / this.options.width;
            var scaleY = this.canvas.height / this.options.height;
            if (isNaN(scaleX) || isNaN(scaleY)) {
                return;
            }
            this.context.scale(scaleX, scaleY);
            var items = this.options.items, len = items.length;

            //先将所有需要加载的图片都push进imgPool
            for (var j = 0; j < len; j++) {
                if (self.selectTabIdx === j) {
                    if (items[j].el.click && items[j].el.click.background) {
                        imgPool.push({background: items[j].el.click.background});
                    } else {
                        imgPool.push({background: self.options.selectBackground.background});
                    }
                    continue;
                }
                if (self.mouseInTab === j && items[j].el[type]) {
                    imgPool.push({background: items[j].el[type].background});
                } else if (items[j].el["initial"]) {
                    imgPool.push({background: items[j].el["initial"].background});
                } else {
                    imgPool.push({background: "white"});
                }
            }
            //加载图片
            this._loadAllImages(imgPool);
        },

        //计算原点位置
        _calculateOriginPoint: function () {

        },

        //加载所有图片
        _loadAllImages: function (imagePool) {
            var self = this;
            var hasLoadIndex = 0;
            for (var m = 0; m < imagePool.length; m++) {
                if (imagePool[m].background.indexOf("url") !== -1) {
                    var drawImg = new Image();
                    var startIdx = imagePool[m].background.indexOf("(");
                    var endIdx = imagePool[m].background.indexOf(")");
                    drawImg.src = imagePool[m].background.substring(startIdx + 1, endIdx);
                    (function (idx, image) {
                        image.onload = function () {
                            hasLoadIndex += 1;
                            //创建临时画布用于图片拉伸填充
                            var canvasTemp = self.createTempCanvas(self.options.items[idx], image);
                            var contextTemp = canvasTemp.getContext('2d');
                            contextTemp.drawImage(image,0,0, canvasTemp.width, canvasTemp.height);
                            var imgContext = self.context.createPattern(canvasTemp,'no-repeat');
                            imagePool[idx].background = imgContext;
                            if (hasLoadIndex === imagePool.length) {
                                self._drawPath(imagePool);
                            }
                        };
                    })(m, drawImg);
                } else {
                    hasLoadIndex += 1;
                    if (hasLoadIndex === imagePool.length) {
                        self._drawPath(imagePool);
                    }
                }
            }

        },

        createTempCanvas:function (item) {

        },

        //绘制路径
        _drawPath: function (imagePool) {
            var self = this;
            //清空画布，准备绘制
            self.context.clearRect(0, 0, self.canvas.width, self.canvas.height);
            var items = self.options.items, i, len = items.length;
            var drawItemPath = function (itemIdx) {
                var itemCfg = items[itemIdx];
                if(itemCfg.el.invisible){
                    return;
                }
                self.context.save();
                self._translateOrigin(itemCfg);
                self.context.fillStyle = imagePool[itemIdx].background;
                self._createTabPath(items[itemIdx], itemIdx);
                self.context.restore();
            };
            for (i = 0; i < len; i++) {
                var itemConfig = items[i];
                if (itemConfig && itemConfig.el && itemConfig.el.type === "cardswitch") {
                    if(i === self.selectTabIdx){
                        continue;
                    }
                    drawItemPath(i);
                }
            }
            //最后绘制选中的路径
            drawItemPath(self.selectTabIdx);
        },

        _drawTitle: function (context, xTab, width) {},


        //绘制指定TabPath
        _createTabPath: function (tab, a, point) {
            var method = "_create" + this.options.templateStyle + "TabPath";
            if (typeof this[method] === "function") {
                this[method].call(this, tab, a, point);
            }
        },

        _initBackGround: function () {
            if (!this.options.widgetBackground) {
                return;
            }

            FR.CardTagLayoutS.superclass._initFitBackground.apply(this, arguments);
        },

        showSelectTab: function (index) {
            if (index > -1 && index < this.options.items.length) {
                this.selectTabIdx = index;
            }
            this._drawTabs(this.context, 'initial');
        },

        showCardByIndex: function (index){
            var opts = this.options;
            if(!opts.cardLayoutName){
                return;
            }
            var cardLayout = opts.form.getWidgetByName(opts.cardLayoutName);
            if(!cardLayout){
                return;
            }
            cardLayout.showCardByIndex(index);

        },
        /**
         * 获取当前所显示布局容器的索引位置
         * @returns {*}
         */
        getShowIndex: function(){
            var opts = this.options;
            if(!opts.cardLayoutName){
                return;
            }
            var cardLayout = opts.form.getWidgetByName(opts.cardLayoutName);
            if(!cardLayout){
                return;
            }
            return cardLayout.getShowIndex();
        },

        doResize: function (give) {
            if (!give || (this.options.width == give.width && this.options.height == give.height)) {
                return;
            }

            if (this.element.height() > 0) {
                this._initBackGround();
            }
            FR.CardTagLayoutS.superclass.doResize.call(this, give);
            this._reDrawTabs();
        },

        _reDrawTabs : function () {
            this.delta = 0;
            this._drawTabs(this.context, "initial");
        }


    });
    $.shortcut('cardtaglayouts', FR.CardTagLayoutS);


    FR.CardTagLayoutSH = FR.extend(FR.CardTagLayoutS, {

        _init: function () {
            FR.CardTagLayoutSH.superclass._init.apply(this, arguments);
            this.canvas.style.left = "3px";
        },

        _translateOrigin: function(tab){
            this.context.translate(tab.el.x, 0);
        },

        //计算原点位置
        _calculateOriginPoint: function () {
            var items = this.options.items;
            var displayWidth = this.delta;
            for (var j = 0; j < items.length; j++) {
                if(items[j].el.invisible){
                    continue;
                }
                displayWidth += items[j].width;
                if (this.selectTabIdx === j) {
                    if (displayWidth > this.element.width()) {
                        this.delta += this.element.width() - displayWidth;
                    } else if (displayWidth < items[j].width) {
                        this.delta += (items[j].width - displayWidth);
                    }
                    break;
                }
            }
            var totalWidth = this.delta;
            for (var i = 0; i < items.length; i++) {
                if(items[i].el.invisible){
                    continue;
                }
                var itemConfig = items[i];
                if (itemConfig.el.type === "cardswitch") {
                    itemConfig.el.x = totalWidth;
                    totalWidth += itemConfig.width;
                }
            }
        },

        createTempCanvas:function (item) {
            var canvasTemp = document.createElement('canvas');
            canvasTemp.width = item.width;
            canvasTemp.height = this.options.height;
            return canvasTemp;
        },

        //绘制标题
        _drawTitle: function (context, xTab, width) {
            context.save();
            context.beginPath();
            context.fillStyle = this.options.fontcolor; //设置笔触的颜色
            //添加阴影
            if(this.options.fontShadow){
                context.shadowColor = "#000000";
                context.shadowOffsetX = 3;
                context.shadowOffsetY = 3;
                context.shadowBlur = 1;
            }
            context.font = this.options.font;
            var title = xTab.text;
            //先计算文本的高度
            var span = $("<span></span>");
            span.css("font", this.options.font).css('visibility', 'hidden');
            span.text(title);
            $("body").append(span);
            var textHeight = span.height();
            var textWidth = span.width();
            span.remove();
            if (this.options.textDirection === 0) {
                //垂直居中;
                context.textBaseline = "middle";
                //水平居中
                context.textAlign = "center";
                var x = width / 2, y = this.options.height / 2;
                context.fillText(title, x, y);
                if (this.options.decoration === "underline") {
                    context.moveTo(x - textWidth / 2, y + textHeight / 2);
                    context.lineTo(x + textWidth / 2, y + textHeight / 2);
                    context.stroke();
                }
                if (this.options.decoration === "line-through") {
                    context.moveTo(x - textWidth/2, y);
                    context.lineTo(x + textWidth/2, y);
                    context.stroke();
                }
            } else {
                //确定起始位置
                var startY = (this.options.height - textHeight * title.length) / 2;
                context.textBaseline = "top";
                context.textAlign = "center";
                //文本竖排
                for (var i = 0; i < title.length; i++) {
                    var x = width / 2, y = startY + textHeight * i;
                    context.fillText(title.charAt(i), x, y);
                    var charWidth = context.measureText(title.charAt(i)).width;
                    //绘制文字修饰
                    if (this.options.decoration === "underline") {
                        context.moveTo(x - charWidth/2, y + textHeight);
                        context.lineTo(x + charWidth/2, y + textHeight);
                        context.stroke();
                    }
                    if (this.options.decoration === "line-through") {
                        context.moveTo(x - charWidth/2, y + textHeight / 2);
                        context.lineTo(x + charWidth/2, y + textHeight / 2);
                        context.stroke();
                    }
                }
            }
            context.restore();
        },

        //锦旗式
        _createBannerTabPath: function (tab, a, point) {
            var width = tab.width, height = this.options.height,
                context = this.context,
                xTab = tab.el,
                mWidth = 20,  //这个宽度必须是固定的
                offset_y = 1;
            context.beginPath();
            context.moveTo(-mWidth, height / 2);
            context.lineTo(0, offset_y);
            context.lineTo(width, offset_y);
            context.lineTo(width - mWidth, height / 2);
            context.lineTo(width, height - offset_y);
            context.lineTo(0, height - offset_y);
            context.lineTo(-mWidth, height / 2);
            context.closePath();
            if (!point) {
                context.fill();
                context.lineWidth = 0.1;
                context.stroke();
                //添加阴影
                context.save();
                context.shadowColor = "#000000";
                context.shadowOffsetX = -4;
                context.shadowBlur = 4;
                context.beginPath();
                context.moveTo(width, offset_y);
                context.lineTo(width - mWidth, height / 2);
                context.lineTo(width, height - offset_y);
                context.stroke();
                context.restore();
                this._drawTitle(context, xTab, width - mWidth);
            } else if (context.isPointInPath(point.x, point.y)) {
                point.isPointInPath = true;
            }
        },

        //卡片式
        _createCardTabPath: function (tab, a, point) {
            var width = tab.width, height = this.options.height,
                context = this.context,
                xTab = tab.el,
                mWidth = 8,//三角形的底边长
                radiu = 4;//圆角半径
            context.beginPath();
            //先画三角形
            context.moveTo(0, height);
            context.lineTo(mWidth, height);
            context.lineTo(mWidth, radiu);
            context.closePath();
            if (!point) {
                context.fill();
                //添加阴影
                context.save();
                context.fillStyle = "#000000";
                context.globalAlpha = 0.2;
                context.beginPath();
                context.moveTo(0, height);
                context.lineTo(mWidth, height);
                context.lineTo(mWidth, radiu);
                context.closePath();
                context.fill();
                context.restore();
            } else if (context.isPointInPath(point.x, point.y)) {
                point.isPointInPath = true;
            }
            //再画圆角矩形
            context.beginPath();
            context.moveTo(mWidth, 0);
            context.arcTo(width, 0, width, height, radiu);
            context.lineTo(width, height);
            context.lineTo(mWidth, height);
            context.arcTo(mWidth, 0, width, 0, radiu);
            context.closePath();
            if (!point) {
                context.fill();
                this._drawTitle(context, xTab, width);
            } else if (context.isPointInPath(point.x, point.y)) {
                point.isPointInPath = true;
            }

        },

        //书签式
        _createBookMarkTabPath: function (tab, a, point) {
            var width = tab.width, height = this.options.height,
                context = this.context,
                xTab = tab.el,
                mWidth = 20,//三角形的底边长(宽度固定)
                offset_y = 1,
                radiu = 5,//圆角半径
                offset_x = 3;
            context.beginPath();
            context.moveTo(mWidth, offset_y);
            context.lineTo(width, offset_y);
            context.lineTo(width, height - offset_y);
            context.lineTo(mWidth, height - offset_y);
            context.arcTo( - offset_x, height / 2, mWidth, offset_y, radiu);
            context.lineTo(mWidth, offset_y);
            context.closePath();
            if (!point) {
                context.strokeStyle = "#000000";
                context.lineWidth = 0.1;
                context.stroke();
                context.fill();
                this._drawTitle(context, xTab, width);
            } else if (context.isPointInPath(point.x, point.y)) {
                point.isPointInPath = true;
            }
            //选中时绘制内部小圆
            if (this.selectTabIdx !== a) {
                return;
            }
            context.save();
            context.beginPath();
            context.fillStyle = "white";
            context.arc(mWidth - radiu, height / 2, radiu, 0, 2 * Math.PI);
            context.closePath();
            if (!point) {
                context.stroke();
                context.fill();
            } else if (context.isPointInPath(point.x, point.y)) {
                point.isPointInPath = true;
            }
            context.restore();
        },

        //梯形
        _createTrapezoidTabPath: function (tab, a, point) {
            var width = tab.width, height = this.options.height,
                context = this.context,
                xTab = tab.el,
                mWidth = 24,//三角形的底边长
                radiu = 5;//圆角半径
            context.beginPath();
            context.moveTo(0, height);
            context.lineTo(width, height);
            context.arcTo(width - mWidth, 0, width - mWidth - 1, 0, radiu);
            context.arcTo(0, 0, 0, height, radiu);
            context.closePath();
            if (!point) {
                context.fill();
                this._drawTitle(context, xTab, width - mWidth);
            } else if (context.isPointInPath(point.x, point.y)) {
                point.isPointInPath = true;
            }
        },

        //菜单式
        _createMenuTabPath: function (tab, a, point) {
            var width = tab.width, height = this.options.height,
                context = this.context,
                xTab = tab.el,
                mWidth = 16,//三角形的底边长
                radiu = height > 40 ? 20 : height / 2,//圆角半径
                offset_y = 1;
            context.beginPath();
            context.moveTo(0, height);
            context.arcTo(radiu, height, radiu, radiu, radiu);
            context.lineTo(radiu, radiu);
            context.arcTo(radiu, offset_y, radiu * 2, offset_y, radiu);
            context.lineTo(width + mWidth - radiu * 2, offset_y);
            context.arcTo(width + mWidth - radiu, offset_y, width + mWidth - radiu, radiu, radiu);
            context.lineTo(width + mWidth - radiu, radiu);
            context.arcTo(width + mWidth - radiu, height, width + mWidth, height, radiu);
            context.closePath();
            if (!point) {
                context.lineWidth = 0.1;
                context.stroke();
                context.fill();
                this._drawTitle(context, xTab, width + mWidth);
            } else if (context.isPointInPath(point.x, point.y)) {
                point.isPointInPath = true;
            }
        },

        //五边形
        _createPentagonTabPath: function (tab, a, point) {
            var width = tab.width, height = this.options.height,
                context = this.context,
                xTab = tab.el,
                offsetWidth = 6,
                offset_y = 1,
                mWidth = 16;//三角形的底边长
            context.beginPath();
            context.moveTo(0, offset_y);
            context.lineTo(width - mWidth - offsetWidth, offset_y);
            context.lineTo(width - offsetWidth, mWidth);
            context.lineTo(width - offsetWidth, height - offset_y);
            context.lineTo(0, height - offset_y);
            context.closePath();
            if (!point) {
                context.lineWidth = 0.1;
                context.stroke();
                context.fill();
                this._drawTitle(context, xTab, width - offsetWidth);
            } else if (context.isPointInPath(point.x, point.y)) {
                point.isPointInPath = true;
            }
            context.beginPath();
            //画小梯形
            context.moveTo(width - offsetWidth, mWidth);
            context.lineTo(width, mWidth + offsetWidth - offset_y);
            context.lineTo(width, height - offset_y);
            context.lineTo(width - offsetWidth, height - offset_y);
            context.closePath();
            if (!point) {
                context.save();
                context.lineWidth = 0.1;
                context.stroke();
                context.fill();
                context.restore();
                context.save();
                //添加阴影效果
                context.beginPath();
                //画小梯形
                context.moveTo(width - offsetWidth, mWidth);
                context.lineTo(width, mWidth + offsetWidth - offset_y);
                context.lineTo(width, height - offset_y);
                context.lineTo(width - offsetWidth, height - offset_y);
                context.closePath();
                context.fillStyle = "#000000";
                context.globalAlpha = 0.2;
                context.fill();
                context.restore();
            } else if (context.isPointInPath(point.x, point.y)) {
                point.isPointInPath = true;
            }

        }
    });
    $.shortcut('cardtaglayoutsh', FR.CardTagLayoutSH);

    FR.CardTagLayoutSV = FR.extend(FR.CardTagLayoutS, {

        _init: function () {

            FR.CardTagLayoutSV.superclass._init.apply(this, arguments);
            this.canvas.style.top = "3px";
        },

        _translateOrigin: function(tab){
            this.context.translate(0, tab.el.y);
        },


        //计算原点位置
        _calculateOriginPoint: function () {
            var displayHeight = this.delta;
            var items = this.options.items;
            for (var j = 0; j < items.length; j++) {
                if(items[j].el.invisible){
                    continue;
                }
                displayHeight += items[j].height;
                if (this.selectTabIdx === j) {
                    if (displayHeight > this.element.height()) {
                        this.delta += this.element.height() - displayHeight;
                    } else if (displayHeight < items[j].height ) {
                        this.delta += (items[j].height - displayHeight);
                    }
                }
            }
            var totalHeight = this.delta;
            for (var i = 0; i < items.length; i++) {
                if(items[i].el.invisible){
                    continue;
                }
                var itemConfig = items[i];
                if (itemConfig.el.type === "cardswitch") {
                    itemConfig.el.y = totalHeight;
                    totalHeight += itemConfig.height;
                }
            }
        },

        createTempCanvas:function (item) {
            var canvasTemp = document.createElement('canvas');
            canvasTemp.width = this.options.width;
            canvasTemp.height = item.height;
            return canvasTemp;
        },

        //绘制标题
        _drawTitle: function (context, xTab, height) {
            context.save();
            context.beginPath();
            context.fillStyle = this.options.fontcolor;
            //添加阴影
            if(this.options.fontShadow){
                context.shadowColor = "#000000";
                context.shadowOffsetX = 3;
                context.shadowOffsetY = 3;
                context.shadowBlur = 1;
            }
            context.font = this.options.font;
            context.textAlign = "center";
            var title = xTab.text;
            //先计算文本的高度
            var span = $("<span></span>");
            span.css("font", this.options.font).css('visibility', 'hidden');
            span.text(title);
            $("body").append(span);
            var textHeight = span.height();
            var textWidth = span.width();
            span.remove();
            if (this.options.textDirection === 0) {
                //垂直居中;
                context.textBaseline = "middle";
                //水平居中
                context.textAlign = "center";
                var x = this.options.width / 2, y = height / 2;
                context.fillText(title, x, y);
                if (this.options.decoration === "underline") {
                    context.moveTo(x - textWidth / 2, y + textHeight / 2);
                    context.lineTo(x + textWidth / 2, y + textHeight / 2);
                    context.stroke();
                }
                if (this.options.decoration === "line-through") {
                    context.moveTo(x - textWidth/2, y);
                    context.lineTo(x + textWidth/2, y);
                    context.stroke();
                }

            } else {
                //确定起始位置
                var startY = (height - textHeight * title.length) / 2;
                context.textBaseline = "top";
                //文本竖排
                for (var i = 0; i < title.length; i++) {
                    var x = this.options.width / 2, y = startY + textHeight * i;
                    //计算起始位置
                    context.fillText(title.charAt(i), x, y);
                    var charWidth = context.measureText(title.charAt(i)).width;
                    //绘制文字修饰
                    if (this.options.decoration === "underline") {
                        context.moveTo(x - charWidth/2, y + textHeight);
                        context.lineTo(x + charWidth/2, y + textHeight);
                        context.stroke();
                    }
                    if (this.options.decoration === "line-through") {
                        context.moveTo(x - charWidth/2, y + textHeight / 2);
                        context.lineTo(x + charWidth/2, y + textHeight / 2);
                        context.stroke();
                    }
                }
            }
            context.restore();
        },

        //锦旗式
        _createBannerTabPath: function (tab, a, point) {
            var width = this.options.width, height = tab.height,
                context = this.context,
                xTab = tab.el,
                mHeight = 20,//这个高度必须是固定的
                offset_x = 1;
            context.beginPath();
            context.moveTo(width / 2, -mHeight);
            context.lineTo(offset_x, 0);
            context.lineTo(offset_x, height);
            context.lineTo(width / 2, height - mHeight);
            context.lineTo(width - offset_x, height);
            context.lineTo(width - offset_x, 0);
            context.lineTo(width / 2, -mHeight);
            context.closePath();
            if (!point) {
                context.fill();
                context.lineWidth = 0.1;
                context.stroke();
                //添加阴影
                context.save();
                context.shadowColor = "#000000";
                context.shadowOffsetX = -4;
                context.shadowOffsetY = 0;
                context.shadowBlur = 4;
                context.beginPath();
                context.moveTo(offset_x, height);
                context.lineTo(width / 2, height - mHeight);
                context.lineTo(width - offset_x, height);
                context.stroke();
                context.restore();
                this._drawTitle(context, xTab, height - mHeight);
            } else if (context.isPointInPath(point.x, point.y)) {
                point.isPointInPath = true;
            }
        },

        //卡片式
        _createCardTabPath: function (tab, a, point) {
            var width = this.options.width, height = tab.height,
                context = this.context,
                xTab = tab.el,
                mHeight = 8,//三角形的底边长
                radiu = 4;//圆角半径
            context.beginPath();
            //先画圆角矩形
            context.moveTo(width, 0);
            context.arcTo(0, 0, 0, height - mHeight, radiu);
            context.arcTo(0, height - mHeight, width, height - mHeight, radiu);
            context.lineTo(width, height - mHeight);
            context.closePath();
            if (!point) {
                context.fill();
                this._drawTitle(context, xTab, height);
            } else if (context.isPointInPath(point.x, point.y)) {
                point.isPointInPath = true;
            }
            //再画三角形
            context.beginPath();
            context.moveTo(width, height - mHeight);
            context.lineTo(width, height);
            context.lineTo(radiu, height - mHeight);
            context.closePath();
            if (!point) {
                context.fill();
                //添加阴影
                context.save();
                context.fillStyle = "#000000";
                context.globalAlpha = 0.2;
                context.beginPath();
                context.moveTo(width, height - mHeight);
                context.lineTo(width, height);
                context.lineTo(radiu, height - mHeight);
                context.fill();
                context.restore();
            } else if (context.isPointInPath(point.x, point.y)) {
                point.isPointInPath = true;
            }
        },

        //书签式
        _createBookMarkTabPath: function (tab, a, point) {
            var width = this.options.width, height = tab.height,
                context = this.context,
                xTab = tab.el,
                mHeight = 25,//三角形的底边长
                radiu = 5,//圆角半径
                offset_x = 1,
                offset_y = 3;
            context.beginPath();
            context.moveTo(width - offset_x, mHeight);
            context.lineTo(width - offset_x, height);
            context.lineTo(offset_x, height);
            context.lineTo(offset_x, mHeight);
            context.arcTo(width / 2,  - offset_y, width, mHeight, radiu);
            context.closePath();
            if (!point) {
                context.strokeStyle = "#000000";
                context.lineWidth = 0.1;
                context.stroke();
                context.fill();
                this._drawTitle(context, xTab, height);
            } else if (context.isPointInPath(point.x, point.y)) {
                point.isPointInPath = true;
            }
            //选中时绘制内部小圆
            if (this.selectTabIdx !== a) {
                return;
            }
            context.save();
            context.beginPath();
            context.fillStyle = "white";
            context.arc(width / 2, mHeight - radiu, radiu, 0, 2 * Math.PI);
            context.closePath();
            if (!point) {
                context.stroke();
                context.fill();
            } else if (context.isPointInPath(point.x, point.y)) {
                point.isPointInPath = true;
            }
            context.restore();
        },

        //梯形
        _createTrapezoidTabPath: function (tab, a, point) {
            var width = this.options.width, height = tab.height,
                context = this.context,
                xTab = tab.el,
                mHeight = 24,//三角形的底边长
                radiu = 5;//圆角半径
            context.beginPath();
            context.moveTo(width, 0);
            context.lineTo(width, height);
            context.arcTo(0, height - mHeight, 0, 0, radiu);
            context.arcTo(0, 0, width, 0, radiu);
            context.closePath();
            if (!point) {
                context.fill();
                this._drawTitle(context, xTab, height - mHeight);
            } else if (context.isPointInPath(point.x, point.y)) {
                point.isPointInPath = true;
            }
        },

        //菜单式
        _createMenuTabPath: function (tab, a, point) {
            var width = this.options.width, height = tab.height,
                context = this.context,
                xTab = tab.el,
                mHeight = 16,
                radiu = width > 40 ? 20 : width / 2,//圆角半径
                offset_x = 1;
            context.beginPath();
            context.moveTo(width, 0);
            context.arcTo(width, radiu, width / 2, radiu, radiu);
            context.lineTo(width / 2, radiu);
            context.arcTo(offset_x, radiu, offset_x, height + mHeight - radiu * 2, radiu);
            context.lineTo(offset_x, height + mHeight - radiu * 2);
            context.arcTo(offset_x, height + mHeight - radiu, width / 2, height + mHeight - radiu, radiu);
            context.lineTo(width / 2, height + mHeight - radiu);
            context.arcTo(width, height + mHeight - radiu, width, height + width, radiu);
            context.closePath();
            if (!point) {
                context.lineWidth = 0.1;
                context.stroke();
                context.fill();
                this._drawTitle(context, xTab, height + mHeight);
            } else if (context.isPointInPath(point.x, point.y)) {
                point.isPointInPath = true;
            }
        },

        //五边形
        _createPentagonTabPath: function (tab, a, point) {
            var width = this.options.width, height = tab.height,
                context = this.context,
                xTab = tab.el,
                offsetHeight = 6,
                mHeight = 16,
                offset_x = 1;
            context.beginPath();
            //先画五边形
            context.moveTo(offset_x, 0);
            context.lineTo(offset_x, height - mHeight - offsetHeight);
            context.lineTo(mHeight, height - offsetHeight);
            context.lineTo(width - offset_x, height - offsetHeight);
            context.lineTo(width - offset_x, 0);
            context.closePath();
            if (!point) {
                context.lineWidth = 0.1;
                context.stroke();
                context.fill();
                this._drawTitle(context, xTab, height - offsetHeight);
            } else if (context.isPointInPath(point.x, point.y)) {
                point.isPointInPath = true;
            }
            context.beginPath();
            //画小梯形
            context.moveTo(mHeight, height - offsetHeight);
            context.lineTo(mHeight + offsetHeight, height);
            context.lineTo(width - offset_x, height);
            context.lineTo(width - offset_x, height - offsetHeight);
            context.closePath();
            if (!point) {
                context.save();
                context.lineWidth = 0.1;
                context.stroke();
                context.fill();
                context.restore();
                context.save();
                //添加阴影效果
                context.beginPath();
                //画小梯形
                context.moveTo(mHeight, height - offsetHeight);
                context.lineTo(mHeight + offsetHeight, height);
                context.lineTo(width - offset_x, height);
                context.lineTo(width - offset_x, height - offsetHeight);
                context.closePath();
                context.fillStyle = "#000000";
                context.globalAlpha = 0.2;
                context.fill();
                context.restore();
            } else if (context.isPointInPath(point.x, point.y)) {
                point.isPointInPath = true;
            }
        }
    });
    $.shortcut('cardtaglayoutsv', FR.CardTagLayoutSV);


    FR.CardTitleLayout = FR.extend(FR.BorderLayout, {
        _init: function () {
            FR.CardTitleLayout.superclass._init.apply(this, arguments);
        },

        doResize: function (give) {
            FR.CardTitleLayout.superclass.doResize.call(this, give);
            this.adjustWidth(this.options);
        },

        adjustWidth: function (opts){
            var form = opts.form;
            if(!form || !opts.tagLayoutName){
                return;
            }
            var tagLayout = form.getWidgetByName(opts.tagLayoutName);
            if(!tagLayout){
                return;
            }
            //根据当前标题的宽度, 决定是否需要显示切换tab按钮
            var titleWidth = opts.titleWidth;
            var preBtn = form.getWidgetByName(opts.preBtnName) || this._getWidgetFromResultWidget(opts, opts.preBtnName);
            var nextBtn = form.getWidgetByName(opts.nextBtnName) ||this._getWidgetFromResultWidget(opts, opts.nextBtnName);
            if (preBtn && nextBtn && tagLayout.options.displayposition === 0 || tagLayout.options.displayposition === 2) {
                preBtn.setVisible(tagLayout.options.width  < titleWidth);
                nextBtn.setVisible(tagLayout.options.width  < titleWidth);
            }else{
                preBtn.setVisible(tagLayout.options.height < titleWidth);
                nextBtn.setVisible(tagLayout.options.height  < titleWidth );
            }
        },


        _getWidgetFromResultWidget : function (opts, name) {
            if (!name || !opts.resultWidgets) {
                return null;
            }
            if(name !== null){
                return opts.resultWidgets[name.toUpperCase()];
            }
        }
    });
    $.shortcut('cardtitlelayout', FR.CardTitleLayout);

})(jQuery);
/*
 * richer:下拉菜单
 *
 * [{type:'menu', text:'edit', onclick:'function(){}', submenu:false},
 *  {type:'menu', text:'file', onclick:'function(){}', submenu:false, sep:false},
 *  {type:'sep'}
 *  ]
 */
;(function($){
    FR.frMenu = function(opts){
        this.$menuRoot = $("<div class='fr-ui-core-menu menu'>");
        this.closeNow = true;
        this.init();
        this.applyOptions(opts);
        return this;
    };
    FR.frMenu.prototype = {
        init : function(){
            var self = this;
            this.$menuRoot.hover(
                function(){
                    //bug:69160;菜单栏在鼠标离开的时候某些特定位置没有触发close
                    self.closeNow = false;
                },
                function(e){
                    if(e && self.submenu && self.submenu.$menuRoot && (e.clientX < self.submenu.$menuRoot.offset().left)){
                        self.close(true);
                    }else{
                        self.close();
                    }
                });

            this.$menuRoot.appendTo('body');
        },

        hasSubmenu : function() {
            var foo = false;
            if (this.items) {
                $.each(this.items, function(idx, item){
                    if (item.submenu) {
                        foo = true;
                        return false;
                    }
                });
            }

            return foo;
        },

        applyOptions : function(opts) {
            var self = this;
            this.removechildren();
            this.$menuRoot.css("z-index", 3333)
            this.items = opts.items;
            this.$el = opts.$el;
            this.options = opts;
            this.destroyOnClose = opts.destroyOnClose != null ? opts.destroyOnClose : true;
            this.closeOnHover = true;
            if (this.hasSubmenu()) {
                this.submenu = new FR.frMenu({
                        destroyOnClose:false,
                        item:[]
                    });

            }
            if(this.$el) {
                this.$el.mouseout(function(){
                    if (self.resizeid != null) {
                        clearTimeout(self.resizeid);
                        self.resizeid = null;
                    }
                    self.resizeid = setTimeout(function () {
                        if(self.closeNow){
                            self.close();
                        }
                    }, 200);
                });
            }
            this.cItems = [];

            this.minWidth = opts.minWidth || 80;
            this.xxxfixclientH = opts.xxxfixclientH;
            this.xxxMMenu = opts.xxxMMenu;

            if ($.isArray(this.items)){
                this.addItems(this.items);
            }
            if (this.xxxMMenu) {
                if (contentPane && contentPane.$contentPane && !FR.xxxmenu_array) {
                    FR.xxxmenu_array = [];
                    contentPane.$contentPane.click(function() {
                        var ayyay = [];
                        for (var i = 0 ; i < FR.xxxmenu_array.length; i++) {
                            ayyay.unshift(FR.xxxmenu_array[i]);
                        }

                        for (var i = 0 ; i < ayyay.length; i++) {
                            ayyay[i].close(true);
                        }
                    });
                }
            }
        },

        addItems : function(items){
            for (var i = 0, len = items.length; i < len; i ++){
                this.addItem(items[i]);
            }
            if (this.minWidth && this.minWidth >= this.$menuRoot.width()) {
                this.$menuRoot.width(this.minWidth);
                this.$menuRoot.children("div").width(this.minWidth - 8);
            }
        },

        addItem : function(menu){
            var self = this;
            // 这里必须显式指定一个宽度，否则 IE 兼容性视图下有问题
            var $item = $("<div style='width:167px'>").appendTo(this.$menuRoot);

            // richer:分隔符
            if (menu.type === "sep"){
                $item.addClass("menu-sep").html("'&nbsp;'");
            } else {
                self.bindMenuItemEvent($item, menu);

                if(menu.color) {// kunsnat: mobileShowMenu
	        		var $menu_color = $("<div id=mc style='background-color:"
	        			+ menu.color + ";height:12px; width:12px; position:absolute; left:8px; top:4px'></div>").appendTo($item);
                }

                var $menu_text = $('<div class="menu-text"></div>').html(menu.src).appendTo($item);
                var text_width = $menu_text.position().left * 2 + $menu_text.width();
                if (this.minWidth < text_width) {
                    this.minWidth = text_width;
                }
                var icon = menu.iconSrc ? menu.iconSrc.replace("css:", "") : "";
                // richer:判断是否有图标
                if (icon){
                    $('<div class="menu-icon"></div>').addClass(icon).appendTo($item);
                }
                // richer:判断是否有子菜单
                if (menu.submenu){
                    var arrow = menu.arrowSrc ? menu.arrowSrc.replace("css:", "") : "";
                    // richer:判断是否有自定义箭头
                    if (arrow){
                        $('<div class="menu-customarrow"></div>').addClass(arrow).appendTo($item);
                    } else {
                        $('<div class="menu-rightarrow"></div>').appendTo($item);   // has sub menu
                    }
                }
                if ($.support.boxModel === true){
                    var height = $item.height() || 22;
                    $item.height(height - ($item.outerHeight() - $item.height()));
                }
                this.cItems[this.cItems.length] = $item;
            }
        },

        children : function() {
            return this.cItems;
        },

        bindMenuItemEvent : function($item, menu){
            $item.addClass("menu-item");
            var self = this;
            if (menu.submenu){
                $item.hover(
                    function(){
                        self.closeSub();
                        $item.siblings().each(function(){
                            $(this).removeClass('menu-active');
                        });
                        if ($item.attr('disabled')) {
                            return;
                        }
                        $item.addClass('menu-active');
                        if($.isArray(menu.submenu)){
                            var config = {
                                destroyOnClose : false,
                                minWidth : self.minWidth,
                                items : menu.submenu,
                                parMenu : self
                            };
                            self.submenu.applyOptions(config);
                            var left = $item.offset().left + $item.outerWidth() + 2;
                            if (left + self.submenu.$menuRoot.outerWidth() > FR.windowWidth){
                                left = $item.offset().left - self.submenu.$menuRoot.outerWidth();
                            }
//                            self.submenu.position(left, self.xxxfixclientH ? ($item.offset().top + $item.height() - self.submenu.$menuRoot.height() - 4) : ($item.offset().top - 3));
                            // 改成向下，客户bug28338
                            self.submenu.position(left,$item.offset().top);
                            self.submenu.show();

                        }
                    },
                    function(e){}
                );
            }else {
            	//neil: 这边不要用mouse down事件, 用click, 不然ie8下会有安全下载提示, 而不是弹窗.
                $item.click(function(e){
                    if ($item.attr('disabled')) {
                        return;
                    }
                    if(menu.chartEvent) {// 垃圾的方法: 先放这实现
                    	menu.chartEvent.chartGlyph.layerToDataPointNext(menu.dataPoint);
                    	menu.chartEvent.refreshing();
                    } else {
	                    menu.handler.call(self, e, this);
                    }
                    self.close(true);
                });
                $item.hover(
                    function(){
                        self.closeSub();
                        if ($item.attr('disabled')) {
                            return;
                        }
                        $item.siblings().each(function(){
                            $(this).removeClass('menu-active');
                        });
                        $item.addClass('menu-active');
                    },
                    function(e){
                        $item.removeClass('menu-active');
                    });
            }
        },

        position : function(l, t) {
            this.$menuRoot.css({left : l, top : t});
        },

        show : function() {
            this.$menuRoot.show();
            if(parentMenu=this.options.parMenu){
                parentMenu.closeOnHover = false;
            }
        },

        close : function(all){
            if(all){
                if(this.destroyOnClose) {
                    this.remove();
                } else {
                    this.closeSub();
                }
                if(parentMenu=this.options.parMenu){
                    parentMenu.close(true);
                } else {
                    this.$menuRoot.hide();
                }
            } else if(this.closeOnHover){
                if (this.destroyOnClose) {
                    this.remove();
                } else {
                    this.closeSub();
                    this.$menuRoot.hide();
                }
                if(parentMenu=this.options.parMenu){
                    parentMenu.closeOnHover=true;
                }
            }
        },

        remove : function() {
            this.$menuRoot.remove();
            if (this.$el) {
            	delete this.$el.fr_menu;
            }
            if (this.submenu) {
                this.submenu.remove();
            }
        },

        removechildren : function() {
            if (this.cItems) {
                for (var i = 0, len = this.cItems.length; i < len; i++) {
                    this.cItems[i].remove();
                }
            }
            if (this.submenu) {
                this.submenu.remove();
            }
        },

        closeSub : function() {
            if (this.submenu && ! this.submenu.$menuRoot.is(":hidden")) {
                this.submenu.close();
            }
        }
    }
})(jQuery);
/**
 * data相关的基类对象
 * 异步延时加载的数据有事件需要继承OB
 * FR.Record这种纯粹的数据对象则不需要
 * @class FR.Object
 */
FR.Object = function (config) {
    this.options = $.extend(this._defaultConfig(), config);
    this._init();
};
$.extend(FR.Object.prototype, /**@class FR.Object*/ {
    _defaultConfig: function () {
        return {};
    },
    _init: function() {
    }
});

FR.Record = FR.extend(FR.Object, {
    _defaultConfig: function () {
        return $.extend(FR.ObjectSource.superclass._defaultConfig.apply(this, arguments), {
            data: [],
            createFields: [],
            choosedFields: [],
            showField: '',
            titleField: '',
            showEmptyValue: '',
            valueField: '',
            showTemplate: '',
            valueTemplate: ''
        });
    },

    _init: function () {
        FR.Record.superclass._init.apply(this, arguments);
        $.extend(this, this.options);
        this.nameProperty();
        this.initMethods();
    },

    //b:命名数组元素
    nameProperty: function () {
        if (this.createFields) {
            for (var i = 0, len = this.createFields.length; i < len; i++) {
                if (this.createFields[i] != i) {
                    this.data[this.createFields[i]] = this.data[i];
                    delete this.data[i];
                }
            }
        }
    },

    //b:可以用getproperty，setproperty来代替,将来会改成对应map映射，用来更好得获得所需属性
    initMethods: function () {
        if (this.choosedFields) {
            var self = this;
            var getFn = function (name) {
                return function () {
                    return self.data[name];
                };
            };
            var setFn = function (name) {
                return function (val) {
                    self.data[name] = val;
                }
            }
            for (var i = 0, len = this.choosedFields.length; i < len; i++) {
                var name = this.choosedFields[i];
                var getmethod = name.startWith("is") || name.startWith("get") ? name : "get" + name;
                var setmethod;
                if (name.startWith("is")) {
                    setmethod = "set" + name.substr(2);
                } else if (name.startWith("get")) {
                    setmethod = "set" + name.substr(3);
                } else if (name.startWith("set")) {
                    setmethod = name;
                } else {
                    setmethod = "set" + name;
                }
                this[getmethod] = getFn(name);
                this[setmethod] = setFn(name);
            }
        }
    },

    getShowValue: function () {
        var showValue = this.getShowTemplate() || this.getShowField();
        if (showValue == null) {
            showValue = this.getNoAppointShowValue()
        }
        showValue = this.formatShowValue(showValue);
        return (this.showEmptyValue && showValue == null) ? this.showEmptyValue : showValue;
    },

    getTitleValue: function () {
        if (this.titleField) {
            return this.data[this.titleField];
        }
    },

    setTitleValue: function (text) {
        if (this.titleField) {
            this.data[this.titleField] = text;
            return true;
        }
    },

    setShowValue: function (text) {
        this.setShowTemplate(text) || this.setShowField(text);
    },

    setShowTemplate: function (text) {
        if (this.showTemplate) {
            this.data[this.showTemplate] = text;
            return true;
        }
    },

    setShowField: function (text) {
        if (this.showField) {
            this.data[this.showField] = text;
            return true;
        }
    },

    getValue: function () {
        var value = this.getValueTemplate() || this.getValueField();
        if (value != null) {
            return value;
        }
        return this.getNoAppointValue();
    },

    setValue: function (value) {
        this.setValueTemplate(value) || this.setValueField(value);
    },

    setValueTemplate: function (value) {
        if (this.valueTemplate) {
            this.data[this.valueTemplate] = value;
            return true;
        }
    },

    setValueField: function (value) {
        if (this.valueField) {
            this.data[this.valueField] = value;
            return true;
        }
    },

    getNoAppointShowValue: function () {
        if (this.showField != null || this.showTemplate != null) {
            return;
        }
        return this.getFirstProperty();
    },

    getNoAppointValue: function () {
        if (this.valueField != null || this.valueTemplate != null) {
            return;
        }
        return this.getFirstProperty();
    },

    getFirstProperty: function () {
        for (var i in this.data) {
            if (!$.isFunction(this.data[i])) {
                return this.data[i];
            }
        }
    },

    getShowField: function () {
        if (this.showField) {
            return this.data[this.showField];
        }
    },

    getValueField: function () {
        if (this.valueField) {
            return this.data[this.valueField];
        }
    },

    getShowTemplate: function () {
        if (this.showTemplate) {
            return this.dealTemplate(this.showTemplate);
        }
    },

    getValueTemplate: function () {
        if (this.valueTemplate) {
            return this.dealTemplate(this.valueTemplate);
        }
    },

    dealTemplate: function (template) {
        var attr;
        while ((attr = /{[^{}]+}/g.exec(template)) != null) {
            template = template.substr(0, attr.index) + attr[0].substr(1, attr[0].length - 1) + template.substr(attr.index + attr[0].index);
        }
        return template;
    },

    //b:为了处理__time__总感觉很别扭，consider this
    formatShowValue: function (showValue) {
        if (typeof showValue == 'string' && showValue.indexOf("__time__") > -1) {
            return FR.date2Str(FR.jsonDecode(showValue), 'yyyy-MM-dd HH:mm:ss');
        }
        return showValue;
    },

    getContent: function () {
        return this.data;
    },

    setContent: function (data) {
        this.data = data;
    },

    getProperty: function (name) {
        return this.data[name];
    },

    setProperty: function (name, value) {
        this.data[name] = value;
    }
});

/**
 * b:node for tree
 *
 */
FR.Node = FR.extend(FR.Record, {
    _init: function () {
        FR.Node.superclass._init.apply(this, arguments);
        if (!this.nodeSource) {
            if (this.children && this.data[this.children]) {
                this.nodeSource = new FR.ObjectSource({
                    data: this.data[this.children]
                });
            } else if (this.options.url) {
                this.nodeSource = new FR.URLSource({
                    url: this.options.url
                });
            }
        }

        if (!this.nodeReader) {
            this.nodeReader = new FR.NodeReader(this.copyProperties());
        }
        this.childrenNodes = [];
    },

    getParent: function () {
        return this.parent;
    },

    setParent: function (node) {
        this.parent = node;
    },
    getPathAsValueString: function () {
        return this.getValuePath(true);
    },
    getPathAsTextString: function () {
        return this.getTextPath(true);
    },

    getValuePath: function(returnString) {
        var result_array = [this.data.value];
        var p = this.getParent();
        while (p) {
            result_array.unshift(p.data.value);
            p = p.getParent();
        }
        return returnString ? result_array.join(',') : result_array;
    },
    getTextPath: function(returnString) {
        var result_array = [this.data.text];
        var p = this.getParent();
        while (p) {
            result_array.unshift(p.data.text);
            p = p.getParent();
        }
        return returnString ? result_array.join(',') : result_array;
    },

    getLeafNode: function (returnArray) {
        var resultArray = returnArray || [];

        if (!this.hasChild()) {
            resultArray.push(this);
            return resultArray;
        } else {
            var children = this.getChildren();
            for (var i = 0; i < children.length; i++) {
                children[i].getLeafNode(resultArray);
            }
        }
        return resultArray;
    },

    getAncestorsLength: function () {
        var i = 0;
        var p = this.getParent();
        while (p) {
            i++;
            p = p.getParent();
        }
        return i;
    },

    hasChild: function () {
        //wei : 这样写每次判断hasChild都要去loadChild...
        return this.hasChildren != null ?
            this.data[this.hasChildren] || (this.data['ChildNodes'] && (this.data['ChildNodes']).length !== 0) :
            ((this.children != null && this.data[this.children]) || this.getChildrenLength() > 0);
    },

    getChildren: function () {
        return this.loadChildren();
    },

    getChildrenLength: function () {
        return this.loadChildren().length;
    },

    getChild: function (index) {
        return this.loadChildren()[index];
    },

    getID: function () {
        return this.data[this.id];
    },

    setID: function (id) {
        this.data[this.id] = id;
    },

    getParentID: function () {
        var pd = this.data[this.parentID];
        return pd != null ? pd : (this.getParent() ? this.getParent().getID() : null);
    },

    getValue: function(){
        return this.data["value"];
    },

    getText: function(){
        return this.data["text"];
    },
    setParentID: function () {
        //do nothing
    },

    setUnselectable : function(flag) {
        this.data[this.unselectable] = flag;
    },
    isUnselectable : function() {
        return this.data[this.unselectable];
    },

    isSelected: function () {
        return this.selectedField != null ? this.data[this.selectedField] : this.selected;
    },

    setSelected: function (selected) {
        this.selectedField != null ? this.data[this.selectedField] = selected : this.selected = selected;
    },

    loadChildren: function () {
        if (!this.hasChild()) {
            return [];
        }
        if (this.isLoaded) {
            return this.childrenNodes;
        }
        if (!this.nodeSource) {
            return [];
        }
        this.resetStatus();
        this.childrenNodes = this.nodeReader.readObject(this.nodeSource.loadObject());
        this.isLoaded = true;
        return this.childrenNodes;
    },

    isLoadComplete: function () {
        return this.nodeSource ? this.nodeSource.isLoaded() : true;
    },

    copyProperties: function () {
        var config = {};
        this.createFields && (config.createFields = this.createFields);
        this.choosedFields && (config.choosedFields = this.choosedFields);
        this.showField && (config.showField = this.showField);
        this.titleField && (config.titleField = this.titleField);
        this.showEmptyValue && (config.showEmptyValue = this.showEmptyValue);
        this.valueField && (config.valueField = this.valueField);
        this.showTemplate && (config.showTemplate = this.showTemplate);
        this.valueTemplate && (config.valueTemplkate = this.valueTemplate);
        this.parameterFields && (config.parameterFields = this.parameterFields);
        this.hasChildren && (config.hasChildren = this.hasChildren);
        this.type && (config.type = this.type);
        this.id != null && (config.id = this.id);
        this.parentID != null && (config.parentID = this.parentID)
        this.options.url && (config.url = this.getChildURL() || this.options.url);
        this.childurlField && (config.childurlField = this.childurlField);
        this.children && (config.children = this.children);
        this.selectedField && (config.selectedField = this.selectedField);
        config.parent = this;
        return config;
    },

    getChildURL: function () {
        return this.childurl ? this.childurl : this.data[this.childurlField];
    },

    setChildURL: function (url) {
        this.childurlField != null ? this.data[this.childurlField] = url : this.childurl = url;
    },

    addNode: function (node) {
        this.isLoaded = true;
        this.childrenNodes.push(node);
        node.setParent(this);
    },

    removeNode: function (node) {
        this.childrenNodes.removeWeakEqual(node);
    },

    sortChildren: function () {

    },

    clearData: function () {
        this.isLoaded = false;
        delete this.childrenNodes;
        this.childrenNodes = [];
    },

    createParaObj: function () {
        var para = {};
        if (this.parameterFields) {
            for (var i = 0, len = this.parameterFields.length; i < len; i++) {
                para[this.parameterFields[i]] = this.data[this.parameterFields[i]];
            }
        }
        if (this.additionalParameters) {
            for (var i in this.additionalParameters) {
                para[i] = this.additionalParameters[i];
            }
                para["parent_values"] = this.getValuePath();
                para["parentID"] = this.getParentID();

        }
        return {
            parameter: para
        };
    },

    additionalParameter: function (parameter) {
        this.additionalParameters = parameter.parameter;
    },

    getAdditionalNodes: function () {
        var nodes = this.nodeReader.readObject(this.nodeSource.loadObject());
        this.childrenNodes = this.childrenNodes.concat(nodes);
        return nodes;
    },

    //b:这两个方法重构
    resetStatus4AddNodes: function (config) {
        var para = this.createParaObj();
        $.extend(para.parameter, config.parameter);
        this.nodeSource.resetStatus(para);
    },

    resetStatus: function () {
        if (!this.nodeSource) {
            return;
        }
        if (this.nodeSource.resetStatus(this.createParaObj())) {
            this.clearData();
        }
    },

    isAllChildrenChosen: function() {
        if (!this.hasChild() || !this.isLoadComplete()) {
            return false;
        }
        for (var i=0; i<this.childrenNodes.length; i++) {
            if (this.childrenNodes[i].getcheckstate() !== 1) {
                return false;
            }
        }
        return true;
    }
});

FR.RootNodeLoader = FR.extend(FR.OB, {
    _init: function () {
        FR.RootNodeLoader.superclass._init.apply(this, arguments);
        this.options.rootSource = new FR.URLSource({
            url: this.options.url,
            data: this
        });
        if (!this.options.rootReader) {
            this.options.rootReader = new FR.DefaultNodeReader({
                url: this.options.url
            });
        }
        this.rootNodes = [];
    },

    updateData: function (originalData) {
        var rd = this.options.rootReader.readObject(originalData);
        if (this.rootNodes.length < 1) {
            this.rootNodes = rd;
            this.fireEvent(FR.Events.AFTERREAD, rd);
        } else {
            Array.prototype.push.apply(this.rootNodes, rd);
            this.fireEvent(FR.Events.APPENDDATA, rd);
        }
    },

    getRootNodes: function () {
        if (this.isLoaded) {
            return this.rootNodes;
        }
        this.rootNodes = this.loadNodes();
        this.isLoaded = true;
        return this.rootNodes
    },

    getRootNodesAsync: function (fn) {
        var self = this;
        if (this.isLoaded) {
            fn.call(this, this.rootNodes);
        }
        if (self.options.rootSource && this.options.rootReader) {
            var fn1 = function (obj) {
                self.isLoaded = true;
                if (fn && $.isFunction(fn)) {
                    self.rootNodes = self.options.rootReader.readObject(obj);
                    fn.call(this, self.rootNodes);
                }
            };
            self.options.rootSource.loadObject(fn1);
        }
    },

    loadNodes: function () {
        return this.options.rootReader.readObject(this.options.rootSource.loadObject());
    },

    appendRoot: function (rootNode) {
        this.rootNodes.push(rootNode);
    },

    resetStatus4AddRootNodes: function (config) {
        this.options.rootSource.resetStatus(config);
    },

    resetStatus: function (config) {
        if (this.options.rootSource.resetStatus(config)) {
            this.clearRoots();
        }
    },

    clearRoots: function () {
        this.isLoaded = false;
        this.rootNodes = [];
    }
});


/**
 * @class FR.DataSource
 * @class
 * @extends FR.OB
 * @type {*}
 */
FR.DataSource = FR.extend(FR.OB, /**@class FR.DataSource*/{
    /**
     * @see FR.OB
     * @private
     */
    _init: function () {
        FR.DataSource.superclass._init.apply(this, arguments);
    },

    /**
     * 加载数据对象
     * @returns {{}}
     */
    loadObject: function () {
        return {};
    },

    /**
     * 重置
     * @returns {boolean}
     */
    resetStatus: function () {
        return false;
    },

    /**
     * 是否是本地数据源
     * @returns {boolean} 返回是否是本地本地数据源
     */
    isLocalSource: function () {
        return true;
    },

    /**
     * 是否已加载
     * @returns {boolean} 返回是否已加载
     */
    isLoaded: function () {
        return true;
    }
});

/**
 * @class FR.ObjectSource
 * @class
 * @extends FR.DataSource
 * @type {*}
 */
FR.ObjectSource = FR.extend(FR.DataSource, /**@class FR.DataSource*/{
    /**
     * @see FR.OB
     * @returns {*}
     * @private
     */
    _defaultConfig: function () {
        return $.extend(FR.ObjectSource.superclass._defaultConfig.apply(), {
            data: []
        });
    },

    /**
     * @see FR.OB
     * @private
     */
    _init: function () {
        FR.ObjectSource.superclass._init.apply(this, arguments);
    },

    /**
     * @see FR.DataSource
     * @returns {*}
     */
    loadObject: function (fn) {
        if (this.options.data && fn && $.isFunction(fn)) {
            fn.call(this, this.options.data);
        }
        return this.options.data;
    },

    /**
     * @see FR.DataSource
     * @returns {boolean}
     */
    isLocalSource: function () {
        return true;
    }
});

/**
 * @class FR.URLSource
 * @class
 * @extends FR.DataSource
 * @type {*}
 */
FR.URLSource = FR.extend(FR.DataSource, /**@class FR.URLSource*/{
    /**
     * @see FR.OB
     * @returns {*}
     * @private
     */
    _defaultConfig: function () {
        return $.extend(FR.URLSource.superclass._defaultConfig.apply(this, arguments), {
            parameter: {},
            isLoaded: false
        });
    },

    /**
     * @see FR.OB
     * @private
     */
    _init: function () {
        FR.URLSource.superclass._init.apply(this, arguments);
        this.checkUrl();
    },

    /**
     * 检验url请求地址
     * @returns {boolean} 返回检验结果
     */
    checkUrl: function () {
        if (!this.options.url) {
            FR.Msg.toast("URL is needed to create URLSource!");
            return;
        }
        return true;
    },

    /**
     * 设置数据参数
     * @param para
     * @param source
     */
    setData: function (para, source) {
        this.options.parameter = para.parameter;
        this.data = source;
        this.options.isLoaded = true;
    },
    /**
     * @see FR.DataSource
     * @returns {*}
     */
    loadObject: function (fn) {
        if (!this.checkUrl()) {
            return;
        }
        //wei:webkit内核的浏览器控件名为中文时数据不显示。
        var encodeURL = this._getEncodeURL();
        if (this.need2load()) {
            var self = this;
            FR.ajax({
                type: 'POST',
                url: encodeURL.length === 0 ? encodeURI(self.options.url) : encodeURL,//中铁信安全规则,location参数里面的引号需要encode一下
                data: this.generateParaData(true),
                async: fn !== undefined,//如果传了回调函数默认采用异步加载
                complete: function (res) {

                    if (!FR.versionRemind(res.responseText)) {
                        return;
                    }
                    self.fireEvent(FR.Events.AFTERLOAD);
                    self.options.isLoaded = true;
                    self.data = FR.jsonDecode(res.responseText);
                    if (fn && $.isFunction(fn)) {
                        fn.call(self, self.data);
                        return;
                    }
                },
                error: function () {
                    FR.Msg.toast(FR.i18nText("Data-Get_Data_Error"));
                }
            });
        }
        if (this.data && fn && $.isFunction(fn)) {
            fn.call(this, this.data);
        }
        return this.data;
    },
    _findShowValue: function (value, findTextByValue) {
        var encodeURL = this._getEncodeURL();
        var data = this.generateParaData(false);
        data.cmd = "viewvalue";
        if (findTextByValue !== false) {
            data.__value__ = FR.encodePrecentPlus(value);
        } else {
            data.__text__ = FR.encodePrecentPlus(value);
        }
        var retValue;
        var self = this;
        FR.ajax({
            type: 'POST',
            url: (encodeURL.length === 0 ? self.options.url : encodeURL),
            data: data,
            async: false,
            complete: function (res) {
                if (!FR.versionRemind(res.responseText)) {
                    return;
                }
                var resData = FR.jsonDecode(res.responseText);
                //bug 59907 返回值要判断为空，但是不能直接resData.value，防止为0时提示不在列表。。
                //为0的时候跟isempty有什么关系呢...isempty反而会影响到本来返回""的场景。只针对null,和undefined吧
                if (resData.value != undefined) {
                    retValue = resData.value;
                }
            },
            error: function () {
                FR.Msg.toast(FR.i18nText("Data-Get_Data_Error"));
            }
        });

        return retValue;
    },

    _findAllValue: function () {
        if (!this.checkUrl()) {
            return;
        }
        //wei:webkit内核的浏览器控件名为中文时数据不显示。
        var encodeURL = this._getEncodeURL();
        var self = this;
        FR.ajax({
            type: 'POST',
            url: (encodeURL.length === 0 ? self.options.url : encodeURL),
            data: this.generateParaDataWithNoLimit(true),
            async: false,
            complete: function (res) {
                if (!FR.versionRemind(res.responseText)) {
                    return;
                }
                self.options.isLoaded = true;
                self.data = FR.jsonDecode(res.responseText);
            },
            error: function () {
                FR.Msg.toast(FR.i18nText("Data-Get_Data_Error"));
            }
        });
        return this.data;
    },
    generateParaDataWithNoLimit: function (needReload) {
        if (this.options.parameter) {
            var data = {};
            for (var i in this.options.parameter) {
                if (!$.isFunction(this.options.parameter[i])) {
//                    data[i] = FR.cjkEncode((typeof this.options.parameter[i] == 'string') ? this.options.parameter[i] : FR.jsonEncode(this.options.parameter[i]));
                    // 换用FR.ajax 已经对参数进行一次cjkEncode了 这里不能再cjkEncode
                    if(i == 'startIndex'|| i == 'limitIndex'){
                        continue;
                    }else{
                        data[i] = (typeof this.options.parameter[i] == 'string') ?
                            this.options.parameter[i] : FR.jsonEncode(this.options.parameter[i]);
                    }

                }
            }
            if (this.reload) {
                data.reload = true;
            }
            if (needReload === true) {
                data.reload = true;
            }
            return data;
        }
    },
    _getEncodeURL: function () {
        var encodeURL = "";
        if (this.options.url.indexOf('widgetname') >= 0) {
            var urlArray = this.options.url.split('&');
            $.each(urlArray, function (idx, item) {
                if (item.indexOf('widgetname') >= 0) {
                    //neil:这边需要两次encodeURIComponent的原因是防止中文乱码,因为后台request.getParameter的时候java会自动对widgetname进行一次解码(bug 8125)
                    urlArray[idx] = 'widgetname=' + encodeURIComponent(encodeURIComponent(item.substring(11, item.length)));
                }
            });
            $.each(urlArray, function (idx, item) {
                if (idx != urlArray.length - 1) {
                    encodeURL += item + '&';
                } else {
                    encodeURL += item;
                }
            });
        }
        return encodeURL;
    },

    /**
     * @see FR.DataSource
     * @param config {JSON} 配置属性
     * @returns {*} 返回重置结果是否成功
     */
    resetStatus: function (config) {
        return this.resetUrl(arguments.length === 1 ? config.url : arguments[0]) ||
            this.resetParameter(arguments.length === 1 ? config.parameter : arguments[1]);
    },

    /**
     * 重置URL请求，清空数据
     * @param url {String} URL请求地址
     * @returns {boolean} 返回重置是否成功
     */
    resetUrl: function (url) {
        if (url != null && url != this.options.url) {
            this.options.url = url;
            this.clearData();
            return true;
        }
    },

    /**
     * 重置参数配置，清空数据
     * @param parameter {JSON} 参数配置
     * @returns {boolean} 返回重置参数配置是否成功
     */
    resetParameter: function (parameter) {
        if (parameter != null && !FR.equals(this.options.parameter, parameter)) {
            //b:reload server data
            if (!FR.equals(this.options.parameter["dependence"], parameter["dependence"])) {
                this.reload = true;
            } else {
                this.reload = false;
            }
            this.options.parameter = parameter;
            this.clearData();
            return true;
        }
    },

    /**
     * 判断是否需要加载数据
     * @returns {boolean} 返回是否需要加载数据
     */
    need2load: function () {
        return this.data == null;
    },

    /**
     * 清空已经加载的数据
     */
    clearData: function () {
        if (this.data != null) {
            this.options.isLoaded = false;
            delete this.data;
            this.data = null;
        }
    },

    /**
     * 清空数据，清空配置
     */
    destroy: function () {
        this.options.url = null;
        this.options.parameter = null;
        this.clearData();
    },

    /**
     * 生成参数数据
     * @param needReload {Boolean} 是否需要重新加载数据
     * @returns {JSON} 返回数据对象
     */
    generateParaData: function (needReload) {
        if (this.options.parameter) {
            needReload = !FR.isEmptyObj(this.options.parameter.dependence) || needReload;//bug93656 93759联动的时候总是重新加载
            var data = {};
            for (var i in this.options.parameter) {
                if (!$.isFunction(this.options.parameter[i])) {
//                    data[i] = FR.cjkEncode((typeof this.options.parameter[i] == 'string') ? this.options.parameter[i] : FR.jsonEncode(this.options.parameter[i]));
                    // 换用FR.ajax 已经对参数进行一次cjkEncode了 这里不能再cjkEncode
                    data[i] = (typeof this.options.parameter[i] == 'string') ?
                        this.options.parameter[i] : FR.jsonEncode(this.options.parameter[i]);
                }
            }
            return this.setReloadPara(data, needReload);
        }
    },
    /**
     * 设置是否重新加载数据参数
     * @param data 参数data
     * @param needReload 是否重新加载
     */
    setReloadPara: function (data, needReload) {
        if (this.reload) {
            data.reload = true;
        }
        if (needReload === true) {
            data.reload = true;
        }
        return data;
    },

    /**
     * @see FR.DataSource
     * @returns {*}
     */
    isLocalSource: function () {
        return false;
    },

    /**
     * @see FR.DataSource
     * @returns {*}
     */
    isLoaded: function () {
        return this.options.isLoaded;
    }
});

/**
 * @class FR.SynchronObjectSource
 * @class
 * @extends FR.DataSource
 * @type {*}
 */
FR.SynchronObjectSource = FR.extend(FR.DataSource, /**@class FR.SynchronObjectSource*/{
    /**
     * @see FR.OB
     * @returns {*}
     * @private
     */
    _defaultConfig: function () {
        return $.extend(FR.ObjectSource.superclass._defaultConfig.apply(), {
            object: []
        });
    },

    /**
     * @see FR.OB
     * @private
     */
    _init: function () {
        FR.ObjectSource.superclass._init.apply(this, arguments);
    },

    /**
     * @see FR.DataSource
     */
    loadObject: function () {
        this.options.data.updateData(this.options.object);
    },

    /**
     * @see FR.DataSource
     * @returns {boolean}
     */
    isLocalSource: function () {
        return true;
    },

    /**
     * @see FR.DataSource
     * @returns {boolean}
     */
    resetStatus: function () {
        return false;
    }
});

/**
 * @class FR.SynchronTreeSource
 * @class
 * @extends FR.OB
 * @type {*}
 */
FR.SynchronTreeSource = FR.extend(FR.OB, /**@class FR.SynchronTreeSource*/{
    /**
     * @see FR.OB
     * @private
     */
    _init: function () {
        FR.SynchronTreeSource.superclass._init.apply(this, arguments);
    },

    /**
     * 加载数据
     */
    loadObject: function () {
        this.options.data.updateData(this.options.treedata);
    },

    /**
     * 重置配置
     * @returns {boolean}
     */
    resetStatus: function () {
        return false;
    }
});

/**
 * @class FR.SynchronURLSource
 * @class
 * @extends FR.URLSource
 * @type {*}
 */
FR.SynchronURLSource = FR.extend(FR.URLSource, /**@class FR.SynchronURLSource*/{
    /**
     * @see FR.OB
     * @private
     */
    _init: function () {
        FR.SynchronURLSource.superclass._init.apply(this, arguments);
    },


    /**
     * @see FR.DataSource
     */
    loadObject: function () {
        if (!this.checkUrl()) {
            return;
        }
        var self = this;
        FR.ajax({
            type: 'POST',
            url: this.options.url,
            data: this.generateParaData(),
            complete: function (res) {
                if (!FR.versionRemind(res.responseText)) {
                    return;
                }
                self.fireEvent(FR.Events.AFTERLOAD);
                self.options.isLoaded = true;
                if (self.options.data) {
                    self.options.data.updateData(FR.jsonDecode(res.responseText));
                }
            },
            error: function () {
                FR.Msg.toast(FR.i18nText("Data-Get_Data_Error"));
            }
        });
    },

    /**
     * 重置参数
     * @param parameter {JSON} 参数配置
     * @returns {boolean} 返回是否重置参数成功
     */
    resetParameter: function (parameter) {
        if (parameter != null && !FR.equals(this.options.parameter, parameter)) {
            var clear = false;
            //b:reload server data
            if (!FR.equals(this.options.parameter.dependence, parameter.dependence)) {
                clear = true;
                this.reload = true;
            } else {
                this.reload = false;
            }

            if (!FR.equals(this.options.parameter.filter, parameter.filter)) {
                clear = true;
            }
            this.options.parameter = parameter;
            return clear;
        }
    }
});

/**
 * @class FR.DataReader
 * @class
 * @extends FR.Object
 * @type {*}
 */
FR.DataReader = FR.extend(FR.Object, /**@class FR.DataReader*/{

    /**
     * 读取数据，根据原始数据及配置信息生成新的数据对象
     * @param o {Array} 数据集合
     * @returns {Array} 返回数据集合
     */
    readObject: function (o) {
        if ($.isArray(o)) {
            var records = [];
            var config = {};
            if (this.options) {
                config.createFields = this.options.createFields;
                config.choosedFields = this.options.choosedFields;
                config.showField = this.options.showField;
                config.titleField = this.options.titleField;
                config.showEmptyValue = this.options.showEmptyValue;
                config.valueField = this.options.valueField;
                config.showTemplate = this.options.showTemplate;
                config.valueTemplate = this.options.valueTemplate;
            }

            for (var i = 0, len = o.length; i < len; i++) {
                config.data = o[i];
                records.push(new FR.Record(config));
            }
            return records;
        }
    }
});

/**
 * @class FR.ArrayReader
 * @class
 * @extends _FR_DataReader
 * @type {*}
 */
FR.ArrayReader = FR.extend(FR.DataReader, /**@class FR.ArrayReader*/{
    /**
     * @see FR.Object
     * @private
     */
    _init: function () {
        FR.ArrayReader.superclass._init.apply(this, arguments);

    }
});

/**
 * @class FR.JSONReader
 * @class
 * @extends FR.DataReader
 * @type {*}
 */
FR.JSONReader = FR.extend(FR.DataReader, /**@class FR.JSONReader*/{
    /**
     * @see FR.Object
     * @private
     */
    _init: function () {
        FR.JSONReader.superclass._init.apply(this, arguments);
    }
});

/**
 * @class FR.DefaultReader
 * @class
 * @extends FR.ArrayReader
 * @type {*}
 */
FR.DefaultReader = FR.extend(FR.ArrayReader, /**@class FR.DefaultReader*/{
    _defaultConfig: function(){
        return $.extend(FR.DefaultReader.superclass._defaultConfig.apply(this, arguments), {
            showField: 'text',
            titleField: 'titleText',
            valueField: 'value'
        });
    },

    /**
     * @see FR.Object
     * @private
     */
    _init: function () {
        FR.DefaultReader.superclass._init.apply(this, arguments);
    }
});

/**
 * @class FR.NodeReader
 * @class
 * @extends FR.DataReader
 * @type {*}
 */
FR.NodeReader = FR.extend(FR.DataReader, /**@class FR.NodeReader*/{
    /**
     * @see FR.Object
     * @private
     */
    _init: function () {
        FR.NodeReader.superclass._init.apply(this, arguments);
    },

    /**
     * @see FR.DataReader
     * @param o
     * @returns {Array}
     */
    readObject: function (o) {
        if (!$.isArray(o)) {
            o = [o];
        }
        var nodes = [];
        var config = this.nodeProperties();

        for (var i = 0, len = o.length; i < len; i++) {
            config.data = o[i];
            nodes.push(new FR.Node(config));
        }
        return nodes;
    },

    /**
     * 节点属性设置
     * @returns {JSON} 返回节点属性配置
     */
    nodeProperties: function () {
        var config = {};
        if (!this.options) {
            return;
        }
        config.createFields = this.options.createFields;
        config.choosedFields = this.options.choosedFields;
        config.showField = this.options.showField;
        config.titleField = this.options.titleField;
        config.showEmptyValue = this.options.showEmptyValue;
        config.valueField = this.options.valueField;
        config.showTemplate = this.options.showTemplate;
        config.valueTemplate = this.options.valueTemplate;
        config.parameterFields = this.options.parameterFields;
        config.hasChildren = this.options.hasChildren;
        config.type = this.options.type;
        config.id = this.options.id;
        config.parentID = this.options.parentID;
        config.url = this.options.url;
        config.parent = this.options.parent;
        config.selectedField = this.options.selectedField;
        config.children = this.options.children;
        return config;
    }
});

/**
 * @class FR.DefaultNodeReader
 * @class
 * @extends FR.NodeReader
 * @type {*}
 */
FR.DefaultNodeReader = FR.extend(FR.NodeReader, /**@class FR.DefaultNodeReader*/{
    /**
     * @see FR.Object
     * @private
     */
    _init: function () {
        FR.DefaultNodeReader.superclass._init.apply(this, arguments);
    },

    /**
     * @see FR.NodeReader
     * @returns {{}} 返回节点属性配置
     */
    nodeProperties: function () {
        return {
            url: this.options.url,
            id: 'id',
            parentID: 'parentID',
            showField: 'text',
            titleField: 'titleText',
            valueField: 'value',
            hasChildren: 'hasChildren',
            children: 'ChildNodes',
            parameterFields: ['id', 'value'],
            choosedFields: ['isexpand', 'nodeicon', 'classes', 'showcheck', 'checkstate'],
            parent: this.options.parent
        }
    }
});

/**
 * @class FR.DefaultSynchronNodeReader
 * @class
 * @extends FR.NodeReader
 * @type {*}
 */
FR.DefaultSynchronNodeReader = FR.extend(FR.NodeReader, /**@class FR.DefaultSynchronNodeReader*/{
    /**
     * @see FR.Object
     * @private
     */
    _init: function () {
        FR.DefaultSynchronNodeReader.superclass._init.apply(this, arguments);
    },

    /**
     * @see FR.NodeReader
     * @returns {{}} 返回节点属性配置
     */
    nodeProperties: function () {
        return {
            id: 'id',
            parentID: 'parentID',
            showField: 'text',
            titleField: 'titleText',
            valueField: 'value',
            hasChildren: 'hasChildren',
            children: 'ChildNodes',
            parameterFields: ['id', 'value'],
            choosedFields: ['isexpand', 'nodeicon', 'classes', 'showcheck', 'checkstate'],
            parent: this.options.parent
        }
    }
});

/**
 * @class FR.Data
 * @class
 * @extends FR.Object
 * @type {*}
 */
FR.Data = FR.extend(FR.Object, /**@class FR.Data*/{
    /**
     * @see FR.Object
     * @returns {*}
     * @private
     */
    _defaultConfig: function () {
        return $.extend(FR.DataReader.superclass._defaultConfig.apply(this, arguments), {
            records: []
        });
    },

    /**
     * @see FR.Obejct
     * @private
     */
    _init: function () {
        FR.Data.superclass._init.apply(this, arguments);
        if (!this.options.dataSource) {
            this.options.dataSource = new FR.ObjectSource();
        }
        if (!this.options.dataReader) {
            this.options.dataReader = new FR.DataReader();
        }
        this.records = this.options.records;
    },

    /**
     * 获取和生成数据
     * @returns {Array} 返回数据集合
     */
    executeData: function () {
        if (this.options.dataSource && this.options.dataReader) {
            return this.options.dataReader.readObject(this.options.dataSource.loadObject());
        }
    },

    /**
     * 获取已生成的数据，如果没有数据就触发excuteData生成数据
     * @returns {Array} 返回数据集合
     */
    getData: function () {
        return this.getRecords();
    },

    /**
     * 设置数据
     * @param para
     * @param data
     */
    setData: function (para, data) {
        if (this.options.dataSource) {
            this.options.dataSource.setData(para, data);
        }
        this.records = this.executeData();
    },

    /**
     * 把新生成的数据添加到记录中去
     * @returns {Array} 返回数据集合
     */
    appendData: function () {
        var eData = this.executeData();
        Array.prototype.push.apply(this.records, eData);
        return eData;
    },

    /**
     * @see FR.Data.getRecords
     * @returns {*}
     */
    getRecords: function () {
        if (this.records && this.records.length > 0) {
            return this.records;
        }
        this.records = this.executeData();
        return this.records;
    },
    /**
     * 异步加载数据
     * @param fn回调函数
     */
    loadRecordsAsync: function (fn) {
        var self = this;
        if (this.records && this.records.length > 0) {
            if ($.isFunction(fn)) {
                fn.call(this, this.records);
                return;
            }
        }
        if (this.options.dataSource && this.options.dataReader) {
            var fn1 = function (obj) {
                if (fn && $.isFunction(fn)) {
                    fn.call(self, self.options.dataReader.readObject(obj));
                }
            };
            self.options.dataSource.loadObject(fn1);
        }
    },

    /**
     * 获取缓存数据
     * @returns {*} 返回数据
     */
    getLoadedRecords: function () {
        return this.records;
    },

    /**
     * 获取数据总数
     * @returns {*} 返回数据数
     */
    getLength: function () {
        var records  = this.getRecords();
        if(!records){
            return 0;
        }
        return records.length;
    },

    /**
     * 获取指定位置的数据
     * @param index {Number} 位置索引
     * @returns {*} 返回数据对象
     */
    getRecord: function (index) {
        return this.getRecords()[index];
    },

    //b:add,sort,remove..用于操作this.records
    /**
     * 添加数据
     * @param record {*} 数据对象
     */
    addRecord: function (record) {
        this.getRecords().push(record);
    },

    /**
     * 移除指定位置的数据
     * @param index {Number} 位置索引
     */
    removeRecord: function (index) {
        if (typeof index == 'number') {
            this.getRecords().splice(index, 1);
        } else if (typeof index == 'object') {
            //b:object 应该不能直接删除吧 fr.equals
            this.getRecords().removeWeakEqual(index);
        }

    },

    /**
     * 清空数据
     */
    clearData: function () {
        if (this.records && this.records.length > 0) {
            delete this.records;
            this.records = [];
        }
    },

    /**
     * 重置参数配置，并在重置后清空数据
     * @param propertyObj {JSON} 参数配置
     */
    resetStatus: function (propertyObj) {
        if (this.options.dataSource.resetStatus(propertyObj)) {
            this.clearData();
        }
    },

    /**
     * 重置参数配置，但不清空数据
     * @param propertyObj {JSON} 参数配置
     */
    resetStatusKeepData: function (propertyObj) {
        this.options.dataSource.resetStatus(propertyObj);
    },

    /**
     * 判断是否是本地数据源
     * @returns {boolean} 返回是否是本地数据源
     */
    isLocalSource: function () {
        return this.options.dataSource.isLocalSource();
    },

    /**
     * 判断数据是否已加载
     * @returns {boolean} 返回数据是否已加载
     */
    isLoaded: function () {
        return this.options.dataSource.isLoaded();
    }
});


FR.LocalTreeData = FR.extend(FR.OB, {
    _init: function () {

    },

    updateData: function () {

    },

    getData: function () {

    }


});
/**
 * b:treeloader, get treejson& read nodes
 */
FR.TreeData = FR.extend(FR.OB, {
    _init: function () {
        FR.TreeData.superclass._init.apply(this, arguments);
        if (!this.options.treeLoader && !this.options.url) {
            FR.Msg.toast("DataUrl or TreeLoader is needed to create TreeData.");
            return;
        }
        if (!this.options.treeLoader && this.options.url) {
            this.options.treeLoader = FR.DataFactory.createDefaultRootNodes(this.options.url);
        }
    },

    getData: function () {
        return this.options.treeLoader.getRootNodes()
    },

    loadRecordsAsync:function(fn){
        return this.options.treeLoader.getRootNodesAsync(fn)
    },

    loadNodes: function () {
        this.options.treeLoader.loadNodes();
    },

    getChildrenLength: function () {
        return this.options.treeLoader.getRootNodes().length;
    },

    appendRoot: function (rootnode) {
        this.options.treeLoader.add(rootnode);
    },

    resetStatus4AddRootNodes: function (config) {
        this.options.treeLoader.resetStatus4AddRootNodes(config);
    },

    resetStatus: function (config) {
        this.options.treeLoader.resetStatus(config);
    },

    setData: function (para, data) {
        this.options.treeLoader.clearRoots();
        this.options.treeLoader.options.rootSource.setData(para, data);
    },

    afterRead: function (fn) {
        if (!fn) {
            return false;
        }
        return this.options.treeLoader.on(FR.Events.AFTERREAD, fn);
    },

    appendDataEvent: function (fn) {
        if (!fn) {
            return false;
        }
        return this.options.treeLoader.on(FR.Events.APPENDDATA, fn);
    },

    isLocalSource: function () {
        return false;
    }
});

FR.SynchronData = FR.extend(FR.OB, {
    _init: function () {
        FR.SynchronData.superclass._init.apply(this, arguments);
        if (!this.options.url && !this.options.dataSource) {
            FR.Msg.toast("SourceURL is needed to create SynchronData");
            return;
        }
        if (!this.options.dataSource) {
            this.options.dataSource = new FR.SynchronURLSource({
                url: this.options.url
            });
        }
        if (!this.options.dataReader) {
            this.options.dataReader = new FR.DefaultReader();
        }
        this.options.dataSource.options.data = this;
        this.records = [];
    },

    updateData: function (originalData) {
        var realData = this.options.dataReader.readObject(originalData);
        var isAppend = this.records.length;
        this.appendData(realData);
        return isAppend ? this.fireEvent(FR.Events.APPENDDATA, realData) : this.fireEvent(FR.Events.AFTERREAD, realData);
    },

    addRecord: function (record) {
        this.records.push(record);
    },

    removeRecord: function (record) {
        this.records.removeWeakEqual(record);
    },

    getData: function () {
        return this;
    },

    loadData: function () {
        this.options.dataSource.loadObject();
    },

    appendData: function (appendData) {
        if (appendData != null) {
            Array.prototype.push.apply(this.records, appendData);
        }
    },

    getRecords: function () {
        return this.records;
    },

    getLoadedRecords: function () {
        return this.records;
    },

    getLength: function () {
        return this.getRecords().length;
    },

    getRecord: function (index) {
        return this.records[index];
    },

    afterRead: function (fn) {
        if (!fn) {
            return false;
        }
        return this.on(FR.Events.AFTERREAD, fn);
    },

    clearData: function () {
        if (this.records && this.records.length > 0) {
            delete this.records;
            this.records = [];
        }
    },

    appendDataEvent: function (fn) {
        if (!fn) {
            return false;
        }
        return this.on(FR.Events.APPENDDATA, fn);
    },

    resetStatus: function (config) {
        this.options.dataSource.resetStatus(config);
        delete this.records;
        this.records = [];
        return true;
    }
});

FR.SynchronTreeData = FR.extend(FR.OB, {
    _init: function () {
        FR.SynchronTreeData.superclass._init.apply(this, arguments);
        if (!this.options.url && !this.options.dataSource) {
            FR.Msg.toast("SourceURL is needed to create SynchronTreeData");
            return;
        }
        if (!this.options.dataSource) {
            this.options.dataSource = new FR.SynchronURLSource({
                url: this.options.url
            });
        }
        if (!this.options.dataReader) {
            this.options.dataReader = new FR.DefaultSynchronNodeReader();
        }
//        this.options.dataSource.options.dataReader = this.options.dataReader;
        this.options.dataSource.options.data = this;
        //b:nodes在afterread里add
        this.nodes = [];
    },

    updateData: function (originalData) {
        var realData = this.options.dataReader.readObject(originalData);
        var isAppend = this.nodes.length;
        this.appendData(realData);
        return isAppend ? this.fireEvent(FR.Events.APPENDDATA, realData) : this.fireEvent(FR.Events.AFTERREAD, realData);
    },

    getData: function (fn) {
        if(fn && $.isFunction(fn)){
            fn.call(this,this.nodes)
        }
    },

    loadNodes: function () {
        this.loadData();
    },

    loadData: function () {
        this.options.dataSource.loadObject();
    },

    appendData: function (nodes) {
        for (var i = 0, len = nodes.length; i < len; i++) {
            var parent;
            if (nodes[i].getParentID() != null) {
                parent = this.getParentNodeByParentID(nodes[i].getParentID());
            } else {
                parent = this.getParentNode(nodes[i].getID());
            }

            if (parent) {
                parent.addNode(nodes[i]);
            } else {
                this.nodes.push(nodes[i]);
            }
        }
    },

    removeData: function (node) {
        var parent = node.getParent();
        if (parent) {
            parent.removeNode(node);
        } else {
            this.nodes.removeWeakEqual(node);
        }
    },

    getParentNodeByParentID: function (parentID) {
        for (var i = 0, len = this.nodes.length; i < len; i++) {
            var pn = this.getNodeByID(this.nodes[i], parentID);
            if (pn) {
                return pn;
            }
        }
    },

    getNodeByID: function (node, id) {
        if (node.getID() == id) {
            return node;
        }
        var children = node.getChildren();
        for (var i = 0, len = children.length; i < len; i++) {
            var fn = this.getNodeByID(children[i], id);
            if (fn) {
                return fn;
            }
        }
    },

    getParentNode: function (id) {
    	id = id.toString();
        var positions = id.split('-');
        if (positions.length < 2) {
            return;
        }
        var parent = this.nodes[positions[0] - 1];
        for (var i = 1, len = positions.length - 1; i < len; i++) {
            parent = parent.getChild(positions[i] - 1);
        }
        return parent;
    },

    getAllNodesLength: function () {
        var al = this.nodes.length;
        for (var i = 0, len = this.nodes.length; i < len; i++) {
            al += this.executeLength(this.nodes[i]);
        }
        return al;
    },

    isEmptyData: function () {
        return this.nodes.length < 1;
    },

    executeLength: function (node) {
        var al = node.getChildrenLength();
        for (var i = 0, len = node.getChildrenLength(); i < len; i++) {
            al += this.executeLength(node.getChild(i));
        }
        return al;
    },

    afterRead: function (fn) {
        if (!fn) {
            return false;
        }
        return this.on(FR.Events.AFTERREAD, fn);
    },

    appendDataEvent: function (fn) {
        if (!fn) {
            return false;
        }
        return this.on(FR.Events.APPENDDATA, fn);
    },

    getLastRootNode: function () {
        return this.nodes[this.nodes.length - 1];
    },

    resetStatus: function (config) {
        if (this.options.dataSource.resetStatus(config)) {
            delete this.nodes;
            this.nodes = [];
            return true;
        }
    },

    isLocalSource: function () {
        return false;
    }
});

FR.AjaxSearchData = FR.extend(FR.URLSource, {
    _init: function () {
        FR.AjaxSearchData.superclass._init.apply(this, arguments);
    },

    loadObject: function (fn) {
        if (!this.checkUrl()) {
            return;
        }
        var self = this;
        // shoc:及时搜索控件名中文问题
        var encodeURL = '';
        if (this.options.url.indexOf('widgetname') >= 0) {
            var urlArray = this.options.url.split('&');
            $.each(urlArray, function (idx, item) {
                if (item.indexOf('widgetname') >= 0) {
                    //neil:这边需要两次encodeURIComponent的原因是防止中文乱码,因为后台request.getParameter的时候java会自动对widgetname进行一次解码(bug 8125)
                    urlArray[idx] = 'widgetname=' + encodeURIComponent(encodeURIComponent(item.substring(11, item.length)));
                }
            });
            $.each(urlArray, function (idx, item) {
                if (idx != urlArray.length - 1) {
                    encodeURL += item + '&';
                } else {
                    encodeURL += item;
                }
            });
        }
        else {
            encodeURL = this.options.url;
        }
        FR.ajax({
            type: 'POST',
            url: encodeURL,
            data: this.generateParaData(false),//模糊搜索的时候不需要重新加载数据
            async: true,
            complete: function (res) {
                if (!FR.versionRemind(res.responseText)) {
                    return;
                }
                self.fireEvent(FR.Events.AFTERLOAD);
                self.options.isLoaded = true;
                if ($.isFunction(fn)) {
                    fn.call(self, FR.jsonDecode(res.responseText));
                }
            },
            error: function () {
                FR.Msg.toast(FR.i18nText("Data-Get_Data_Error"));
            }
        });
    }
});

FR.ItemTreeData = FR.extend(FR.OB, {
    _init: function () {
        FR.ItemTreeData.superclass._init.apply(this, arguments);
        if (!this.options.items) {
            FR.Msg.toast("Tree Node Items is needed to create ItemTreeData.");
            return;
        }
        var items = this.options.items;
        if (typeof items == 'string') {
            items = FR.jsonDecode(items);
        }
        if ($.isArray(items) && items.length > 0 && !(items[0] instanceof FR.Node)) {
            items = new FR.DefaultNodeReader().readObject(items);
        }
        this.nodes = items;
    },

    getData: function (fn) {
        if (fn && $.isFunction(fn)) {
            fn.call(this, this.nodes);
        } else {
            return this.nodes;
        }
    },

    isLocalSource: function() {
        return false;
    },

    resetStatus: function() {

    },

    appendDataEvent: function() {

    },

    loadNodes: function() {

    }
})

/**
 * FR.DataFactory数据构造接口
 * @class FR.DataFactory
 * @class
 * @type {{}}
 */
FR.DataFactory = {};
$.extend(FR.DataFactory, /**@class FR.DataFactory*/{
    /**
     * 处理数组型数据
     * @param items 数据集合
     * @param config 控件对象的配置属性
     * @returns {FR.Data} 返回数据对象
     */
    createArrayData: function (items, config) {
        return new FR.Data({
            dataSource: new FR.ObjectSource({
                data: items
            }),

            dataReader: new FR.DefaultReader(config)
        });
    },

    /**
     * 处理同步数组型数据
     * @param items 数据集合
     * @returns {FR.SynchronData} 返回数据对象
     */
    createSynchronArrayData: function (items) {
        return new FR.SynchronData({
            dataSource: new FR.SynchronObjectSource({
                object: items
            }),

            dataReader: new FR.DefaultReader()
        });
    },

    /**
     * 处理JSON型数据
     * @param url URL请求地址
     * @param config 控件对象的配置属性
     * @returns {FR.Data} 返回数据对象
     */
    createJSONData: function (url, config) {
        return new FR.Data({
            dataSource: new FR.URLSource({
                url: url
            }),
            dataReader: new FR.DefaultReader(config)
        });
    },

    /**
     * 处理同步JSON型数据
     * @param url URL请求地址
     * @param async 是否异步
     * @returns {FR.SynchronData} 返回数据对象
     */
    createSynchronJSONData: function (url, async) {
        return new FR.SynchronData({
            dataSource: new FR.SynchronURLSource({
                url: url,
                async: !!async
            }),
            dataReader: new FR.DefaultReader()
        });
    },

    /**
     * 生成空数据
     * @returns {FR.Data} 返回数据对象
     */
    createEmptyData: function () {
        return new FR.Data();
    },

    /**
     * 生成子项数据
     * @param item 子项数据
     * @returns {FR.Record} 返回数据对象
     */
    createItemRecord: function (item) {
        return new FR.Record({
            data: item,
            showField: 'text',
            valueField: 'value',
            titleField: 'titleText'
        });
    },

    /**
     * 生成默认根节点数据
     * @param url URL请求地址
     * @returns {FR.RootNodeLoader} 返回数据对象
     */
    createDefaultRootNodes: function (url) {
        return new FR.RootNodeLoader({
            url: url
        });
    }
});
/**
 * 直接展示的日期控件
 *
 *      @example
 *      var $anchor = $('<div>').css({
 *          position : 'absolute',
 *          top : 5,
 *          left : 5,
 *          width : 300,
 *          height : 300
 *      }).appendTo('body');
 *      var picker = new FR.DatePicker({
 *          renderEl : $anchor,
 *          format : 'yyyy-MM-dd',
 *          viewMode : 0
 *      });
 *
 * @class FR.DatePicker
 * @extends FR.Widget
 * @cfg {JSON} options 配置属性
 * @cfg {String} [options.format] 日期格式
 * @cfg {0/1/2/3} [options.viewMode=1] 显示模式
 */
FR.DatePicker = FR.extend(FR.Widget, {

    CONSTS: {

        VIEWMODE: {
            YM: 0,  //年月
            YMD: 1, //年月日
            HMS: 2, //时分秒
            YMDHMS: 3 //年月日时分秒
        },

        MINYEAR: 1900,
        MAXYEAR: 2999,

        NAV: {
            'prevm': 2, //上个月
            'nextm': 3, //下个月
            'title': 4, //年月显示标题
            'clear': 5, //清除
            'today': 6, //今天
            'dok': 7,   //日期确认
            'prevy': 8, //前十年
            'nexty': 9, //后十年
            'cancel': 10, //取消
            'mok': 11,   //确认
            'plus': 12, //增加时间
            'minus': 13, //减少时间
            'firstday': 14, //周一和周日
            'current': 15, //当前时间
            'day': 100, //日
            'month': 200, //月
            'year': 300 //年
        },

        FIRSTDAY: 0 //每周的第一天,0表示周日,1表示周一,依次类推(全局生效)。
    },

    _TT: {
        CALENDAR: FR.i18nText("FR-Basic_Calendar"),
        WK: FR.i18nText("FR-Basic_Week"),
        CLEAR: FR.i18nText("FR-Basic_Clear"),
        TODAY: FR.i18nText("FR-Basic_Today"),
        OK: FR.i18nText("FR-Basic_OK"),
        CANCEL: FR.i18nText("FR-Basic_Cancel"),
        CURRENT: FR.i18nText("FR-Basic_Current")
    },

    /**
     * @see FR.Widget
     * @returns {*}
     * @private
     */
    _defaultConfig: function () {
        return $.extend(FR.DatePicker.superclass._defaultConfig.apply(this, arguments), {
            widgetName: "datepicker",
            inputField: null,
            format: null,
            viewMode: 1,
            endDate: null, //结束日期
            startDate: null, //起始日期
            date: null, //初始日期
            dateFormat: null, // 日期格式
            //日期更新事件
            onDateUpdate: null,
            //清除按钮事件
            onClear: function () {
                this._hideView();
            },
            //确认按钮事件
            onOK: function () {
                this._hideView();
            },
            //关闭按钮事件
            onClose: function () {
                this._hideView();
            },
            //选取今天按钮事件
            onToday: function () {
                this._hideView();
            }
        });
    },
    _hideView: function () {
        if (FR.Browser.isIE8()) {
            this.element.css("visibility", "hidden");
        } else {
            this.element.hide();
        }
    },
    /**
     * @see FR.Widget
     * @private
     */
    _init: function () {
        FR.DatePicker.superclass._init.apply(this, arguments);
        this.element.addClass('fr-datepicker');
        this.cache = {
            showYear: null,
            showMonth: null
        };
        this._initTables();
        this._bindEvts();
    },

    _initTables: function () {
        var opts = this.options;
        this.$datetable = this._createDatePicker();
        this._loadDateData(this.$datetable, new Date(this.options.date));
        this.$monthtable = this._createMonthPicker();
        this.$timetable = this._createTimePicker();
        switch (opts.viewMode) {
            case this.CONSTS.VIEWMODE.YM : // 年月
                this._loadMonthData(this.$monthtable, new Date(this.options.date));
                this.$monthtable.appendTo(this.element).show();
                break;
            case this.CONSTS.VIEWMODE.HMS :   // 时分秒
                this._loadTimeData(this.$timetable, this.options.date);
                this._addTimeOptPane(this.$timetable);
                this.$timetable.appendTo(this.element).show();
                break;
            case this.CONSTS.VIEWMODE.YMD : //年月日
                this.$datetable.appendTo(this.element).show();
                this.$monthtable.hide().appendTo(this.element);
                break;
            default : // 年月日、年月日时分秒
                this.$datetable.appendTo(this.element).show();
                this.$monthtable.hide().appendTo(this.element);
                var row = $('<tr/>').prependTo(this.$datetable.find('tfoot'));
                this._loadTimeData(this.$timetable, this.options.date);
                this.$timetable.show().appendTo($('<td colspan="8" class="time"/>').appendTo(row));
                break;
        }
    },

    _createTimePicker: function () {
        var table = $('<table cellspacing = "0" cellpadding = "0" class="tt"/>');
        var tbody = $('<tbody>').appendTo(table);
        var self = this, o = this.options, NAV = this.CONSTS.NAV;
        table.$h = $('<input/>').data('time', 'h').keyup(function () {
            var text = this.value;
            var value = parseInt(text, 10);
            if (value < 24 && value >= 0) {
                o.date.setHours(value);
                FR.applyFunc(self, o.onDateUpdate, arguments);
            }
        }).focus(function () {
            table.focus = $(this);
        }).mousedown(function (e) {
            e.stopPropagation();//bug98753这边编辑的时候不冒泡,防止和填报控件篡掉
        });
        table.$m = $('<input/>').data('time', 'm').keyup(function () {
            var text = this.value;
            var value = parseInt(text, 10);
            if (value < 60 && value >= 0) {
                o.date.setMinutes(value);
                FR.applyFunc(self, o.onDateUpdate, arguments);
            }
        }).focus(function () {
            table.focus = $(this);
        }).mousedown(function (e) {
            e.stopPropagation();
        });
        table.$s = $('<input/>').data('time', 's').keyup(function () {
            var text = this.value;
            var value = parseInt(text, 10);
            if (value < 60 && value >= 0) {
                o.date.setSeconds(value);
                FR.applyFunc(self, o.onDateUpdate, arguments);
            }
        }).focus(function () {
            table.focus = $(this);
        }).mousedown(function (e) {
            e.stopPropagation();
        });
        table.focus = table.$s;
        var $add = $('<td/>').html('&and;').data('nav', NAV['plus']);
        var $min = $('<td/>').html('&or;').data('nav', NAV['minus']);
        var row1 = $('<tr/>').append($('<td rowspan="2"/>').text(FR.i18nText("FR-Basic_Time")))
            .append($('<td rowspan="2"/>').append(table.$h))
            .append($('<td class="common" rowspan="2"/>').text(':'))
            .append($('<td rowspan="2"/>').append(table.$m))
            .append($('<td class="common" rowspan="2"/>').text(':'))
            .append($('<td rowspan="2"/>').append(table.$s))
            .append($add)
            .appendTo(tbody);
        var row2 = $('<tr/>').append($min)
            .appendTo(tbody);
        //绑定鼠标滚动事件
        tbody.find('input').mousewheel(function (e) {
            if (this.D < 0) {
                //向上滚动时间+
                self._doTimeInc(table, $(this));
            } else {
                //向下滚动时间-
                self._doTimeDec(table, $(this));
            }
            return false;
        });
        return table;
    },

    /**
     * 添加时分秒部分独立显示时的按钮操作面板
     * @param timetable 时间面板
     * @private
     */
    _addTimeOptPane: function (timetable) {
        var nav = this.CONSTS.NAV;
        var $foot = $('<tfoot/>');
        var $tr = $('<tr class="optbtns"/>').appendTo($foot);
        //清空按钮
        this._createCell($tr, this._TT["CLEAR"], 2, nav['clear'], 'clear');
        //当前按钮
        this._createCell($tr, this._TT["CURRENT"], 3, nav['current'], 'current');
        //确认按钮
        this._createCell($tr, this._TT["OK"], 2, nav['dok'], 'ok');
        $foot.appendTo(timetable);
    },
    /**
     * 生成日期选择部分
     * @private
     */
    _createDatePicker: function () {
        var table = $('<table cellspacing = "0" cellpadding = "0" class="dt"/>');
        var nav = this.CONSTS.NAV;
        var thead = $('<thead/>').appendTo(table);
        //head
        //head - tools
        row = $('<tr class = "mainhead"/>');
        //head - tools - 前一月
        table.$prevm = this._createCell(row, "&lsaquo;", 1, nav['prevm'], "prevm");
        //head - tools - title(标记年份和月份)
        table.$title = $('<td class="title" colspan="6"/>').data('nav', nav['title']).appendTo(row);
        //head - tools - 后一月
        table.$nextm = this._createCell(row, "&rsaquo;", 1, nav['nextm'], "nextm");
        row.appendTo(thead);
        //head - week names
        row = $('<tr/>');
        $('<td class="name wn">' + this._TT['WK'] + '</td>').appendTo(row);
        for (var i = 7; i > 0; --i) {
            $('<td/>').appendTo(row);
        }
        for (var i = 0; i < 7; ++i) {
            var $fdcell = row.children().eq(i + 1);
            var index = (i + this.CONSTS.FIRSTDAY) % 7;
            $fdcell.addClass('day name').text(Date._SDN[index]);
            if ([0, 6].indexOf(index) != -1) { //周六,周日
                $fdcell.addClass("weekend");
            }
            if ([0, 1].indexOf(index) != -1) { //周一,周日
                $fdcell.addClass("fd").data('nav', this.CONSTS.NAV['firstday']).data('fd', index);
            }
        }
        row.appendTo(thead);
        //body
        var tbody = $('<tbody onselectstart="return false"/>').appendTo(table);
        for (i = 6; i > 0; i--) {
            var row = $('<tr/>').appendTo(tbody);
            for (var t = 0; t <= 7; t++) {
                $('<td/>').appendTo(row);
            }
        }
        //foot
        var tfoot = $('<tfoot/>').appendTo(table);
        var row = $('<tr class = "optbtns"/>');
        //foot - 清除按钮
        this._createCell(row, this._TT["CLEAR"], 2, nav['clear'], 'clear');
        //foot - 今天按钮
        this._createCell(row, this._TT["TODAY"], 4, nav['today'], 'today');
        //foot - 确认按钮
        this._createCell(row, this._TT["OK"], 2, nav['dok'], 'ok');
        row.appendTo(tfoot);
        return table;
    },

    /**
     * 生成年月选择部分
     * @private
     */
    _createMonthPicker: function () {
        var table = $('<table cellspacing = "0" cellpadding = "0" class="mt"/>');
        var nav = this.CONSTS.NAV;
        //tbody
        var tbody = $('<tbody class="datemenubody"/>').appendTo(table);
        //tbody - tools
        var row = $('<tr class="datemenutr"/>').appendTo(tbody);
        for (var n = 0; n < 2; n++) {
            $('<td class="month"/>').appendTo(row);
        }
        //tbody - 翻年按钮
        this._createCell(row, "&laquo;", 1, nav['prevy'], ' prevy');
        this._createCell(row, "&raquo;", 1, nav['nexty'], ' nexty');
        //tbody - years
        for (var m = 0; m < 5; m++) {
            row = $('<tr/>').appendTo(tbody);
            $('<td class="month"/><td class="month"/>' +
                '<td class="year"/><td class="year"/>').appendTo(row);
        }
        //foot - buttons
        var tfoot = $('<tfoot/>').appendTo(table);
        row = $('<tr class="optbtns"/>').appendTo(tfoot);
        //tbody - 确定与取消
        this._createCell(row, this._TT["OK"], 2, nav['mok'], 'ok');
        this._createCell(row, this._TT["CANCEL"], 2, nav['cancel'], 'cancel');
        return table;
    },

    /**
     * 翻到上个月
     * @private
     */
    _toPrevMonth: function () {
        var sd = this.options.startDate, date = this.options.date;
        var month = this.cache.showMonth,
            year = this.cache.showYear;
        if (!sd) {
            if (month > 0) {
                this._setMonth(month - 1);
            } else {
                date.setFullYear(year - 1);
                this._setMonth(11);
            }
            return;
        }
        if (year > sd.getFullYear()) {
            if (month > 0) {
                this._setMonth(month - 1);
            } else {
                date.setFullYear(year - 1);
                this._setMonth(11);
            }
        } else if (year == sd.getFullYear()) {
            if (month > sd.getMonth() && month > 0) {
                this._setMonth(month - 1);
                if (date < sd) {
                    date = new Date(sd);
                }
            }
        }
    },

    /**
     * 翻到下个月
     * @private
     */
    _toNextMonth: function () {
        var edd = this.options.endDate, date = this.options.date;
        var month = this.cache.showMonth,
            year = this.cache.showYear;
        if (!edd) {
            if (month < 11) {
                this._setMonth(month + 1);
            } else {
                date.setFullYear(year + 1);
                this._setMonth(0);
            }
            return;
        }
        if (year < edd.getFullYear()) {
            if (month < 11) {
                this._setMonth(month + 1);
            } else {
                date.setFullYear(year + 1);
                this._setMonth(0);
            }
        } else if (year == edd.getFullYear()) {
            if (month < edd.getMonth()) {
                this._setMonth(month + 1);
                if (date > edd) {
                    date = new Date(edd);
                }
            }
        }
    },

    /**
     * 翻到前十年
     * @private
     */
    _toPrevDecade: function () {
        var sd = this.options.startDate, date = this.options.date;
        var year = date.getFullYear() - 10, month = date.getMonth();
        var minMonth, minYear;
        if (sd && year == (minYear = sd.getFullYear())) {
            minMonth = sd.getMonth();
        }
        if (!minYear || minYear < this.CONSTS.MINYEAR) {
            minYear = this.CONSTS.MINYEAR;
        }
        if (year < minYear) {
            date.setFullYear(minYear);
            if (month < minMonth) {
                date.setMonth(minMonth);
            }
        } else {
            date.setFullYear(year);
        }
    },

    /**
     * 翻到后十年
     * @private
     */
    _toNextDecade: function () {
        var edd = this.options.endDate, date = this.options.date;
        var year = date.getFullYear() + 10, month = date.getMonth();
        var maxMonth, maxYear;
        if (edd && year == (maxYear = edd.getFullYear())) {
            maxMonth = edd.getMonth();
        }
        if (!maxYear || maxYear > this.CONSTS.MAXYEAR) {
            maxYear = this.CONSTS.MAXYEAR;
        }
        if (year > maxYear) {
            date.setFullYear(maxYear);
            if (month < maxMonth) {
                date.setMonth(maxMonth);
            }
        } else {
            date.setFullYear(year);
        }
    },

    /**
     *
     * @param m 临时过渡的月份
     * @private
     */
    _setMonth: function (m) {
        //当前选中的日期
        var date = this.options.date;
        var day = date.getDate(),
            edd = this.options.endDate,
            std = this.options.startDate;
        //临时过渡月份中的天数
        var max = date.getMonthDays(m);
        if (day > max) {
            date.setDate(max);
        }
        date.setMonth(m);
        if (edd && date > edd) {
            date.setDate(edd.getDate() > max ? max : edd.getDate());
        }
        if (std && date < std) {
            date.setDate(std.getDate() > max ? max : std.getDate());
        }
    },
    /**
     * 加载日期数据
     * @param table {$} 容器
     * @param date ｛Date｝当前日期
     * @private
     */
    _loadDateData: function (table, date) {
        if (!date) {
            return;
        }
        var year = date.getFullYear(),
            month = date.getMonth(),
            day = date.getDate();
        var today = new Date(),
            TY = today.getFullYear(),
            TM = today.getMonth(),
            TD = today.getDate();
        this.cache.showYear = year;
        this.cache.showMonth = month;
        var std = this.options.startDate,
            edd = this.options.endDate;
        //设置title
        table.$title.text(Date._MN[month] + ", " + year);
        //根据起始和结束日期设置翻月按钮
        var nextDay = new Date(date);
        nextDay.setDate(nextDay.getMonthDays() + 1);
        if ((edd && nextDay > edd) || nextDay.getFullYear() > this.CONSTS.MAXYEAR) {
            table.$nextm.addClass('disabled').removeClass('hover').data('disabled', true);
        } else {
            table.$nextm.removeClass('disabled').data('disabled', false);
        }
        var prevDay = new Date(date);
        prevDay.setDate(0);
        if ((std && prevDay < std) || prevDay.getFullYear() < this.CONSTS.MINYEAR) {
            table.$prevm.addClass('disabled').removeClass('hover').data('disabled', true);
        } else {
            table.$prevm.removeClass('disabled').data('disabled', false);
        }
        //日期设置
        date.setDate(1);
        var day1 = (date.getDay() - this.CONSTS.FIRSTDAY) % 7;
        date.setDate(0 - day1);
        date.setDate(date.getDate() + 1);
        var $frow = table.find('tbody').children().eq(0);
        //根据起始和结束日期设置td日期
        for (var i = 0; i < 6; i++) {
            if (!$frow.length) {
                break;
            }
            var $cell = $frow.children().eq(0);
            $cell.addClass('week wn').text(date.getWeekNumber());
            var iday;
            for (var j = 0; j < 7; ++j, date.setDate(iday + 1)) {
                $cell = $cell.next();
                $cell.removeClass().data('nav', this.CONSTS.NAV['day']);
                if (!$cell.length) {
                    break;
                }
                iday = date.getDate();
                $cell.text(iday);
                var current_month = (date.getMonth() == month);
                if (!current_month) {
                    $cell.addClass('oday').data('disabled', true);
                    continue;
                }
                var disabled = false;
                if ((std != null && std > date) || (edd != null && edd < date)) {
                    //日期范围外
                    $cell.addClass('day disabled');
                    disabled = true;
                } else {
                    //日期范围内
                    $cell.addClass('day');
                }
                $cell.data('disabled', disabled);
                if (!disabled) {
                    if (current_month && iday == day) {
                        this.cache.selectedDate && this.cache.selectedDate.removeClass('selected');
                        $cell.addClass('selected');
                        this.cache.selectedDate = $cell;
                        this.cache.showDay = iday;
                    }
                    if (date.getFullYear() == TY &&
                        date.getMonth() == TM &&
                        iday == TD) {
                        $cell.addClass('today');
                    }
                    var wday = date.getDay();
                    if ([0, 6].indexOf(wday) != -1) {
                        $cell.addClass("weekend");
                    }
                }
            }
            $frow = $frow.next();
        }
    },

    /**
     * 加载年月数据
     * @param table {$} 表格对象
     * @param date {Date} 当前日期
     * @private
     */
    _loadMonthData: function (table, date) {
        if (!date) {
            return;
        }
        var year = date.getFullYear(), month = date.getMonth();
        //处理需要显示的10个年份
        var midyear = $(table).data('midYear');
        if (!midyear) {
            midyear = year;
        } else {
            if (year > midyear + 5) {
                midyear += 10;
            } else if (year < midyear - 4) {
                midyear -= 10;
            }
        }
        $(table).data('midYear', midyear);
        var years = [midyear - 4, midyear - 3, midyear - 2, midyear - 1, midyear,
            midyear + 1, midyear + 2, midyear + 3, midyear + 4, midyear + 5];
        var ycells = $("td.year", table);
        var mcells = $("td.month", table);
        var o = this.options;
        var ed = o.endDate;
        var sd = o.startDate;
        var maxYear, maxMonth, minYear, minMonth;
        //结束日期
        if (ed) {
            if (ed && year == (maxYear = ed.getFullYear())) {
                maxMonth = ed.getMonth();
            }
        }
        if (!maxYear || maxYear > this.CONSTS.MAXYEAR) {
            maxYear = this.CONSTS.MAXYEAR;
        }
        //起始日期
        if (sd) {
            if (sd && year == (minYear = sd.getFullYear())) {
                minMonth = sd.getMonth();
            }
        }
        if (!minYear || minYear < this.CONSTS.MINYEAR) {
            minYear = this.CONSTS.MINYEAR;
        }
        //12个月份数据加载
        for (var i = 0; i < 12; i++) {
            var $mcell = mcells.eq(i).text(Date._MN[i])
                .data('nav', this.CONSTS.NAV['month']).data('month', i);
            if (i == month) {
                this.cache.selectedMonth && this.cache.selectedMonth.removeClass('selected');
                $mcell.addClass("selected");
                this.cache.selectedMonth = $mcell;
            }
            if ((!FR.isEmpty(minMonth) && i < minMonth) || (!FR.isEmpty(maxMonth) && i > maxMonth)) {
                $mcell.addClass("disabled").data('disabled', true);
            } else {
                $mcell.removeClass("disabled").data('disabled', false);
            }
            //一页可显示的10年数据加载
            if (i < 10) {
                var $ycell = ycells.eq(i).text(years[i]).data('nav', this.CONSTS.NAV['year']);
                if (years[i] == year) {
                    this.cache.selectedYear && this.cache.selectedYear.removeClass('selected');
                    $ycell.addClass("selected");
                    this.cache.selectedYear = $ycell;
                }
                if ((!FR.isEmpty(minYear) && years[i] < minYear) || (!FR.isEmpty(maxYear) && years[i] > maxYear)) {
                    $ycell.addClass("disabled").data('disabled', true)
                } else {
                    $ycell.removeClass("disabled").data('disabled', false);
                }
            }
        }
        //翻页按钮 - 向前
        var $prev = $("td.prevy", table).removeClass('disabled').data('disabled', false);
        if (years[0] <= minYear) {
            $prev.addClass("disabled").data('disabled', true).removeClass('hover');
        }
        //翻页按钮 - 向后
        var $next = $("td.nexty", table).removeClass('disabled').data('disabled', false);
        if (years[9] >= maxYear) {
            $next.addClass("disabled").data('disabled', true).removeClass('hover');
        }
    },

    _loadTimeData: function (table, date) {
        if (!date) {
            return;
        }
        var hour = date.getHours(),
            minute = date.getMinutes(),
            second = date.getSeconds();
        table.$h.val(String.leftPad(hour, 2, '0'));
        table.$m.val(String.leftPad(minute, 2, '0'));
        table.$s.val(String.leftPad(second, 2, '0'));
    },

    /**
     * 时间增加单位1
     * @param {Object} timetable 时间表
     * @param {Object} input 时间输入框对象
     * @private
     */
    _doTimeInc: function (timetable, input) {
        var t = input.data('time'), o = this.options;
        if (t === 'h') {
            var text = (o.date.getHours() + 1) % 24;
            o.date.setHours(text);
            timetable.$h.val(String.leftPad(text, 2, '0'));
        } else if (t === 'm') {
            var text = (o.date.getMinutes() + 1) % 60;
            o.date.setMinutes(text);
            timetable.$m.val(String.leftPad(text, 2, '0'));
        } else {
            var text = (o.date.getSeconds() + 1) % 60;
            o.date.setSeconds(text);
            timetable.$s.val(String.leftPad(text, 2, '0'));
        }
        input.select();
        FR.applyFunc(this, o.onDateUpdate, arguments);
    },
    /**
     * 时间减少单位1
     * @param {Object} timetable 时间表
     * @param {Object} input 时间输入框对象
     * @private
     */
    _doTimeDec: function (timetable, input) {
        var t = input.data('time'), o = this.options;
        if (t === 'h') {
            var text = (o.date.getHours() + 23) % 24;
            o.date.setHours(text);
            timetable.$h.val(String.leftPad(text, 2, '0'));
        } else if (t === 'm') {
            var text = (o.date.getMinutes() + 59 ) % 60;
            o.date.setMinutes(text);
            timetable.$m.val(String.leftPad(text, 2, '0'));
        } else {
            var text = (o.date.getSeconds() + 59) % 60;
            o.date.setSeconds(text);
            timetable.$s.val(String.leftPad(text, 2, '0'));
        }
        input.select();
        FR.applyFunc(this, o.onDateUpdate, arguments);
    },
    /**
     * 所有绑定事件
     * @private
     */
    _bindEvts: function () {
        // 日期控件展开时会绑定事件，为了避免多次展开选日期绑定多次事件，都先清一下
        this.element.unbind();
        var self = this, o = this.options, NAV = this.CONSTS.NAV;
        var montable = this.$monthtable, datetable = this.$datetable, timetable = this.$timetable;
        var proxy = function (event) {
            var target = event.target;
            var type = event.type;
            var navitype = $(target).data('nav');
            if ($(target).data('disabled') || target.tagName !== 'TD' || !navitype) {
                return;
            }
            if (!self.options.date) {
                self.options.date = new Date();
            }
            if (type === 'mouseover') {
                //MOUSEOVER事件
                $(target).addClass('hover');
            } else if (type === "mouseup") {
                //MOUSEUP事件
                switch (navitype) {
                    case NAV['prevm']:
                        //前月
                        self._toPrevMonth();
                        self._loadDateData(datetable, new Date(self.options.date));
                        FR.applyFunc(self, o.onDateUpdate, arguments);
                        break;
                    case NAV['nextm']:
                        //后月
                        self._toNextMonth();
                        self._loadDateData(datetable, new Date(self.options.date));
                        FR.applyFunc(self, o.onDateUpdate, arguments);
                        break;
                    case NAV['title']:
                        //加载数据
                        self._loadMonthData(montable, new Date(self.cache.showYear, self.cache.showMonth));
                        montable.css({
                            position: 'absolute',
                            top: 0,
                            'z-index': FR.widget.opts.zIndex++
                        }).show("fast");
                        break;
                    case NAV['clear']:
                        //清空按钮
                        self.options.date = null;
                        self.cache.selectedDate && self.cache.selectedDate.removeClass('selected');
                        FR.applyFunc(self, o.onDateUpdate, arguments);
                        FR.applyFunc(self, o.onClear, arguments);
                        break;
                    case NAV['current']:
                        //当前按钮
                        self.options.date = new Date();
                        FR.applyFunc(self, o.onDateUpdate, arguments);
                    case NAV['today']:
                        //今天按钮
                        var today = new Date();
                        if ((self.options.startDate && today < self.options.startDate) ||
                            (self.options.endDate && today > self.options.endDate)) {
                            return;
                        } else {
                            self.options.date = today;
                        }
                        FR.applyFunc(self, o.onDateUpdate, arguments);
                        FR.applyFunc(self, o.onToday, arguments);
                        break;
                    case NAV['dok']:
                        //日期界面的确认按钮
                        FR.applyFunc(self, o.onDateUpdate, arguments);
                        FR.applyFunc(self, o.onOK, arguments);
                        break;
                    case NAV['prevy']:
                        //前十年
                        self._toPrevDecade();
                        self._loadMonthData(montable, new Date(self.options.date));
                        FR.applyFunc(self, o.onDateUpdate, arguments);
                        break;
                    case NAV['nexty']:
                        //后十年
                        self._toNextDecade();
                        self._loadMonthData(montable, new Date(self.options.date));
                        FR.applyFunc(self, o.onDateUpdate, arguments);
                        break;
                    case NAV['mok']:
                        //年月界面的确认按钮
                        self._loadDateData(datetable, new Date(self.options.date));
                        FR.applyFunc(self, o.onDateUpdate, arguments);
                        montable.hide("fast");
                        break;
                    case NAV['cancel']:
                        //年月界面的取消按钮
                        self._loadDateData(datetable, new Date(self.options.date));
                        montable.hide("fast");
                        break;
                    case NAV['year']:
                        //选中年
                        self.cache.selectedYear && self.cache.selectedYear.removeClass('selected');
                        self.cache.selectedYear = $(target);
                        var date = self.options.date;
                        date.setFullYear($(target).text());
                        self._loadMonthData(montable, new Date(date));
                        FR.applyFunc(self, o.onDateUpdate, arguments);
                        break;
                    case NAV['month']:
                        //选中月
                        self.cache.selectedMonth && self.cache.selectedMonth.removeClass('selected');
                        self.cache.selectedMonth = $(target).addClass('selected');
                        self.options.date.setDate(1);
                        self.options.date.setMonth($(target).data('month'));
                        FR.applyFunc(self, o.onDateUpdate, arguments);
                        break;
                    case NAV['day']:
                        //选中日
                        self.cache.selectedDate && self.cache.selectedDate.removeClass('selected');
                        self.cache.selectedDate = $(target).addClass('selected');
                        var date = self.options.date;
                        date.setFullYear(self.cache.showYear);
                        date.setMonth(self.cache.showMonth);
                        date.setDate($(target).text());
                        FR.applyFunc(self, o.onDateUpdate, arguments);
                        if (!timetable.parent().length) {
                            FR.applyFunc(self, o.onClose, arguments);
                        }
                        break;
                    case NAV['plus']:
                        //增加时间
                        self._doTimeInc(timetable, timetable.focus);
                        break;
                    case NAV['minus']:
                        //减少时间
                        self._doTimeDec(timetable, timetable.focus);
                        break;
                    case NAV['firstday']:
                        //选择周一或者周日排序
                        self.CONSTS.FIRSTDAY = $(target).data('fd');
                        self.element.empty();
                        self._init();
                    default:
                        break;
                }
            } else if (type === "mouseout") {
                //MOUSEOUT事件
                $(target).removeClass('hover');
            }
        };
        this.element.bind("mousedown", proxy)
            .bind("mouseover", proxy)
            .bind("mouseup", proxy)
            .bind("mouseout", proxy);
    },

    /**
     * 生成按钮对象
     * @param tr {$} 行
     * @param text {String} 文本内容
     * @param colspan {Number} 合并单元格
     * @param nav {Number} 操作数
     * @param cls {String} 类名
     * @returns {*} 返回TD对象
     * @private
     */
    _createCell: function (tr, text, colspan, nav, cls) {
        var $cell = $('<td class/>')
            .attr('colSpan', colspan)
            .html(text)
            .appendTo(tr);
        if (nav) {
            $cell.data('nav', nav);
        }
        cls = cls ? 'btn ' + cls : 'btn';
        $cell.addClass(cls);
        return $cell;
    },


    getValue: function () {
        return this.options.date;
    },

    setValue: function (value) {
        this.options.date = value;
    },

    getText: function () {
        return this.getValue();
    },

    setText: function (text) {
        this.setValue(text);
    }

});
$.shortcut('datepicker', FR.DatePicker);
(function () {
    /**
     * 基本的编辑器父类，这是一个抽象类
     * @class FR.BaseEditor
     * @extends FR.Widget
     * @abstract
     */
    FR.BaseEditor = FR.extend(FR.Widget, {
        /**
         * 判断是否支持数据绑定
         * @returns {Boolean} 支持数据绑定则返回true，否则返回false
         */
        isSupportDatabinding: function () {
            return true;
        },

        /**
         * 加载数据
         */
        loadData: function () {
            if (this.options.widgetName) {
                var value = this.options.form.formData[this.options.widgetName];
                if (value) {
                    this.setValue(value, false);
                }
            }
        },
        /**
         * 保存数据绑定的数据
         */
        store: function () {
            if (this.options.Databinding) {
                var name = this.options.Databinding.Name;
                var key = this.options.Databinding.Key;
                if (name && key) {
                    var value = this.getValue();
                    var state = this.options.form.formData.setValue(name,
                        key, value);
                }
            }
        },

        getValue: function () {
        },
        /**
         * 保存控件的编辑值（原值），有些控件的返回值是受属性约束的，
         * 比如下拉树如果不返回完整路径，单元格再次编辑的时候根据保存的cv就找不到节点了
         */
        getEditValue: function () {

        },

        setValue: function (value) {
            // wei : setValue的时候不提示是否输错，在stopCellEditing的时候再提示。
            if (!this.isValidate(value)) {
                return false;
            }
            if ((value || value === 0) && this.options.watermark) {
                this.clearWaterMark();
            }
            if (arguments[1] != undefined) {
                this._dealValueWithEvents(value, arguments[1]);
            } else {
                this._dealValueWithEvents(value, false);
            }
        },

        _dealValueWithEvents: function (value, shouldFireEvent) {
        },
        dealWithDisplayValue: function (showValue) {
        },

        getText: function () {
            return this.getValue();
        },

        setText: function (val) {
            this.setValue(val);
        },

        clearWaterMark: function () {
        },

        /**
         * 获取错误提示内容
         * @returns {String} 返回错误提示内容
         */
        getErrorMsg: function () {
            return this.errorMsg;
        },

        /**
         * 校验并且设置状态标志
         * @param {String} cValue 被校验的值
         */
        checkValid: function (cValue) {
            if (this.isValidate(cValue)) {
                this.validateCss();
                return true;
            } else {
                this.invalidateCss();
                return false;
            }
        },

        /**
         * 校验值是否符合控件的值规范
         * 这个方法只做两件事：判断是否符合规范；如果不符合的话设置this.errorMsg
         * 不要在这个方法里设置控件的CSS样式
         * @param cValue  将要给控件赋的值
         * @returns {boolean} 符合控件的校验要求则返回true，否则返回false
         */
        isValidate: function (cValue) {
            /* daniel: value为0时 value=false*/
            var value = cValue != null && cValue != undefined
                ? cValue
                : this.getValue();
            var regex = this.options.regex;
            /* daniel： 不要使用value ==""判断空 ""==0*/
            // value为null也要加上
            if (value == null || value === "" || FR.isEmptyArray(value)) {
                return this.validateEmptyValue(value);
            }

            if (regex) {
                for (var i = 0, len = FR.BaseEditor.PluginRegex.length; i < len; i++) {
                    var obj = FR.BaseEditor.PluginRegex[i];
                    if (obj.text === regex) {
                        if (obj.regex(value)) {
                            return true;
                        } else {
                            this.errorMsg = this.options.regErrorMsg || FR.i18nText("FR-Base_Error_Input_Value");
                            return false;
                        }
                    }
                }

                if (typeof regex == 'string') {/* String的时候，构造一个RegExp出来*/
                    try {
                        regex = new RegExp(regex);
                    } catch (err) {
                        this.errorMsg = "invalid Regular expressions";
                        return false;
                    }
                }
                if (!regex.test(value)) {
                    /* 正则表达式是判断长度的 换行符算两个字符*/
                    if (!(regex.source.indexOf(".{") > -1 && regex.test((value + '').replace(/\n/g, "aa")))) {
                        this.errorMsg = this.options.regErrorMsg || FR.i18nText("FR-Base_Error_Input_Value");
                        return false;
                    }
                }
            }

            return true;
        },
        /**
         * 对空值的处理
         */
        validateEmptyValue: function (value) {
            var allowBlank = this.options.allowBlank !== false;
            if (allowBlank) {
                return true;
            } else {
                this.errorMsg = this.options.errorMsg
                    || FR.i18nText("FR-Base_NOT_NULL_Des");
                return false;
            }
        },

        /**
         * 初始化数据
         * @protected
         */
        initData: function () {
            if (this.options.data) {
                return;
            }
            if (this.options.widgetUrl) {
                this.options.data = FR.DataFactory
                    .createJSONData(this.options.widgetUrl, this.options);
            } else if (this.options.items) {
                this.options.data = FR.DataFactory
                    .createArrayData(this.options.items, this.options);
            }
        },

        /**
         * 数据联动，获取联动数据
         * @returns {Object}
         */
        getDependenceObj: function () {
            var o = this.options;
            /* carl两手准备，参数界面上是没有扩展的，所以依据dependence来弄。*/
            /* 报表主体上有扩展，就需要dependenceMap的映射来得知应该拿扩展后的哪个格子*/
            var depO = {};
            if (o.dependenceMap) {
                var self = this;
                $.each(o.dependenceMap, function (key, item) {
                    if (self.options.form) {
                        /* richer:同FR.FORM中一致，不区分参数名的大小写*/
                        var val = self.options.form
                            .resolveVariable(item);
                        if (val != "FR.primitive" && val != null) {
                            depO[key.toUpperCase()] = val;
                        }
                    } else if (self.options.write) {
                        /* richer:填报状态的联动*/
                        item = item.startWith("$") ? item.substring(1) : item;
                        var checkValue;
                        if (contentPane.curLGP.write) {
                            var depWidget = contentPane.curLGP.write.getWidgetByCell(item)
                                || contentPane.curLGP.write.getWidgetByName(item);
                            if (depWidget) {
                                checkValue = depWidget.getValue();
                            }
                        }
                        if (checkValue == undefined) {
                            /* marro:如果参数是单元格，并且单元格没控件，就把单元格值传过去。*/
                            var col = FR.cellStr2ColumnRow(item);
                            if (col) {
                                var tdCell = contentPane.curLGP
                                    .getTDCell(col);
                                if (tdCell) {
                                    checkValue = FR
                                        .getCellValue(tdCell);
                                }
                            }
                        }
                        if (checkValue != "FR.primitive" && checkValue != null && checkValue != undefined && checkValue != "") {
                            depO[key.toUpperCase()] = checkValue;
                        }
                    }
                });
            } else if (FR.isArray(o.dependence)) {
                for (var idx = 0; idx < o.dependence.length; idx++) {
                    var dep = o.dependence[idx];
                    if (this.options.form) {
                        /* richer:同FR.FORM中一致，不区分参数名的大小写*/
                        var val = this.options.form.resolveVariable(dep);
                        if (val != "FR.primitive" && val != null) {
                            depO[dep.toUpperCase()] = val;
                        }
                    } else if (this.options.write) {
                        /* richer:填报状态的联动*/
                        dep = dep.startWith("$") ? dep.substring(1) : dep;
                        var checkValue;
                        if (contentPane.curLGP.write) {
                            var depWidget = contentPane.curLGP.write
                                    .getWidgetByCell(dep)
                                || contentPane.curLGP.write
                                    .getWidgetByName(dep);
                            if (depWidget) {
                                checkValue = depWidget.getValue();
                            }
                        }
                        if (!checkValue) {
                            /* marro:如果参数是单元格，并且单元格没控件，就把单元格值传过去。*/
                            var col = FR.cellStr2ColumnRow(dep);
                            if (col) {
                                var tdCell = contentPane.curLGP
                                    .getTDCell(col);
                                if (tdCell) {
                                    checkValue = FR.getCellValue(tdCell);
                                }
                            }
                        }
                        if (checkValue != "FR.primitive"
                            && checkValue != null) {
                            depO[dep.toUpperCase()] = checkValue;
                        }
                    }
                }
            }
            $.each(depO, function (key, value) {
                depO[key] = FR.encodePrecentPlus(value);
            });
            return depO;
        },

        /**
         * 数据联动，生成参数依赖
         * @returns {Object} 依赖的参数
         */
        createDependencePara4Data: function () {
            var dependence = this.getDependenceObj();
            var parameter = FR.isEmptyObj(dependence) ? {} : {dependence: dependence};
            return {
                parameter: parameter
            }
        },

        reset: function () {
            this.setValue("");
        }
    });

    /**
     * 正则表达式控件插件接口
     * @type {Array} 正则表达式类型数组
     */
    FR.BaseEditor.PluginRegex = [];

    /**
     * 带有EditComp的控件父类
     * 包括FR.TriggerEditor  FR.EditComp
     * @class FR.EditCompBaseEditor
     * @extends FR.BaseEditor
     */
    FR.EditCompBaseEditor = FR.extend(FR.BaseEditor, {

        _defaultConfig: function () {
            return $.extend(FR.EditCompBaseEditor.superclass._defaultConfig.apply(), {});
        },

        /**
         * 设置水印
         * @param text 水印内容
         */
        setWaterMark: function (text) {
            if (text == undefined) {
                text = this.options.watermark;
            }
            this.editComp.watermark({html: text}, this.options.isEditable);
        },
        /**
         * 移除水印
         */
        removeWaterMark: function () {
            this.editComp.watermark({
                remove: true
            });
        },
        /**
         * 清空水印
         */
        clearWaterMark: function () {
            this.editComp.watermark({
                clear: true
            });
        },

        /**
         * 移除不符合规则的提示样式
         */
        validateCss: function () {
            this.editComp.removeClass('fr-invalid');
            this.editComp.removeAttr('title');
        },

        /**
         * 显示不符合规则的提示样式
         */
        invalidateCss: function () {
            this.editComp.addClass('fr-invalid');
            this.editComp.attr('title', this.getErrorMsg());
        }
    });

    /**
     * 这是一个抽象类，文本(域)/密码控件和数字控件的父类，不能直接使用。
     * @class FR.EditComp
     * @extends FR.BaseEditor
     * @abstract
     *
     * @cfg {JSON} options 属性配置
     * @cfg {String} options.cls 样式类
     * @cfg {String} options.id 唯一标识符
     * @cfg {Number} options.fontSize 字体大小
     * @cfg {String} options.text 控件的显示值
     * @cfg {String} options.value 控件的实际值
     * @cfg {Boolean} [options.disabled=false] 控件是否不可用
     * @cfg {Object} [options.watermark=false] 是否有水印,水印内容
     * @cfg {String} options.style 其他自定义样式
     * @cfg {Boolean} [options.allowBlank=true] 是否允许为空
     * @cfg {String} options.regex 填写规则
     * @cfg {Boolean} [options.autoVerify=false] 是否开启实时校验
     * @cfg {String} options.errorMsg 不符合填写规则的时候的报错信息
     */
    FR.EditComp = FR.extend(FR.EditCompBaseEditor, /**@class FR.EditComp*/{
        /**
         * 初始的属性配置
         * @returns {*}
         * @private
         */
        _defaultConfig: function () {
            return $.extend(FR.EditComp.superclass._defaultConfig.apply(), {
                cls: 'fr-texteditor',
                width: 120,
                height: 22,
                autoVerify: false
            });
        },
        /**
         * 初始化控件
         * @private
         */
        _init: function () {
            FR.EditComp.superclass._init.apply(this, arguments);
            var self = this;
            var o = this.options;
            this.editComp = this._createEditComp();
            this.replaceNewline();
            this.editComp.appendTo(this.element);
            if (o.fontSize) {
                this.editComp.css('font-size', o.fontSize);
            }
            this.validateCss();

            this.editComp.attr("name", o.widgetName).addClass(o.cls);
            if (FR.Browser.isIE8()) {
                this.editComp.css('margin-top', 0);
            }

            if (o.text) {
                this.editComp.attr("value", o.text);
            }
            if (o.id) {
                this.editComp.attr('id', o.id);
            }
            if (o.disabled === true) {
                this.editComp.attr("disabled", "disabled");
            }
            o.width = (o.width > -1) ? o.width : 120;
            o.height = (o.height > -1) ? o.height : 22;
            this.doResize(o);
            //若有style属性，则添加自定义的样式
            FR.applyStyles(this.editComp, o.style);
            this.editComp.focus(function (e) {// 获得焦点的事件
                self.editComp.addClass(o.cls + '-focus');
                if (!self.options.write) {
                    self.fireEvent(FR.Events.BEFOREEDIT);
                }
            }).blur(function (e) {// 失去焦点的事件
                self.editComp.removeClass(o.cls + '-focus');
                //Sean: options.write为true表示是填报
                if (!self.options.write) {
                    self.checkValid();
                    self.fireEvent(FR.Events.STOPEDIT);
                }
                $('#fr-replacer-textarea').focus();
            }).keyup(function (e) {
                if (o.autoVerify) {
                    self.checkValid();
                }
                if (self.isValidateInput(e)) {
                    self.fireEvent(FR.Events.AFTEREDIT, e);
                }
            });
            this.errorMsg = this.options.errorMsg || '';// james:ERROR Message要记下来
            if (o.value != null) {
                this.setValue(o.value, false);
            }
        },
        _createEditComp: function () {
            return $("<input type='text'/>");
        },

        doResize: function (give) {
            FR.EditComp.superclass.doResize.call(this, give);
            this.element.css({
                width: give.width,
                height: give.height
            });

            this.editComp.css("width", $.support.boxModel ? give.width - 8 : give.width);
            this.editComp.css("height", $.support.boxModel ? give.height - 4 : give.height); // alex:去掉上下边框的高度
            //Sean: 水印的生成随resize一起，因为水印字体的大小要适应控件的输入框大小
            if (this.options.watermark) {
                this.removeWaterMark();
                this.setWaterMark();
            }

        },

        setEnable: function (arg) {
            FR.EditComp.superclass.setEnable.apply(this, arguments);
            if (this.editComp) {
                // 如果是填报初始化控件时还没有editComp.
                if (arg === true) {
                    this.editComp.removeAttr("disabled");
                } else if (arg === false) {
                    this.editComp.attr("disabled", "disabled")
                }
            }
        },

        /**
         * IE replace space or newline
         */
        replaceNewline: function () {
            if (FR.Browser.isIE()) {
                this.editComp.on('paste', function () {
                    var str = window.clipboardData.getData("Text");
                    str = str.replace(/\s|\n/g, " "); // replace space or newline
                    //bug79391,复制的时候有原值的话不能直接覆盖
                    this.value = this.value ? this.value.append(str) : str;
                    return false;
                });
            }
        },
        /**
         * 选取控件中的文本内容
         * @param start 起始字符位置，默认为0
         * @param end 结束字符位置，默认为文本长度
         */
        selectText: function (start, end) {
            if (!this.editComp.is(":visible")) {
                // 这里不能保证editComp肯定是可见的。如果不可见下面的方法就会报错
                return;
            }
            // james:抄的Ext的
            var cv = this.editComp.val();
            if (cv && cv.length > 0) {
                start = start === undefined ? 0 : start;
                end = end === undefined ? cv.length : end;
                var d = this.editComp[0];
                if (d.setSelectionRange) {
                    d.setSelectionRange(start, end);
                } else if (d.createTextRange) {
                    var range = d.createTextRange();
                    range.moveStart("character", start);
                    range.moveEnd("character", end - cv.length);
                    range.select();
                }
            }
        }
    });
})(jQuery);
(function ($) {
    /**
     * 按钮控件
     *
     *     @example
     *     var btn = new FR.Button({
     *             renderEl : $('body'),
     *             text : "Button",
     *             hotKeys : "enter",
     *             iconCls : "custom-btn-blue",
     *             iconAlign : "right",
     *             scale : "medium",
     *             handler : function(){alert("click me")}
     *     });
     * @class FR.Button
     * @extends FR.Widget
     *
     * @cfg {JSON} options 属性配置
     * @cfg {String} options.text 按钮上的文字
     * @cfg {String} [options.hotKeys] 触发按钮的快捷键
     * @cfg {String} [options.iconCls] 按钮的css样式表类
     * @cfg {"right"|"left"|"top"|"bottom"} [options.iconAlign="right"] 按钮图标的对齐方式
     * @cfg {"small"|"medium"|"large"} [options.scale="medium"] 按钮的尺寸
     * @cfg {Function} options.handler 点击按钮时触发的事件
     */
    FR.Button = FR.extend(FR.Widget, /**@class FR.Button*/{
        /**
         * 初始的配置属性
         * @returns {*}
         * @private
         */
        _defaultConfig: function () {
            return $.extend(FR.Button.superclass._defaultConfig.apply(), {
                baseCls: "fr-btn",
                hotkeys: "",
                icon: "",
                // 按钮根据文字图标的变化自动变化
                autoSize: false,
                scale: "small",
                iconAlign: "left",
                text: "",
                width: "auto",
                height: "auto",
                borderWidth: 6
            });
        },

        /**
         * 初始化按钮
         * @private
         */
        _init: function () {
            FR.Button.superclass._init.apply(this, arguments);
            var o = this.options;
            this.initTable(o);
            this.addEvents(o);
            var self = this;
            if (o.hotkeys) {
                FR.Keys.reg(function (e) {
                    if (($(document).codeToString(e) == o.hotkeys) && self.isEnabled()) {
                        var bht = FR.CookieInfor.getCookieByName("buttonHotKeyTimer");
                        var nt = (new Date()).getTime();
                        if (FR.isEmpty(bht) || (nt - bht > 1000)) {
                            if (self.isEnabled()) {
                                self.fireEvent(FR.Events.CLICK, e);
                                document.cookie = "buttonHotKeyTimer=" + nt;
                                e.preventDefault();
                                e.stopPropagation();
                            }
                        }
                    }
                });
            }
            // alex:用添加事件的机制来实现handler的添加
            if ($.isFunction(o.handler)) {
                this.on(FR.Events.CLICK, o.handler.createDelegate(o.scope || this));
            }
        },
        initTable: function (o) {
            if (!o.text && o.value) {
                o.text = o.value;
            }
            var id = o.baseCls + "-" + o.widgetName;
            var divCls = (o.icon)
                ? (o.text ? ' fr-btn-text-icon' : ' fr-btn-icon')
                : ' fr-btn-noicon';
            divCls = 'fr-btn-up ' + divCls;
            var divStyle = 'height:' + (Number(o.height) + 1) + 'px;width:' + o.width + 'px;';
            var scaleCls = 'fr-btn-' + o.scale + ' fr-btn-icon-' + o.scale + '-'
                + o.iconAlign;
            var btnStyle = '';
            if (FR.Browser.isIE8Before()) {
                var btnTextHeight = o.scale == 'small' ? 14 : o.scale == 'middle' ? 24 : 32;
                btnStyle += ' style="margin-top:' + (o.height - btnTextHeight) / 2 + 'px;"';
            }
            else {
                divStyle += 'display:table-cell;';
            }
            this.$btndiv = $('<div id="' + id + '" class="' + divCls + '" style="' + divStyle + '">' +
                '<div class="' + scaleCls + '">' +
                '<em unselectable="on">' +
                '<button unselectable="none" type="button" data-role="none" class="fr-btn-text"' + btnStyle + '>' +
                o.text + '</button>' +
                '</em>' +
                '</div>' +
                '</div>');
            this.$btnWrap = this.$btndiv.children();
            this.$em = this.$btnWrap.children();
            this.$btn = this.$em.children();
            this.$btndiv.appendTo(this.element);
            FR.Button.setIcon(this.$btn, o.icon);
        },

        addEvents: function (o) {
            if (!this.$btndiv) {
                return;
            }
            var self = this;
            var M = {
                onMouseOver: function () {
                    if (self.isEnabled()) {
                        self.$btndiv.addClass(o.baseCls + "-over");
                    }
                },
                onMouseOut: function () {
                    if (self.isEnabled()) {
                        self.$btndiv.removeClass(o.baseCls + "-over");
                    }
                },
                onMouseDown: function () {
                    if (self.isEnabled()) {
                        self.$btndiv.removeClass(o.baseCls + "-over");
                        $(document).bind("mouseup", M.onMouseUp);
                    }
                },
                onMouseUp: function () {
                    if (self.isEnabled()) {
                        self.$btndiv.removeClass(o.baseCls + "-over");
                        $(document).unbind("mouseup", M.onMouseUp);
                    }
                }
            }
            this.$btndiv.mouseover(M.onMouseOver.createInterceptor(this.isEnabled(), this))
                .mouseout(M.onMouseOut)
                .mousedown(M.onMouseDown.createInterceptor(this.isEnabled(), this))
                .mouseup(M.onMouseUp);
            this.$btndiv.keydown(function (e) {
                if (e.keyCode === 13) {
                    e.stopPropagation();
                }
            });
            this.$btndiv.click(function (e) {
                if (self.isEnabled()) {
                    self.fireEvent(FR.Events.CLICK, e);
                }
            });
        },
        setEnable: function (enabled) {
            FR.Button.superclass.setEnable.apply(this, arguments);
            var clz = this.options.baseCls;
            if (this.$btndiv && enabled === false) {
                this.$btndiv.removeClass(clz + "-over");
            }
        },

        getText: function () {
            return this.$btn.text();
        },

        setText: function (text) {
            if (FR.isEmpty(text)) {
                return;
            }
            this.$btn.text(text);
        },

        getValue: function () {
            return this.$btn.text();
        },

        setValue: function (text) {
            if (FR.isEmpty(text)) {
                return;
            }
            this.$btn.text(text);
        },
        /**
         * 设置按钮的图标
         * @param {String} icon 图标，可以是一个url，也可以是形如"css:fr-custom-button-icon"这样的css样式表类
         */
        setIcon: function (icon) {
            if (FR.isEmpty(icon)) {
                return;
            }
            // 移除所有的class
            this.$btn.removeClass();
            this.$btn.addClass("fr-btn-text");
            var iconButton = this.$btn;
            // b:ie6 filter image 会导致宽度定死
            if (FR.Browser.isIE6()) {
                $('<span>' + this.$btn.text() + '</span>').appendTo(this.$btn.parent());
            }

            // alex:如果是以css:打头,表示里面保存的是一个cls
            if (icon.substring(0, 4) == "css:") {
                iconButton.addClass(icon.substring(4));
                // carl:使用css图片截取，服务器直接生成css语句，当为style：开头时，保存的为css属性
            } else if (icon.substring(0, 6) == "style:") {
                iconButton.css({
                    background: icon.substring(6)
                });
                // 否则保存的就是一个url路径
            } else {
                iconButton.css({
                    "background-image": "url(" + icon + ")"
                });
            }
        },

        /**
         * 设置按钮的最大宽度
         * @param {Number} width 按钮的最大宽度
         */
        setMaxWidth: function (width) {
            if (!isNaN(width)) {
                var o = this.options;
                if (FR.Browser.isIE()) {
                    if (FR.fixBoxModelWidth(this.$btn) + this.$btn.width() > (width - o.borderWidth)) {
                        this.$btn.width(width - o.borderWidth);
                    }
                } else {
                    this.$btn.css("max-width", (width - o.borderWidth) + "px");
                }
            }
        },
        doResize: function (give) {
            FR.Button.superclass.doResize.call(this, give);
            var width = give ? give.width : this.options.width;
            var height = give ? give.height : this.options.height;
            this.$btndiv.css({
                width: width,
                height: height
            });
            this.setMaxWidth(width);
            this.element.css(give);
        }
    })
    $.shortcut("button", FR.Button);

    FR.Button.setIcon = function ($btn, icon) {
        if (FR.isEmpty(icon)) {
            return;
        }
        // 移除所有的class
        $btn.removeClass();
        $btn.addClass("fr-btn-text");
        var iconButton = $btn;
        // b:ie6 filter image 会导致宽度定死
        if (FR.Browser.isIE6()) {
            // 上面这个不加flow填报页面就显示不出图片 加了flow就解决不了超过btn宽度会换行的问题...
            $('<span>' + $btn.text() + '</span>').appendTo($btn.parent());
        }

        // alex:如果是以css:打头,表示里面保存的是一个cls
        if (icon.substring(0, 4) == "css:") {
            iconButton.addClass(icon.substring(4));
            // carl:使用css图片截取，服务器直接生成css语句，当为style：开头时，保存的为css属性
        } else if (icon.substring(0, 6) == "style:") {
            iconButton.css({
                background: icon.substring(6)
            });
            // 否则保存的就是一个url路径
        } else {
            iconButton.css({
                "background-image": "url(" + icon + ")"
            });
        }
    };

    FR.Button.setMaxWidth = function ($btn, config) {
        if ($btn.isSetWidth) {
            return;
        }
        if (!isNaN(config.width)) {
            if (FR.Browser.isIE()) {
                var btnWidth = FR.fixBoxModelWidth($btn) + $btn.width();
                if (btnWidth > (config.width - config.borderWidth)) {
                    $btn.width(config.width - config.borderWidth);
                    FR.Button.setPrototypeBtnWidth(config, config.width - config.borderWidth);
                }
            } else {
                $btn.css("max-width", (config.width - config.borderWidth) + "px");
                FR.Button.setPrototypeBtnMaxWidth(config, config.width - config.borderWidth);
            }
        }
    };

    FR.Button.setPrototypeBtnWidth = function (config, width) {
        var $table = FR.Button.CacheTable._getPrototypeTable(config);
        if ($table) {
            var $btn = $table.$btn;
            $btn.width(width);
            $btn.isSetWidth = true;
        }
    };

    FR.Button.setPrototypeBtnMaxWidth = function (config, width) {
        var $table = FR.Button.CacheTable._getPrototypeTable(config);
        if ($table) {
            var $btn = $table.$btn;
            $btn.css("max-width", (config.width - config.borderWidth) + "px");
            $btn.isSetWidth = true;
        }
    };


    /**
     * 图标按钮
     *
     *     @example
     *     var btn = new FR.IconButton({
     *           renderEl : 'body',
     *           imgsrc : "http://www.baidu.com/img/bdlogo.gif"
     *     });
     * @class FR.IconButton
     * @extends FR.Widget
     * @cfg {String} imgSrc 用于生成按钮的图片的地址
     */
    FR.IconButton = FR.extend(FR.Widget, /**@class FR.IconButton*/{
        _defaultConfig: function () {
            return $.extend(FR.IconButton.superclass._defaultConfig.apply(), {
                tablable: true,
                render: false,
                width: 18,
                height: 18,
                baseClass: "fr-icon-btn"
            });
        },
        _init: function () {
            FR.IconButton.superclass._init.apply(this, arguments);
            var o = this.options;

            // 当render为false时,其本身就是一个控件,不需要加进去
            if (o.render === true) {
                this.$btn = $("<div/>").appendTo(this.element);
            } else {
                this.$btn = this.element;
            }

            this.$btn.addClass(o.baseClass);
            if (o.title) {
                this.$btn.attr("title", o.title);
            }
            if (o.text) {
                this.$btn.html(o.text);
            }
            var baseClsForMouse = o.baseClass;
            if (o.imgsrc) {
                baseClsForMouse = o.imgsrc;
                this.$btn.addClass(o.imgsrc);
            }

            // mouse event
            var self = this;
            var M = {
                onMouseOver: function (e) {
                    if (self.isEnabled()) {
                        self.$btn.addClass(baseClsForMouse + "-hover");
                    }
                },
                onMouseDown: function (e) {
                    if (self.isEnabled()) {
                        self.$btn.addClass(baseClsForMouse + "-click");
                        $(document).bind("mouseup", M.onMouseUp);
                    }
                },
                onMouseOut: function (e) {
                    self.$btn.removeClass(baseClsForMouse + "-hover");
                },
                onMouseUp: function (e) {
                    self.$btn.removeClass(baseClsForMouse + "-click");
                    $(document).unbind("mouseup", M.onMouseUp);
                }
            }
            this.$btn.mouseover(M.onMouseOver).mouseout(M.onMouseOut)
                .mousedown(M.onMouseDown).mouseup(M.onMouseUp);
            this.$btn.click(function (e) {
                if (self.isEnabled()) {
                    self.fireEvent(FR.Events.CLICK, e);
                }
            });
            // alex:用添加事件的机制来实现handler的添加
            if ($.isFunction(o.handler)) {
                this.on(FR.Events.CLICK, o.handler.createDelegate(o.scope || this));
            }
        },
        setValue: function (value) {
            this.$btn.html(value);
        },

        destroy: function () {
            this.element.empty();
        },

        doResize: function (give) {
            FR.Button.superclass.doResize.call(this, give);
            this.$btn.css({
                width: give.width,
                height: give.height
            });
        }
    });
    $.shortcut("iconbutton", FR.IconButton);

    /**
     * 自定义按钮，分别使用不同的图片表示按钮的各种状态
     *
     *     @example
     *     var btn = new FR.FreeButton({
     *              renderEl : 'body',
     *              width : 200,
     *              height : 100,
     *              icon : {
     *                   background : ""
     *              }
     *     });
     *
     * @class FR.FreeButton
     * @extends FR.BaseEditor
     * @cfg {Number} fontsize 字体大小
     * @cfg {String} fontfamily 字体类型
     * @cfg {Number} fontweight 字体的粗细
     * @cfg {String} fontstyle 字体的样式
     * @cfg {String} color 文字颜色
     * @cfg {String} decoration 文字的修饰
     * @cfg {String} hotkeys 快捷键
     */
    FR.FreeButton = FR.extend(FR.BaseEditor, /**@class FR.FreeButton*/{

        _defaultConfig: function () {
            return $.extend(FR.FreeButton.superclass._defaultConfig.apply(), {
                width: 200,
                height: 100,
                initial: {
                    background: ''
                }
            });
        },

        _init: function () {
            FR.FreeButton.superclass._init.apply(this, arguments);

            this.switchOn = false;

            var o = this.options;
            if (o.render === true) {
                /**
                 * @property {jQuery} $img 用于显示按钮图标的dom元素
                 */
                this.$img = $("<div style='text-align: center;'/>")
                    .appendTo(this.element);
            } else {
                this.$img = this.element.css('text-align', 'center');
            }
            this.element.addClass('fr-form-imgboard');
            if (o.icon) {
                if (o.icon.background) {
                    var icon = $("<img style='vertical-align: middle;margin-right: 3px;'/>");
                    var array = o.icon.background.split('(');
                    var src = array[1];
                    array = src.split(')');
                    src = array[0];
                    icon.attr('src', src).appendTo(this.$img);
                } else if (o.icon.indexOf('css:') === 0) {
                    this.icon = $("<i style='vertical-align: middle; margin-right: 3px; text-align: center; display: inline-block; height: 16px; width: 16px;'/>")
                        .addClass(o.icon.substr(4)).appendTo(this.$img);
                }
            }
            /**
             * @property {jQuery} text 用于显示按钮文字的dom元素
             */
            this.text = $("<span style='text-align: center;'>"
                + ((o.text != null && !FR.isEmpty($.trim(o.text))) ? o.text : "&nbsp;")
                + "</span>").appendTo(this.$img)
            if (o.fontsize) {
                this.text.css('font-size', o.fontsize);
            }
            if (o.color) {
                this.text.css('color', o.color);
            }
            if (o.decoration) {
                this.text.css('text-decoration', o.decoration);
            }
            if (o.fontfamily) {
                this.text.css('font-family', o.fontfamily);
            }
            if (o.fontweight) {
                this.text.css('font-weight', o.fontweight);
            }
            if (o.fontstyle) {
                this.text.css('font-style', o.fontstyle);
            }
            if (o.fontShadow) {
                this.text.addClass('shadow');
            }
            if (o.text && !FR.isEmpty($.trim(o.text))) {
                this.setValue(o.text);
            }
            if (o.width && o.height) {
                this.doResize(o);
            }

            if (o.hotkeys) {
                FR.Keys.reg(function (e) {
                    if (($(document).codeToString(e) == o.hotkeys)
                        && self.isEnabled()) {
                        // shoc:阻止添加删除行按钮这种一次触发很多行的
                        var bht = FR.CookieInfor.getCookieByName("buttonHotKeyTimer");
                        var nt = (new Date()).getTime();
                        if (FR.isEmpty(bht) || (nt - bht > 1000)) {
                            if (self.isEnabled()) {
                                self.fireEvent(FR.Events.CLICK, e);
                                document.cookie = "buttonHotKeyTimer=" + nt;
                                e.preventDefault();
                                e.stopPropagation();
                            }
                        }
                    }
                });
            }

            // wikky:暂时先这样处理
            // 低版本IE的background使用url的方式，现有逻辑下，如果不勾选“点击查询前不显示报表内容”，会触发保存附件的attachmentMap的清空操作，使得hover和click获取不到图片
            // 现有逻辑有个问题,当触发parameterCommit时，会清空attachmentMap，而loadContentPane时只会重新put页面的image，而不会处理参数界面的image；
            // 这个逻辑改起来比较麻烦，暂时用这种方式处理。
            if (FR.Browser.isIE8Before()) {
                if (o.click && o.click.background) {
                    this.setBackground(o.click);
                }
                if (o.over && o.over.background) {
                    this.setBackground(o.over);
                }
            }
            this.setBackground(o.initial);

            // mouse event
            var self = this;
            // 不可用事件中就不做处理
            var M = {
                onMouseOver: function (e) {
                    if (!self.options.disabled) {
                        self.fireOver();
                    }
                },
                onMouseOut: function (e) {
                    if (!self.options.disabled) {
                        self.fireOut();
                    }
                },
                onMouseDown: function (e) {
                    if (!self.options.disabled) {
                        self.fireDown();
                    }
                    $(document).bind("mouseup", M.onMouseUp);
                },
                onMouseUp: function (e) {
                    if (!self.options.disabled) {
                        self.fireUp();
                    }
                    $(document).unbind("mouseup", M.onMouseUp);
                }
            }

            this.$img.mouseover(M.onMouseOver.createInterceptor(this.isEnabled(),
                this)).mouseout(M.onMouseOut).mousedown(M.onMouseDown
                .createInterceptor(this.isEnabled(), this))
                .mouseup(M.onMouseUp);

            if (this._getEvents().click) {
                this.$img.addClass("fr-widget-click");
            } else {
                this.$img.css('cursor', 'default');
            }
            this.$img.click(function (e) {
                if (self.isEnabled()) {
                    self.fireEvent(FR.Events.CLICK, e);
                }
            });

            if ($.isFunction(o.handler)) {
                this.on(FR.Events.CLICK, o.handler.createDelegate(o.scope || this));
            }
        },

        setValue: function (value) {
            this.text.text(value);
        },

        getValue: function () {
            return this.text.text();
        },

        setEnable: function (arg) {
            if (arg === true) {
                this.options.disabled = false;
                if (this.options.isToggle && this.switchOn) {
                    if (this.options.click) {
                        this.element.css('background',
                            this.options.click.background);
                    }
                } else {
                    this.element.css('background', this.options.initial.background);
                }
                this.element.addClass('ui-state-enabled');
                this.element.removeClass('ui-state-disabled');
            } else if (arg === false) {
                this.options.disabled = true;
                this.element.css('background', 'none');
                this.element.addClass('ui-state-disabled');
                this.element.removeClass('ui-state-enabled');
            }
        },

        /**
         * 鼠标悬浮事件
         */
        fireOver: function () {
            if (this.options.over) {
                this.setBackground(this.options.over);
            }
        },

        /**
         * 鼠标离开事件
         */
        fireOut: function () {
            if (this.options.isToggle && this.switchOn) {
                if (this.options.click) {
                    this.setBackground(this.options.click);
                }
            } else {
                this.setBackground(this.options.initial);
            }
        },

        /**
         * 鼠标按下事件
         */
        fireDown: function () {
            if (this.options.isToggle && !this.switchOn) {
                var widgetList = this.getWidgetsInSameGroup();
                if (widgetList) {
                    for (var i = 0; i < widgetList.length; i++) {
                        var widget = widgetList[i];
                        if (widget != this) {
                            widget.switchDown();
                        }
                    }
                }
                this.switchOn = true;
            }
            if (this.options.click) {
                this.setBackground(this.options.click);
            }
        },

        /**
         * 鼠标松开事件
         */
        fireUp: function () {
            if (this.options.over && this.switchOn) {
                this.setBackground(this.options.over);
            } else {
                this.setBackground(this.options.initial);
            }
        },

        /**
         * 开关事件
         */
        switchDown: function () {
            if (this.options.isToggle) {
                this.setBackground(this.options.initial);
                this.switchOn = false;
            }
        },

        getWidgetsInSameGroup: function () {
            if (this.options.group) {
                return this.options.form.getWidgetsByGroup(this.options.group);
            }
        },

        /**
         * 设置按钮的背景图片
         * @param {String} img 背景图地址和位置属性
         */
        setBackground: function (backgroundOpts) {
            //这边先默认不设置背景显示白色，不考虑按钮不设置背景的兼容性
            var img = backgroundOpts.background;
            if (img == "") {
                this.$img.css('background', 'white');
            } else {
                this.$img.css('background', img);
            }
        },

        doResize: function (give) {
            this.$img.css({
                width: give.width,
                height: give.height
            });
            this.text.css('line-height', give.height + 'px');
        }
    });
    $.shortcut('freebutton', FR.FreeButton);


    /**
     * 具有两个选中状态的按钮，这是一个抽象类，使用的时候需要用其具体的子类
     * @class FR.ToggleButton
     * @extends FR.BaseEditor
     * @abstract
     * @cfg {Boolean} selected 初始是否处于选中状态
     * @cfg {Function} handler 控件点击时触发的事件
     * @cfg {Number} fontSize 控件上显示的文字字体大小
     */
    FR.ToggleButton = FR.extend(FR.BaseEditor, /**@class FR.ToggleButton*/{
        /**
         * @property {String} selected_class 表示该按钮处于选中状态
         */
        selected_class: 'fr-checkbox-checkon',
        /**
         * @property {String} unselected_class 表示该按钮处于另一种选中状态
         */
        unselected_class: 'fr-checkbox-checkoff',

        _defaultConfig: function () {
            return $.extend(FR.ToggleButton.superclass._defaultConfig.apply(), {
                selected: false,
                scope: this,
                render: true,
                only_be_selected: false,
                manualSelect: false  // 鼠标点击只会触发事件，不会执行选中操作。通过js回调手动设置。
            });
        },
        _init: function () {
            FR.ToggleButton.superclass._init.apply(this, arguments);
            var o = this.options;

            if (o.render === true) {
                /*
                 * alex:原来这里是$("<div>"),发现在ie中图标处点下去却没有触发click事件,改成span就可以了 另外$("<span>").text(o.text)在ie中是不能生成span的
                 */
                // b:只有背景时ie中忽略图片高度

                this.element.css('height', 'auto').css('width', 'auto');
                this.$btn = $("<span>"
                    + ((o.text != null && !FR.isEmpty($.trim(o.text))) ? o.text : "&nbsp;")
                    + "</span>").appendTo(this.element).addClass('x-text')
                    .addClass("fr-widget-click").click(function (e) {
                        this.onNodeClick();
                    }.createDelegate(this));
            } else {
                this.$btn = this.element;
                if (o.text != null) {
                    $("<span>" + o.text + "</span>").insertAfter(this.$btn);
                }
            }
            // b:chrome位置不够显示pic
            if (FR.Browser.r.chrome) {
                this.$btn.css('padding-top', 1);
            }

            if (this.options.fontSize) {
                //IE10下11还是会有部分遮挡
                var minSize = 12;
                if (this.options.fontSize < minSize) {
                    this.options.fontSize = minSize;
                }
                this.$btn.css('font-size', this.options.fontSize);
            }

            this.$btn.css("display", "inline-block");

            if ($.isFunction(o.handler)) {
                this.$btn.click(o.handler.createDelegate(o.scope || this)
                    .createInterceptor(this.isEnabled, this));
            }
            this.changeBoxState(o.selected);
            // b:先重构，具体干嘛的不清楚，感觉么必要，以后再看
            this.$formbtn = this.initFormBtn();

            if (o.value) {
                if (!this.isValidate(o.value)) {
                    FR.Msg.toast(this.errorMsg);
                    return;
                }
                if (typeof o.value == 'boolean') {
                    this.setSelectedWithoutEvent(o.value);
                } else if (o.value == 'true') {
                    this.setSelectedWithoutEvent(true);
                } else if (o.value == 'false') {
                    this.setSelectedWithoutEvent(false);
                }
            }
        },
        onNodeClick: function () {
            var o = this.options;
            if (this.isEnabled()) {
                if (!o.manualSelect) {
                    if (o.only_be_selected && this.selected()) {
                        return false;
                    } else if (!this.selected(!this.selected())) {
                        return false;
                    }
                }
                // marro： 联动
                this.fireEvent(FR.Events.AFTEREDIT);
                this.fireEvent(FR.Events.CLICK);
            }
        },
        changeBoxState: function (selected) {
            selected = typeof selected == 'boolean'
                ? selected
                : (selected != 'false');
            this.$btn[selected ? 'addClass' : 'removeClass'](this.selected_class);
            this.$btn[selected ? 'removeClass' : 'addClass'](this.unselected_class);
        },

        initFormBtn: function () {
            return null;
        },

        getValue: function () {
            return this.selected();
        },

        _dealValueWithEvents: function (state) {
            if (typeof state == 'boolean') {
                this.selected(state, "noFireEvent");
            } else if (state == 'true') {
                this.selected(true, "noFireEvent");
            } else if (state == 'false') {
                this.selected(false, "noFireEvent");
            }
            if (arguments[1] === true) {
                this.fireEvent(FR.Events.AFTEREDIT); // fire value
            }
        },

        getText: function () {
            return this.options.text;
        },


        reset: function () {
            this.selected(false);
        },

        /**
         * 是否被选中 如果没有参数,则是get操作;如果有参数,则是set操作
         * @return {Boolean} 如果控件处于被选中状态，返回true，否则返回false
         */
        selected: function () {
            if (arguments.length === 0) {
                // james:现在应该是两种状态下都返回True啦
                return this.isSelected();
            } else {
                if (arguments[1] == "noFireEvent") {
                    return this.setSelectedWithoutEvent(arguments[0]);
                } else {
                    return this.setSelected(arguments[0]);
                }
            }
        },

        /**
         * 控件是否处于选中状态
         * @returns {Boolean} 选中状态返回true，未选中状态返回false
         */
        isSelected: function () {
            return this.$btn.is('.' + this.selected_class);
        },

        /**
         * 设置控件的选中状态
         * @param selected 是否选中，选中为true，不选中为false
         * @returns {Boolean} 如果成功改变了状态则返回true，否则返回false
         */
        setSelected: function (selected) {
            if (!this.setSelectedWithoutEvent(selected)) {
                return false;
            }
            this.fireEvent(FR.Events.STATECHANGE, this.selected());
            return true;
        },

        /**
         * 设置控件的选中状态但是不触发控件的“状态改变”事件
         * @param selected 是否选中
         * @returns {Boolean} 总是返回true
         */
        setSelectedWithoutEvent: function (selected) {
            if (this.$formbtn) {
                this.$formbtn.attr("checked", selected !== false);
            }

            this.changeBoxState(selected);
            return true;
        },

        destroy: function () {
            FR.ToggleButton.superclass.destroy.apply(this);
        },

        doResize: function (give) {
            FR.ToggleButton.superclass.doResize.call(this, give);
        }
    });


    /**
     * 复选框
     *
     *     @example
     *     var editor = new FR.CheckBox({
     *              renderEl : 'body',
     *              text : "是否显示实际值",
     *              selected : true,     //是否被选中
     *              disabled : false     //状态是否可变
     *     });
     *
     * @class FR.CheckBox
     * @extends FR.ToggleButton
     */
    FR.CheckBox = FR.extend(FR.ToggleButton, /**@class FR.CheckBox*/{

        /**
         * @property {String} selected_class 复选框处于选中状态时的样式表类
         */
        selected_class: 'fr-checkbox-checkon',

        /**
         * @property {String} unselected_class 复选框处于未选中状态时的样式表类
         */
        unselected_class: 'fr-checkbox-checkoff',

        /**
         * 复选按钮图标的高度，
         */
        checkIconHeight: 17,

        _defaultConfig: function () {
            return $.extend(FR.CheckBox.superclass._defaultConfig.apply(), {
                marginleft: 5
            });
        },
        _init: function () {
            FR.CheckBox.superclass._init.apply(this, arguments);
            var o = this.options;
            var lineHeight;
            if (this.element && FR.Browser.isIE()) {
                //52212 ie下控件高度不对
                this.element.css({
                    "width": o.width,
                    "height": this.checkIconHeight
                });
                lineHeight = this.checkIconHeight;
            }
            //lineheight控制垂直居中bug65664
            if (lineHeight) {
                this.$btn.css({
                    'margin-left': o.marginleft,
                    'height': 'inherit',
                    'line-height': lineHeight + 'px'
                });
            } else {
                this.$btn.css('margin-left', o.marginleft);
            }
        },

        initFormBtn: function () {
            if (this.options.sessionID
                && _g(this.options.sessionID).rtype == 'form') {
                var $par = $(this.$btn.parent());
                $par.css("background-color", "white");
                this.$box = $("<input type='checkbox'/>").css("display",
                    "none").attr("name", this.options.widgetName)
                    .appendTo($par);
                this.$box.attr("value", this.options.fieldValue
                    || this.options.value || '');
            }
            return this.$box;
        },
        doResize: function (give) {
            FR.CheckBox.superclass.doResize.call(this, give);
            if (this.element) {
                this.$btn.css('line-height', this.element.height() + 'px');
            }
        }

    });
    $.shortcut("checkbox", FR.CheckBox)
    /**
     * 单选按钮
     *
     *     @example
     *     var editor = new FR.RadioButton({
     *          renderEl : 'body',
     *          text : "默认选中",
     *          selected : true,
     *          disabled : false
     *     });
     *
     * @class FR.RadioButton
     * @extends FR.ToggleButton
     */
    FR.RadioButton = FR.extend(FR.ToggleButton, /**@class FR.RadioButton*/{
        /**
         * @property {String} selected_class 单选按钮处于选中状态时的样式表类
         */
        selected_class: 'fr-radio-radioon',

        /**
         * @property {String} unselected_class 单选按钮处于未选中状态时的样式表类
         */
        unselected_class: 'fr-radio-radiooff',

        _init: function () {
            FR.RadioButton.superclass._init.apply(this, arguments);
        },

        initFormBtn: function () {
            if (this.options.sessionID
                && _g(this.options.sessionID).rtype == 'form') {
                var $par = $(this.$btn.parent());
                $par.css("background-color", "white");
                this.$radio = $("<input type='radio'/>").css("display",
                    "none").attr("name",
                    this.options.name || this.options.widgetName)
                    .appendTo($par);
                this.$radio.attr("value", this.options.fieldValue
                    || this.options.value || '');
            }
            return this.$radio;
        }
    });
    $.extend(FR.RadioButton, {
        RadioButtonGroup: {}
    });
    $.shortcut("radio", FR.RadioButton)

    /**
     * 参数查询控件
     * @class FR.FormSubmitButton
     */
    FR.FormSubmitButton = FR.extend(FR.Button, {
        _init: function () {
            FR.FormSubmitButton.superclass._init.apply(this, arguments);
        }
    });
    $.shortcut('formsubmit', FR.FormSubmitButton);

    /**
     * tab布局 切换tab控件
     * @class FR.FormSubmitButton
     */
    FR.CardSwitchButton = FR.extend(FR.FreeButton, {
        _init: function () {
            FR.CardSwitchButton.superclass._init.apply(this, arguments);
            this.selected = false;
            var radiu = "5px 5px 0 0";
            //根据displayPosition设置圆角
            switch (this.options.displayPosition) {
                case "North":
                    radiu = "5px 5px 0 0";
                    break;
                case "West":
                    radiu = "5px 0 0 5px";
                    break;
                case "South":
                    radiu = "0 0 5px 5px";
                    break;
                case "East":
                    radiu = "0 5px 5px 0";
                    break;
                default:
                    break;
            }

            this.$img.css('border-radius', radiu);
            this.element.css('border-radius', radiu);
            this.element.css('opacity', this.options.opacity);
            //根据textDirection设置文本方向
            if (this.options.textDirection === 1) {
                //计算margin使其居中
                var marginLeft = this.calculateMargin();
                this.$img.children().css({
                    "margin-left": marginLeft,
                    "width": "0px",
                    "display": "block",
                    "word-wrap": "break-word"
                });
            } else {
                this.$img.children().css({
                    "white-space": "nowrap"
                });
            }

            var self = this;
            var M = {
                onMouseOver: function (e) {
                    if (self.selected) {
                        return;
                    }

                    self.element.css('opacity', 1);
                },
                onMouseOut: function (e) {
                    //本身被选中的话, mouseout不需要改变透明度
                    if (self.selected) {
                        return;
                    }

                    self.element.css('opacity', 0.6);
                },
                onMouseDown: function (e) {
                    //设置按钮选中状态
                    self.selected = true;
                    if (self.options.click && self.options.click.background) {
                        self.setBackground(self.options.click.background);
                    }
                }
            };
            this.$img.mouseover(M.onMouseOver)
                .mouseout(M.onMouseOut)
                .mousedown(M.onMouseDown);
        },

        calculateMargin: function () {
            var str = this.$img.text();
            //先计算字符串的字符长度和显示宽度
            var realLength = 0, len = str.length, charCode = -1, existCN = false;
            for (var i = 0; i < len; i++) {
                charCode = str.charCodeAt(i);
                if (charCode >= 0 && charCode <= 128) {
                    realLength += 1;
                } else {
                    realLength += 2;
                    existCN = true
                }
            }
            var textWidth = this.getTextSize(str).width;

            var charWidth = textWidth / realLength;
            return (this.$img.width() - (existCN ? charWidth * 2 : charWidth)) / 2;
        },

        getTextSize: function (str) {
            var fontSize = this.text.css('fontSize');
            var span = $('<span></span>').css({'visibility': 'hidden', 'fontSize': fontSize});
            span.text(str);
            $('body').append(span);
            var w = span.width();
            var h = span.height();
            span.remove();
            return {width: w, height: h};
        },

        fireUp: function () {

        },

        /**
         * 鼠标离开事件
         */
        fireOut: function () {
            if (this.selected) {
                if (this.options.click) {
                    this.setBackground(this.options.click);
                }
            } else {
                this.setBackground(this.options.initial);
            }
        },

        /**
         * 鼠标按下事件
         */
        fireDown: function () {

        },
        /**
         * 设置按钮的背景图片
         * @param {String} img 背景图地址和位置属性
         */
        setBackground: function (backgroundOpts) {
            //这边先默认不设置背景显示白色，不考虑按钮不设置背景的兼容性
            var img = backgroundOpts.background;
            if (img == "") {
                this.$img.css('background', 'white');
            } else {
                FR.setBackground(this.$img, backgroundOpts);
            }
        },

        doResize: function (give) {
            FR.CardSwitchButton.superclass.doResize.call(this, give);
            if (this.options.textDirection === 1) {
                //计算margin使其居中
                var marginLeft = this.calculateMargin();
                var str = this.$img.text();
                var lineHeight = this.getTextSize(str).height;
                this.text.css("line-height", lineHeight - 2 + "px");
                if (FR.Browser.isIE7Before()) {
                    this.text.css({
                        "margin-left": 0
                    });
                } else {
                    this.text.css({
                        "margin-left": marginLeft
                    });
                }
            } else {
                this.$img.children().css({
                    "white-space": "nowrap"
                });
            }
        }
    });
    $.shortcut('cardswitch', FR.CardSwitchButton);

})(jQuery);
/**
 * 搜索控件
 *
 *      @example
 *      var $anchor = $('<div>').css({
 *          position : 'absolute',
 *          top : 5,
 *          left : 5,
 *          width : 300,
 *          height : 300
 *      }).appendTo('body');
 *      var search = FR.createWidget({
 *          renderEl : $anchor,
 *          type : 'search'
 *      });
 *
 * @class FR.Search
 * @extends FR.EditCompBaseEditor
 *
 * @cfg {JSON} options 配置属性
 * @cfg {Number} [options.width=164] 宽度
 * @cfg {Number} [options.height=28] 高度
 * @cfg {String} [options.watermark] 水印
 * @cfg {Function} [options.onSearch] 搜索事件
 * @cfg {Boolean} [options.advanced] 是否为带有下拉条件筛选的高级搜索
 * @cfg {Boolean} [options.autoSearch] 是否自动搜索
 */
FR.Search = FR.extend(FR.EditCompBaseEditor, {
    _defaultConfig: function () {
        return $.extend(FR.Search.superclass._defaultConfig.apply(), {
            baseCls: 'fr-search',
            width : 164,
            height : 28, //固定高度,搜索按钮的高度
            width4searchBtn: 44,  //固定宽度,搜索按钮的宽度,
            defaultValue: null,  //默认值
            watermark: null,  //水印
            onSearch: null,  //搜索事件
            advanced: false,  //带有下拉条件筛选的高级搜索
            onTrigger: null,
            autoSearch: false, //是否自动搜索
            onKeyup: null,
            onFocus: null,
            onBlur: null,
            onEnter: null
        });
    },

    _init: function () {
        FR.Search.superclass._init.apply(this, arguments);
        var opts = this.options;
        this._initEditComp();
        if(!opts.autoSearch){
            this._createTriggerBtn();
            this.searchButton = this._createSearchBtn(this.element);
        }
        this.doResize(opts);
    },

    /**
     * 初始化搜索输入框及其绑定事件
     * @private
     */
    _initEditComp: function(){
        var opts = this.options,self = this;
        this.editComp = $("<input/>").appendTo(this.element);
        if(opts.watermark){
            this.setWaterMark(opts.watermark);
        }
        if(opts.defaultValue){
            this.editComp.val(opts.defaultValue).data('defaultValue', opts.defaultValue);
        }
        if (opts.autoSearch) {
            this.editComp.addClass("fr-search-auto-text");
            var offsetY = (opts.height - 18) / 2;
            this.editComp.css("background-position-y", offsetY);
        }else{
            this.editComp.addClass("fr-search-editor-text");
        }
        this.editComp.keyup(function(e) {
                if (e.keyCode == FR.keyCode.ENTER) {
                    this.blur();
                    if(opts.onSearch){
                        opts.onSearch.apply(self, arguments);
                    }
                }
            });
        this.editComp.focus(function(e){
            $(this).addClass("fr-search-editor-focus");
            FR.applyFunc(self, opts.onFocus, [e], false);
        }).blur(function(e){
            $(this).removeClass("fr-search-editor-focus");
            FR.applyFunc(self, opts.onBlur, [e], false);
        }).keyup(function(e){
            if (e.keyCode == FR.keyCode.ENTER) {
                this.blur();
                if(opts.onSearch){
                    FR.applyFunc(self, opts.onSearch, [e], false);
                }
            }else{
                FR.applyFunc(self, opts.onKeyup, [e], false);
            }
        });
    },

    /**
     * 生成高级搜索的下拉按钮
     * @private
     */
    _createTriggerBtn: function(){
        var self = this, o = this.options;
        if(!o.advanced){
            return;
        }else{
            this.editComp.css({'border-right': 'none'});
            $('<div class="fr-search-trigger"/>').hover(
                function(){
                    $(this).addClass('fr-search-trigger-hover');
                },
                function(){
                    $(this).removeClass('fr-search-trigger-hover');
                }
            ).click(
                    function(){
                        FR.applyFunc(self, o.onTrigger, arguments, false);
                    }
                ).appendTo(this.element);
        }
    },

    /**
     * 生成搜索按钮
     * @param renderer {jQuery} 渲染DOM对象
     * @returns {*} 返回按钮的DOM对象
     * @private
     */
    _createSearchBtn: function(renderer){
        var opts = this.options, self = this;
        var config = {
            renderEl : $('<div/>').appendTo(renderer),
            baseClass: 'fr-search-button',
            width: 44,
            height: 28
        };
        if($.isFunction(opts.onSearch)){
            config.handler = opts.onSearch.createDelegate(self)
        }
        var searchBtn = new FR.IconButton(config);
        return searchBtn.element;
    },

    getText : function() {
        return this.editComp.val();
    },

    setText : function(txt) {
        this.editComp.val(txt);
    },

    getValue : function() {
        return this.getText();
    },

    setValue : function(v) {
        this.setText(v);
    },

    doResize: function(give){
        var o = this.options;
        var editCompWidth = give.width,
            editCompHeight = give.height;

        var fixw = 8, fixh = 4;
        if(o.autoSearch){
            fixw = 27;
        }else {
            editCompWidth -= o.width4searchBtn
        }
        if(o.advanced){
            editCompWidth -= 24;
        }
        if($.support.boxModel){
            editCompWidth -=fixw;
            editCompHeight -=fixh;
        }
        this.editComp.css({
            height: editCompHeight,
            width: editCompWidth
        });
        if ($.browser.msie) {
            this.editComp.css("line-height", editCompHeight + "px");
        }
        this.searchButton && this.searchButton.width(o.width4searchBtn).height(o.height);
    }
});
$.shortcut("search", FR.Search);
/**
 * 数据表控件
 * @class FR.DataTable
 * @extends FR.BaseEditor
 */
FR.DataTable = FR.extend(FR.BaseEditor, /**@class FR.DataTable*/{
    _init: function () {
        FR.DataTable.superclass._init.apply(this, arguments);
        var o = this.options;
        this.element.css("overflow", "auto");
        this.table = $('<table/>').attr({
            cellspacing: '0',
            cellpadding: '0'
        });

        this.element.append(this.table);
        this.popuNewData(this.options.value);
    },

    initTableHead: function (data) {
        if (!FR.isArray(data.head)) {
            return;
        }
        this.head = data.head;
        var thead = $('<thead/>').addClass('fr-form-table-thead');
        var tr = $('<tr>').addClass('fr-form-table-tr');
        thead.append(tr);
        for (var i = 0, len = data.head.length; i < len; i++) {
            var th = $('<th/>').text(data.head[i]);
            if (data.columnWidth && data.columnWidth[i]) {
                th.css("width", data.columnWidth[i])
            }
            if (i == len - 1) {
                th.addClass('fr-form-table-last-th');
            }
            tr.append(th);
        }
        this.table.append(thead);
    },

    setTableHead: function (data) {
        this.table.children('thead').empty();
        this.initTableHead(data);
    },

    popuNewData: function (data) {
        this.setTableHead(data);
        this.table.children('tbody').empty();

        if (data.tablecontent) {
            var tabledata = data.tablecontent;
            for (var i = 0, len = tabledata.length; i < len; i++) {
                this.addData(tabledata[i], data.rowHeight);
            }
        }
    },

    updateDatas: function () {
        var datas = [];
        var trs = this.table.children('tbody').children('tr');
        for (var i = 0, len = trs.length; i < len; i++) {
            var trdata = {};
            var tds = $(trs[i]).children();
            for (var j = 0, jen = tds.length; j < jen; j++) {
                trdata[this.head[j]] = $(tds[j]).text();
            }
            datas.push(trdata);
        }
        return datas;
    },

    getValue: function () {
        return this.updateDatas();
    },

    setValue: function (data) {
        this.popuNewData(data);
    },

    addData: function (data, height) {
        if (!FR.isArray(data)) {
            var dataArray = [];
            dataArray.push(data);
            data = dataArray;
        }
        var self = this;
        var tr = $('<tr/>').addClass('fr-form-table-tr').click(
            function () {
                if (self.activedTR) {
                    self.activedTR
                        .removeClass('fr-form-table-selectedtr');
                }
                $(this).addClass('fr-form-table-selectedtr');
                self.activedTR = $(this);
                self.fireEvent(FR.Events.CLICK);
            });
        for (var i = 0, len = data.length; i < len; i++) {
            var td = $('<td/>').addClass('fr-form-table-td')
                .append($("<pre>").css('white-space', 'pre-wrap')
                    .append(data[i] || ""));
            td.css('height', height + 1);
            tr.append(td);
        }
        this.table.append(tr);
        this.embellishTable();
    },

    embellishTable: function () {
        var trs = this.table.children('tbody').children('tr');
        var self = this;
        $.each(trs, function (i) {
            $($(".fr-form-table-td", $(trs[i]))[0])
                .addClass('fr-form-table-first-td');
            if (i === 0
                && self.table.children('thead').length === 0) {
                var toptds = $(".fr-form-table-td", trs[i]);
                $.each(toptds, function (i) {
                    $(toptds[i])
                        .addClass('fr-form-table-top-td');
                });
            }
            if (i % 2 === 0) {
                $(trs[i]).css({
                    backgroundColor : "#EEEEEE"
                });
            } else {
                $(trs[i]).addClass('fr-form-table-odd-tr');
            }
        });
    },

    getTable: function () {
        return this.table;
    },

    getSelectedData: function () {
        if (!this.activedTR) {
            return;
        } else {
            var returnData = {};
            var items = $('td', this.activedTR);
            if (this.head.length != items.length) {
                return;
            } else {
                $.each(this.head, function (idx, item) {
                    returnData[item] = $(items[idx]).text();
                });
                return returnData;
            }
        }
    },

    getSelectedIndex: function () {
        if (!this.activedTR) {
            return -1;
        } else {
            return this.activedTR[0].rowIndex - 1;
        }
    }
});
$.shortcut('datatable', FR.DataTable);
(function ($) {
    /**
     * 同步取书的控件
     * @class FR.SynchronBaseEditor
     * @extends FR.BaseEditor
     */
    FR.SynchronBaseEditor = FR.extend(FR.BaseEditor, /**@class FR.SynchronBaseEditor*/{
        _init: function () {
            FR.SynchronBaseEditor.superclass._init.apply(this, arguments);
        }
    });

    $.extend(FR, {
        createTreeConfig4Widget: function (widget) {

            FR.$defaultImport('/com/fr/web/core/js/jquerytree/tree.js', 'js');

            FR.$defaultImport('/com/fr/web/core/js/jquerytree/common.js', 'js');

            if (widget.options.widgetCss
                && widget.options.widgetCss.length !== 0) {
                $.each(widget.options.widgetCss, function (i, item) {
                    FR.$import(item, 'css', true);
                });
            }

            var o = {
                data: widget.options.data,
                showcheck: widget.options.mutiSelection,
                onnodeclick: function (item, triggerEvent) {
                    var disabledID = widget.options.disableID;
                    if (disabledID) {
                        if (disabledID == item.getID()) {
                            return;
                        }
                    }
                    widget._onEnterPressed(this, triggerEvent);
                },
                beforeSelectItemChange: function () {
                    return widget.fireEvent(FR.Events.BEFORESTATECHANGE);
                },
                flatStyle: false,
                widget: widget,
                selectLeafOnly: widget.options.selectLeafOnly,
                afterBuild: function () {
                    return widget.fireEvent(FR.Events.AFTERBUILD);
                },
                //wei,loadByLayer:是否强制一次只加载1层dom
                loadByLayer: widget.options.loadByLayer
            };
            return o;
        },

        /**
         * 处理"1,11,111;1,12,123"这种手输的树值
         * @param str
         * @returns {Array}
         * @private
         */
        parseString2Array4Tree: function (str, widget) {
            if (typeof str != 'string' || FR.isEmpty(widget)) {
                return $.makeArray(str);
            }
            var arr = [];
            //这边分隔符暂时没有自定义功能，先写这儿了.做自定义的话逻辑还是要改的.
            var reg1 = widget.options.nodeDelimiter || /[;；]/;
            var reg2 = widget.options.pathDelimiter || /[,，]/;
            if (str.indexOf(';') != -1 || str.indexOf('；') != -1) {
                arr = str.split(reg1);
            }
            if (arr.length > 0) {
                for (var i = 0; i < arr.length; i++) {
                    arr[i] = arr[i].split(reg2);
                }
            } else if (str.indexOf(',') != -1 || str.indexOf('，') != -1) {
                arr = str.split(reg2);
            }
            if (FR.isEmptyArray(arr)) {
                return str.split(';');
            }
            return arr;
        },
        /**
         * 一维数组转化成数组中的数组
         * @param arr
         * @return {*}
         */
        parseTo2DArray: function (arr) {
            if (!FR.isEmptyArray(arr) && !$.isArray(arr[0])) {
                var newArr = [];
                newArr[0] = arr;
                return newArr;
            } else {
                return arr;
            }
        },

        /**
         * "南京"  -->  ["江苏","南京"]
         * @param str
         * @param node
         */
        getTreeTrace: function (str, nodes, multi, selectLeafOnly) {
            var arr = [];
            var arrs = [];
            var find = false;
            for (var i = 0; i < nodes.length; i++) {
                // 如果只返回叶子节点而这个节点还有子节点 那就跳过
                if (nodes[i].hasChild() && selectLeafOnly) {
                    continue;
                }
                if (nodes[i].getValue() == str || nodes[i].getShowValue() == str) {
                    find = true;
                    var node = nodes[i];
                    arr[0] = node.getValue();
                    while (node.getParent()) {
                        node = node.getParent();
                        arr.push(node.getValue());
                        node.setexpand(true);
                    }
                    if (multi === true) {
                        arrs.push(arr.reverse());
                    } else {
                        return arr.reverse();
                    }
                }
            }
            // 到这里没有返回，说明不在这一层，到其子层找
            for (var i = 0; i < nodes.length; i++) {
                // 这个嵌套的函数不到后台加载数据 只用已经加载的
                //if(nodes[i].getChildren()) {
                if (nodes[i].ChildNodes || (nodes[i].data && nodes[i].data.ChildNodes)) {
                    var a = FR.getTreeTrace(str, nodes[i].getChildren(), multi, selectLeafOnly);
                    if (!FR.isEmptyArray(a)) {
                        find = true;
                        if (multi) {
                            for (var j = 0; j < a.length; j++) {
                                arrs.push(a[j]);
                            }
                        } else {
                            return a;
                        }
                    }
                }
            }
            if (find) { // must be multi then
                return arrs;
            }
            return [];
        },

        getValidTreeTrace: function (arr, nodes, selectLeafOnly) {
            if (!FR.isArray(arr) || FR.isEmptyArray(arr)) {
                return;
            }
            if (arr.length === 1) {
                return FR.getTreeTrace(arr[0], nodes, false, selectLeafOnly);
            } else {
                return valueInNode(arr, 0, nodes) ? arr : null;
            }
            function valueInNode(arr, deep, nodes) {
                if (deep >= arr.length) {
                    return true;
                }
                for (var i = 0; i < nodes.length; i++) {
                    if (nodes[i].getValue() == arr[deep]) {
                        return valueInNode(arr, deep + 1, nodes[i].getChildren());
                    } else if (nodes[i].getShowValue() == arr[deep]) {
                        arr[deep] = nodes[i].getValue();
                        return valueInNode(arr, deep + 1, nodes[i].getChildren());
                    }
                }
                return false;
            }
        },

        setAllNodeState: function (nodes, state) {
            for (var i = 0; i < nodes.length; i++) {
                nodes[i].setcheckstate(state);
                if (nodes[i].isLoadComplete() && nodes[i].getChildrenLength() > 0) {
                    FR.setAllNodeState(nodes[i].getChildren(), state);
                }
            }
        },

        setNodeStateByInitValue: function (nodes, deep, value_array, selectLeafOnly) {
            if (!FR.isArray(value_array)) {
                return;
            }
            for (var i = 0; i < nodes.length; i++) {
                if (nodes[i].getShowValue() == value_array[deep] || nodes[i].getValue() == value_array[deep]) {
                    //report-t362之前改法不对,value_array代表的是树的一个节点的路径,selectLeafOnly=false也是要选择路径的末端节点.
                    if (deep == value_array.length - 1) {
                        if (!selectLeafOnly || !nodes[i].hasChild()) {
                            nodes[i].setcheckstate(1);
                        }
                        return true;
                    }
                    var child = nodes[i].getChildren();
                    // self.options.selectLeafOnly
                    if (FR.setNodeStateByInitValue(child, deep + 1, value_array, selectLeafOnly) && selectLeafOnly) {
                        var allChildeSelected = true;
                        for (var j = 0; j < child.length; j++) {
                            if (child[j].getcheckstate() !== 1) {
                                allChildeSelected = false;
                                break;
                            }
                        }
                        nodes[i].setcheckstate(allChildeSelected ? 1 : 2);
                        return true;
                    }
                }
            }
        },

        findSelectedNode: function (nodes, deep, value_array, treeConfig) {
            if (!FR.isArray(value_array)) {
                // 必须是数组 不然字符串的话value_array[deep]也能取值但是不对
                return;
            }
            for (var i = 0; i < nodes.length; i++) {
                if (nodes[i].getShowValue() == value_array[deep] || nodes[i].getValue() == value_array[deep]) {
                    if (deep == value_array.length - 1) {
                        treeConfig.currentnode = nodes[i];//这边用nodes[i].setcheckstate应该也是可以的
                    }
                    FR.findSelectedNode(nodes[i].getChildren(), deep + 1, value_array, treeConfig);
                }
            }
        },

        findTrueValue: function (nodes, deep, value_array, result_array, true_value) {
            if (!FR.isArray(value_array)) {
                return;
            }
            for (var i = 0; i < nodes.length; i++) {
                if (nodes[i].getValue() == value_array[deep]) {
                    if (deep == value_array.length - 1) {
                        result_array.push(nodes[i].getTextPath(false));
                        true_value.push(value_array);
                        return;
                    }
                    FR.findTrueValue(nodes[i].getChildren(), deep + 1, value_array, result_array, true_value);
                    return;
                }
            }
            for (var i = 0; i < nodes.length; i++) {
                FR.findTrueValue(nodes[i].getChildren(), deep, value_array, result_array, true_value);
            }
        },

        getTreeValueResult: function (arr, isMulti, returnFullPath, isParamTemplate) {
            if (returnFullPath) {
                return arr;
            } else {
                if (arr == null) {
                    return null;
                }
                if (isMulti) {
                    //将[[华东,上海],[华东南京]]or[上海,南京]处理成[上海,南京]
                    var res = [];
                    for (var i = 0; i < arr.length; i++) {
                        if ($.isArray(arr[i])) {
                            var sub = arr[i];
                            res[i] = isParamTemplate ? [sub[sub.length - 1]] : sub[sub.length - 1];
                        } else {
                            res[i] = arr[i];
                        }
                    }
                    return res;
                } else {
                    //arr为[]时一般代表初始状态,arr[arr.length - 1]为undefined,这样会跟值不在列表中的判读冲突,
                    //下拉控件如果没有编辑或者编辑了不选统一返回''.不返回null或者undefined.undefined现在专用于值不在列表中的判断
                    //相关问题:report-1377,bug103973,需求96543
                    return arr[arr.length - 1] || '';
                }
            }
        }
    });

// FR.TreeEditor.Start
    FR.TreeEditor = FR.extend(FR.SynchronBaseEditor, {
        _defaultConfig: function () {
            return $.extend(FR.TreeEditor.superclass._defaultConfig.apply(), {
                width: 120,
                height: 200,
                limitData: 300,
                delimiter: ';'
            });
        },

        _init: function () {
            FR.TreeEditor.superclass._init.apply(this, arguments);
            this.initData();
            if (this.options.widgetName != null) {
                this.element.attr("id", this.options.widgetName);
            }
            if (this.options.width > -1) {
                this.element.css("width", this.options.width);
            }
            if (this.options.height > -1) {
                this.element.css("height", this.options.height);
            }

            this.element.css('overflow', 'auto');
            this.options.data.resetStatus(this.allPara());
            if (this.options.value || this.options.value === 0) {
                this._dealValueWithEvents(this.options.value);
            }
            this._setCheckStateByDefaultValue();
        },

        initData: function () {
            if (this.options.data) {
                return;
            }
            if (this.options.rootLoader) {
                this.options.data = new FR.TreeData({
                    treeLoader: this.options.rootLoader
                });
            } else if (this.options.widgetUrl) {
                this.options.data = new FR.TreeData({
                    url: this.options.widgetUrl
                });
            } else if (this.options.items) {
                this.options.data = new FR.ItemTreeData({
                    items: this.options.items
                });
            }
            if (this.options.controlAttr) {
                var data = this.options.controlAttr['data'] || this.options.controlAttr['value'];
                if (FR.isEmpty(data) || data == "") {
                    return;
                }
                this._confirmEvents = function () {
                    this.fireEvent(FR.Events.AFTERINIT);
                };
                var para = this.createDependencePara4Data();
                para.parameter.startIndex = 0;
                para.parameter.limitIndex = this.options.limitData;
                this.options.data.setData(para, data);
                delete this.options.controlAttr;
            }
        },

        allPara: function (start, limit) {
            var para = this.createDependencePara4Data();
            para.parameter.startIndex = start ? start : 0;
            para.parameter.limitIndex = limit ? limit : this.options.limitData;
            return para;
        },

        isComboBoxTree: function () {
            return false;
        },

        _onEnterPressed: function (item) {
            this.fireEvent(FR.Events.CLICK, item);
            this.fireEvent(FR.Events.AFTEREDIT);
        },

        setValue: function (value, getPathFunc) {
            if (getPathFunc === false || getPathFunc === undefined) {
                getPathFunc = function (item) {
                    return item.getValuePath(false);
                }
            }
            // 设置编辑器的值
            var self = this;
            var value_array;
            if (typeof value === "string") {
                value_array = value.split(this.options.delimiter);
            } else {
                value_array = $.makeArray(value);
            }
            if (!FR.isEmptyArray(value_array)) {
                var nodes = this.options.data.getData();
                var leafNodes = [];
                for (var i = 0; i < nodes.length; i++) {
                    leafNodes = leafNodes.concat(nodes[i].getLeafNode());
                }
                var relatedNodes = [];
                for (var idx = 0; idx < leafNodes.length; idx++) {
                    var item = leafNodes[idx];
                    var match;
                    if ($.isArray(value_array[0]) && self.options.mutiSelection) {
                        match = value_array.weakIndexOf(getPathFunc(item)) !== -1;
                    } else {
                        match = FR.equals(getPathFunc(item), value_array);
                    }
                    if (match) {
                        item.setcheckstate(1);
                        relatedNodes.push(item);
                        if (!self.options.mutiSelection) {
                            break;
                        }
                    } else {
                        item.setcheckstate(0);
                    }
                }
                // wei : 处理父节点们
                $.each(relatedNodes, function (idx, item) {
                    var parentNode = item.getParent();
                    while (parentNode) {
                        parentNode.setcheckstate(parentNode.isAllChildrenChosen() ? 1 : 2);
                        // shoc 值选中的话父节点展开
                        parentNode.setexpand(true);
                        parentNode = parentNode.getParent();
                    }
                });
                var treeConfig = FR.createTreeConfig4Widget(this);
                this._createTreeView(treeConfig);
            }
        },

        getValue: function () {
            var res;
            if (!this.options.mutiSelection) {
                res = this.element.getTCPValue() || this.value;
            } else {
                res = this.element.getTCPValues() || this.value;
            }
            return FR.getTreeValueResult(res, this.options.mutiSelection, this.options.returnFullPath);
        },

        getText: function () {
            var res;
            if (!this.options.mutiSelection) {
                // 在没有设置初始值的情况下，直接调用 getTCPText() 会报错，
                // 而调用 getTCPValue() 则返回 null
                res = this.element.getTCPValue() === null ? null : this.element.getTCPText();
            } else {
                res = this.element.getTCPValues() === null ? null : this.element.getTCPTexts();
            }
            return FR.getTreeValueResult(res, this.options.mutiSelection, this.options.returnFullPath);
        },

        setText: function (value) {
            this.setValue(value, function (item) {
                return item.getTextPath(false);
            });
        },

        _dealValueWithEvents: function (value) {
            var oldValue = this.options.mutiSelection ? [] : '';
            if (typeof value === "string") {
                var value_array = value.split(this.options.delimiter);
            } else {
                var value_array = $.makeArray(value);
            }
            var self = this;
            var result_array = [];
            var true_value = [];
            if (!this.options.mutiSelection) {
                FR.findTrueValue(this.options.data.getData(), 0, value_array, result_array, true_value);
            } else {
                value_array = FR.parseTo2DArray(value_array);
                for (var m = 0; m < value_array.length; m++) {
                    FR.findTrueValue(this.options.data.getData(), 0, $.isArray(value_array[m]) ? value_array[m] : value_array[m].split(","),
                        result_array, true_value);
                }
            }

            if (result_array.length !== 0) {
                this.value = this.options.mutiSelection ? true_value : true_value[0];
            } else {
                this.value = value_array;
            }
            leafNodes = nodes = null;
            if (oldValue != value) {
                this.options.need2BuildList = true;
            }
        },

        _setCheckStateByDefaultValue: function () {
            var self = this;
            var initArray = this.options.value ? this.options.value : [];
            var treeConfig = FR.createTreeConfig4Widget(this);
            /*change [[1,11],[2,21]] to ["1,11","2,21"]*/
            var sortArray = function (initArray) {
                if (!$.isArray(initArray)) {
                    return;
                }
                if (!FR.isEmptyArray(initArray)) {
                    for (var i = 0; i < initArray.length; i++) {
                        if ($.isArray(initArray[i])) {
                            initArray[i] = initArray[i].toString();
                        }
                    }
                }
            };
            if (!FR.isEmptyArray(initArray)) {
                var nodes = this.options.data.getData();
                // 把树节点中的某一项转化成具体的数组路径
                if (!FR.isArray(initArray)) {
                    initArray = FR.getTreeTrace(initArray, nodes, self.options.mutiSelection, self.options.selectLeafOnly);
                }
                if (self.options.mutiSelection) {
                    // 把一维数组转化成二维数组
                    initArray = FR.parseTo2DArray(initArray);
                    sortArray(initArray);
                    FR.setAllNodeState(nodes, 0);
                    for (var m = 0; m < initArray.length; m++) {
                        FR.setNodeStateByInitValue(nodes, 0, initArray[m].split(","), self.options.selectLeafOnly);
                    }
                } else {
                    FR.findSelectedNode(nodes, 0, initArray, treeConfig);
                }
            }
            this._createTreeView(treeConfig);
        },

        reset: function () {
            // 重置,目前主要用于联动时,与当前控件相关的控件值改变时,需要做重置操作
            this.setValue("");
            // 把树的选择展开状态也还原
            var nodes = this.options.data.getData();
            FR.setAllNodeState(nodes, 0);
            var treeConfig = FR.createTreeConfig4Widget(this);
            this._createTreeView(treeConfig);
        },
        doResize: function (give) {
            FR.TreeEditor.superclass.doResize.call(this, give);
        },
        _createTreeView: function (treeConfig) {
            this.element.treeview(treeConfig);
        }

    });
    $.shortcut('tree', FR.TreeEditor);

// FR.TreeEditor.End

    // FR.ListEditor.Start
    /**
     * 列表控件
     * @class FR.ListEditor
     * @extends FR.SynchronBaseEditor
     */
    FR.ListEditor = FR.extend(FR.SynchronBaseEditor, /**@class FR.ListEditor*/{

        _defaultConfig: function () {
            return $.extend(
                FR.ListEditor.superclass._defaultConfig.apply(), {
                    width: 120,
                    height: 200,
                    icon: false,
                    multi: false,
                    removeSelf: false,
                    textAlign: 'left'
                });
        },

        _init: function () {
            FR.ListEditor.superclass._init.apply(this, arguments);
            this.initData();
            this._initList();
            // b:这部分太碍眼了，提供api让客户自己在afterinit || 其他事件里注册event
            var self = this;
            this.options.data.once(FR.Events.AFTERREAD, function () {
                self.fireEvent(FR.Events.DEFAULTINIT);
            });
        },
        /**
         * 初始化数据
         */
        initData: function () {
            if (this.options.data) {
                return;
            }

            if (this.options.controlAttr) {
                this.setSource(this.options.controlAttr);
                this._confirmEvents = function () {
                    this.fireEvent(FR.Events.AFTERINIT);
                };
                return;
            }

            if (this.options.widgetUrl) {
                this.options.data = FR.DataFactory.createSynchronJSONData(
                    this.options.widgetUrl, false);
            } else if (this.options.items) {
                this.options.data = FR.DataFactory
                    .createSynchronArrayData(this.options.items);
            }
        },

        refreshList: function () {
            if (this.options.controlAttr && this.options.widgetUrl) {
                this.options.controlAttr = null;
                this.options.data = FR.DataFactory.createSynchronJSONData(
                    this.options.widgetUrl, false);
            }
            this.jlist(
                {
                    needHead: this.options.needHead
                });
        },

        setSource: function (source) {
            var self = this;
            if (source["value"] !== undefined && source["value"] !== "") {
                this.once(FR.Events.DEFAULTINIT, function () {
                    self.setValue(source["value"], false);
                });
            }
            this.options.data = FR.DataFactory
                .createSynchronArrayData(source["data"]);
        },

        _initList: function () {
            FR.$defaultImport('/com/fr/fs/web/platform/js/jquery.jlist.js',
                'js');
            var o = this.options;
            if (o.width > -1) {
                this.element.css("width", o.width);
            }
            if (o.height > -1) {
                this.element.css("height", o.height);
            }
            if (o.textAlign) {
                this.element.css("text-align", o.textAlign);
            }
            this.jlist(
                {
                    needHead: o.needHead
                });
        },

        getValue: function () {
            var record = this.getSelectedItem();
            return record != null ? record.getValue() : null;
        },

        _dealValueWithEvents: function (val, it) {
            var currentText = this.getSelectedText(), data = this.options.data;
            for (var index = 0, len = data.getLength(); index < len; index++) {
                var dt = this.options.data.getRecord(index);
                if (it && (it.getShowValue() == dt.getShowValue())) {
                    dt.setValue(val);
                    break;
                }
            }
        },

        getSelectedText: function () {
            var record = this.getSelectedItem();
            return record != null ? record.getShowValue() : null;
        },

        /**
         * 添加子项
         * @param item {JQuery} 子项元素的DOM对象
         */
        addItem: function (item) {
            this.doAddItem(item);
        },

        getAll: function () {
            var all = [], data = this.options.data;
            for (var i = 0, len = data.getLength(); i < len; i++) {
                var nd = data.getRecord(i);
                all.push({
                    text: nd.getShowValue(),
                    value: nd.getValue() != null
                        ? nd.getValue()
                        : nd.getShowValue()
                });
            }
            return all;
        },

        setAll: function (val) {
            var self = this;
            //b:role pane only
            $.each(val, function (name, nd) {
                var record = FR.DataFactory.createItemRecord({
                    text: name, value: nd
                });
                self.doAddItem(record, true);
                self.options.data.addRecord(record);
            })
        },

        clear: function () {
            this.doClear();
        },

        clearSelected: function () {
            $('.fr-list-node', this.element)
                .removeClass('fr-list-node-selected');
            this.fireEvent(FR.Events.NOSELECT);
        },

        doFilter: function (args) {
            var lis = $('.fr-list-node', this.element);
            if (args || args === 0) {
                args = args.toUpperCase();
                $.each(lis, function (idx, item) {
                    var text = $('a > span', $(this)).html();
                    if (text.toUpperCase().indexOf(args) > -1) {
                        $(this).show();
                    }
                    else {
                        $(this).hide();
                    }
                });
            } else {
                lis.show();
            }
        },

        popData: function (data) {
            this.doClear();
            this.options.data = new FR.SynchronData({
                dataSource: new FR.SynchronObjectSource({
                    object: data
                })
            });
            this.jlist();
            if (this.getSelectedIndex() < 0) {
                this.fireEvent(FR.Events.NOSELECT);
            }
        },

        /**
         * 选中指定项
         * @param index 位置索引
         */
        setSelectedIndex: function (index) {
            var ulContent = $('ul.fr-list-content', this.element);
            var li = $('li', ulContent);
            if (!li) {
                this.fireEvent(FR.Events.NOSELECT);
            }
            this.doSelected(null, $(li[index]));
        }

    });
    $.shortcut("list", FR.ListEditor);
// FR.ListEditor.End


    /**
     * 按钮组
     * @class FR.ToggleButtonGroup
     * @extends FR.SynchronBaseEditor
     * @abstract
     */
    FR.ToggleButtonGroup = FR.extend(FR.SynchronBaseEditor, /**@class FR.ToggleButtonGroup*/{
        _defaultConfig: function () {
            return $.extend(FR.ToggleButtonGroup.superclass._defaultConfig.apply(),
                {
                    // 每一行有的列数,0表示只有一行
                    columnsInRow: 0
                });
        },
        _init: function () {
            FR.ToggleButtonGroup.superclass._init.apply(this, arguments);
            var o = this.options;
            var hm;
            var vm;
            if (o.border) {
                vm = o.border.b || o.border.t;
                hm = o.border.l || o.border.r;
                if (o.border.b1) {
                    o.height = o.height - 1;
                    o.width = o.width - 1;
                } else if (vm) {
                    o.height = o.height - vgap.w;
                } else if (hm) {
                    o.width = o.width - hgap.w;
                }
            }
            var width = o.width > 0 ? o.width : 0;
            var height = o.height > 0 ? o.height : 0;
            // richer:必须在值初始化之前生成该按钮组的容器
            this.$container = this.element.addClass("fr-form-btn-group");
            this.$container.css({
                "width": width,
                "height": height
            }).addClass(this.lbox_class);
            this.buttonArray = [];
            // IE8 IE7 杂项模式元素高度为0的话，还是会显示出来
            if (FR.Browser.isIE8Before() && !$.support.boxModel && height === 0) {
                this.$container.css({
                    height: 1, // overflow为hidden 高度为0居然还显示 改成1就不显示了
                    "overflow": "hidden"
                })
            }

            if (o.value != null) {
                this.once(FR.Events.DEFAULTINIT, function () {
                    this.setValue(o.value, false);
                });
            }

            this.initData();

        },

        initData: function () {
            if (this.options.data) {
                return;
            }

            if (this.options.controlAttr) {
                // 已经加载过了的。所以应该立即执行AFTERINIT
                this.setSource(this.options.controlAttr);
                this._confirmEvents = function () {
                    this.fireEvent(FR.Events.AFTERINIT);
                };
                return;
            }

            if (this.options.widgetUrl) {
                this.options.data = FR.DataFactory.createSynchronJSONData(
                    this.options.widgetUrl, false);
                this.options.data.resetStatus(this.createDependencePara4Data());
            } else if (this.options.items) {
                this.options.data = FR.DataFactory
                    .createSynchronArrayData(this.options.items);
            }
            var self = this;
            this.options.data.afterRead(function (items) {
                if (self.isBoxBuild !== true) {
                    self._buildBox(items);
                }
            });
            this.options.data.loadData();
        },

        setSource: function (source) {
            var self = this;
            if (source["value"] !== undefined && source["value"] != "") {
                this.once(FR.Events.DEFAULTINIT, function () {
                    self.setValue(source["value"], false);
                });
            }
            this.options.data = FR.DataFactory
                .createSynchronArrayData(source["data"]);
            this.options.data.afterRead(function (items) {
                self._buildBox(items);
            });
            this.options.data.loadData();
        },

        reset: function () {
            this.setValue(null);
            this.isBoxBuild = undefined;
            if (this.options.data.resetStatus(this.createDependencePara4Data())) {
                this.options.data.loadData();
            }
        },

        rebuild: function (items) {
            this.setValue(null);
            this.options.data = null;
            this.options.widgetUrl = null;
            this.element.empty();
            this.options.items = items;
            this.isBoxBuild = undefined;
            if (items.widgetUrl) {
                this.options.widgetUrl = items.widgetUrl;
            }
            if (!this.options.renderEl) {
                this.options.renderEl = this.element;
            }
            this._init();
        },

        clearContent: function () {
            this.$container.empty();
        },

        _buildBox: function () {
            this.clearContent();
            var items = this.options.data.getRecords();
            this._initGridConfig(items);
            this._setItems(items);
            this.isBoxBuild = true;
            this.fireEvent(FR.Events.DEFAULTINIT);
        },

        _initGridConfig: function (items) {
            var len = items.length + (this.options.chooseAll === true ? 1 : 0), ci = this.options.columnsInRow,
                ro = ci === 0
                    ? 1
                    : 1 + Math.floor((len - 0.1) / ci);
            this.gridConfig = {
                columns: ci === 0 || ro === 0 ? len : ci,
                rows: ro,
                items: [],
                renderEl: this.$container
            };
            return this.gridConfig;
        },

        setEnable: function (arg) {
            if (this.buttonArray) {
                for (var i = 0; i < this.buttonArray.length; i++) {
                    this.buttonArray[i].setEnable(arg);
                }
            }
            FR.ToggleButtonGroup.superclass.setEnable.apply(this, arguments);
        },

        getErrorMessage: function () {
            return this.options.errorMsg || FR.i18nText("FR-Base_NOT_NULL_Des");
        },
        doResize: function (give) {
            FR.ToggleButtonGroup.superclass.doResize.call(this, give);
            this.$container.css({
                width: give.width,
                height: give.height
            });
            if (this.grid) {
                this.grid.doLayout();
                this._checkTable();
            }
        },
        // b:table中absolute处理
        _checkTable: function () {
            if (this.$container.parent()[0]
                && this.$container.parent()[0].tagName == "TD") {
                this.$container.css('position', 'relative');
            }
        }
    });
    $.shortcut("togglebuttongroup", FR.ToggleButtonGroup);


    // 兼容
    // FR.TableTree.Start
    FR.TableTree = FR.extend(FR.BaseEditor, {
        _defaultConfig: function () {
            return $.extend(FR.TableTree.superclass._defaultConfig.apply(),
                {
                    width: 120,
                    height: 200
                });
        },
        _init: function () {
            FR.TableTree.superclass._init.apply(this, arguments);

            FR.$defaultImport(
                '/com/fr/web/platform/js/jquery.tabletree.js', 'js');
            FR.$defaultImport(
                '/com/fr/web/platform/css/jquery.tabletree.css', 'css');
            var o = this.options;

            this.$TableTreeDiv = this.element;
            if (o.width > -1) {
                this.$TableTreeDiv.css("width", o.width);
            }
            if (o.height > -1) {
                this.$TableTreeDiv.css("height", o.height);
            }
            // b:cvns & data
            var cvns;
            if (!this.options.data) {
                this.options.data = new FR.Data({
                    dataSource: new FR.URLSource({
                        url: this.options.widgetUrl
                    }),
                    dataReader: new FR.DataReader({
                        choosedFields: ['name', 'state']
                    })
                });
            }

            if (this.options.rootLoader) {
                this.options.treedata = new FR.TreeData({
                    treeLoader: this.options.rootLoader
                });
            } else if (this.options.url) {
                this.options.treedata = new FR.TreeData({
                    url: this.options.url
                });
            } else {
                return;
            }

            var config = {
                // b:nodes
                data: this.options.treedata.getData(),
                // b:records
                cvns: this.options.data.getData(),
                treedatatype: this.options.treedatatype,
                width: this.options.width,
                height: this.options.height,
                needleaficon: this.options.needleaficon,
                oncheckboxclick: this.options.oncheckboxclick
            };
            this.$TableTreeDiv.tabletree(config);
        },

        getValue: function () {
            return this.$TableTreeDiv.getTableTreeValue();
        },

        _setValue: function (value) {
            this.$TableTreeDiv.setTableTreeValue(value);
        }
    });
    $.shortcut("tabletree", FR.TableTree);
// FR.TableTree.End

})(jQuery);
(function ($) {
    // 复合控件,这里是指的显示页码的控件
    FR.Composite = FR.extend(FR.Widget, {
        type: "composite",

        _defaultConfig: function () {
            return $.extend(FR.Composite.superclass._defaultConfig.apply(),
                {
                    innerWidget: {}
                });
        },

        _init: function () {
            FR.Composite.superclass._init.apply(this, arguments);
            var o = this.options.innerWidget;
            o.renderEl = $("<div>").appendTo($("body"));
            var widget = FR.createWidget(o);
            this.innerWidget = widget;
            if (widget.element.data('jlayout')) {
                widget.doResize(widget.element.data('jlayout')
                    .preferred(this.element));

            }
            widget.doLayout();
            widget.element.css({
                position: ""
            });
            o.renderEl.appendTo(this.element.css({
                position: "relative"
            }));
        },

        getWidgetByName : function(name) {
            var items = this.innerWidget.options.resultWidgets;
            return items[name];
        }
    });
    $.shortcut("composite", FR.Composite);

    /**
     * 工具栏
     * @class FR.Toolbar
     * @extends FR.Widget
     */
    FR.Toolbar = FR.extend(FR.Widget, {
        type: "toolbar",

        _defaultConfig: function () {
            return $.extend(FR.Toolbar.superclass._defaultConfig.apply(), {
                baseCls: "x-toolbar",
                items: []
            });
        },

        _init: function () {
            FR.Toolbar.superclass._init.apply(this, arguments);
            var o = this.options;
            var toolbar_h = 28;
            FR.toolbarHeight = toolbar_h;
            this.element.addClass(o.baseCls);
            this.element.css('height', toolbar_h);
            // carl:设置背景，默认的就没有toolbarbg
            if (o.toolbarbg) {
                var bg = o.toolbarbg;
                var dom = this.element;
                FR.setBackground(dom, bg, dom.height());
            }

            this.$tr = $("<tr>");
            this.$tr.appendTo($("<tbody>")
                .appendTo($("<table cellspacing=0>").css({
                    "height": toolbar_h,
                    "vertical-align": "center"
                }).appendTo(this.element)));

            if (o.toolbarbg && (o.toolbarbg["type"] === 4 || o.toolbarbg["type"] === 2)
                && FR.Browser.isIE() && FR.ieForFixBackground()) {
                this.$tr.css({
                    position: 'absolute',
                    top : '0px'
                })
            }

            var addedItems = [];
            /*
             * alex:加入控件
             */
            if (o.items != null) {
                if (!FR.isArray(o.items)) {
                    o.items = [o.items];
                }

                for (var i = 0; i < o.items.length; i++) {
                    var item = o.items[i];
                    if (FR.isEmptyObj(item)) {
                        continue;
                    }
                    if (i > 0) {
                        this.addSep();
                    }
                    var comp = FR.createWidget(item);
                    addedItems.push(comp);
                    if (item.widgetName) {
                        this[item.widgetName.toLowerCase()] = comp;
                    }
                    this.addJQuery(comp.element);
                }
                o.items = addedItems;
            }
        },

        getWidgetByName : function(name) {
            var items = this.options.items;
            for (var i = 0, len = items.length; i < len; i ++) {
                var item = items[i];
                var wn = item.options.widgetName;
                if (wn && name && wn.toUpperCase() === name.toUpperCase()) {
                    return item;
                }
            }
        },


        getWidgetsByName: function(name) {
            var results = [];
            var items = this.options.items;
            for (var i = 0, len = items.length; i < len; i ++) {
                var item = items[i];
                var wn = item.options.widgetName;
                if (wn && name && wn.toUpperCase() === name.toUpperCase()) {
                    results.push(item);
                }
            }
            return results;
        },

        /**
         * @private
         * @param {jQuery} $jq 将jQuery元素加到工具栏中
         */
        addJQuery: function ($jq) {
            if (FR.Browser.isIE() && !$.support.boxModel) {
                this.element.css('overflow', 'hidden');
            }
            if ($jq != null) {
                var $td = $("<td>").append($jq);
                // ie杂项 东西比较多的话会被撑大比如showCellValue这个label
                //bug78450.内容撑大vertical设成top没啥用吧。先注释了
                //if ($.browser.msie && !$.support.boxModel) {
                //    $td.css('vertical-align', 'top');
                //}
                this.$tr.append($td)
            }
        },

        /**
         * @private
         * 添加一个分隔符
         */
        addSep: function () {
            this.addJQuery("<span class='sep'> </span>")
        }
    });
    $.shortcut("toolbar", FR.Toolbar);

    /**
     * 菜单按钮
     * @class FR.MenuButton
     * @extends FR.Button
     */
    FR.MenuButton = FR.extend(FR.Button, {
        _init: function () {
            FR.MenuButton.superclass._init.apply(this, arguments);
            if(this.$em){
                this.$em.addClass('fr-btn-arrow');
            }
            var menu = this.options.menu;
            if (FR.isArray(menu)) {
                this.on("click", function () {
                    FR.showMenuByEl({
                        destroyOnClose: true,
                        items: menu,
                        minWidth: 175,
                        xxxfixclientH: this.options.istoolbarmenu
                            ? true
                            : false
                    }, this.element)
                }.createDelegate(this));
                if( this.$table){
                    this.$table.mouseleave(function (e) {
                        if (this.fr_menu) {
                            var bounds = {
                                x: this.fr_menu.menu.$menuRoot.offset().left,
                                y: this.fr_menu.menu.$menuRoot.offset().top
                                - 1,
                                width: this.fr_menu.menu.$menuRoot.bounds().width,
                                height: this.fr_menu.menu.$menuRoot.bounds().height
                            };
                            if (e.clientY < bounds.y
                                || e.clientY > bounds.y + bounds.height
                                || e.clientX < bounds.x
                                || e.clientX > bounds.x + bounds.width) {
                                this.fr_menu.menu.close();
                            }
                        }
                    }.createDelegate(this.element));
                }
            }
        }
    });
    $.shortcut("menubutton", FR.MenuButton);

})(jQuery);
(function ($) {
    /**
     * 文本控件
     *
     *     @example
     *     var editor = new FR.TextEditor({
     *             renderEl : 'body',
     *             value : 'Hello'
     *     });
     *
     * @class FR.TextEditor
     * @extends FR.EditComp
     *
     * @cfg {JSON} options 属性配置
     * @cfg {Boolean} [options.autoVerify=true] 自动校验规则
     */
    FR.TextEditor = FR.extend(FR.EditComp, {
        _defaultConfig: function () {
            return $.extend(FR.TextEditor.superclass._defaultConfig.apply(), {
                autoVerify: true
            });
        },
        /**
         * 判断是否是不符合规则的输入
         * @param e Event
         * @returns {boolean|*} 返回输入是否符合规则
         */
        isValidateInput: function (e) {
            return !FR.isSpecialKey(e);
        },

        _dealValueWithEvents: function (value) {
            var oldValue = this.getValue();
            this.editComp.val(value);
            if (arguments[1] !== false) {
                this.fireEvent(FR.Events.CHANGE, value, oldValue); // fire value
                // change event,
                // newValue &
                // oldValue
                this.fireEvent(FR.Events.AFTEREDIT);
            }
        },

        recoveryValue: function () {
            this.editComp.val(this.options.oldValue);
        },

        select: function () {
            if (this.editComp.select) {
                this.editComp.select();
            }
        },
        getValue: function () {
            return this.editComp.val();
        },

        doResize: function (give) {
            FR.TextEditor.superclass.doResize.call(this, give);
        }
    });
    $.shortcut("text", FR.TextEditor);

    /**
     * 密码控件
     * @class FR.Password
     * @extends FR.TextEditor
     * @cfg {Boolean} [passwordText=false]  是否是密码文本
     * @cfg {String} [encryption='none'|'all'|'input'|'output']    是否加密传输
     */
    FR.Password = FR.extend(FR.TextEditor, /**@class FR.Password*/{
        _defaultConfig: function () {
            return $.extend(FR.TextEditor.superclass._defaultConfig.apply(), {
                passwordText: true, //属性保留，主要用于填报，识别密码控件
                encryption: 'none'
            });
        },
        _init: function () {
            FR.Password.superclass._init.apply(this, arguments);
            var self = this;
            var o = this.options;
            if (o.encryption === 'all' || o.encryption === 'output') {
                this.editComp.keyup(function (event) {
                    self.ciphertext = FR.encrypt($(event.target).val());
                });
            }
        },
        getValue: function () {
            var value;
            var o = this.options;
            if ((o.encryption === 'all' || o.encryption === 'output') && !(_.isUndefined(this.ciphertext) || this.ciphertext === '')) {
                value = this.ciphertext;
            } else {
                value = FR.Password.superclass.getValue.apply(this, arguments);
            }
            // denny: 如果是密码控件，且需要客户端加密，加密之
            value.encryption = true;
            return value;
        },
        _dealValueWithEvents: function (value) {
            var o = this.options;
            var cipher = '';
            var oldValue = FR.Password.superclass.getValue.apply(this, arguments);
            if (o.encryption === 'all' || o.encryption === 'input') {
                cipher = FR.encrypt(value);
                this.ciphertext = '';
                this.editComp.val(cipher);
            } else {
                this.editComp.val(value);
            }
            if (arguments[1] !== false) {
                this.fireEvent(FR.Events.CHANGE, o.encryption ? cipher : value, oldValue); // fire value
                this.fireEvent(FR.Events.AFTEREDIT);
            }
        },
        _createEditComp: function () {
            return $("<input type=\"password\"/>");
        }
    });
    $.shortcut("password", FR.Password);

    /**
     * 文本域控件
     * @class FR.TextArea
     * @extends FR.TextEditor
     * @cfg {Boolean} [multiline=false] 是否支持多行显示
     */
    FR.TextArea = FR.extend(FR.TextEditor, /**@class FR.TextArea*/{
        _defaultConfig: function () {
            return $.extend(FR.TextEditor.superclass._defaultConfig.apply(), {
                multiline: true
            });
        },
        /**
         * IE replace space or newline
         * REPORT-7415 ie的文本域需要换行，没必要替换
         */
        replaceNewline: function () {
            if (FR.Browser.isIE()) {
                this.editComp.on('paste', function () {
                    var str = window.clipboardData.getData("Text");
                    this.value = this.value ? this.value.append(str) : str;
                    return false;
                });
            }
        },
        _init: function () {
            FR.TextArea.superclass._init.apply(this, arguments);
            var o = this.options, self = this;
            if (o.multiline === true) {
                this.editComp.keydown(function (e) {
                    if (self.options.write && FR.keyCode.UP == e.keyCode
                        || FR.keyCode.DOWN == e.keyCode) {
                        // 填报正在编辑时，上下键会moveTDCell，与文本域冲突，这里屏蔽了。
                        e.stopPropagation();
                        return;
                    }
                    // b:影响填报，为什么阻止冒泡
                    // wei:回车会触发参数界面的查询按钮，因此阻止冒泡为了不触发查询按钮。填报时不阻止，因为回车时
                    // 希望格子往下切换。
                    if (e.keyCode === 13) {
                        if (self.options.form) {
                            self.fireEvent(FR.Events.AFTEREDIT);
                            e.stopPropagation();
                        }
                    }
                    var eel = this;
                    if (e.ctrlKey && e.keyCode === 13) {
                        e.ctrlKey = false;
                        // 改成从光标所在位置换行
                        var val = eel.value;
                        var inputEl = $('.' + o.cls, self.element).eq(0)[0];
                        if (typeof inputEl.selectionStart == "number" && typeof inputEl.selectionEnd == "number") {
                            var start = inputEl.selectionStart;
                            eel.value = val.slice(0, start) + "\n" + val.slice(inputEl.selectionEnd);
                            inputEl.selectionStart = inputEl.selectionEnd = start + 1;
                        }
                        else if (document.selection && document.selection.createRange) {
                            this.focus();
                            var range = document.selection.createRange();
                            range.text = "\r\n";
                            range.collapse(false);
                            range.select();
                        }
                        self.fireEvent(FR.Events.AFTEREDIT);
                    }
                });
                // shoc:杂项模式修改white-space解决换行问题，客户bug28462
                //火狐下自动换行也有问题
                if (!jQuery.support.boxModel) {
                    this.editComp.css({'white-space': 'normal'});
                }
            }
        },
        _createEditComp: function () {
            return $("<textarea style='overflow-y:auto;resize:none;line-height: normal'></textarea>");
        },
        /**
         * 判断是否是不符合规则的输入
         * @param e Event
         * @returns {boolean|*} 返回输入是否符合规则
         */
        isValidateInput: function (e) {
            // wei: 如果是可多行输入的文本框，那么输入回车也应该触发编辑后事件。
            return FR.TextArea.superclass.isValidateInput.call(this, e) || (e.keyCode === 13 && this.options.form);
        },

        doResize: function (give) {
            FR.TextEditor.superclass.doResize.call(this, give);
        }
    });
    $.shortcut("textarea", FR.TextArea);
})(jQuery);
;
(function ($) {
    /**
     * 网页框控件，用于加载一般的网页
     *
     *      @example
     *      var editor = new FR.IframeEditor({
     *          renderEl : 'body',
     *          src : "http://www.baidu.com",
     *          showOverFlowX : true,
     *          showOverFlowY : true
     *      });
     *
     * @class FR.IframeEditor
     * @extends FR.BaseEditor
     * @cfg {String} src 网页框内容指向的地址
     * @cfg {Boolean} [showOverFlowX=true] 显示横向滚动条
     * @cfg {Boolean} [showOverFlowY=true] 显示纵向滚动条
     */
    FR.IframeEditor = FR.extend(FR.BaseEditor, {

        _defaultConfig: function () {
            return $.extend(FR.IframeEditor.superclass._defaultConfig.apply(), /**@class FR.IframeEditor*/{
                baseName: 'fr_iframe',
                baseClass: 'fr_iframeeditor',
                widgetName: "",
                src: "",
                width: "100%",
                height: "100%",
                showOverFlowX: true,
                showOverFlowY: true
            });
        },
        _init: function () {
            FR.IframeEditor.superclass._init.apply(this, arguments);
            this.initData();
            // 控件属性
            var o = this.options;

            this.editComp = this.element.css({
                width: '100%',
                height: '100%'
            });
            o.iframeName = o.widgetName || this.createNoRepeatName();
            this.$iframe = $("<iframe  name=" + o.iframeName + " id="
                + o.iframeName + ">").css({
                    width: o.width,
                    height: o.height
                }).addClass(o.baseClass).attr({
                    frameborder: 0,
                    scrolling: !o.showOverFlowX && !o.showOverFlowY
                        ? 'no'
                        : 'yes'
                }).appendTo(this.editComp);
            // 这里滚动条的设置 跟子页面的设置有关
            // 如果嵌入的是我们的报表或者表单 window的尺寸都是100%那就取了iframe的大小
            // 如果报表或表单内容尺寸超过的话 就会出现滚动条 那么就改下子元素 这时一般不跨域
            this.$iframe[0].onload = function () {
                if (!o.showOverFlowX || !o.showOverFlowY) {
                    try { // 可能跨域 那就不用管了
                        if (this.contentWindow) {
                            var doc = this.contentWindow.document;
                            var cc = $('.content-container', $(doc));

                            if (cc.length > 0) {
                                setOverflow(cc);
                            } else {
                                // 有可能是表单 html和body都要设置
                                setOverflow($(doc.documentElement));
                                setOverflow($(doc.body));
                            }
                            function setOverflow(cc) {
                                if (!o.showOverFlowX) {
                                    cc.css('overflow-x', 'hidden');
                                }
                                if (!o.showOverFlowY) {
                                    cc.css('overflow-y', 'hidden');
                                }
                            }
                        }
                    } catch (e) {
                        console && console.log("error");
                    }
                }
            }

            // IE里面需要设置rowspan为1才能正常显示....否则会跳过n行不显示，chrome应该是bug，一会儿好一会儿不好
            if ($.browser.msie && (this.$iframe.parent()).is("div")
                && (this.$iframe.parent().parent()).is("td")
                && (this.$iframe.parent().parent().attr("widget")) != null
                && (this.$iframe.parent().parent().parent()).is("tr")) {
//            this.$iframe.parent().parent().attr('rowspan', '1');
                // 上面这么搞有问题的，IE7或IE8杂项下，合并单元格中的网页框控件会只显示在第一行的，改成下面
                this.$iframe.parent().height("");
            } else {
                this.$iframe.css('overflow-x', o.showOverFlowX ? 'auto' : 'hidden');
                this.$iframe.css('overflow-y', o.showOverFlowY ? 'auto' : 'hidden');
            }

            if (o.controlAttr) {
                this.setValue(o.controlAttr);
            } else if (o.src) {
                this._loadIframeByGet();
            }
            if (o.disabled) {
                this._addDisableMask();
            }
        },

        createNoRepeatName: function () {
            var len = $('iframe' + this.options.baseClass).length;
            while ($('iframe[name=' + this.options.baseName + len + ']').length !== 0) {
                len++;
            }
            return this.options.baseName + len;
        },

        // richer:以get的方式获取ifram的参数
        _loadIframeByGet: function () {
            var src = this.options.src, self = this;
            // 获取参数组
            if (this.options.data) {
                //bug:63869这个遍历没有必要下面都有ifelse了
                //for (var i = 0, len = this.options.data.getLength(); i < len; i++) {
                //    var params = this.options.data.getRecord(i).getContent();
                //    src = src.appendQuery(params);
                //}

                var waitForInitComplete = [];

                for (var i = 0, len = this.options.data.getLength(); i < len; i++) {
                    var params = this.options.data.getRecord(i).getContent();
                    if (typeof params == 'object' && params.widgetName && this.options.form) {
                        var w = this.options.form.getWidgetByName(params.widgetName);
                        if (w) {
                            var para = {};
                            para[params.widgetName] = w.getValue();
                            src = src.appendQuery(para);
                        } else {
                            waitForInitComplete.push(params.widgetName);
                        }
                    } else {
                        src = src.appendQuery(params);
                    }
                }

                if (waitForInitComplete.length > 1) {
                    var form = this.options.form;
                    form.on(FR.Events.AFTERINIT, function () {
                        for (var c = 0; c < waitForInitComplete.length; c++) {
                            var name = waitForInitComplete[c];
                            var para = {};
                            para[name] = form.getWidgetByName(name).getValue();
                            src = src.appendQuery(para);
                        }
                        self._changeIframe(src);
                    });

                }
            }
            this._changeIframe(src);
        },

        /**
         * 添加一层遮罩层，用于屏蔽iframe内容的可用性
         * @private
         */
        _addDisableMask: function () {
            this.mask = $('<span/>').css({
                backgroundColor : '#66B9FF',
                height: this.options.height,
                width: this.options.width,
                left: this.element.offset().left
            }).appendTo(this.element);
        },

        /**
         * 获取网页框的src地址
         * @returns {String} 地址
         */
        getValue: function () {
            return this.$iframe.attr("src");
        },

        _dealValueWithEvents: function (src) {
            this.options.src = src;
            this._changeIframe(src);
        },

        /**
         * 改变iframe的src指向的地址
         * @param src 新的地址
         * @private
         */
        _changeIframe: function (src) {
            this.$iframe.attr("src", src);
        },

        setEnable: function (enable) {
            FR.IframeEditor.superclass.setEnable.apply(this, arguments);
            if (enable) {
                if (this.mask) {
                    this.mask.remove();
                }
            } else {
                if (this.mask) {
                    this.mask.show();
                } else {
                    this._addDisableMask();
                }
            }
        },

        doResize: function (give) {
            FR.IframeEditor.superclass.doResize.apply(this, arguments);
            if (this.submitForm) {
                this.submitForm.submit();
            }
        },
        reset: function () {
            this.options.data.clearData();
            this._loadIframeByGet();
        }
    });
    $.shortcut("iframe", FR.IframeEditor);
})(jQuery);
;
(function ($) {
    /**
     * 标签控件
     *
     *     @example
     *     var $root = $('<div>').css({position : 'absolute', top : 5, left : 20}).appendTo('body');
     *     var label = new FR.Label({
     *             renderEl : $root,
     *             width : 200,
     *             height : 40,
     *             value : "我是一个标签",
     *             textalign : "right",     //对齐方式
     *             border : true,     //是否有边框
     *             title : "FineReport",     //悬浮提示信息
     *             wrap : true,       //true换行，false不换行(默认)
     *             verticalcenter : true,   //是否垂直居中
     *             fontsize : 16,         //字体大小
     *             color : "red",          //文字颜色
     *             decoration : "underline",          //文字修饰
     *             fontfamily : "SimSun",    //字体
     *             fontweight : "normal",     //文字粗细
     *             fontstyle : "normal"         //字体风格
     *     });
     *
     * @class FR.Label
     * @extends FR.BaseEditor
     *
     * @cfg {JSON} options 配置属性
     * @cfg {String} options.cls 文字层样式类
     * @cfg {String} options.value 文字内容
     * @cfg {Boolean} [options.border=false] 是否有边框
     * @cfg {String} [options.title] 悬浮提示信息
     * @cfg {Boolean} [options.noWrap=false] 是否不换行,true表示不换行
     * @cfg {Boolean} [options.verticalcenter=false] 是否垂直居中
     * @cfg {Number} [options.fontsize] 文字大小
     * @cfg {String} [options.color] 文字颜色
     * @cfg {String} [options.decoration] 文字修饰
     * @cfg {Number} [options.lineheight] 行间距
     * @cfg {String} [options.textalign] 对齐方式
     * @cfg {String} [options.fontfamily] 字体
     * @cfg {Number} [options.fontweight] 文字粗细
     * @cfg {String} [options.fontstyle] 字体风格
     */
    FR.Label = FR.extend(FR.BaseEditor, /**@class FR.Label*/{
        _defaultConfig: function () {
            return $.extend(FR.Label.superclass._defaultConfig.apply(), {
                cls: 'fr-label',
                wrap: true,
                width: 120,
                height: 24
            });
        },
        _init: function () {
            FR.Label.superclass._init.apply(this, arguments);
            // 控件属性
            this.element.css('overflow', 'hidden');
            var o = this.options;
            //<pre/> 文字层,用于丰富的字体样式
            this.labelComp = $("<pre/>").addClass(o.cls);
            //<table/> 容器层,用于调整文字位置
            this.textContainer = $('<table cellpadding="0" cellspacing="0"/>');
            this.textContainer.css({
                'table-layout': 'fixed',
                width: this.options.width,
                height: this.options.height,
                '-webkit-text-size-adjust': 'none' //CSS3,文字大小不随设备(浏览器)来调整
            }).append($('<tr/>').append($('<td/>').append(this.labelComp))).appendTo(this.element);
            var self = this;
            this.labelComp.click(function () {
                if (self.isEnabled()) {
                    self.fireEvent(FR.Events.CLICK);
                }
            });

            if (this._getEvents().click) {
                this.labelComp.addClass('fr-widget-click');
            }
            if (o.fontsize) {
                this.labelComp.css('font-size', o.fontsize);
            }
            if (o.color) {
                this.labelComp.css('color', o.color);
            }
            if (o.decoration) {
                this.labelComp.css('text-decoration', o.decoration);
            }
            if (o.lineheight) {
                this.labelComp.css('line-height', o.lineheight + 'px');
            }
            if (o.textalign) {
                this.labelComp.css('text-align', o.textalign);
            }
            if (o.fontfamily) {
                this.labelComp.css('font-family', o.fontfamily);
            }
            if (o.fontweight) {
                this.labelComp.css('font-weight', o.fontweight);
            }
            if (o.fontstyle) {
                this.labelComp.css('font-style', o.fontstyle);
            }
            if (o.border === true) {
                this.labelComp.css({
                    border: "1px solid #AAAAAA"
                });
            }
            // 背景给整个控件区域，不是内容区域
            if (o.widgetBackground) {
                //ie8低版本, 设置图片背景, 无效, position从父容器继承的, 不知道为啥无效, 再设置一下又好了
                if(FR.Browser.isIE8Before()){
                    this.textContainer.css('position', 'absolute');
                }
                var extraBackground = FR.Core.Plugin.LabelBackground.action;
                if (extraBackground) {
                    extraBackground(this.element, o.widgetBackground, this.element.height());
                } else {
                    FR.setBackground(this.element, o.widgetBackground, this.element.height());
                }
            }
            //表单处标题用到边框，为组件边框
            if (o.borderStyle) {
                //为标题控件时不画边框阴影
                this.element.css('border-style', o.borderStyle.type);
                this.element.css('border-color', o.borderStyle.color);
                this.element.css('border-width', o.borderStyle.width);
                this.element.css('border-bottom-width', 0);
            }
            if (o.width > -1) {
                this.element.css({
                    width: o.width
                });
            }
            if (o.height > -1) {
                this.element.css({
                    height: o.height
                });
            }

            if (o.title) {
                this.labelComp.attr('title', o.title);
            }
            if (o.id) {
                this.labelComp.attr('id', o.id);
            }
            if (o.wrap) {
                this.labelComp.css('word-wrap', 'break-word').css(
                    'white-space', 'pre-wrap');
            } else {
                if (!FR.Browser.isIE()) {
                    this.labelComp.css('white-space', 'pre');
                } else {
                    this.labelComp.css('white-space', 'pre-wrap').css(
                        'word-break', "keep-all");
                }
            }
            if (o.value != null) {
                //标签的值改变事件在初始化的时候还是触发一下
                this.setValue(o.value);
            }
        },


        setValue: function (value) {
            var oldValue = this.getValue();
            this.options.value = value;
            if (FR.Browser.isIE()) {
                this.labelComp[0].innerText = value || '';
            } else {
                this.labelComp.text(value);
            }
            if (arguments[1] !== false) {
                this.fireEvent(FR.Events.CHANGE, value, oldValue);
            }
        },

        getValue: function () {
            return this.options.value;
        },

        doResize: function (give) {
            FR.Label.superclass.doResize.call(this, give);
            this.textContainer.css({
                width: give.width,
                height: give.height
            });
            this.labelComp.css({
                width: give.width
            });
            if (!this.options.verticalcenter) {
                this.labelComp.css('height', give.height + 'px');
            }
        }
    });
    $.shortcut("label", FR.Label);
})(jQuery);
;
(function ($) {
    /**
     * 数字控件
     *
     *     @example
     *     var editor = new FR.NumberEditor({
     *          renderEl : 'body',
     *          allowDecimals : true,
     *          allowNegative : true,
     *          decimalPrecision : -1,
     *          autoVerify : true,
     *          decimalSeparator : ".",
     *          value : -233.455
     *     });
     *
     * @class FR.NumberEditor
     * @extends FR.EditComp
     * @cfg {JSON} options 属性配置
     * @cfg {Boolean} [options.allowDecimals=true] 是否允许小数
     * @cfg {Boolean} [options.allowNegative=true] 是否允许负数
     * @cfg {Number} [options.decimalPrecision=-1] 小数精确度
     * @cfg {String} [options.decimalSeparator=.] 小数分割符
     */
    FR.NumberEditor = FR.extend(FR.EditComp, /**@class FR.NumberEditor*/{
        _defaultConfig: function () {
            return $.extend(FR.NumberEditor.superclass._defaultConfig.apply(), {
                allowDecimals: true,
                allowNegative: true,
                decimalPrecision: -1,
                autoVerify: true,
                decimalSeparator: '.', // decimal的分隔符
                numberSeparator: ',' // 位数分隔符，如 111,111,312 = 111111312
                // alex:不添加value:0作为默认值,这样会导致在BS编辑的时候,如果写的是0,发现isDirty ==
                // false,而不赋值
            });
        },
        _init: function () {
            FR.NumberEditor.superclass._init.apply(this, arguments);
            var o = this.options;
            var baseChars = '0123456789';

            this.allowed = baseChars + '';
            if (o.allowDecimals) {
                this.allowed += '.';
            }
            if (o.allowNegative) {
                this.allowed += "-";
            }
            // b:屏蔽输入法
            this.editComp.css("ime-mode", "disabled");
            var self = this;
            this.editComp.blur(function () {
                if ('.' == self.editComp.val().charAt(0)) {
                    self.editComp.val('0' + self.editComp.val());
                }
            }).keydown(function (e) {
                // wei : 不触发参数界面查询按钮
                if (e.keyCode == FR.keyCode.ENTER && !self.options.write) {
                    e.stopPropagation();
                }
            }).keypress(function (e) {
                // james:下面是抄的Ext的
                var k = e.keyCode;
                if (!FR.Browser.isIE()
                    && (FR.isNavKeyPress(e) || FR.isSpecialKey(e) || k == FR.keyCode.BACKSPACE)) {
                    return;
                }
                var c = e.charCode || e.keyCode;// james：IE当中要取keyCode
                var cc = String.fromCharCode(c);
                // if($.browser.msie && (FR.isSpecialKey(e) || !cc)){
                // 过滤掉回车(ASCII为13)和ESC(ASCII为27)
                if (FR.Browser.isIE() && (c === 27 || c === 13)) {
                    return;
                }

                if (self.allowed.indexOf(cc) === -1) {
                    // FR.Msg.toast(errorMsg);
                    e.preventDefault();
                }

                if (this.value.indexOf('.') > -1 && cc == '.') {
                    // FR.Msg.toast(errorMsg);
                    e.preventDefault();
                }
            });
        },

        isValidateInput: function (e) {
            var c = e.charCode || e.keyCode;// james：IE当中要取keyCode
            // wei:backspace
            if (c == FR.keyCode.BACKSPACE || c == FR.keyCode.ENTER) {
                return true;
            }
            // 上面数字键盘是48-57 数字小键盘是96-105 同样小数点也要考虑两个
            if (c >= 96 && c <= 105) {
                c = c - 48;
            }
            var cc = String.fromCharCode(c);
            if (c === 190 || c === 110) {
                cc = ".";
            }
            return (this.allowed.indexOf(cc) > -1)
                && (cc != '.' || (this.editComp.val().substr(0, this.editComp.val().length - 1)).indexOf('.') === -1);
        },

        _dealValueWithEvents: function (value) {
            var oldValue = this.options.oldValue;
            var txt;
            if (value === undefined && typeof oldValue === 'string' && oldValue !== '') {
                txt = oldValue;
            } else if (value === undefined || value === null) {//undefined or null
                txt = '';
            } else {
                // value = parseFloat(value);
                txt = String(value);
            }


            this.editComp.val(txt.replace(".",
                this.options.decimalSeparator));

            // alex:把老的值保存在this.options.value中,用来判断isDirty
            if (arguments[1] !== false) {
                this.fireEvent(FR.Events.CHANGE, value, oldValue); // fire value
                // change event,
                // newValue &
                // oldValue
            }
        },

        _fixPrecision: function (value) {
            var nan = isNaN(value);
            if (!this.options.allowDecimals || this.options.decimalPrecision == -1
                || nan || !value) {
                return nan ? '' : value;
            }
            return parseFloat(parseFloat(value).toFixed(this.options.decimalPrecision));
        },

        // float只能支持到17位,而21位才开始转化成科学计数法,
        // 17到21位会出错，21位以上位数正常但是会舍掉一部分  todo
        _parseValue: function (value) {
            value = parseFloat(String(value).replace(new RegExp(this.options.numberSeparator, 'g'), '').replace(this.options.decimalSeparator, "."));
            return isNaN(value) ? '' : value;
        },
        // james：对于数字编辑器的返回值，如果没有值，就返回''，如果输入的是0，就返回0
        // 这个地方要看用户的反馈，是否需要提供可配置的地方。
        getValue: function () {
            var txt = this.editComp.val();
            if (txt.length > 17) {
                return txt;
            }
            return this._fixPrecision(this._parseValue(txt));
        },

        verifyDedimals: function () {
            if (typeof this.editComp.reg === "undefined") {
                this.editComp.reg = (this.options.allowNegative ? "\-?" : "")
                    + "\\d+"
                    + (this.options.allowDecimals ? ("(\\.\\d{0,"
                        + this.options.maxDecLength + "})?") : "");
            }
            var pattern = new RegExp(this.editComp.reg);
            var result = pattern.exec(this.editComp.val());
            if (result !== undefined && result !== null) {
                return result[0];
            }
            return "";
        },

        recoveryValue: function () {
            this.editComp.val(isNaN(this.options.oldValue)
                ? ''
                : String(this.options.oldValue).replace(".",
                    this.options.decimalSeparator));
        },

        isValidate: function (cValue) {
            var value = cValue !== undefined && cValue !== null
                ? cValue
                : this.editComp.val();
            cValue = value;
            if (cValue && this.options.isEditable && ('' + cValue).indexOf(',') !== -1) {
                value = value.replace(/,/g, "");
            }
            // richer:不允许为空
            // b: 不确定这么改有没有问题
            // value==""时如果value=0则表达式为ture，放在最后安全
            if (value === "" || value === undefined || value === null) {
                if (this.options.allowBlank !== false) {
                    return true;
                } else {
                    this.errorMsg = this.options.errorMsg || FR.i18nText("FR-Base_NOT_NULL_Des");
                    return false;
                }
            }

            value = ('' + value).replace(this.options.decimalSeparator, ".");
            if (isNaN(value)) {
                this.errorMsg = this.options.regErrorMsg
                    || FR.i18nText("Err-The_value_must_be_number");
                return false;
            }
            // 不允许为小数

            // 数字太大parseFloat就变成科学计数法的形式了 而且总位数17以上的小数会被截断
            var str = value;
            var bd = new FR.BigDecimal({
                numStr: str
            });
            if (str.indexOf(this.options.decimalSeparator) > 0) {
                if (!this.options.allowDecimals) {
                    this.errorMsg = this.options.regErrorMsg
                        || FR.i18nText("Err-The_value_must_be_integer");
                    return false;
                } else {
                    if (str.length - str.indexOf(this.options.decimalSeparator) > this.options.maxDecLength + 1) {
                        this.errorMsg = this.options.regErrorMsg
                            || FR.i18nText("FR-Base_DecimalNumber_Out");
                        return false;
                    }
                }
            }
            // 不允许为负数
            if (!this.options.allowNegative && !bd.isPositive()) {
                this.errorMsg = this.options.regErrorMsg
                    || FR.i18nText("FR-Report_Invalid_Cell");
                return false;
            }
            if (this.options.minValue != null &&
                bd.lessThan(new FR.BigDecimal({numStr: String(this.options.minValue)}))) {
                this.errorMsg = this.options.regErrorMsg
                    || FR.i18nText("Err-The_number_is_less_than_the_minimum_value")
                    + this.options.minValue;
                return false;
            }
            if (this.options.maxValue != null &&
                bd.greaterThan(new FR.BigDecimal({numStr: String(this.options.maxValue)}))) {
                this.errorMsg = this.options.regErrorMsg
                    || FR.i18nText("Err-The_number_is_larger_than_the_maximum_value")
                    + this.options.maxValue;
                return false;
            }
            return true;
        },

        doResize: function (give) {
            FR.NumberEditor.superclass.doResize.call(this, give);
        }
    });
    $.shortcut("number", FR.NumberEditor);

    /**
     * 双精度数处理函数
     * @param {JSON} config 配置属性
     * @constructor
     */
    FR.BigDecimal = function (config) {
        this.options = $.extend({
            numStr: '',
            decimalSeparator: '.'
        }, config);
        var o = this.options;
        var str = o.numStr;
        // 正数
        this.positive = true;
        // 整数部分
        this.intArray = [];
        // 小数部分
        this.decArray = [];

        //
        if (str.indexOf("e") !== -1 || str.indexOf("E") !== -1) {

        }
        var i = 0;
        var dealPos = true;
        if (str.charAt(0).match(/[-+]/)) {
            this.positive = str.charAt(0) == '+';
            i++;
        }
        for (; i < str.length; i++) {
            var c = str.charAt(i);
            if (c == o.decimalSeparator) {
                dealPos = false;
                continue;
            }
            if (dealPos) {
                this.intArray.push(c);
            } else {
                this.decArray.push(c);
            }
        }
    };
    $.extend(FR.BigDecimal.prototype, {
        isPositive: function () {
            return this.positive;
        },

        equalsTo: function (bigDecimal) {
            return this.compareTo(bigDecimal) === 0;
        },

        greaterThan: function (bigDecimal) {
            return this.compareTo(bigDecimal) === 1;
        },

        lessThan: function (bigDecimal) {
            return this.compareTo(bigDecimal) === -1;
        },

        compareTo: function (bigDecimal) {
            if (bigDecimal == null) {
                return null;
            }
            if (this.isPositive() && !bigDecimal.isPositive()) {
                return 1;
            }
            if (!this.isPositive() && bigDecimal.isPositive()) {
                return -1;
            }
            var res = 0;
            var arr = this.intArray;
            if (arr.length > bigDecimal.intArray.length) {
                res = 1;
            } else if (arr.length < bigDecimal.intArray.length) {
                res = -1;
            } else {
                for (var i = 0; i < arr.length; i++) {
                    if (arr[i] > bigDecimal.intArray[i]) {
                        res = 1;
                        break;
                    } else if (arr[i] < bigDecimal.intArray[i]) {
                        res = -1;
                        break;
                    }
                }
                if (res === 0) {
                    var decArr = this.decArray;
                    var decLen = Math.min(decArr.length, bigDecimal.decArray.length);
                    for (var j = 0; j < decLen; j++) {
                        if (decArr[j] > bigDecimal.decArray[j]) {
                            res = 1;
                            break;
                        } else if (decArr[j] < bigDecimal.decArray[j]) {
                            res = -1;
                            break;
                        }
                    }
                    if (res === 0) {
                        if (decArr[decLen] != null) {
                            for (var k = decLen; k < decArr.length; k++) {
                                if (decArr[k] !== 0) {
                                    res = 1;
                                    break;
                                }
                            }
                        } else if (bigDecimal.decArray[decLen] != null) {
                            for (var m = decLen; m < bigDecimal.decArray.length; m++) {
                                if (bigDecimal.decArray[m] !== 0) {
                                    res = -1;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            return this.isPositive() ? res : -res;
        }
    });
})(jQuery);
(function ($) {

    /**
     * 带额外点击按钮的控件，这是一个抽象类，所有带有下拉按钮的控件的父类。
     * @class FR.TriggerEditor
     * @extends FR.BaseEditor
     * @abstract
     *
     * @cfg {Number} [width=100] 控件的宽度
     * @cfg {Number} [height=22] 控件的高度
     */
    FR.TriggerEditor = FR.extend(FR.EditCompBaseEditor, /**@class FR.TriggerEditor*/{
        /**
         * @protected
         */
        _defaultConfig: function () {
            return $.extend(
                FR.TriggerEditor.superclass._defaultConfig.apply(), {
                    baseCls: "fr-trigger-editor",
                    btn_up: "fr-trigger-btn-up",
                    btn_down: "fr-trigger-btn-down",
                    btn_over: "fr-trigger-btn-over",
                    text_focus: "fr-trigger-text-focus",
                    width: 100,
                    height: 22
                });
        },
        /**
         * @protected
         */
        _init: function () {
            FR.TriggerEditor.superclass._init.apply(this, arguments);
            this.initData();
            this.addContent2Element();
            this.validateCss();
        },

        /**
         * 添加内容
         */
        addContent2Element: function () {
            var o = this.options;
            this.element.addClass(o.baseCls);
            this.triggerTextComp = this.createTextComp();
            //左部－文本编辑框组件
            this._createTextComp();
            //控件尺寸调整
            o.width = (o.width > -1) ? o.width : this.triggerTextComp.width();
            o.height = (o.height > -1) ? o.height : this.triggerTextComp.height();
            //右部－下拉触发按钮组件
            this._createTriggerBtn();
            //下拉触发按钮组件样式
            this.arrow = $('<div/>').addClass('fr-trigger-center');
            this._createStyle4TriggerBtn();
            var bw = $.support.boxModel ? this.btn.outerWidth() : this.btn.width();
            //zack:这边8.0直接显示控件的时候ie678下btn.width()可能会出现
            // 结果为16的情况估计是扣除了边框了小于18的时候强制改成18，因为实际占用的宽度就是18
            this.btnWidth = bw > 18 ? bw : 18 + this.fixbtnWidthValue();
            this.doResize(o);
            //数据加载只在下拉时触发
            if (o.value || o.value === 0) {
                this._dealValueWithEvents(o.value, false);
            }
            //直接显示控件的时候，初始化的时候显示显示值。
            if (o.isEditable) {
                this.dealWithDisplayValue(o.showValue);
            }
            //初始化下拉表容器
            this._initViewContainer();
        },
        createTextComp: function () {
            return $("<div class='fr-trigger-text'></div>")
                .appendTo(this.element);
        },

        /**
         * 获取下拉箭头图标的高度
         * @returns {number}
         */
        getArrowIconHeight: function () {
            return 7;
        },
        /**
         * 生成文本编辑组件
         * @private
         */
        _createTextComp: function () {
            var o = this.options, self = this;
            this.editComp = $("<input type='text'/>").addClass('fr-trigger-texteditor')
                .appendTo(this.triggerTextComp);
            this.editComp.blur(function () {
                self.editComp.removeClass('fr-trigger-texteditor-focus');
                self.triggerTextComp.removeClass(self.options.text_focus);
                self._editCompBlur();
                if (self._canCancelSearch() && !FR.isEmpty(self.searchText) && self.searchCancel !== false) {
                    self.searchCancel = true;
                    self.editComp.val("");
                    self.setValue(self.originalValue, false);
                } else {
                    // 如果焦点离开，同时下拉列表展开了，说明是onTriggerClick，此时不应触发编辑结束事件
                    if (jQuery.isFunction(self.isExpanded) && self.isExpanded()) {
                        return;
                    }
                    // 点击列表的选项会失焦一下，这时不应触发编辑结束事件
                    if (self.editComp && self.editComp[0] == document.activeElement) {
                        return;
                    }
                    self._editCompBlurValidValue();

                    if (!self.options.write) {
                        self.fireEvent(FR.Events.STOPEDIT);
                    }
                }
            }).focus(function () {
                self.editComp.addClass('fr-trigger-texteditor-focus');
                self.triggerTextComp.addClass(self.options.text_focus);
                if (self.originalValue == null) {
                    self.originalValue = self.getValue();
                }
                if (!self.options.write) {
                    self.fireEvent(FR.Events.BEFOREEDIT);
                }
                self._editCompFocus();
            });
            if (o.fontSize) {
                this.editComp.css('font-size', o.fontSize);
            }
            if (o.directEdit !== true) {
                this.editComp.attr('readonly', true);
            }
            if (o.disabled === true) {
                this.editComp.attr("disabled", "disabled");
            }
            this.editComp.__bind__('keydown', this, this._onKeyDown);
        },
        /**
         * 生成下拉触发按钮组件
         * @private
         */
        _createTriggerBtn: function () {
            var self = this;
            var triggerFn = this.onTriggerClick.createDelegate(this);

            this.btn = $("<div/>").addClass(self.options.btn_up)
                .appendTo(this.element);
            var M = {
                onMouSeenter: function (e) {
                    if (!self.options.disabled) {
                        self.btn.switchClass(self.options.btn_over);
                    }
                },
                onMouseLeave: function (e) {
                    if (!self.options.disabled) {
                        self.btn.switchClass(self.options.btn_up);
                    }
                },
                onMouseDown: function (e) {
                    if (!self.options.disabled) {
                        self.btn.switchClass(self.options.btn_down);
                    }
                },
                onMouseUp: function (e) {
                    if (!self.options.disabled) {
                        self.btn.switchClass(self.options.btn_over);
                        triggerFn();
                    }
                }
            };
            this.btn.mouseenter(M.onMouSeenter).mouseleave(M.onMouseLeave)
                .mouseup(M.onMouseUp).mousedown(M.onMouseDown);
        },

        /**
         * 下拉列表是否展开
         * @returns {Boolean} 返回是，则表示展开状态；否则为收起状态
         */
        isExpanded: function () {
            return this.$view && this.$view.is(":visible");
        },

        /**
         * 鼠标下拉框外点击，收起下拉框
         * @param {Object} e 鼠标事件
         */
        collapseIf: function (e) {
            var self = e.data;
            //iframe嵌入的情况下点击滚动条有时候会出现pageX为null的情况
            if (e.pageX == null ||
                ((e.pageX < self.$view.offset().left || e.pageX > self.$view.offset().left + self.$view.width()
                    || e.pageY < self.$view.offset().top || e.pageY > self.$view.offset().top + self.$view.height())
                    && (e.pageX < self.btn.offset().left || e.pageX > self.btn.offset().left + self.btn[0].offsetWidth
                        || e.pageY < self.btn.offset().top || e.pageY > self.btn.offset().top + self.btn[0].offsetHeight))) {
                self.collapse();
            }
        },

        /**
         * 收起下拉列表
         */
        collapse: function () {
            if (!this.isExpanded()) {
                return;
            }
            this.$view.hide();
            $(document).unbind('mousedown', this.collapseIf).unbind('mousewheel', this.collapseIf);
            if (this.options.write && this.options.write.lgp) {
                this.options.write.lgp.$container.unbind('scroll', this.collapseIf);
            }
            // 表单文本框获取焦点会触发编辑前事件 这时候focus有点问题
            // 但是表单中控件的编辑结束事件是通过焦点离开触发的 不聚焦没法触发
            this.editComp.focus();
            this.focusIndex = undefined;
            this.fireEvent(FR.Events.COLLAPSE);
        },

        /**
         * 能否取消搜索
         * @returns {Boolean} 判断是否可以取消搜索
         * @protected
         */
        _canCancelSearch: function () {
            return false;
        },

        /**
         * 编辑框失焦后，判断是否符合规则等执行事件
         * @protected
         */
        _editCompBlurValidValue: function () {
            //Sean: 校验是否符合规则
            this.checkValid();
        },

        /**
         * 编辑框获得焦点后事件，抽象方法
         * @protected
         */
        _editCompFocus: function () {
        },
        /**
         * 文本编辑框失去焦点事件，抽象方法
         * @protected
         */
        _editCompBlur: function () {
        },

        /**
         * 初始化下拉列表容器
         * @private
         */
        _initViewContainer: function () {
            if (!FR.$view_container) {
                FR.$view_container = $("<div class='view-container'/>")
                    .appendTo('body');
            }
        },

        /**
         * 下拉触发按钮样式生成
         * @private
         */
        _createStyle4TriggerBtn: function () {
            //下拉触发按钮组件样式(扁平化)
            this.arrow.appendTo(this.btn);
        },

        setEnable: function (arg) {
            FR.TriggerEditor.superclass.setEnable.apply(this, arguments);
            if (this.editComp) {
                // 如果是填报初始化控件时还没有editComp.
                if (arg === true) {
                    this.editComp.removeAttr("disabled");
                } else if (arg === false) {
                    this.editComp.attr("disabled", "disabled")
                }
            }
        },

        /**
         * 修正popup弹出的位置
         * @protected
         */
        modifyPosition: function () {
            // bug37572 快速编辑切换的时候用文本框的位置取有问题
            // bug51050 移动滚动条的话用this.options.offset就是错的
            var invalid = this.options.offset != null && this.triggerTextComp.offset().top === 0 && this.triggerTextComp.offset().left === 0;
            var eH = Math.max(parseInt(invalid ? this.options.offset.top : this.triggerTextComp.offset().top), 0);
            var eL = Math.max(parseInt(invalid ? this.options.offset.left : this.triggerTextComp.offset().left), 0);
            var wH = parseInt(this.options.height);
            var wL = parseInt(this.options.width);

            var bottomHeight = document.body.clientHeight - eH - wH;
            /*b:判断的依据应该是editcomp上下部的高度对比*/
            if (eH - FR.toolbarHeight < bottomHeight || eH < this.tH) {
                this.$view.css('top', eH + wH + (FR.Browser.r.gecko ? 1 : 0));
                if (bottomHeight < this.tH) {
                    // 下边框高度去掉
                    // this.$view.height(bottomHeight-2);
                    //bug67918发现高度会超出的时候就立即调整高度
                    this.modifyTop(eH);
                }
            } else {
                this.modifyTop(eH);
            }
            if (eL + this.tW > document.body.clientWidth && (eL + wL > this.tW)) {
                this.$view.css('left', eL + wL - this.tW);
            } else {
                this.$view.css('left', eL);
            }
        },

        modifyTop: function (eH) {
            this.$view.css('top', (eH - this.tH > 0) ? eH - this.tH : 0);
        },
        /**
         * 下拉按钮触发事件，抽象方法，具体的控件需要实现此方法以相应按钮的点击事件
         * @abstract
         */
        onTriggerClick: function () {
        },

        /**
         * 仅支持通过class来设置图标
         * @param {String} cls 用于展示图标的css样式表类
         */
        setIcon: function (cls) {
            this.btn.attr("class", cls);
        },

        fixValue: function () {
            return 2;
        },
        fixbtnHeightValue: function () {
            return FR.Browser.isIE8Before() && !$.support.boxModel ? 0 : 2;
            //默认给下拉按钮宽度为1px的边框
        },
        fixbtnWidthValue: function () {
            return FR.Browser.isIE8Before() && !$.support.boxModel ? 0 : 1;
            //默认给下拉按钮宽度为1px的边框
        },
        doResize: function (give) {
            FR.TriggerEditor.superclass.doResize.apply(this, arguments);
            //尺寸兼容性计算
            var triggerTextCompWidth = give.width - this.btnWidth,
                triggerTextCompHeight = give.height,
                editCompWidth = give.width - this.btnWidth,
                editCompHeight = give.height;

            if ($.support.boxModel) {
                triggerTextCompWidth -= this.fixValue();
                triggerTextCompHeight -= this.fixValue();
                editCompWidth -= 8;
                editCompHeight -= 4;
            } else if (FR.Browser.r.ie10Compat || FR.Browser.r.ie9Compat || FR.Browser.r.ie11Compat) {
                //bug:75666 ie10下兼容模式，文档选择标准，fs下拉框异常
                triggerTextCompWidth -= 3;
                triggerTextCompHeight -= this.fixValue();
            } else if (FR.Browser.isIE10()) {
                //ie11下文档选择ie10,fs下的下拉按钮异常
                triggerTextCompWidth -= this.fixValue();
                triggerTextCompHeight -= this.fixValue();
            } else if (FR.Browser.isIE8()) {
                if (!$.support.boxModel) {
                    //bug:78023边框有空隙
                    editCompWidth -= 2;
                } else {
                    //65352 ie8下input框显示不全.
                    editCompWidth -= 3;
                }

            }

            //文本输入框外层容器resize
            this.triggerTextComp.css({
                width: triggerTextCompWidth,
                height: triggerTextCompHeight
            });
            //文本输入框resize
            this.editComp.css({
                width: editCompWidth,
                height: editCompHeight
            });
            if (FR.Browser.isIE()) {
                this.editComp.css("line-height", editCompHeight + "px"); // 后面-1是padding+magin
            }
            //下拉触发按钮resize
            this.btn.css({
                height: give.height - this.fixbtnHeightValue()
            });
            //下拉触发按钮中间层处理
            this.doResize4Triggerbtn(give);
            //设置水印
            if (this.options.watermark) {
                this.removeWaterMark();
                this.setWaterMark();
            }
        },

        doResize4Triggerbtn: function (give) {
            var arrowHeight = this.getArrowIconHeight();
            var marginHeight = (this.btn.height() + this.fixbtnHeightValue() - arrowHeight) / 2;
            this.arrow.css('margin-top', marginHeight)
        },
        /**
         * 开始编辑
         */
        startEditing: function () {
            if (this.triggerTextComp) {
                this.triggerTextComp.show();
            }
            if (this.editComp) {
                this.editComp.focus();
            }
            this.editComp.select();
            //正在编辑只需要隐藏水印，删除编辑的内容后，水印还需显示
            //trigger-texteditor watermark bug REPORT-2911
            // if (this.options.watermark) {
            //     this.removeWaterMark();
            // }
        },

        /**
         * 结束编辑
         */
        stopEditing: function () {
            this.editComp.blur();
            if (this.triggerTextComp) {
                this.triggerTextComp.hide();
            }
            FR.TriggerEditor.superclass.stopEditing.apply(this, arguments);
        }
    });

    /**
     * 基础的日期时间控件
     * @class FR.BaseDateTimeEditor
     * @extends FR.TriggerEditor
     * @abstract
     */
    FR.BaseDateTimeEditor = FR.extend(FR.TriggerEditor, /**@class FR.BaseDateTimeEditor*/{
        /**
         * @private
         */
        _defaultConfig: function () {
            return $.extend(FR.BaseDateTimeEditor.superclass._defaultConfig
                .apply(), {});
        },
        /**
         * @private
         */
        _init: function () {
            FR.BaseDateTimeEditor.superclass._init.apply(this, arguments);
            if (this.options.value) {
                this._dealValueWithEvents(this.options.value, false);
            }
        },

        /**
         * 获取默认支持的显示格式
         * 对于手动输入的,不管设定的是什么格式的,都识别默认这几种,并转化成设定格式
         * @returns {Array} 返回格式
         */
        getDefaultSupportFormat: function () {
            return ["yyyy-MM-dd", "yyyy-MM-d", "yyyy-M-dd", "yyyy-M-d",
                "yyyy/MM/dd", "yyyy/MM/d", "yyyy/M/dd", "yyyy/M/d",
                "yyyy-MM-dd HH:mm:ss", "yyyy-M-d HH:mm:ss",
                "yyyy/MM/dd HH:mm:ss", "yyyy/M/d HH:mm:ss"];
        },

        /**
         * @param {Object} value 新值
         * @private
         */
        _dealValueWithEvents: function (value) {
            // 有的客户会用setValue(null)之类的来置空控件
            // 这个就不校验格式了
            if (FR.isEmpty(value)) {
                this.reset();
                return;
            }
            if (FR.isArray(value)) {
                value = value.toString();
            }
            var dp = value || '';
            var format = this.options.format;
            if (dp.date_milliseconds) {
                dp = new Date(dp.date_milliseconds);
            } else if (typeof value == 'string' && format) {
                //shoc: safari不支持"2013-01-01",也不支持"2013/01"和"2013-01",IE和FF不支持"2013/01"
                //IE9以下版本也不支持"2013-01-01",不支持"2013-01"
                //IE和火狐不支持'2013-01-01 01:01:01',只支持'2013/01/01 01:01:01'
                if (!this.options.customFormat) {
                    dp = FR.matchDateFormat(value, format);
                    if (dp === false) {
                        var arr = this.getDefaultSupportFormat();
                        for (var i = 0; i < arr.length; i++) {
                            var result = FR.matchDateFormat(value, arr[i]);
                            if (result) {
                                dp = result;
                                break;
                            }
                        }
                    }
                }
                else {
                    dp = FR.str2Date(value, format);
                }
            }
            // richer:ff中new Date("")是"Invalid Date"，而在ie中则是"NaN"
            if (dp == "Invalid Date" || dp == "NaN" || dp === false) {
                dp = '';
            } else if (dp instanceof Date) {
                // richer:要把通用的java类型的时间转换为js时间
                dp = FR.date2Str(dp, format);
                this.options.value = dp;
            }

            this.setText(dp);
            this.options.currentDateTime = dp;
            // alex:把老的值保存在this.options.value中,用来判断isDirty
            var oldValue = this.options.value;
            this.options.value = value;
            if (arguments[1] !== false) {
                this.fireEvent(FR.Events.CHANGE, value, oldValue);
            }
        },
        /**
         * 设置起始和结束日期
         * @param {String} s  标识是起始日期还是结束日期
         * @param {String} date 日期
         */
        setStartOrEndDate: function (s, date) {
            if (!date) {
                return;
            }
            if (typeof date == 'string') {
                date = date.replace(/-/g, '/');
            }
            if (!FR.isInvalidDate(new Date(date))) {
                if (s == 'startDate') {
                    this.options.startDate = date;
                    this.std = new Date(date);
                } else if (s == 'endDate') {
                    this.options.endDate = date;
                    this.edd = new Date(date);
                }
            }
        },
        /**
         * 设置起始日期
         * @param {String} sd 起始日期
         */
        setStartDate: function (sd) {
            this.setStartOrEndDate('startDate', sd);
        },
        /**
         * 设置结束日期
         * @param {String} ed 结束日期
         */
        setEndDate: function (ed) {
            this.setStartOrEndDate('endDate', ed);
        },

        setText: function (text) {
            this.editComp.val(text);
        },

        /**
         * 还原到之前的值
         */
        recoveryValue: function () {
            this.editComp.val(this.options.oldValue);
        },

        isValidate: function (cValue) {
            var allowBlank = this.options.allowBlank !== false; // james:默认允许为空
            var format = this.options.format;
            var startDate = this.std;
            var endDate = this.edd;

            var value = cValue != null && cValue != undefined
                ? cValue
                : this.getValue();
            //bug:92130,值无法设成空字符串了
            if (cValue == null && value == null && this.editComp.val()) {
                this.errorMsg = FR.i18nText("FR-Engine-Value_Not_Match");
                return false;
            }
            var regex = this.options.regex;
            // richer:优先判断填写规则
            if (regex) {
                if (typeof regex == 'string') {// String的时候，构造一个RegExp出来
                    regex = new RegExp(regex);
                }
                if (!regex.test(value)) {
                    this.errorMsg = this.options.errorMsg
                        || FR.i18nText("FR-Engine-Error_Input_Value");
                    return false;
                }
            }
            if ((!value) || ($.isArray(value) && value.length === 0)) {// 输入的值为空的时候
                if (allowBlank) {// 如果允许为空，就返回TRUE了
                    return true;
                } else {// 不允许为空，那就检测
                    this.errorMsg = this.options.errorMsg
                        || FR.i18nText("FR-Engine-Not_NULL");
                    return false;
                }
            }
            var dt = this.options.returnDate ? new Date(value) : FR.matchDateFormat(value, format);
            if (format && typeof value == 'string' && !this.options.customFormat) {
                // value可能是string(控件返回string时)，也可能是Date对象，也可能是JSON对象{date_milliseconds:100000}
                // 字符串value有可能是无法构建("201307"在IE)或者构建不正确("201307"在chrome)
                if (!dt) {
                    this.errorMsg = this.options.errorMsg || FR.i18nText("FR-Engine-Error_Input_Value");
                    return false;
                }
            }
            if (startDate && new Date(dt) < new Date(startDate)) {
                this.errorMsg = this.options.errorMsg
                    || FR.i18nText("FR-Engine-Err-The_Number_Is_Less_Than_The_Minimum_Value")
                    + FR.date2Str(startDate, format);
                return false;
            }
            if (endDate && new Date(dt) > new Date(endDate)) {
                this.errorMsg = this.options.errorMsg
                    || FR.i18nText("FR-Engine-Err-The_Number_Is_Larger_Than_The_Maximum_Value")
                    + FR.date2Str(endDate, format);
                return false;
            }
            if (dt > new Date('2999/12/31') || dt < new Date('1900/01/01')) {
                this.errorMsg = "out of range";
                return false;
            }

            return true;
        },

        reset: function () {
            // reset()方法默认是用的setValue("") 这个会先进行校验，
            // 日期控件默认情况都是带有format的，赋空值校验不通过，还是改下比较合适
            this.setText("");
        }
    });

    /**
     * 这是一个抽象类。是下拉表,下拉复选框和下拉树控件的父类。
     * @class FR.BaseComboBoxEditor
     * @extends FR.TriggerEditor
     * @abstract
     * @cfg {String} name4Empty 在允许为空的时候待选列表的第一项的值
     * @cfg {Number} [searchTime=500] 手动输入指定毫秒后开始到服务器去查询符合条件的项
     * @cfg {Boolean} [directEdit=true] 允许直接编辑
     * @cfg {Boolean} [customData=true] 允许自定义值
     */
    FR.BaseComboBoxEditor = FR.extend(FR.TriggerEditor, /**@class FR.BaseComboBoxEditor*/ {

        /**
         * @private
         */
        _defaultConfig: function () {
            return $.extend(
                FR.BaseComboBoxEditor.superclass._defaultConfig.apply(), {
                    name4Empty: FR.i18nText("FR-Engine-Choose_None"),
                    // 手动输入500毫秒后开始到服务器去查询符合条件的项
                    searchTime: 500,
                    //允许直接编辑 能输入
                    directEdit: true,
                    //允许自定义值 值可以不在列表中
                    customData: true
                });
        },
        /**
         * @private
         */
        _init: function () {
            FR.BaseComboBoxEditor.superclass._init.apply(this, arguments);
        },


        initData: function () {
            FR.BaseComboBoxEditor.superclass.initData.apply(this, arguments);
            if (this.options.controlAttr) {
                this.setSource(this.options.controlAttr)
                delete this.options.controlAttr
            }
        },

        /**
         * 设置数据联动源
         * @param source {JSON} 数据联动源
         */
        setSource: function (source) {
            if (source["data"]) {
                var para = this.createDependencePara4Data();
                para.parameter.startIndex = 0;
                para.parameter.limitIndex = this.options.limitData;
                this.options.data.setData(para, source["data"]);
            }
            if (source["value"]) {
                if (this.editComp) {
                    this.setValue(source["value"], false);
                }
            }
            this.shouldReBuildList();
        },

        /**
         * @private
         * @param start 起始数据索引
         * @param limit 结束数据索引
         * @returns {Object} 参数
         */
        allPara: function (start, limit) {
            var para = this.createDependencePara4Data();
            para.parameter.startIndex = start ? start : 0;
            para.parameter.limitIndex = limit ? limit : this.options.limitData;
            if (this.searchText || this.searchText === 0 || this.searchText == '0') {
                para.parameter.dataFilter = this.searchText;
                para.parameter.limitIndex = 0; //模糊搜索的时候加载全部数据,否则超过limit的话全选只能选limit条
            }
            return para;
        },

        /**
         * 获取下拉列表
         * @private
         */
        _getViewList: function () {

        },

        getText: function () {
            return this.editComp.val();
        },
        /**
         * 获取下拉列表内的元素数
         * @returns {*}
         */
        getItemsLength: function () {
            return this.options.data.getLength();
        },

        /**
         * @private
         */
        _onEnterPressed: function () {
            this._selectWithoutTriggerEvent();
            this.fireEvent(FR.Events.AFTEREDIT, this.selectedIndex < this.getItemsLength() ? this._getSelectedItem().text() : '');
        },

        /**
         * 不触发下拉按钮事件而选中一个元素
         * @private
         */
        _selectWithoutTriggerEvent: function () {
            if ((this.getItemsLength() > 0)
                && (this.selectedIndex < this.getItemsLength())) {
                this.setText(this._getSelectedItem().text())
                this.inList = true;
            } else {
                this.clearText();
                this.searchText = "";
                this.options.need2BuildList = true;
            }
            this.checkValid();
            this.collapse();
        },

        /**
         * 从下拉列表中查找数据
         * @param value {String} 要查找的数据
         * @returns {Boolean} 返回是否该数据存在于下拉列表中
         * @private
         */
        _findInList: function (value) {
            this.options.data.resetStatus(this.allPara(0, 0));
            var records = this.options.data.getRecords();
            for (var i = 0, len = records.length; i < len; i++) {
                // shoc:数字和字符串不区分,改成双等,bug30316,真实值显示值都算
                // 不选的时候value为"",注意""==0为true
                if ((value != "" && (records[i].getValue() == value || records[i].getShowValue() == value))
                    || (value == "" && (records[i].getValue() === value || records[i].getShowValue() === value))) {
                    this.inList = true;
                    if (this.$view) {
                        this._setSelectedIndex(i);
                    }
                    return records[i].getShowValue();
                }
            }
            if (this.options.data.options.dataSource) {
                var dataSource = this.options.data.options.dataSource;
                if (dataSource._findShowValue) {
                    var showValue = dataSource._findShowValue(value);
                    if (showValue) {
                        this.inList = true;
                        return showValue;
                    }
                    return false;
                }
            }

            this.inList = false;
            return false;
        },

        setText: function (text) {
            this.editComp.val(text);
        },

        /**
         * 清空文本编辑框
         */
        clearText: function () {
            this.editComp.val("");
        },

        /**
         * 获取选中的元素
         * @returns {*} 返回选中的内容
         * @private
         */
        _getSelectedItem: function () {
            return this.selectedItem;
        },

        /**
         * 获取选中的元素的位置
         * @returns {Number} 返回位置编号，如果没有选中元素则返回-1
         * @private
         */
        _getSelectedIndex: function () {
            return this.selectedIndex != null ? this.selectedIndex : -1;
        },

        /**
         * 获取选中的元素
         * @returns {Number} 返回位置编号，如果没有选中元素则返回-1
         */
        getSelectedIndex: function () {
            return this._getSelectedIndex();
        },

        /**
         * 滚动选中指定位置的下拉列表子项元素
         * @param {Number} idx 位置索引
         * @private
         */
        _setSelectedIndex: function (idx) {
            if (this.selectedItem) {
                this.selectedItem.removeClass('fr-combo-selected');
            }
            this.selectedItem = this.$view.children('.fr-combo-list-item:eq(' + idx + ")");
            this.selectedIndex = idx;
            if (idx >= 0) {
                this.selectedItem.addClass('fr-combo-selected').__scroll2View__(this.$view, false);
            }
        },

        /**
         * 设置当前被选中的一项
         * @param index 位置索引
         */
        setSelectedIndex: function (index) {
            this._setSelectedIndex(index);
            this._onEnterPressed();
        },

        /**
         * 还原到之前的值
         */
        recoveryValue: function () {
            var oldValue = this.options.oldValue;
            if (FR.isArray(oldValue)) {
                if (oldValue.length === 1) {
                    this.editComp.val(oldValue[0]);
                    this.searchText = oldValue[0];
                } else if (oldValue.length === 0) {
                    this.editComp.val('');
                    this.searchText = '';
                }
            } else {
                this.editComp.val(oldValue);
                this.searchText = oldValue;
            }
            this.shouldReBuildList();
        },

        /**
         * 需要重新生成下拉列表
         */
        shouldReBuildList: function () {
            this.options.need2BuildList = true;
        },

        /**
         * 返回加入允许为空一项的下拉列表的总元素个数
         * @returns {number} 返回个数
         */
        considerAllowBlankLength: function () {
            return this.getItemsLength()
                + (this.options.allowBlank === false ? 0 : 1);
        },

        /**
         * 校验是否符合规则
         * @returns {Boolean} 返回是否符合规则
         */
        isValidate: function (cValue) {
            var value = cValue != null ? cValue : this.getValue();
            if (!FR.BaseComboBoxEditor.superclass.isValidate.apply(this, [value])) {
                return false;
            }
            if (!this.options.customData) {
                //下拉控件getValue方法会拿到最终的value,如果这边拿不到(undefined)那就是没有了,不需要去isValueInList了.
                if ((cValue != null && !this.isValueInList(value)) || (cValue == null && value === undefined)) {
                    this.errorMsg = FR.i18nText("FR-Engine-Not_In_List");
                    this.invalidateCss();
                    return false;
                }
            }
            return true;
        },

        isValueInList: function (value) {
            return false;
        },

        validateEmptyValue: function (value) {
            var allowBlank = this.options.allowBlank !== false;
            if (value === undefined) {
                this.errorMsg = FR.i18nText("FR-Engine-Not_In_List")
                return false;
            }
            if (allowBlank) {
                return true;
            } else {
                this.errorMsg = this.options.errorMsg || FR.i18nText("FR-Base_NOT_NULL_Des");
                return false;
            }
        },

        /**
         * 不管是每次取值都从后台读取匹配结果还是从已经加载的数据中匹配，都不是很好
         * todo 弄成this.value存放控件结果值
         * @return {*}
         */
        getValue: function () {
            var dp = this.getText();
            var val = null;
            var records = this.options.data.getLoadedRecords();
            var index = this._getSelectedIndex();
            if (index > -1 && index < records.length) {
                val = this._getValue(records[index], dp, index);
                if (val != null) {
                    return val;
                }
            }
            var dataSource = this.options.data.options.dataSource;
            if (records.length === 0) {
                if (dataSource._findShowValue) {
                    var res = dataSource._findShowValue(dp, false);
                    if (res != null) {
                        val = res;
                        return val;
                    }
                }
            } else {
                for (var i = 0, len = records.length; i < len; i++) {
                    val = this._getValue(records[i], dp, i);
                    if (val != null) {
                        return val;
                    }
                }
            }
            // 到这还没return说明值没在列表中允许 允许自定义值的话就返回显示值了
            //从某一版本开始数据并没有一次加载，而是带有limitindex了。这边如果数据量超过limitindex就会有问题
            if (val == null && dataSource._findShowValue) {
                val = dataSource._findShowValue(dp, false);
            }
            if (val != null) {
                return val;
            }
            if (this.options.customData) {
                return dp;
            }
        },

        /**
         * 根据显示值获取实际值
         * @param records 实际值
         * @param text 显示值
         * @param index 序号
         * @returns {*} 实际值
         * @private
         */
        _getValue: function (records, text, index) {
            var record = records.getShowValue();
            var val;
            if (typeof record == 'string') {
                record = $.trim(record);
            }
            //下拉框选择'不选', 返回的"" == 0
            //text 是从框里getText()出来的字符串, record也转为字符串吧
            if (record === text || record + '' === text || records.getShowValue() === text) {
                val = records.getValue();
                if (this.$view) {
                    this._setSelectedIndex(index);
                }
            }
            return val;
        },

        setValue: function (value) {
            //wei : setValue的时候不提示是否输错，在stopCellEditing的时候再提示。
            if (!this.isValidate(value)) {
                return false;
            }
            if ((value || value === 0) && this.options.watermark) {
                this.clearWaterMark();
            }
            if (arguments[1] != undefined) {
                this._dealValueWithEvents(value, arguments[1]);
            } else {
                this._dealValueWithEvents(value);
            }
        },

        _dealValueWithEvents: function (value) {
            var oldValue = this.options.oldValue;
            // 0 == ""
            if (value === "") {
                this.editComp.val("");
                return;
            }
            var dp = value;
            var find = this._findInList(value);
            if (find !== false) {
                dp = find;
            }
            // 如果是today等计算出的时间传过来，无格式的话Thu Apr 18 00:00:00 CST 2013转化成yyyy-MM-dd
            if (dp && dp.length > 24 && !FR.isInvalidDate(new Date(dp)) && this.options.type !== "datetime") {
                dp = FR.date2Str(new Date(dp), "yyyy-MM-dd");
            }
            this.setText(dp);
            if (arguments[1] !== false) {
                this.fireEvent(FR.Events.CHANGE, value, oldValue);
                // 下拉框没有change，用触发afteredit的方法解决关联控件赋值问题，
                // 但是如果是编辑后事件调用的话就死循环了，这时候加false参数不触发这句
                this.fireEvent(FR.Events.AFTEREDIT);
            }
        },

        reset: function () {
            // 重置,目前主要用于联动时,与当前控件相关的控件值改变时,需要做重置操作
            FR.BaseComboBoxEditor.superclass.reset.apply(this, arguments);
            this.shouldReBuildList();
            delete this.searchText;
            delete this.emptyContent;
            // b:加属性让用户选择联动时是否自动加载并选择第一个值，请加界面设置，默认不选
            if (this.options.linkAutoChoose) {
                this.onTriggerClick();
                this._setSelectedIndex(0);
                this._selectWithoutTriggerEvent();
            }
        }
    });
})(jQuery);
(function ($) {
    /**
     * 多文件上传控件，用于上传文件的控件，支持多文件，格式限制，图片预览，文件大小限制等功能。
     *
     *     @example
     *     var file = new FR.MultiFileEditor({
     *          renderEl : 'body'
     *     });
     *
     * @class FR.MultiFileEditor
     * @extends FR.BaseEditor
     *
     * @cfg {JSON} options 属性配置
     * @cfg {Number} [options.width=120] 宽度
     * @cfg {Number} [options.height=20] 高度
     * @cfg {Boolean} [options.render=true] 是否渲染
     * @cfg {Boolean} [options.showViewImage=true] 编辑完显示预览图片
     */
    FR.MultiFileEditor = FR.extend(FR.BaseEditor, /**@class FR.MultiFileEditor*/{
        /**
         * @returns {*}
         * @private
         */
        _defaultConfig: function () {
            return $.extend(FR.MultiFileEditor.superclass._defaultConfig.apply(), {
                width: 120, // 预览面板的宽度
                height: 20, // 预览面板的高度
                render: true,
                // 编辑完显示预览图片
                showViewImage: true
            });
        },
        /**
         * @private
         */
        _init: function () {
            FR.$defaultImport('/com/fr/web/core/js/noswfupload.js', 'js');
            FR.$defaultImport('/com/fr/web/core/css/widget/noswfupload-icons.css',
                'css');
            FR.MultiFileEditor.superclass._init.apply(this, arguments);
            var o = this.options;
            var self = this;
            this.$uploadForm = $('<form enctype="multipart/form-data"></form>')
                .css('position', 'relative').appendTo(this.element);
            this.divWrap = $("<div></div>").css({
                'width': this.options.width + 'px',
                'height': this.options.height + 'px',
                'position': 'relative',
                'overflow': 'hidden'
            }).appendTo(this.$uploadForm);
            this.$fileupload = $('<input type="file" name="file"/>')
                .addClass('fr-fileupload').appendTo(this.divWrap);
            // be sure input accept multiple files
            if (o.maxlength !== 1) {
                this.$fileupload[0].setAttribute("multiple", "multiple");
            }
            if (o.disabled) {
                this.$fileupload[0].setAttribute("disabled", "disabled");
            }

            // 添加预览面板
            if (o.render === true) {
                var min = Math.min(this.options.height, this.options.width);
                var pImageSize = min > 32 ? 32 : min - 2;
                var pCountSize = min > 32 ? 20 : min * 0.7;
                this.$previewImage = $("<img>").attr("src", FR.servletURL + "?op=resource&resource=/com/fr/web/images/file/upload.gif")
                    .appendTo(this.divWrap).addClass("fr-fileupload-image")
                    .css({
                        left: this.options.width > 32 ?
                            (this.options.width - 32) / 2 : 0,
                        top: this.options.height > 32 ?
                            (this.options.height - 32) / 2 : 0,
                        width: pImageSize,
                        height: pImageSize
                    });

                if (o.tooltipText) {
                    var toolSpan = $("<span/>").addClass("fr-fileupload-tooltipspan");
                    this.tooltipDiv = $("<div/>").css({
                        left: pImageSize + 7 + 'px',
                        height: pImageSize + 'px'
                    }).append(toolSpan.text(o.tooltipText)).addClass("fr-fileupload-tooltip").appendTo(this.$uploadForm);
                }
                this.$preview = this.$previewImage;
                if (self.options.maxlength !== 1) {
                    this.$previewCount = $('<div class="fr-fileupload-preview-count"/>').text(0)
                        .appendTo(this.divWrap).css({
                            left: this.options.width > 32 ?
                                (this.options.width - 32) / 2 + 22 : this.$previewImage.width() - 10,
                            top: this.options.height > 32 ?
                                (this.options.height - 32) / 2 + 8 : 0,
                            width: pCountSize,
                            height: pCountSize,
                            'border-radius': pCountSize,
                            'font-size': pCountSize * 0.6
                        });
                }
            } else {
                this.$preview = this.element;
            }
            if (this.options.write) {
                $('.fr-fileupload', self.element).css({
                    'right': 0,
                    'font-size': self.element.height() < 100
                        ? '100px'
                        : self.element.height() + 'px',
                    'width': this.options.width,
                    'height': this.options.height
                });
            }
            // create the noswfupload.wrap Object
            // wrap.maxSize 文件大小限制
            // wrap.maxlength 文件个数限制
            this.wrap = noswfupload.wrap((this.$fileupload)[0], o.maxSize, o.maxlength,
                this.options.width, this.options.height);
            var wrap = this.wrap;
            // fileType could contain whatever text but filter checks *.{extension}
            // if present

            // handlers
            wrap.onerror = function () {
                noswfupload.text(this.dom.info, "WARNING: Unable to upload "
                    + this.file.fileName);
            };

            wrap.onloadstart = function (rpe, xhr) {
                this.show(0, 0);
                noswfupload.text(this.dom.info, "Preparing for upload ... ");
            };

            wrap.onprogress = function (rpe, xhr) {
                // percent for each bar
                this.show((this.sent + rpe.loaded) * 100 / this.total, rpe.loaded * 100 / rpe.total);

                noswfupload.text(this.dom.info, FR.i18nText("FR-Basic-File_Uping_File") + ":  " + this.file.fileName);

                // fileSize is -1 only if browser does not support file info access
                // this if splits recent browsers from others
                if (this.file.fileSize !== -1) {
                    // simulation property indicates when the progress event is fake
                    if (rpe.simulation) {
                        noswfupload.text(this.dom.info,
                            FR.i18nText("FR-Basic-File_Uping_File") + ":  " + this.file.fileName,
                            FR.i18nText("FR-Basic-File_All_File_Uploaded") + noswfupload.size(this.sent + rpe.loaded));
                    } else {
                        noswfupload.text(this.dom.info,
                            FR.i18nText("FR-Basic-File_Uping_File") + ":  " + this.file.fileName,
                            FR.i18nText("FR-Basic-File_Uploaded_File") + "： " + noswfupload.size(rpe.loaded),
                            FR.i18nText("FR-Basic-File_All_File_Uploaded") + noswfupload.size(this.sent + rpe.loaded));
                    }
                } else {
                    // if fileSIze is -1 browser is using an iframe because it does
                    // not support
                    // files sent via Ajax (XMLHttpRequest)
                    // We can still show some information
                    noswfupload.text(this.dom.info,
                        "Uploading: " + this.file.fileName,
                        "Sent: " + (this.sent / 100) + " out of " + (this.total / 100));
                }
            };

            // generated if there is something wrong during upload
            wrap.onerror = function () {
                // just inform the user something was wrong
                noswfupload.text(this.dom.info, "WARNING: Unable to upload "
                    + this.file.fileName);
            };

            // generated when every file has been sent (one or more, it does not
            // matter)
            wrap.onload = function (rpe, xhr) {
                var self_ = this;
                // just show everything is fine ...
                noswfupload.text(this.dom.info, "Upload complete");

                // ... and after a second reset the component
                setTimeout(function () {
                    self_.clean(); // remove files from list
                    self_.hide(); // hide progress bars and enable input file

                    noswfupload.text(self_.dom.info, "");
                    self.fireEvent(FR.Events.AFTEREDIT);
                    // enable again the submit button/element
                }, 1000);
                self.showViewList();

                var attach = self.wrap.attach_array[0];

                self.fireEvent(FR.Events.CALLBACK, attach);
                // fileListWrap.parent().css("overflow", "auto");
            };
            wrap.url = this.options.url ? this.options.url : FR.servletURL + '?op=fr_attach&cmd=ah_upload';
            wrap.url += this.options.sessionID ? '&sessionID=' + this.options.sessionID : '';
            //传到不同的服务器上, 会导致httpsession相互覆盖, 处理起来更麻烦了
            wrap.url += ((window.FS && window.FS.serverID) ? '&serverID=' + window.FS.serverID : "");
            wrap.fileType = o.accept;   //文件类型限制
            wrap.attach_array = [];
            wrap.attach_names = [];
            wrap.attachNum = 0;
            this._dealValueWithEvents(o.value);
        },

        /**
         * @param {JSON} attach 文件对象
         * @private
         */
        _dealValueWithEvents: function (attach) {
            if (FR.equals(attach, this.wrap.attach_array)
                || (this.wrap.attach_array.length === 1 && FR.equals(
                    this.wrap.attach_array[0], attach))) {
                return;
            }
            if (($.isArray(attach) && attach.length > 0 && attach[0].attach_id)
                || (attach && attach.attach_id)) {
                var attach_array = $.isArray(attach) ? attach : [attach];
                this.wrap.attach_array = [];
                for (var i = 0; i < attach_array.length; i++) {
                    // 编辑前setValue4Write(),不能让oldvalue跟getValue是同一个对象
                    this.wrap.attach_array.push(attach_array[i]);
                    var obj = {};
                    this.wrap.files.push(obj);
                }
                this.showViewList();
                this.wrap.files.length = 0;
            }
            // 按delete或者backspace时候
            if (attach == '') {
                this.reset();
            }
        },

        /**
         * 生成上传文件列表
         * @param {JSON} attach 上传的文件信息对象
         * @param {Number} i 位置索引
         * @returns {jQuery} 返回生成的列表DOM
         */
        createListItem: function (attach, i) {
            var self = this;
            var download = $("<li></li>");
            var cancelButton;
            download
                .append(cancelButton = ($("<a class='fr-fileupload-progressCancel' href='#'> </a>"))
                    .click(function (e) {
                        self.removeAttach(attach, download);
                        e.stopEvent();
                    }).hide())
                .append($("<span class='fr-fileupload-fileNameItem'>"
                    + self.wrap.attach_names[i] + " "
                    + FR.__fileSizeFormat__(attach.fileSize) + "</span>")
                    .bind("click", function () {
                        var attach_id = attach.attach_id;
                        window.open(FR.servletURL
                            + "?op=fr_attach&cmd=ah_download&id="
                            + attach_id);
                    })
                    .mouseover(function () {
                        $(this).css({color: 'blue'})
                    })
                    .mouseout(function () {
                        $(this).css({color: ''})
                    })).addClass("fr-fileupload-listitem").mouseover(
                function () {
                    cancelButton.show();
                    $(this).css({'background-color': '#9FC5F8'})
                }).mouseout(function () {
                cancelButton.hide();
                $(this).css({'background-color': ''})
            });
            self.wrap.attachNum++;
            if (self.wrap.maxlength !== 1) {
                self.$previewCount.text(self.wrap.attachNum);
            }

            return download;
        },

        /**
         * 显示文件列表
         */
        showViewList: function () {
            var self = this;
            var fileListDiv;
            var fileListWrap;
            if (!self.options.hideFileList) {
                var fileListUl = $("ul", self.element);
                if (fileListUl.length === 0) {
                    var contentDiv = $("<div class='fr-fileupload-popview'/>").appendTo(self.element).css({
                        marginTop: 18 - self.options.height / 2,
                        marginLeft: self.options.width / 2 + 18
                    });
                    fileListDiv = $("<div class='fr-fileupload-popview-list'/>").appendTo(contentDiv);
                    fileListWrap = $("<ul/>").addClass("fr-fileupload-list").appendTo(fileListDiv);
                } else {
                    fileListDiv = fileListUl.parent();
                    fileListWrap = fileListUl;
                }
            }
            var wrap = self.wrap;
            this.imageURL = null;
            if (self.options.maxlength === 1) {
                var o = this.options;
                var attach = wrap.attach_array[0];
                this.removeBackground();

                if (attach.attach_type == 'image') {
                    self.$tempPreview =
                        $("<td></td>")
                            .appendTo(this.divWrap).css({
                            left: self.element.outerWidth(true) - self.element.width(),
                            width: o.width,
                            height: o.height,
                            top: 0,
                            position: 'absolute'
                        });
                    FR.lastTarget = self.$tempPreview;
                    var $target = $(self.$tempPreview);
                    $target.css("background", "");
                    var im_url = FR.servletURL + '?op=fr_attach&cmd=ah_image&id='
                        + attach.attach_id;
                    $target.css('background', 'url(' + im_url + ") 0 0 no-repeat transparent");
                    this.imageURL = im_url;
                    $target.css("cursor", "default").unbind("click", download)
                }
                wrap.attach_names[0] = attach.filename;
                if (fileListWrap) {
                    fileListWrap.children().remove();
                    fileListWrap.append(this.createListItem(attach, 0));
                }
            }
            // 多文件时要处理重名的问题
            if (self.options.maxlength !== 1) {
                for (var i = wrap.attach_array.length - 1, m = 0; m < wrap.files.length; i--, m++) {
                    wrap.attach_names[i] = wrap.attach_array[i].filename;
                    var dup = 0;
                    for (var j = 0; j < wrap.attach_array.length - wrap.files.length; j++) {
                        if (wrap.attach_names[i] === wrap.attach_array[j].filename) {
                            dup++;
                        }
                    }
                    if (dup > 0) {
                        wrap.attach_names[i] = FR.lengthenFileName(wrap.attach_array[i].filename, "(" + dup + ")");
                    }
                    fileListWrap && fileListWrap.append(this.createListItem(wrap.attach_array[i], i));
                }
            }
            // ie杂项不支持max-height属性
            if (FR.Browser.isIE() && fileListDiv) {
                if (fileListDiv.height() > 160) {
                    fileListDiv.height(160);
                    if (fileListWrap.width() + 18 > fileListDiv.width()) {
                        fileListDiv.width(fileListWrap.width() + 18);
                    }
                }
            }

            function download(e) {
                window.open(FR.servletURL + "?op=fr_attach&cmd=ah_download&id="
                    + e.data);
                e.stopPropagation();
            }
        },

        /**
         * 移除已上传的文件
         * @param {JSON} attach 上传的文件对象
         * @param {jQuery} download 文件显示所在的DOM对象
         */
        removeAttach: function (attach, download) {
            var attach_id = attach.attach_id;
            var self = this;
            var wrap = this.wrap;
            FR.ajax({
                url: FR.servletURL + "?op=fr_attach&cmd=ah_release",
                data: {
                    id: attach_id
                },
                complete: function (res, status) {
                    if (status == 'success') {
                        if (download) {
                            download.remove();
                        }
                        self.imageURL = null;
                        for (var n = 0; n < wrap.attach_array.length; n++) {
                            if (wrap.attach_array[n].attach_id == attach_id) {
                                if (self.wrap.maxlength !== 1) {
                                    wrap.attachNum--;
                                    self.$previewCount.text(self.wrap.attachNum);
                                    if (wrap.attachNum === 0) {
                                        $(".fr-fileupload-popview", self.element).remove();
                                    }
                                }
                                wrap.attach_array.removeWeakEqual(wrap.attach_array[n]);
                                break;
                            }
                        }
                        if (self.wrap.maxlength === 1) {
                            $(".fr-fileupload-popview", self.element).remove();
                            self.removeBackground();
                        }
                        self.fireEvent(FR.Events.CALLBACK);
                    }
                }
            })
        },

        /**
         * 重置背景图片
         * 格子的高度可能发生了改变 要调整
         * @param u
         */
        resetBackground: function (u) {
            var url = u || this.imageURL;
            this.removeBackground();
            if (this.options.tdCell) {
                this.options.tdCell.css('background', 'url(' + url
                    + "&height=" + this.options.tdCell.height() + ") 0 0 no-repeat transparent");
            }
        },

        /**
         * 特指移除单文件上传中添加图片后的背景
         */
        removeBackground: function () {
            // 这个background是指单文件添加了图片的情况
            // 有两处需要移除 一个原始报表结构的td中 一个是动态生成的x-editor中
            // 还有可能用在表单啊
            if (this.options.tdCell) {
                this.options.tdCell.css('background-image', '');
            }
            var previousAtt = this.divWrap.children().eq(2);
            previousAtt.css('background-image', '');
            previousAtt.remove();
        },


        startEditing: function () {
            if (this.options.tdCell) {
                $('.attach-download-div,.fr-fileupload-download-all', $(this.options.tdCell)).hide();
            }
            this.$preview.show();
            // richer:文件的enable需要单独处理
            if (this.options.disabled) {
                this.$preview.unbind("click");
            }
            // IE杂项模式 x-editor的高度总是比文件控件高一些 导致浅蓝色边框超出
            // 没搞懂为什么变大 索性去掉这个控件编辑的浅蓝框子
            if (FR.Browser.isIE() && !$.support.boxModel && this.options.write) {
                $(".x-editor").addClass('none-border');
            }
        },

        stopEditing: function () {
            if (this.options.tdCell) {
                var cur = $('.attach-download-div,.fr-fileupload-download-all', $(this.options.tdCell));
                cur.show();
            }
            if (FR.Browser.isIE() && !$.support.boxModel && this.options.write) {
                $(".x-editor").removeClass('none-border');
            }
            if (this.imageURL != null) {
                var self = this;
                setTimeout(function () {
                    self.resetBackground();
                }, 200);
            }
        },

        getValue: function () {
            if (!this.wrap.attach_array) {
                //return [];
                // shoc: 返回空数组有个问题,提交入库的时候空文件控件值到后台变成"[]"始终会入库一条记录，
                // 后台拦截了null、""等情况，在那里判断拦截这个不太合适，还是改这里了
                return "";
            }
            if (this.options.maxlength === 1 && this.wrap.attach_array[0]
                && this.wrap.attach_array[0].attach_type == "image") {
                return this.wrap.attach_array[0];
            }
            return this.wrap.attach_array.length === 0 ? "" : this.wrap.attach_array;
        },

        setEnable: function (enable) {
            FR.MultiFileEditor.superclass.setEnable.apply(this, arguments);
            if (this.$fileupload && this.$fileupload[0]) {
                if (enable) {
                    this.$fileupload[0].removeAttribute("disabled");
                } else {
                    this.$fileupload[0].setAttribute("disabled", "disabled");
                }
            }
        },

        /**
         * 是否显示预览图片
         * @returns {Boolean} 返回是否显示预览图片
         */
        isShowViewImage: function () {
            return this.options.showViewImage && this.options.maxlength === 1;
        },

        reset: function () {
            this.wrap.attach_array = [];
            this.wrap.attach_names = [];
            this.wrap.attachNum = 0;
            if (this.options.tdCell) {
                $('.attach-download-div', $(this.options.tdCell)).remove();
            }
            $('.fr-fileupload-popview', this.element).remove();
            this.removeBackground();
        }
    });
    $.shortcut("multifile", FR.MultiFileEditor);
})(jQuery);
(function ($) {
    /**
     * 多标签容器。在多sheet报表中被使用到，如果需要使用代码控制sheet的跳转、展现等可以使用次类的方法。
     * @class FR.TabPane
     * @extends FR.Widget
     *
     * @cfg {JSON} options 配置属性
     * @cfg {String} [options.background='rgb(255, 255, 255)] 背景配置,颜色图片等
     * @cfg {Number} [options.width='100%'] 容器宽度
     * @cfg {Number} [options.height='100%'] 容器高度
     * @cfg {Number} [options.active=0] 当前活跃的tab索引
     * @cfg {'top'/'bottom'} [options.tabPosition='top'] tab控制器所在的位置，可以是底部或者顶部
     * @cfg {Number} [options.tabHeight=22] tab控制器的高度
     * @cfg {Boolean} [options.noControl=false] 是否不需要tab控制器
     * @cfg {Boolean} [options.defaultActiveIndex=0] 初始化完成后默认激活的tab索引
     * @cfg {Array} options.items tab容器的子组件
     */
    FR.TabPane = FR.extend(FR.Widget, /**@class FR.TabPane*/{

        _defaultConfig: function () {
            return $.extend(FR.TabPane.superclass._defaultConfig.apply(), {
                baseCls: "fr-tabpane",
                width: "100%",
                height: "100%",
                active: 0,
                tabPosition: "top", //tab所在位置，上｜下
                tabHeight: 22,
                noControl: false,  //是否不需要tab控制按钮
                items: [],
                defaultActiveIndex: 0 //初始化后默认被激活的tab的位置索引
            });
        },

        _init: function () {
            FR.TabPane.superclass._init.apply(this, arguments);
            var opts = this.options;
            this.element.css({
                width: opts.width,
                height: opts.height
            });
            //生成配置信息
            var borderLayoutConfig = this._createConfig4TabPaneConfig();
            //整体布局
            var borderLayout = new FR.BorderLayout(borderLayoutConfig);
            borderLayout.doLayout();
            //生成所有的tab标签
            this.wrapWidth = 0; //记录所有标签总宽度
            this._initTabs();
            //选中默认tab
            if (this.tabBtns[opts.defaultActiveIndex]) {
                this.tabBtns[opts.defaultActiveIndex].setSelected();
            }
            this.isMoving = false;
            this.activeTabIndex = opts.defaultActiveIndex; //当前被激活tab的位置索引
            var self = this;
            this.tabsContent.parent().addClass(opts.baseCls + '-tabscontent-bg');
            $(window).resize(
                function () {
                    self.fireEvent(FR.Events.SCROLLCHANGE, self, self.activeTabIndex);
                }
            );
        },

        /**
         * 生成tabPane控件整体布局的配置信息
         * @private
         * @returns {*} 返回配置信息
         */
        _createConfig4TabPaneConfig: function () {
            var opts = this.options;
            var tabPos = opts.tabPosition;
            var contentCls = opts.baseCls + '-content';
            //tab内容层－tabPaneContent
            this.tabPaneContent = $('<div></div>').addClass(contentCls).addClass(contentCls + '-' + tabPos);
            //tab标签层－配置信息
            var tabControlConfig = this._createConfig4TabControl();
            var borderLayoutConfig = {
                renderEl: this.element,
                items: [
                    {
                        region: "center",
                        el: this.tabPaneContent
                    },
                    {
                        height: opts.tabHeight,
                        region: tabPos == 'top' ? 'north' : 'south',
                        el: tabControlConfig
                    }
                ]
            };
            return borderLayoutConfig;
        },

        /**
         * 生成标签和控制按钮的配置信息
         * @returns {JSON} 返回配置信息
         * @private
         */
        _createConfig4TabControl: function () {
            var self = this, opts = this.options;
            this.tabsContent = $('<div/>').addClass(opts.baseCls + '-tabscontent')
                .addClass(opts.baseCls + '-tabscontent-' + opts.tabPosition);
            var items = [
                {
                    region: "center",
                    el: $('<div/>').append(this.tabsContent)
                }
            ];
            //不需要tab控制按钮就不生成
            if (!this.options.noControl) {
                items.unshift({
                    region: "west",
                    el: {
                        type: 'horizontal',
                        widgetName: 'controlbuttons',
                        baseCls: 'fr-tabpane-controlbuttons',
                        alignment: 'center',
                        hgap: 3,
                        vgap: 2,
                        items: [
                            {
                                el: this._createTabControlBtn('arrow1', function () {
                                    if(self.isMoving){
                                        return;
                                    }
                                    self._moveViewToPos('start'); //移动到第一个tab
                                }),
                                width: 13
                            },
                            {
                                el: this._createTabControlBtn('arrow2', function () {
                                    if(self.isMoving){
                                        return;
                                    }
                                    var distance = self.stepDis;
                                    var realDis = self.tabsContent.offset().left - self.tabsWrap.offset().left;
                                    distance = Math.min(distance,realDis);
                                    self._moveViewToPos(distance);
                                }),
                                width: 13
                            },
                            {
                                el: this._createTabControlBtn('arrow3', function () {
                                    if(self.isMoving){
                                        return;
                                    }
                                    var distance = self.stepDis;
                                    var realDis = self.tabsWrap.offset().left + self.wrapWidth
                                        - self.tabsContent.offset().left - self.tabsContent.width();
                                    distance = Math.min(distance,realDis);
                                    distance = distance < 0?0:distance;
                                    self._moveViewToPos(- distance);
                                }),
                                width: 13
                            },
                            {
                                el: this._createTabControlBtn('arrow4', function () {
                                    if(self.isMoving){
                                        return;
                                    }
                                    self._moveViewToPos('end'); //移动到最后一个tab
                                }),
                                width: 13
                            }
                        ]
                    },
                    width: 72
                });
            }
            var tabControlConfig = {
                type: "border",
                items: items
            };
            return tabControlConfig;
        },

        /**
         * 生成tab控制按钮
         * @param {String} name 样式类名
         * @param {Function} handler 点击事件
         * @returns {jQuery} 返回按钮的DOM对象
         * @private
         */
        _createTabControlBtn: function (name, handler) {
            var iconbtn = new FR.IconButton({
                type: "iconbutton",
                baseClass: 'fr-edit-sheetcontrol-icon-box',
                handler: handler
            });
            $('<div>').addClass('fr-edit-sheetcontrol-icon-' + name).appendTo(iconbtn.element);
            return iconbtn.element;
        },

        /**
         * 初始化所有的tab
         * @private
         */
        _initTabs: function () {
            var opts = this.options;
            this.tabBtns = [];
            //用来装载所有的tab标签并用于平移
            this.tabsWrap = $('<ul/>').addClass(opts.baseCls + '-tabswrap').appendTo(this.tabsContent);
            if (!opts.items) {
                return;
            }
            if (!opts.tabs) {
                opts.tabs = [];
            }
            for (var i = 0; i < opts.items.length; i++) {
                this._addTabContent(opts.items[i]);
                this._addTabTag(i, opts.items[i]);
            }
        },

        /**
         * 添加一个tab的内容
         * @param {jQuery} item tab对象
         * @private
         */
        _addTabContent: function (item) {
            var tabs = this.options.tabs;
            if (item.tabContent) {
                var widget = FR.createWidget(item.tabContent);
                widget.element.appendTo(this.tabPaneContent);
                item.content = widget.element;
            } else {
                var content = $('<div/>').addClass("html-content").appendTo(this.tabPaneContent);
                content.css('background',this.options.background);
                item.content = content;
            }
            item.content.hide();
            tabs.push(item);
        },

        /**
         * 添加一个tab的标签
         * @param {Number} index 位置索引
         * @param {jQuery} item tab对象
         * @private
         */
        _addTabTag: function (index, item) {
            var self = this, items = this.options.items;
            //生成一个tab标签
            var config = {
                tabPane: this,
                name: item.title,
                index: index,
                isFirst: index === 0,
                isLast: index === items.length - 1,
                renderEl: $('<li/>').appendTo(this.tabsWrap),
                tabBtns: this.tabBtns,
                handler: function () {
                    if (self.activeTabIndex >= 0) {
                        self.options.tabs[self.activeTabIndex].content.hide();
                    }
                    self.activeTabIndex = index;
                    if (self.options.tabs[index].content) {
                        self.options.tabs[index].content.show();
                    }
                    self.showSheetContent(self.activeTabIndex);
                    self._moveViewToShow(self.activeTabIndex);
                }
            };
            var sheetBtn = new FR.SheetButton(config);
            this.tabBtns.push(sheetBtn);
            this.wrapWidth += sheetBtn.getWidth();
            this.stepDis = this.wrapWidth/this.tabBtns.length; //取平均数作为固定移动步长
        },

        /**
         * 使指定位置的tab移动到可完整显示
         * @param {Number} tabIndex tab的位置索引
         * @private
         */
        _moveViewToShow: function (tabIndex) {
            var tabObj = this.tabBtns[tabIndex].element; //当前选中DOM
            var view = this.tabsWrap;  //滑动主体DOM
            var bounds = this.tabsContent; //外边界DOM
            var boundsLeft = bounds.offset().left;
            var boundsRight = boundsLeft + bounds.width();
            var viewLeft = view.offset().left;
            var viewRight = viewLeft + this.wrapWidth;
            var tabLeft = tabObj.offset().left;
            var tabRight = tabLeft + tabObj.width();
            var dis = tabObj.width(); //理应移动的距离
            var realDis = 0; //实际可移动的距离
            if (tabLeft < boundsLeft) {
                //左出界,右移 +
                realDis = boundsLeft - viewLeft;
                realDis = Math.min(realDis, dis);
            } else if (tabRight > boundsRight) {
                //右出界,左移 -
                realDis = boundsRight - viewRight;
                realDis = Math.max(realDis, -dis);
            } else {
                return;
            }
            this._moveViewToPos(realDis);
        },

        /**
         * 所有tab移动一段距离或移动到某个位置
         * @param {Number/String/'start'/'end'} distance 距离,'start'表示移动到第一个tab标签,'end'表示移动到最后一个tab标签
         * @private
         */
        _moveViewToPos: function (distance) {
            var self = this;
            this.isMoving = true;
            if (distance == 'start') {
                //表示回到原点
                this.tabsWrap.animate({
                    'left': '0'
                }, 'fast', function(){
                    self.isMoving = false;
                });
            } else if (distance == 'end') {
                var pos = this.tabsContent.width() - this.wrapWidth;
                if(pos > 0){
                    pos = 0;
                }
                this.tabsWrap.animate({
                    'left': pos
                }, 'fast', function(){
                    self.isMoving = false;
                });
            }
            else {
                this.tabsWrap.animate({
                    'left': '+=' + distance
                }, 'fast', function(){
                    self.isMoving = false;
                });
            }
        },
        /**
         * 显示指定位置索引的sheet内容
         * @param {Number} position 位置索引
         */
        showSheetContent: function (position) {
            this.fireEvent(FR.Events.TABCHANGESTART, this, position);
            this.fireEvent(FR.Events.TABCHANGE, this, position);
            this.fireEvent(FR.Events.SCROLLCHANGE, this, position);
        },

        doResize: function (give) {
            this.element.css({
                width: give.width,
                height: give.height
            });
        },

        /**
         * 选中指定位置索引的Tab，并显示Tab内容
         * @param {Number} index 位置索引
         * @return {Boolean} 返回选择是否成功
         */
        selectTabAt: function(index){
            if(index >= 0){
                this.tabBtns[index].setSelected();
                return true;
            }
            return false;
        },
        /**
         * 选中指定Tab标签，并显示Tab内容
         * @return {Boolean} 返回选择是否成功
         */
        selectTabByName: function (sheetName) {
            var self = this;
            if (sheetName) {
                $.each(this.options.tabs, function (idx, item) {
                    if (item.title === sheetName) {
                        self.tabBtns[idx].setSelected();
                    }
                });
                return true;
            }
            return false;
        },

        /**
         * 获取指定位置索引的Tab的内容
         * @param {Number} index 要获取的tab的索引
         * @return {JSON} 返回Tab对象，其content属性表示Tab内容的DOM对象
         */
        getTabByIndex: function(index){
            if(index >=0){
                return this.options.tabs[index];
            }
            return {};
        },

        /**
         * 获取指定Tab标签名的Tab内容
         * @param {String} name Tab标签名
         * @return {JSON} 返回第一个与所给标签名匹配的Tab对象
         */
        getTabByName: function(name){
            if(!FR.isEmpty(name)){
                for(var i = 0;i< this.tabBtns.length;i++){
                    if(this.tabBtns[i].options.name === name){
                        return this.options.tabs[i];
                    }
                }
            }
            return {};
        },

        /**
         * 切换到指定Tab标签名的Tab
         * @param {String} name Tab标签名
         * @return {Boolean} 返回选择是否成功
         */
        switchTabByName: function(name) {
            if(FR.isEmpty(name)){
                return false;
            }

            for(var i = 0; i< this.tabBtns.length; i++) {
                if(this.tabBtns[i].options.name === name) {
                    return this.selectTabAt(i);
                }
            }

            return false;
        },

        /**
         * 获取当前所选中的tab的位置索引
         * @returns {Number} 返回位置索引
         */
        getSelectedIndex: function(){
            return this.activeTabIndex;
        }

    });
    $.shortcut("tabpane", FR.TabPane);

    /**
     * Tab按钮
     * @class FR.SheetButton
     * @extends FR.Widget
     * @private
     */
    FR.SheetButton = FR.extend(FR.Widget, /**@class FR.SheetButton*/{

        _defaultConfig: function () {
            return $.extend(FR.SheetButton.superclass._defaultConfig.apply(), {
                tabPane: null, //传递进来的FR.TabPane对象
                tabBtns: [],  //传递进来的tabBtns属性
                isFirst: false,  //是否是第一个标签
                isLast: false,  //是否是最后一个标签
                index: 0, //标签位置索引
                minWidth: 60, //最小宽度
                handler: null,
                disabled: false,
                name: '',
                containerCls4btn: "fr-sheetbutton-container",
                intersectCls4btn: "fr-sheetbutton-intersect",
                firstPartCls4btn: "fr-sheetbutton-firstpart",
                middlePartCls4btn: "fr-sheetbutton-middlepart",
                thirdPartCls4btn: "fr-sheetbutton-thirdpart",
                endPartCls4btn: "fr-sheetbutton-endpart",
                button_class_prefix: "fr-sheet-icon-",
                button_closebtn_class: "fr-sheetbutton-closebutton"
            });
        },

        _init: function () {
            FR.SheetButton.superclass._init.apply(this, arguments);
            var o = this.options, self = this;
            var tabPos = o.tabPane.options.tabPosition;
            if (tabPos == 'top') {
                o.firstPartCls4btn += '-' + tabPos;
                o.middlePartCls4btn += '-' + tabPos;
                o.thirdPartCls4btn += '-' + tabPos;
                o.endPartCls4btn += '-' + tabPos;
            }
            this.element.addClass(o.containerCls4btn).attr("title", o.name);
            this._createTabBtnByName(o.name);
            //点击事件
            if ($.isFunction(o.handler)) {
                this.on(FR.Events.CLICK, o.handler.createDelegate(o.scope || this));
            }
            this.element.click(function () {
                if (self.isEnabled()) {
                    self.setSelected();
                }
            });
            this.width = this.element.width();
            this.fireEvent(FR.Events.AFTERINIT);
        },

        /**
         * 生成标签按钮
         * @param {String} name tab标签的文字内容
         * @private
         */
        _createTabBtnByName: function (name) {
            var o = this.options;
            var li = this.element;
            if (this.options.isFirst) {
                li.head = $('<span/>').addClass(o.firstPartCls4btn).appendTo(li); //首
            }
            li.middle = $('<span/>').addClass(o.middlePartCls4btn).text(name).appendTo(li); //中部－文字
            //设置文字部分最小宽度
            if(li.middle.width() < o.minWidth){
                li.middle.width(o.minWidth);
            }
            if (!o.isLast) {
                li.end = $('<span/>').addClass(o.thirdPartCls4btn).appendTo(li);  //尾－交叉,非最后tab
            } else {
                li.end = $('<span/>').addClass(o.endPartCls4btn).appendTo(li); //尾－最后一个tab
            }
        },

        /**
         * 获取当前sheet总宽度
         * @returns {Number} 返回当前sheet总宽度
         */
        getWidth: function(){
            return this.width;
        },
        /**
         * 选中当前tab
         */
        setSelected: function () {
            var o = this.options;
            if (this.isActive()) {
                return;
            }
            this.setActiveState(true);
            var activeIndex = o.tabPane.activeTabIndex;
            if (activeIndex >= 0 && activeIndex !== o.index) {
                o.tabBtns[activeIndex].setActiveState(false);
            }
            this.fireEvent(FR.Events.CLICK);
        },

        /**
         * 设置该tab的激活状态
         * @param {Boolean} state 是否激活
         */
        setActiveState: function (state) {
            var o = this.options;
            this.isActiveState = state;
            if (state) {
                this.element.addClass(o.containerCls4btn + "-active");
                if (!o.isFirst) {
                    o.tabBtns[o.index - 1].element.addClass(o.intersectCls4btn);
                }
            } else {
                this.element.removeClass(o.containerCls4btn + "-active");
                if (!o.isFirst) {
                    o.tabBtns[o.index - 1].element.removeClass(o.intersectCls4btn);
                }
            }
        },


        /**
         * 设置该tab的校验状态
         * @param {Boolean} isValid 是否符合校验规则
         */
        setValidState: function(isValid){
            var $dom = this.element, opts = this.options;
            var curIdx = opts.index;
            if(!isValid){
                if(opts.isFirst){
                    $dom.head.switchClass(opts.firstPartCls4btn + '-invalidate');
                }else{
                    var pre = opts.tabPane.tabBtns[curIdx - 1];
                    if(pre.isValid()){
                        pre.element.end.switchClass(opts.thirdPartCls4btn + '-invalidate-style3');
                    }else{
                        pre.element.end.switchClass(opts.thirdPartCls4btn + '-invalidate-style2');
                    }
                }
                $dom.middle.switchClass(opts.middlePartCls4btn + '-invalidate');
                if(opts.isLast){
                    $dom.end.switchClass(opts.endPartCls4btn + '-invalidate');
                }else{
                    if(opts.tabPane.tabBtns[curIdx + 1].isValid()){
                        $dom.end.switchClass(opts.thirdPartCls4btn + '-invalidate');
                    }else if(opts.tabPane.tabBtns[curIdx - 1].isValid()){
                        $dom.end.switchClass(opts.thirdPartCls4btn + '-invalidate-style2');
                    }
                }
            }else{
                if(opts.isFirst){
                    $dom.head.switchClass(opts.firstPartCls4btn);
                }else{
                    var pre = opts.tabPane.tabBtns[curIdx - 1];
                    if(pre.isValid()){
                        pre.element.end.switchClass(opts.thirdPartCls4btn);
                    }else{
                        pre.element.end.switchClass(opts.thirdPartCls4btn + '-invalidate');
                    }
                }
                $dom.middle.switchClass(opts.middlePartCls4btn);
                if(opts.isLast){
                    $dom.end.switchClass(opts.endPartCls4btn);
                }else{
                    if(opts.tabPane.tabBtns[curIdx + 1].isValid()){
                        $dom.end.switchClass(opts.thirdPartCls4btn);
                    }else{
                        $dom.end.switchClass(opts.thirdPartCls4btn + '-invalidate-style3');
                    }
                }
            }
            this.isValidState = isValid;
        },

        /**
         * 判断该tab是否符合校验
         * @returns {Boolean} 返回当前tab是否符合校验
         */
        isValid: function(){
            return this.isValidState !== false;
        },

        /**
         * 判断该tab是否为激活状态
         * @returns {Boolean} 返回当前tab是否为激活状态
         */
        isActive: function () {
            return this.isActiveState === true;
        },

        destroy: function () {
            this.element.empty();
        }
    });
    $.shortcut("sheetbutton", FR.SheetButton);
})(jQuery);
;(function ($) {
    /**
     * 报表块组件，是组成表单的一种组件
     * @class FR.Elementcase
     * @extends FR.BaseEditor
     */
    FR.Elementcase = FR.extend(FR.BaseEditor, {
        _init: function () {
            FR.Elementcase.superclass._init.apply(this, arguments);
            this.$toolbar = $("<div class='x-toolbar' style='height:28px'></div>");
            this.$inner = $("<div class='reportContent'></div>");
            //frozen hidden, else auto
            this.$inner.css('overflow', 'auto');
            /**
             * @property {Number} 总页数
             */
            this.totalPage = -1;
            /**
             * @property {Number} 当前页索引
             */
            this.currentPage = 1;

            this.toolBars = [];
            var self = this;

            this.initPane();
            this.gotoPage(1);
            this._init4Style();
        },
        /**
         * 初始化报表块样式，包括背景，边框，圆角
         * @private
         */
        _init4Style: function () {
            this._init4Margin();
        },

        /**
         * 初始化报表块的内边距，背景和边框需要根据内边距进行调整
         * @private
         */
        _init4Margin: function () {
            // 考虑显示工具栏
            var report = $('.reportContent', this.element);
            if (!report) {
                return;
            }
            var border = this.options.border;
            if (border) {
                report.css('border-style', border.type);
                report.css('border-color', border.color);
                report.css('border-width', border.width);
                report.css('border-radius', border.borderRadius);
                this.borderWidth = (this.borderWidth || 0) + parseInt(border.width * 2);
            }
            if (this.options.marginTop) {
                report.css('marginTop', this.options.marginTop);
                this.marginHeight = (this.marginHeight || 0) + parseInt(this.options.marginTop);
            }
            if (this.options.marginLeft) {
                report.css('marginLeft', this.options.marginLeft);
                this.marginWidth = (this.marginWidth || 0) + parseInt(this.options.marginLeft);
            }
            if (this.options.marginBottom) {
                report.css('marginBottom', this.options.marginBottom);
                this.marginHeight = (this.marginHeight || 0) + parseInt(this.options.marginBottom);
            }
            if (this.options.marginRight) {
                report.css('marginRight', this.options.marginRight);
                this.marginWidth = (this.marginWidth || 0) + parseInt(this.options.marginRight);
            }

            //初始化背景
            if (!this.options.widgetBackground) {
                return;
            }
            var alpha = this.options.widgetOpacity;
            if (!alpha) {
                FR.setBackground(this.element, this.options.widgetBackground, report.height());
                FR.setBackground(report, this.options.widgetBackground, report.height());

                return;
            }
            this.$background = $("<div class='widgetBackground'></div>");
            //IE
            this.$background.css('filter', 'alpha(opacity=' + alpha * 100 + ')');
            //Chrome ff
            this.$background.css('opacity', alpha);
            FR.setBackground(this.$background, this.options.widgetBackground, report.height());

        },
        encodePara: function (para) {
            if (!para) {
                return '';
            }

            //不确定过来的是一个json对象还是一个字符串, 因为可以被自定义调用
            if (typeof para === 'string') {
                para = FR.jsonDecode(para);
            }
            $.each(para, function (pName, pValue) {
                if (typeof pValue === 'string') {
                    //如果参数写出abc"efg, 转化为abc\"efg;
                    para[pName] = encodeURIComponent(FR.cjkDecode(pValue.replaceAll('"', '\\"')));
                }
            });

            return para;
        },
        /**
         * 跳转到指定页（可以用于刷新当前报表块）
         * @param {Number} pn 要跳转的页，从1开始
         * @param {JSON} para 跳转页面是携带的参数
         * @param {Boolean} noCache 不使用缓存，强制取新的数据
         */
        gotoPage: function (pn, para, noCache, noEncode, reload, hideLoading) {
            var self = this;
            FR.ajax({
                url: FR.servletURL,
                type: 'POST',
                data: {
                    op: 'fr_form',
                    cmd: 'load_report_content',
                    sessionID: this.options.form.sessionID,
                    widgetName: encodeURIComponent(this.options.widgetName),
                    __parameters__: noEncode ? para : FR.encodePara(para),
                    noCache: noCache || '',
                    pageIndex: pn,
                    _: new Date().getTime(),
                    __boxModel__: $.support.boxModel,
                    reload: reload,
                    _PAPERWIDTH: FR.windowWidth,
                    _PAPERHEIGHT: FR.windowHeight,
                    _SHOWPARA: $('.parameter-container-collapseimg-down').length === 0,
                    _SHOWPARATEMPLATE: $('[widgetName=paramsTemplate]').length !== 0

                },
                beforeSend: function () {
                    FR.HtmlLoader.loadingEffect({
                        el: self.$inner,
                        show: hideLoading ? false : true,
                        fixed: false
                    });
                },
                async: true,
                complete: function (res, status) {
                    if (status == 'success') {
                        var items = FR.jsonDecode(res.responseText);

                        if (items.length === 0) {
                            self.$inner.html(res.responseText);
                            return;
                        }
                        self.totalPage = items['totalPage'] ? items['totalPage'] : 1;
                        if (self.toolBars.length > 0) {
                            self.changeToolBarState();
                        }
                        //kerry:直接用self.$inner[0].innerHTML会把$inner里面的内容都清空,ie低版本下$inner里面会有背景标签
                        //todo 先改回去，REPORT-4294 ie8兼容问题需要再考虑下怎么处理
                        self.$inner[0].innerHTML = items['htmlTag'];
                        //kerry:自定义滚动插件
                        if (FR.Report.Plugin.ScrollProcessor.item && FR.Plugin.validLevel(FR.Report.Plugin.ScrollProcessor, FR.Report.Plugin.ScrollProcessor.item)) {
                            if ($(".frozen-page").length > 0) {
                                FR.Report.Plugin.ScrollProcessor.item.action.call(this, $('.frozen-north', self.$inner), "y");
                                FR.Report.Plugin.ScrollProcessor.item.action.call(this, $('.frozen-center', self.$inner), "both");
                                FR.Report.Plugin.ScrollProcessor.item.action.call(this, $('.frozen-west', self.$inner), "x");
                            }
                        }
                        //neil: 图表
                        self.$inner.asComponent({
                            type: "fr_form",
                            selector: 'td[widget],div[widget][heavytd=\'light\']'
                        });
                        self.currentPage = pn;
                        self.changeColWidth();
                        self.changeHeight();
                        //边框丢了
                        $('.x-table', self.$inner).css('overflow', 'visible');
                        var overflow = $(".frozen-page", self.$inner).length > 0 ? 'hidden' : 'auto';
                        if (FR.Report.Plugin.ScrollProcessor.item && FR.Plugin.validLevel(FR.Report.Plugin.ScrollProcessor, FR.Report.Plugin.ScrollProcessor.item) && overflow === 'auto') {
                            overflow = "hidden";
                            var pageContentDiv = $(".pageContentDIV", self.$inner);
                            FR.Report.Plugin.ScrollProcessor.item.action.call(this, pageContentDiv, "both");
                            pageContentDiv.css("position", "absolute");
                        }

                        var animateProcessor = FR.Report.Plugin.AnimateProcessor;
                        if (animateProcessor.item && FR.Plugin.validLevel(animateProcessor, animateProcessor.item)) {
                            animateProcessor.item.action.call(self, self.$inner);
                        }
                        FR.HtmlLoader.loadingEffect({
                            el: self.$inner,
                            show: false,
                            overflow: overflow
                        });
                        //xiaxiang:添加背景，如果在complete之前把$background prependTO到$inner上,会被self.$inner.html()清空
                        //kerry:背景div添加到$inner父层上,不然因为$inner设置了margin，$inner的宽高小于背景层,会出现滚动条
                        if (self.$background) {
                            self.$background.prependTo(self.element);
                        }
                    }
                }
            });
        },

        gotoFirstPage: function (para, noCache, noEncode) {
            if (this.currentPage > 1) {
                this.gotoPage(1, para, noCache, noEncode);
                this.currentPage = 1;
            }
        },

        gotoPreviousPage: function (para, noCache, noEncode) {
            if (this.currentPage - 1 > 0) {
                this.gotoPage(this.currentPage - 1, para, noCache, noEncode);
                this.currentPage--;
            }
        },

        gotoNextPage: function (para, noCache, noEncode) {
            if (this.currentPage + 1 <= this.totalPage) {
                this.gotoPage(this.currentPage + 1, para, noCache, noEncode);
                this.currentPage++;
            }
        },

        gotoLastPage: function (para, noCache, noEncode) {
            if (this.currentPage < this.totalPage) {
                this.gotoPage(this.totalPage, para, noCache, noEncode);
                this.currentPage = this.totalPage;
            }
        },

        /**
         * 是否启用了自适应属性,仅在表单预览时有效
         * @returns 启动了自适应属性则返回true,否则返回false
         */
        isFit: function () {
            var form = this.options.form;
            return form.options && form.options.__FIT__;
        },

        getFitState: function () {
            var form = this.options.form;
            return form.options.__FITSTATE__;
        },

        changeHeight: function () {
            var $frozenPage = $(".frozen-page", this.$inner);
            if ($frozenPage.length > 0) {
                var $pageblock = $('.page-block', this.$inner);
                var $west = $('.frozen-west', $frozenPage);
                var $north = $('.frozen-north', $frozenPage);
                var $center = $('.frozen-center', $frozenPage);
                var toolBarHeight = FR.toolbarHeight * this.toolBars.length;
                // 报表块内边距为正文div，背景为报表块区域的
                var pageHeight = this.options.height - toolBarHeight - (this.marginHeight || 0) - (this.borderWidth || 0);
                var cornerNorthHeight = 0;
                $('.rows-height-counter', $north).each(function () {
                    cornerNorthHeight += $(this).height();
                });
                $center.height(pageHeight - cornerNorthHeight);
                $west.height(pageHeight - cornerNorthHeight);
                $pageblock.height(pageHeight + 'px');

                $center.scroll(function () {
                    $north.scrollLeft($center.scrollLeft());
                    $west.scrollTop($center.scrollTop());
                }.createDelegate(this));
            }

            if (this.$background) {
                this.$background.css('height', this.options.height);
                this.$background.css('margin-bottom', -this.options.height);
            }
        },
        changeColWidth: function () {
            var $frozenPage = $(".frozen-page", this.$inner);
            var $pageblock = $('.page-block', this.$inner);
            if ($frozenPage.length > 0) {
                this.doForzen($frozenPage, $pageblock);
            } else {
                var widgetName = this.options.widgetName;
                var array = $('.' + widgetName + 'col');
                var table = $('.' + widgetName + 'table');
                //如果Table高度比控件大, 说明会出现纵向滚动条, 因此要-20
                var width = table.height() > this.options.height ? this.options.width - 20 : this.options.width - 2;
                var config = {
                    array: array,
                    table: table,
                    width: width - (this.marginWidth || 0) - (this.borderWidth || 0)
                }
                if (!this.isFit()) {
                    this.changeTableW(config);
                }
                $pageblock.width(table.width());
            }

            if (this.$background) {
                this.$background.css('width', this.options.width);
            }
        },
        doForzen: function ($frozenPage, $pageblock) {
            //屏蔽掉自身的滚动条, 用冻结div的
            this.$inner.css('overflow', 'hidden');

            var oldTotal = $frozenPage.width();
            var $corner = $('.frozen-corner', $frozenPage);
            var $west = $('.frozen-west', $frozenPage);
            var $north = $('.frozen-north', $frozenPage);
            var $center = $('.frozen-center', $frozenPage);

            var allTable = {
                cornerTable: $('.x-table', $corner),
                westTable: $('.x-table', $west),
                northTable: $('.x-table', $north),
                centerTable: $('.x-table', $center)
            }

            if (!this.isFit()) {
                this.changeFrozenTable(allTable, oldTotal);
            }
            var westTableWidth = allTable.westTable.width();
            var pageWidth = this.options.width - (this.marginWidth || 0) - (this.borderWidth || 0);
            var newWidth = pageWidth - westTableWidth;
            westTableWidth = parseInt(westTableWidth) + "px";
            newWidth = parseInt(newWidth) + "px";
            $corner.width(westTableWidth);
            $west.width(westTableWidth);
            $center.width(newWidth);
            $north.width(newWidth);
            $pageblock.width(pageWidth);
        },
        changeFrozenTable: function (allTable, oldTotal) {
            var cornerTable = allTable.cornerTable;
            var westTable = allTable.westTable;
            var northTable = allTable.northTable;
            var centerTable = allTable.centerTable;
            //只算一边, 另一边再算会出现误差, 直接减出来
            var leftWidth = (westTable.width() / oldTotal) * this.options.width;
            var scrollWidth = 20;
            var rightWidth = this.options.width - leftWidth - scrollWidth - (this.marginWidth || 0) - (this.borderWidth || 0);

            var cornerCols = $('col', cornerTable);
            var westCols = $('col', westTable);
            var northCols = $('col', northTable);
            var centerCols = $('col', centerTable);
            var startColumn = this.getCornerStartColumn(centerCols, northCols);

            var cornerConfig = {
                array: cornerCols,
                table: cornerTable,
                width: leftWidth,
                start: 0
            }

            var westConfig = {
                array: westCols,
                table: westTable,
                width: leftWidth,
                start: 0
            }

            var northConfig = {
                array: northCols,
                table: northTable,
                width: rightWidth,
                start: startColumn
            }

            var centerConfig = {
                array: centerCols,
                table: centerTable,
                width: rightWidth,
                start: startColumn
            }

            this.changeTableW(cornerConfig);
            this.changeTableW(westConfig);
            this.changeTableW(northConfig);
            this.changeTableW(centerConfig);
        },
        getCornerStartColumn: function (centerCols, northCols) {
            if (centerCols.length > 0) {
                //取第一列的col值, 因为前面可能有隐藏列,取length不准
                return parseInt($(centerCols[0]).attr('col'));
            }

            return Math.max(centerCols.length, northCols.length);
        },
        changeTableW: function (config) {
            var array = config.array;
            var table = config.table;
            var totalWidth = config.width;

            if (array.length === 0 || table.length === 0) {
                return;
            }

            var widths = this.getMinWidths(array);
            var min_width = 0;
            for (var i = 0; i < widths.length; i++) {
                min_width += widths[i];
            }
            if (min_width > totalWidth) {
                totalWidth = min_width
            }
            var currentWidths = this.getCurrentWidths(array);
            var currentTotalWidth = 0;
            for (var i = 0; i < currentWidths.length; i++) {
                currentTotalWidth += currentWidths[i];
            }
            var newWidths = this.calculatorNewWidths(widths, currentWidths, totalWidth, currentTotalWidth)
            for (var i = 0; i < array.length; i++) {
                var currentCol = $(array[i]);
                var newWidth = newWidths[i];
                currentCol[0].style.width = newWidth + "px";
                var col = parseInt(currentCol.attr("col"))
                this.calCellFrozenTableWidth(col, config.start, table, newWidth - 5);
            }
            table[0].style.width = totalWidth + "px"

        },


        calculatorNewWidths: function (widths, currentWidths, totalWidth, currentTotalWidth) {
            var res = [];
            var allWidths = totalWidth;
            while (true) {
                var scale = totalWidth / currentTotalWidth;
                var hasOver = false;
                for (var i = 0; i < widths.length; i++) {
                    if (res[i] === undefined) {
                        var r = parseInt(scale * currentWidths[i])
                        if (r <= widths[i]) {
                            res[i] = widths[i];
                            totalWidth -= res[i];
                            currentTotalWidth -= res[i];
                            hasOver = true;
                        }
                    }
                }
                if (!hasOver) {
                    for (var i = 0; i < widths.length; i++) {
                        if (res[i] === undefined) {
                            var r = parseInt(scale * currentWidths[i])
                            res[i] = r;
                        }
                    }
                    break;
                }
            }
            var v = 0;
            for (var i = 0; i < widths.length; i++) {
                v += res[i];
            }
            res[res.length - 1] = res[res.length - 1] + allWidths - v;
            return res;
        },

        getCurrentWidths: function (array) {
            var widths = [];
            for (var i = 0; i < array.length; i++) {
                widths[i] = parseInt($(array[i]).attr("c-w"));
            }
            return widths;
        },

        getMinWidths: function (array) {
            var widths = [];
            for (var i = 0; i < array.length; i++) {
                widths[i] = parseInt($(array[i]).css('min-width'));
            }
            return widths;
        },

        calCellFrozenTableWidth: function (col, start, table, newWidth) {
            //冻结的话, 需要把每一列的冻结格子的table都拉宽, 不然居中居左无效.
            if (parseInt(start) >= 0) {
                var colClsName = 'table.col' + col;
                var tdClsName = "td.col" + col;
                var $currentCellFrozenTable = $(colClsName, table);
                var $currentCellFrozenTd = $(tdClsName, table);
                var w = newWidth + "px";
                //日他大爷的JQuery Width慢成猪
                for (var i = 0, len = $currentCellFrozenTable.length; i < len; i++) {
                    $currentCellFrozenTable[i].style.width = w
                }

                for (var i = 0, len = $currentCellFrozenTd.length; i < len; i++) {
                    $currentCellFrozenTd[i].style.width = w
                }
            }
        },

        changeToolBarState: function () {
            var self = this;
            $.each(this.toolBars, function (idx, toolbar) {
                self.pageButtonAfterLoadEvent(toolbar.getWidgetByName("First"),
                    Boolean(self.currentPage > 1));
                self.pageButtonAfterLoadEvent(toolbar.getWidgetByName("Previous"),
                    Boolean(self.currentPage > 1));
                self.pageButtonAfterLoadEvent(toolbar.getWidgetByName("Next"),
                    Boolean(self.currentPage < self.totalPage));
                self.pageButtonAfterLoadEvent(toolbar.getWidgetByName("Last"),
                    Boolean(self.currentPage < self.totalPage));
                self.pagenaviAfterLoadEvent(toolbar.getWidgetByName("PageNavi"))
                self.otherButtonAfterLoadEvent(toolbar.getWidgetByName("ExcelO"));
                self.otherButtonAfterLoadEvent(toolbar.getWidgetByName("ExcelP"));
                self.otherButtonAfterLoadEvent(toolbar.getWidgetByName("Export"));
                var customToolBarButtons = toolbar.getWidgetsByName("CustomToolBarButton");
                for (var i = 0; i < customToolBarButtons.length; i++) {
                    self.otherButtonAfterLoadEvent(customToolBarButtons[i]);
                }
            });
        },

        pageButtonAfterLoadEvent: function (widget, sign) {
            if (widget) {
                widget.setEnable(sign);
            }
        },

        pagenaviAfterLoadEvent: function (widget) {
            if (widget) {
                var self = this;
                var inputField = widget.getWidgetByName("PageNumberEditor");
                inputField.editComp.attr('disabled', false);
                inputField.editComp.parent().parent().css('position', 'relative');
                inputField.setValue(self.currentPage);
                var numberLabel = widget.getWidgetByName("PageNumberLabel");
                if (self.totalPage > 0) {
                    numberLabel.setValue('/' + self.totalPage);
                } else {
                    numberLabel.setValue('/');
                }
            }
        },

        otherButtonAfterLoadEvent: function (widget) {
            if (widget) {
                widget.setEnable(true);
            }
        },

        initPane: function () {
            var self = this;
            var items = [];
            var toolBars = self.options.toolBars;
            if (toolBars.length > 0) {
                $.each(toolBars, function (idx, conf) {
                    var toolbarSettings = $.extend(conf.toolbarConf, {disabled: false});
                    //将当前elementcase的控件名加到每个button的option中，方便监听事件获取到当前elementcase
                    $.each(toolbarSettings.items, function (idx, toolbarItems) {
                        toolbarItems.ECWidgetName = self.options.widgetName;
                        if (toolbarItems.widgetName === 'PageNavi') {
                            toolbarItems.innerWidget.items[0].el.ECWidgetName = self.options.widgetName;
                            toolbarItems.innerWidget.items[1].el.ECWidgetName = self.options.widgetName;
                        }
                        if (toolbarItems.widgetName === 'Export') {
                            for (var i = 0; i < toolbarItems.menu.length; i++) {
                                var menu = toolbarItems.menu[i];
                                menu.ECWidgetName = self.options.widgetName;
                                for (var j = 0; j < menu.submenu.length; j++) {
                                    menu.submenu[j].ECWidgetName = self.options.widgetName;
                                }

                            }
                        }
                    });
                    var toolbar = FR.createWidget($.extend({
                        type: "toolbar"
                    }, toolbarSettings));
                    if (conf.position == 'north') {
                        toolbar.element.addClass("fs-tab-content-top-toolbar");
                    }
                    items.push({region: conf.position, el: toolbar.element});
                    self.toolBars.push(toolbar);
                });

            }

            items.push({
                region: 'center',
                el: self.$inner
            });

            var borderLayout = new FR.BorderLayout({
                items: items,
                renderEl: self.element
            });
            borderLayout.doLayout();

            $(window).resize(function () {
                borderLayout.doLayout();
            });
        },

        doResize: function (give) {
            if (!FR.Browser.isIE8Before() && this.options.border) {
                this.element.parent().css('box-shadow', this.options.border.borderStyle);
            }
            if(give.width && give.width != this.options.width){
                this.options.width = give.width;
                this.changeColWidth();
            }
            if(give.height && give.height != this.options.height){
                this.options.height = give.height;
                this.changeHeight();
            }
        },

        /**
         * 整体缩放contentDiv
         * @param $contentDiv
         * @param zoom
         */
        zoomContent: function ($contentDiv, zoom) {
            if (this.$inner) {
                if (FR.Browser.r.gecko) {
                    $contentDiv.css('-moz-transform', 'scale(' + zoom.x + ',' + zoom.y + ')');
                    $contentDiv.css('-moz-transform-origin', 'top left');
                } else if (FR.Browser.r.webkit) {
                    $contentDiv.css('-webkit-transform', 'scale(' + zoom.x + ',' + zoom.y + ')');
                    $contentDiv.css('-webkit-transform-origin', 'top left');
                } else if (FR.Browser.r.opera) {
                    $contentDiv.css('-o-transform', 'scale(' + zoom.x + ',' + zoom.y + ')');
                    $contentDiv.css('-o-transform-origin', 'top left');
                } else {
                    $contentDiv.css('zoom', zoom.x);
                }
            }
        },

        reload: function () {
            if (this.isFit()) {
                this.gotoPage(this.currentPage, {}, false, false, true);
            }
        },

        exportReportToExcel: function (extype) {
            if (this.fireEvent(FR.Events.BTOEXCEL) === false) {
                return;
            }
            var fitPara = '&_PAPERWIDTH=' + FR.windowWidth + '&_PAPERHEIGHT=' + FR.windowHeight + '&_SHOWPARA=' + ($('.parameter-container-collapseimg-down').length === 0)
                + '&_SHOWPARATEMPLATE=' + ($('[widgetName=paramsTemplate]').length !== 0);

            // 两次 encodeURIComponent，防止中文乱码
            var url = FR.servletURL + "?op=ec_export&sessionID=" + this.options.form.sessionID + "&widgetName="
                + encodeURIComponent(encodeURIComponent(this.options.widgetName)) + "&format=excel&extype=" + extype + fitPara;
            this.downloadExportFile(url, "excel");
            this.fireEvent(FR.Events.ATOEXCEL);
        },

        /**
         * 文件下载
         * @param url 下载地址
         */
        downloadExportFile: function (url, type) {
            //新导出方式插件
            if (FR.Report.Plugin.XHR2FileSaveProcessor.item && FR.Plugin.validLevel(FR.Report.Plugin.XHR2FileSaveProcessor, FR.Report.Plugin.XHR2FileSaveProcessor.item)) {
                FR.Report.Plugin.XHR2FileSaveProcessor.item.action.call(this, url, type);
                return;
            }
            if (FR.Browser.r.gecko) {
                //火狐下使用window.location会导致gif卡住，使用表单提交下载
                var form = $("<form>");
                form.attr({"style": "display : none", "target": "", "method": "post", "action": url});
                var input = $("<input>");
                $("body").append(form);
                form.append(input);
                form.submit();
                form.remove();
            } else {
                window.location = url;
            }
            FR.progressBar.call(this, this.currentSessionID, type);
        }
    });
    $.shortcut("elementcase", FR.Elementcase);

})(jQuery);
/*
 * Copyright (c) 2001-2014,FineReport Inc, All Rights Reserved.
 */

;
(function ($) {
    /**
     * 下拉框控件
     *
     *     @example
     *     var $el = $('<div>').css({position : 'absolute', top : 5, left : 40}).appendTo('body');
     *     var editor = new FR.ComboBoxEditor({
     *           renderEl : $el,
     *           directEdit : true,        //是否允许直接编辑
     *           allowBlank : false,      //是否允许为空
     *           widgetUrl : null,         //支持模糊搜索,异步取数请求url
     *           fontSize : 14,             //显示的字体大小
     *           width : 120,
     *           height : 24,
     *           maxCount : 3,            //一页显示的记录数
     *           sonHeight : 24,           //子项元素高度
     *           items : [            //本地取数方式,优先于widgetUrl
     *                 {text : "一一", value : "aa"},
     *                 {text : "二二", value : "bb"},
     *                 {text : "三三", value : "cc"},
     *                 {text : "四四", value : "dd"}
     *          ]
     *     });
     *
     * @class FR.ComboBoxEditor
     * @extends FR.BaseComboBoxEditor
     *
     * @cfg {JSON} options 属性配置
     * @cfg {Number} [options.maxCount=10] 一页显示的记录个数
     * @cfg {Number} [options.sonHeight=18] 下拉框单项高度
     * @cfg {Object} [options.value=''] 默认值
     * @cfg {Number} [options.limitData=500] 单次加载的数据量
     * @cfg {Boolean} [options.autoFixWidth=true] 自动调整列表宽度
     * @cfg {Boolean} [options.allowBlank=true] 允许为空
     * @cfg {Number} options.fontSize 字体大小
     * @cfg {String} options.widgetUrl 下拉列表数据
     * @cfg {Number} options.width 控件宽度
     * @cfg {Number} options.height 控件高度
     * @cfg {Array} options.items 下拉列表数据，这一项优先于widgetUrl
     */
    FR.ComboBoxEditor = FR.extend(FR.BaseComboBoxEditor, /**@class FR.ComboBoxEditor*/{
        /**
         * @private
         */
        _defaultConfig: function () {
            return $.extend(FR.ComboBoxEditor.superclass._defaultConfig.apply(), {
                name4Empty: FR.i18nText("FR-Basic_Choose_None"),
                maxCount: 10,
                sonHeight: 18,
                value: '',
                limitData: 500,
                autoFixWidth: true

            });
        },

        /**
         * @private
         */
        _init: function () {
            FR.ComboBoxEditor.superclass._init.apply(this, arguments);
            this._dealSearch();
            var o = this.options;
            //滚动条宽度
            this.scrollBarWidth = 20;
            /*每个Combo对应在一个div -> $view*/
            if (!this.$view) {
                this.$view = $('<div/>').height(20).appendTo(FR.$view_container);
            }
            this.$view.hide();
            this.shouldReBuildList();
            if (this.options.data && this.options.data.isLocalSource()) {
                if (this.options.dependence) {
                    this.options.data.resetStatus(this.allPara.apply(this, arguments));
                }
                var data = this.options.data.getRecords();
                this._setItems(data);
                this.checkViewScroll(data);
                this.options.need2BuildList = false;
                this.options.need2FixWidth = true;
            }
            FR.applyStyles(this.editComp, o.style);
        },

        /**
         * 绑定模糊搜索功能
         * @private
         */
        _dealSearch: function () {
            var self = this, o = this.options;
            if (this.options.widgetUrl) {
                this.options.searchData = new FR.AjaxSearchData({
                    url: this.options.widgetUrl
                });
                this.editComp.keyup(function (event) {
                    // 不允许直接编辑
                    if (!self.options.directEdit) {
                        return;
                    }
                    /* 如果在0.5秒内焦点离开了 文本框没有了 这时候取editComp的offset进行位置校正就不对了*/
                    /* 如果在0.5秒内焦点离开并且不能自定义值 不太好处理 设置状态位 self.searchCancel*/
                    if (self.options.offset == undefined) {
                        self.options.offset = {'left': self.editComp.offset().left, 'top': self.editComp.offset().top};
                    }

                    /* richer:需要可直接编辑的时候才提供快速定位*/
                    if (!FR.isNavKeyPress(event)) {
                        setTimeout(function () {
                            if (self.searchText == self.editComp.val()
                                && event.keyCode != FR.keyCode.BACKSPACE) {
                                if (!self.isExpanded()) {
                                    self.expand();
                                }
                                return;
                            }
                            /* 下拉复选框改用真实值来getValue的话 需要判断是不是手输的值*/
                            self.edited = true;
                            if (self.searchCancel !== true) {
                                self.searchText = self.editComp.val();
                                self._doBeforeSearch();
                                /* ajaxSearch中加载数据可能要好久 如果在中间切到其他控件了就可能出问题*/
                                /* editComp.blur中用inList==fasle 如果是undefined不操作 等待数据加载完再校验输入值是否在list中*/
                                self.inList = false;
                                self._ajaxSearch();
                                self.fireEvent(FR.Events.AFTEREDIT);
                                self.searchCancel = false;
                            } else {
                                self.searchCancel = undefined;
                            }
                        }, o.searchTime);
                    }
                });
            }
        },

        /**
         * 模糊搜索，生成的下拉列表
         * @private
         */
        _ajaxSearch: _.debounce(function () {
            this.embellishView();
            this.$view.empty();
            this.$view.height(30);
            FR.HtmlLoader.loadingMoreData({
                el: this.$view,
                show: true
            });
            this.modifyPosition();
            this.$view.show();
            var para = this.allPara.apply(this, arguments);
            this.options.searchData.resetStatus(para);
            var self = this;
            var searchTimes = self.lastAjaxSearchTimes ? (self.lastAjaxSearchTimes + 1) : 1;
            self.lastAjaxSearchTimes = searchTimes;
            this.options.searchData.loadObject(function (data) {
                if (searchTimes < self.lastAjaxSearchTimes) {
                    return;
                }
                self.options.data.setData(para, data);
                self.checkViewScroll(self.options.data.getData());
                self._setItems(self.options.data.getData());
                FR.HtmlLoader.loadingMoreData({
                    el: self.$view
                });
                self.$view.hide();
                self.options.need2BuildList = false;
                self._createVieList();
                self.__makeSureInputValueInResList();
                if (self.options.data.getData().length > 0) {
                    self.setFocusWithIndex(0);
                }
            });
        }, 600),
        /**
         * @returns {boolean}
         * @private
         */
        _canCancelSearch: function () {
            return true;
        },

        __makeSureInputValueInResList: function () {
            var self = this;
            var viewList = self._getViewList();
            if (viewList.length !== 0) {
                if (self.searchText == "") {
                    self.inList = undefined;
                } else {
                    for (var i = 0; i < viewList.length; i++) {
                        if (viewList.eq(i).text() == self.searchText) {
                            self.inList = true;
                            break;
                        }
                        self.inList = false;
                    }
                }
            } else {
                //wei : 说明这时候输入的内容不是下拉列表中的内容。
                self.inList = false;
            }
            if (self.inList === false && !self.options.customData) {
                this.errorMsg = FR.i18nText("FR-Basic_Not_In_List");
                this.invalidateCss();
            } else {
                this.validateCss();
            }
        },

        /**
         * 校验添加的值是否在复选下拉框列表中
         * @param value 多个值时以字符转返回时：字符串"前标识符A,B,C后标识符"；以数组返回时：数组对象
         * @returns boolean 添加的值是否在列表中
         */
        isValueInList: function (value) {
            if (FR.isEmpty(value.toString())) {
                return true;//如果是""说明是空值这边就不做校验了.
            }
            //数组
            if (this.options.returnArray === true) {
                for (var i = 0; i < value.length; i++) {
                    if (!this._checkValueInResList(value[i])) {
                        return false;
                    }
                }
                return true;
            }
            //字符串
            else if (this.options.returnArray === false) {
                //移除前后标识符
                value = value.substring(this.options.startSymbol.length, value.length - this.options.endSymbol.length);
                //多选框多个值校验
                if (value.indexOf(this.options.delimiter) !== -1) {
                    var values = value.split(this.options.delimiter);
                    for (var i = 0; i < values.length; i++) {
                        if (!this._checkValueInResList(values[i])) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            return this._checkValueInResList(value);
        },

        /**
         * 检验输入值是否存在于下拉列表中
         * @private
         */
        _checkValueInResList: function (value) {
            var txt = value || this.editComp.val();
            var dataSource = this.options.data.options.dataSource;
            if (dataSource._findShowValue) {
                var res = dataSource._findShowValue(txt, false);
                this.inList = res != null;
            } else {
                var viewList = this._getViewList();
                this.inList = false;
                if (viewList.length !== 0) {
                    for (var i = 0; i < viewList.length; i++) {
                        if (viewList.eq(i).text() == txt) {
                            this.inList = true;
                            break;
                        }
                    }
                }
            }
            /*Sean: true和undefined都表示存在，而false表示不存在于列表中*/
            if (this.inList === false) {
                this.errorMsg = FR.i18nText("FR-Basic_Not_In_List");
                return false;
            } else {
                return true;
            }
        },

        /**
         * 按键后，模糊搜索前事件，抽象方法
         * @private
         */
        _doBeforeSearch: function () {
        },

        /**
         * 重新构建下拉列表
         * @param items 列表选项
         */
        rebuild: function (items) {
            this.options.data = null;
            this.options.widgetUrl = null;
            this.element.empty();
            this.$view.empty();
            this.options.items = items;
            this.options.need2BuildList = true;
            if (items.widgetUrl) {
                this.options.widgetUrl = items.widgetUrl;
            }
            this._init();
        },
        /**
         * 获取下拉列表的所有子项
         * @returns {jQuery} 返回所有子项dom
         * @private
         */
        _getViewList: function () {
            return this.$view.children('.fr-combo-list-item');
        },

        /**
         * 选中下拉列表中指定位置的一项
         * @param {Number} index 位置索引
         */
        setFocusWithIndex: function (index) {
            $(".fr-combo-list-item", this.$view).removeClass("fr-combo-selected");
            this.focusIndex = index;
            $(".fr-combo-list-item", this.$view).eq(index).addClass("fr-combo-selected");
        },

        /**
         * 取数方法的实现
         * @returns {*}
         */
        getData: function () {
            var dp = this.getText();
            var val = dp,
                records = this.options.data.getLoadedRecords(),
                index = this._getSelectedIndex();
            if (index > -1 && index < records.length) {
                var record = records[index].getShowValue();
                if (typeof record == 'string') {
                    record = $.trim(record);
                }
                if (record == dp) {
                    return records[index].getContent();
                }
            } else {
                for (var i = 0, len = records.length; i < len; i++) {
                    if (records[i].getShowValue() == dp) {
                        val = records[i].getContent();
                        if (this.$view) {
                            this._setSelectedIndex(i);
                        }
                        break;
                    }
                }
                return val;
            }
        },

        /**
         * @param {Event} e 鼠标事件
         * @private
         */
        _onKeyDown: function (e) {
            var self = e.data;
            switch (e.keyCode) {
                case FR.keyCode.DOWN : {
                    if (!self.isExpanded()) {
                        self.onTriggerClick();
                    } else {
                        if (self.focusIndex == undefined) {
                            self.focusIndex = self._getSelectedIndex() || 0;
                        }
                        if (self.focusIndex < (self.considerAllowBlankLength() - 1)) {
                            self._setItemFocus(self.focusIndex + 1, self.focusIndex);
                            self.focusIndex = self.focusIndex + 1;
                        } else {
                            self._setItemFocus(0, self.focusIndex);
                            self.focusIndex = 0;
                        }
                    }
                    e.stopEvent();
                    break;
                }
                case FR.keyCode.UP : {
                    if (self.isExpanded()) {
                        if (self.focusIndex == undefined) {
                            self.focusIndex = self._getSelectedIndex();
                        }
                        if (self.focusIndex - 1 >= 0) {
                            self._setItemFocus(self.focusIndex - 1, self.focusIndex);
                            self.focusIndex = self.focusIndex - 1;
                        } else {
                            self._setItemFocus(self.considerAllowBlankLength() - 1, self.focusIndex);
                            self.focusIndex = self.considerAllowBlankLength() - 1;
                        }
                        e.stopEvent();
                    }
                    break;
                }
                case FR.keyCode.ENTER: {
                    self.collapse();
                    break;
                }
                case FR.keyCode.TAB : {
                    if (self.isExpanded()) {
                        if (self.focusIndex != undefined) {
                            self._setSelectedIndex(self.focusIndex);
                        } else {
                            self.collapse();
                            self.editComp.blur();
                            e.stopEvent();
                            break;
                        }
                        self._onEnterPressed();
                        if (self.editComp.val() == '' && self.options.allowBlank !== false) {
                            self.inList = true;
                        }
                        e.stopEvent();
                    }
                    break;
                }
            }
        },

        /**
         * 点击下拉框右侧小按钮事触发的函数
         */
        onTriggerClick: function () {
            /* 705改成点击下拉列表的选项才出发点击事*/
            if (!this.isEnabled()) {
                return;
            }

            if (this.isExpanded()) {
                this.collapse();
            } else {
                this._createVieList();
            }
        },

        /**
         * 生成下拉列表，并加载数据
         * @param needExpand 是否需要展开下拉列表
         * @private
         */
        _createVieList: function (needExpand) {
            var self = this;

            /*REPORT-5237 这种情况下重新加载数据*/
            //下拉框数据源为空
            var noData = this.options.data && this.options.data.getData() && this.options.data.getData().length === 0;
            //所选数据为空
            var noSelectedData = this.getValue() && this.getValue().length === 0;
            if (noData && noSelectedData && !this.options.data.isLocalSource()) {
                this.options.need2BuildList = true;
            }

            this.embellishView();
            /*wei:记录下一开始选中的项*/
            if (this.options.need2BuildList) {
                this.$view.empty();
                if (needExpand !== false) {
                    /*重设高度，用于显示loading图标啊*/
                    this.tH = 30;
                    this.tW = Math.max(this.options.width, 100);//loading最小宽度
                    this.$view.height(this.tH);
                    this.$view.width(this.tW);
                    this.modifyPosition();
                    this.$view.show();
                }
                FR.HtmlLoader.loadingMoreData({
                    el: this.$view,
                    show: true
                });
                var afterLoaded = function (data) {
                    self.checkViewScroll(data);
                    self._setItems(data);
                    self.$view.hide();
                    self.options.need2BuildList = false;
                    self.options.need2FixWidth = true;
                    self._doExpand(needExpand);
                };
                if (self.options.data) {
                    self.options.data.resetStatus(this.allPara.apply(this, arguments));
                    self.options.data.loadRecordsAsync(afterLoaded);

                } else {
                    this.$view.hide();
                    FR.HtmlLoader.loadingMoreData({
                        el: this.$view
                    });
                    this.options.need2BuildList = false;
                    this.options.need2FixWidth = true;
                }
            }
            this._doExpand(needExpand);

        },
        _doExpand: function (needExpand) {
            if (this.options.need2FixWidth !== false) {
                this.fixViewWidth();
                this.options.need2FixWidth = false;
            }

            if (needExpand !== false) {
                this.expand();
                this.modifyPosition();
            }
        },
        /**
         * 滚动加载下拉列表数据
         * @private
         */
        scrollLoadMoreData: function () {
            if (this.isLoadingData) {
                return;
            }
            this.isLoadingData = true;
            FR.HtmlLoader.loadingMoreData({
                el: this.$view,
                show: true
            });
            this.options.data.resetStatusKeepData(this.allPara(this.options.data.getLength()));
            var data = this.data2Add();
            this.checkViewScroll(data);
            this.addData2View(data);
            this.isLoadingData = false;
        },

        /**
         * 添加值
         * @returns {*}
         */
        data2Add: function () {
            return this.options.data.appendData();
        },

        /**
         * 将数据生成为子项元素，添加到下拉列表中
         * @param {Array} data 数据
         */
        addData2View: function (data) {
            var txt = this.editComp.val();
            var defaultIdx = -1;
            if (this.$view) {
                if (!this.emptyContent) {
                    var emptyContent = this._checkAndAddEmptyContent();
                } else {
                    this.initContent(this.emptyContent, this.options.name4Empty, -1);
                }
                var frag = document.createDocumentFragment();
                var len = this.options.data.getLength();
                for (var i = len - data.length; i < len; i++) {
                    var ri = i + data.length - len;
                    var sondi = $('<div/>');
                    frag.appendChild(sondi[0]);
                    var showValue = data[ri].getShowValue();
                    this.initContent(sondi, showValue, i);
                    if (defaultIdx < 0 && showValue == txt) {
                        defaultIdx = ri;
                    }
                }

                this.$view[0].appendChild(frag);
                this.$view.append(emptyContent || this.emptyContent);
                FR.HtmlLoader.loadingMoreData({
                    el: this.$view
                });
                this._setSelectedIndex(defaultIdx);

                this.fixWidth();
            }
        },

        /**
         * 自动调整下拉框的宽度
         * @param minWidth {Number} 下拉复选框的最小宽度
         */
        fixWidth: function (minWidth) {
            //这个宽度要自动调整, 不然控件联动下拉框时, 上一次联动选项的宽度会影响到下一个
            $(this.$view[0]).css('width', 'auto');
            //因为上面是auto的, 如果小于下拉框宽度就不好看了.
            if (this.$view.width() < this.element.width()) {
                var ew = this.element.width();
                //zack:这边如果有滚动条的话要加上滚动条的宽度20
                if (this.addedScrollWidth) {
                    ew += this.scrollBarWidth;
                }
                this.$view.width(ew - 2);
            }
            if (minWidth && this.$view.width() < minWidth) {
                this.$view.width(minWidth);
            }
        },

        /**
         * 初始化一个子项元素
         * @param {jQuery} $dom DOM对象
         * @param {String} showValue 显示值
         * @param {Number} index 位置索引
         */
        initContent: function ($dom, showValue, index) {
            if (showValue == null) {
                showValue = '';
            }
            var self = this;
            $dom.height(this.options.sonHeight).attr("title", showValue).text(showValue)
                .addClass(index > -1 ? 'fr-combo-list-item' : 'fr-combo-list-item fr-combo-list-item-noselect')
                .hover(function (e) {
                    self.setFocusWithIndex(index);
                    setTimeout(function (e) {
                        if (!e) {
                            return;
                        }
                        var target = $(e.target);
                        if (self.$view[0].style.display != "none" && target.isChildAndSelfOf($(this).parent().children())) {
                            $(this).removeClass("fr-combo-selected");
                        }
                    }, 10);
                })
                .click(function (e) {
                    self.inList = true;
                    self.fireEvent(FR.Events.CLICK);
                    self._setSelectedIndex(index > -1 ? index : self.getItemsLength());
                    self._onEnterPressed();
                });
        },

        /**
         * 如果允许为空，则生成'不选'一项选择项
         * @returns {jQuery} 返回生成的dom对象
         * @private
         */
        _checkAndAddEmptyContent: function () {
            if (this.options.allowBlank === false) {
                return;
            }
            this.emptyContent = $('<div/>');
            this.initContent(this.emptyContent, this.options.name4Empty, -1);
            return this.emptyContent;
        },

        /**
         * 判断是否需要滚动加载
         * @param {Array} data 一次加载的数据限制个数
         */
        checkViewScroll: function (data) {
            this.$view.need2Scroll = this.options.limitData <= data.length;
        },

        /**
         * 渲染绘制下拉列表
         * @private
         */
        embellishView: function () {
            if (this.viewEmbellished) {
                return;
            }

            $(".fr-combo-list").hide();
            var self = this;
            if (!this.$view) {
                this.$view = $('<div/>').appendTo(FR.$view_container).height(20);
            }
            this.$view.addClass('fr-combo-list')
                .css({
                    position: 'absolute',
                    width: 'auto',
                    'z-index': '999'
                })
                .scroll(function () {
                    /*wei : ==的时候ie不会执行，改成>=*/
                    if (self.$view.need2Scroll && $(this).scrollTop() + $(this).height() >= this.scrollHeight) {
                        self.scrollLoadMoreData();
                    }
                });
            this.viewEmbellished = true;
        },

        /**
         * 设置下拉框的内容
         * @private
         */
        _setItems: function (records) {
            var sH = this.options.sonHeight, rl = this.considerAllowBlankLength();
            var count = this.options.maxCount || 10;
            this.tH = rl > count ? (sH + 2) * count : (sH + 2) * rl;
            this.$view.height(this.tH);
            this.addData2View(records);
            this.tW = this.$view.width();
        },


        /**
         * 展开下拉列表
         */
        expand: function () {
            if (this.isExpanded()) {
                return;
            }
            this._showView();
            $(document).bind('mousedown', this, this.collapseIf).bind('mousewheel', this, this.collapseIf);
            if (this.options.write && this.options.write.lgp) {
                this.options.write.lgp.$container.bind('scroll', this, this.collapseIf);
            }
            if (document.activeElement != this.editComp[0]) {
                this.editComp.focus();
            }
            this.fireEvent(FR.Events.EXPAND);
        },

        /**
         * 显示下拉列表
         * @private
         */
        _showView: function () {
            this.$view.show();
        },

        /**
         * 滚动切换选中的子项元素(仅仅样式改变)
         * @param {Number} idx 新位置索引
         * @param {Number} lastidx 旧位置索引
         * @private
         */
        _setItemFocus: function (idx, lastidx) {
            var viewList = this.$view.children('.fr-combo-list-item');
            $(viewList[lastidx]).removeClass('fr-combo-selected');
            $(viewList[idx]).addClass('fr-combo-selected').__scroll2View__(this.$view, false);
        },

        setEnable: function (arg) {
            FR.ComboBoxEditor.superclass.setEnable.apply(this, arguments);
            if (arg === false) {
                this.collapse();
            }
        },

        setVisible: function (arg) {
            FR.ComboBoxEditor.superclass.setVisible.apply(this, arguments);
            if (arg === false) {
                this.collapse();
            }
        },

        /**
         * 判断是否正在过滤字段
         * @returns {Boolean} 返回是否正在过滤
         */
        isFiltering: function () {
            return !FR.isEmpty(this.searchText);
        },

        /**
         * 调整下拉列表宽度(处理兼容问题)
         * @private
         */
        fixViewWidth: function () {
            /* TODO Sean: 代码质量问题，兼容最好重做*/
            /* shoc:IE6和IE7中框子的宽度有问题，调整下,自适应有问题，按字符计算了*/
            if (FR.Browser.isIE() && FR.Browser.isIE7Before()) {
                var width2 = 0;

                var listItems = $(".fr-combo-list-item", this.$view);
                for (var i = 0; i < listItems.length; i++) {
                    var len = FR.byteLength(listItems.eq(i).text()) * 6 + 30;
                    width2 = Math.max(width2, len);
                }
                this.$view.width(this.options.mutiSelection ? width2 + 30 : width2 + 10);
            }

            if (!FR.Browser.isIE() && this.$view.children().length > this.options.maxCount && !this.addedScrollWidth) {
                this.$view.width(this.$view.width() + this.scrollBarWidth);
                this.addedScrollWidth = true;
            }

            if (this.$view.width() < this.element.width()) {
                var ew = this.element.width();
                //jim:表单下，下拉列表宽度比控件宽度大2，导致下拉框控件在边界时会时body出现滚动条
                this.$view.width(this.element.width() - 2);
            }
            if (FR.Browser.isIE() && FR.Browser.isIE7Before() && this.$view.width() < 120) {
                this.$view.width(120);
            }

            if (FR.Browser.isIE()) {
                this.$view.css('overflow-x', 'visible');
            }
        },

        dealWithDisplayValue: function (showValue) {
            //report-383
            this.setText(showValue);
        },
        getValue: function () {
            return this.getText() === "" ? "" : FR.ComboBoxEditor.superclass.getValue.apply(this, arguments);
        }
    });
    $.shortcut("combo", FR.ComboBoxEditor);
})(jQuery);
/*
 * Copyright (c) 2001-2014,FineReport Inc, All Rights Reserved.
 */

;(function ($) {
    /**
     * 下拉复选框控件
     *
     *     @example
     *     var $root = $('<div>').css({position : 'absolute', top : 5, left : 40}).appendTo('body');
     *     var editor = new FR.CheckBoxEditor({
     *           renderEl : $root,
     *           directEdit : true,
     *           allowBlank : true,
     *           widgetUrl : null,         //同下拉框
     *           returnArray : true,      //返回值是否以数组形式
     *           delimiter : ',',             //字符串返回值的分隔符
     *           startSymbol : '',          //起始符
     *           endSymbol : '',           //结束符
     *           fontSize : 14,
     *           width : 120,
     *           height : 24,
     *           singleLoad:true, //所有值中没有值的时候是否进行 单独取数，默认为true
     *           maxCount : 10,
     *           items : [
     *               {text : "111", value : "aaa"},
     *               {text : "222", value : "bbb"},
     *               {text : "333", value : "ccc"},
     *               {text : "444", value : "ddd"}
     *           ]
     *      });
     *
     * @class FR.CheckBoxEditor
     * @extends FR.ComboBoxEditor
     *
     * @cfg {JSON} options 属性配置
     * @cfg {String} [options.delimiter=','] 结果分隔符
     * @cfg {String} [options.startSymbol=''] 起始符
     * @cfg {String} [options.endSymbol=''] 结束符
     */
    FR.CheckBoxEditor = FR.extend(FR.ComboBoxEditor, /**@class FR.CheckBoxEditor*/{
        /**
         * @private
         */
        _defaultConfig: function () {
            return $.extend(FR.CheckBoxEditor.superclass._defaultConfig.apply(), {
                delimiter: ',',
                startSymbol: '',
                endSymbol: '',
                singleLoad: true,
                itemCheckOnClass: '.fr-checkbox-checkon',
                itemCheckOffClass: '.fr-checkbox-checkoff'
            });
        },

        /**
         * @private
         */
        _init: function () {
            FR.CheckBoxEditor.superclass._init.apply(this, arguments);
            this.$view.addClass('fr-checkbox-list');
            this._initCheckBoxContainer();

            this.options.delimiter = this.options.delimiter.replace(/\\r/g, "\n");
        },

        /**
         * 初始化子项元素集合
         * @private
         */
        _initCheckBoxContainer: function () {
            if (!this.ck_el_array) {
                this.ck_el_array = [];
            }
        },

        /**
         * 设置下拉框的内容
         * @param {Array} items 内容集合
         * @private
         */
        _setItems: function (items) {
            var records = items || [];
            var sH = this.options.sonHeight;
            var count = this.options.maxCount || 10;
            var th = records.length > count ? (sH + 2) * count : (sH + 2) * records.length;
            // Chrome 和 IE 下，总会显示出滚动条。将下拉框高度增加 2px，去掉滚动条。
            this.$view.height(th + sH + 2);
            this.tH = th + sH;
            this.modifyPosition();
            var self = this;
            this.initControlPane();
            this.innerCheckBox = self._createInnerCheckBox();

            this.innerCheckBox.on(FR.Events.CLICK, function () {
                self.editComp.val("");

                if (this.selected()) {
                    self.doSelectAll();
                } else {
                    self.deSelectAll();
                }
                self.editComp.focus();
            });
            this.$view.append(this.$controlPane);
            this.ck_el_array = [];
            this.addData2View(records);
        },

        initControlPane: function () {
            this.$controlPane = $("<div style='padding-right:20px'>").addClass('fr-checkbox-control');
        },

        _createInnerCheckBox: function () {
            var self = this;
            //kerry: ie下给滚动条预留20的宽度
            var scrollWidth = 20;
            return new FR.CheckBox({
                renderEl: $("<div/>").appendTo(self.$controlPane),
                text: FR.i18nText("FR-Engine_Choose_All") + "/" + FR.i18nText("FR-Engine_Deselect_All"),
                width: self.$view.width() - scrollWidth
            });
        },

        /**
         * 将值添加到DOM中
         * @param {Array} data 将值添加到dom中
         */
        addData2View: function (data) {
            var self = this;
            var start = this.ck_el_array.length;
            for (var i = start, len = start + data.length; i < len; i++) {
                var it = data[i - start];
                var container = $('<div/>').height(this.options.sonHeight).attr('title', it.getShowValue()).addClass('fr-combo-list-item').appendTo(this.$view);
                var checkBox = this._createItemCheckBox(container, it);
                if (this.inAllSelectModel === true || $.inArray(it.getShowValue(), self.text) !== -1) {
                    checkBox.setSelectedWithoutEvent(true);
                }
                this.ck_el_array[i] = checkBox;
            }
            var selectedItems = $(this.options.itemCheckOnClass, this.$view);
            if (selectedItems.length == this.ck_el_array.length) {
                this.innerCheckBox.selected(true);
            }
            FR.HtmlLoader.loadingMoreData({
                el: this.$view
            });

            // IE 下，如果列表项比较短，设置成 auto，下拉复选框的宽度可能会小于提示文字的宽度。尤其是英文环境下。
            if (FR.Browser.isIE()) {
                var innerBoxPromptText = FR.i18nText("FR-Engine_Choose_All") + "/" + FR.i18nText("FR-Engine_Deselect_All");
                var minWidth = FR.byteLength(innerBoxPromptText) * 6 + 28;
                this.fixWidth(minWidth);
            } else {
                this.fixWidth();
            }
        },

        /**
         * 生成子项CheckBox
         * @param {jQuery} container 容器DOM
         * @param {JSON} data 数据对象
         * @returns {FR.CheckBox} 复选框控件对象
         * @private
         */
        _createItemCheckBox: function (container, data) {
            var self = this;
            var checkbox = new FR.CheckBox({
                renderEl: $("<div/>").appendTo(container),
                text: data.getShowValue(),
                value: data.getValue(),
                listeners: [{
                    eventName: FR.Events.STATECHANGE, action: function () {
                        self.editComp.val("");
                        self.fireEvent(FR.Events.CLICK);
                        if (!this.isSelected()) {
                            self.innerCheckBox.setSelected(false);

                            //有子checkbox被勾掉, 那就不是全选了
                            if (self.inAllSelectModel) {
                                self.inAllSelectModel = false;
                            }
                        }
                        else {
                            // 如果所有项都勾选了，需要勾选全选
                            var selectedItems = $(self.options.itemCheckOnClass, self.$view);
                            if (selectedItems.length == self.ck_el_array.length) {
                                self.innerCheckBox.setSelected(true);
                            }
                        }
                        self._refreshComponentValue(this);
                        self.editComp.focus();
                    }
                }]
            });
            return checkbox;
        },

        /**
         * @private
         */
        _doBeforeSearch: function () {
            this.searchText = this.editComp.val();
        },

        /**
         * 键盘按键选定一个item后的事件
         * @private
         */
        _onEnterPressed: function () {
            var idx = this._getSelectedIndex();
            var focusedCheckBox = this.ck_el_array[idx];
            if (focusedCheckBox) {
                focusedCheckBox.setSelected(!focusedCheckBox.isSelected());
            }
            this.collapse();
        },

        /**
         * 刷新checkbox
         * @param {FR.CheckBox} checkBox checkbox控件对象
         * @private
         */
        _refreshComponentValue: function (checkBox) {
            if (!this.text) {
                this.text = [];
            }
            if (checkBox.isSelected()) {
                this.text.push(checkBox.getText());
            } else {
                this.text.remove(checkBox.getText());
            }
            this._setCompText(this.text);
            this.fireEvent(FR.Events.AFTEREDIT);
        },

        /**
         * 调整下拉表生成的位置
         */
        modifyPosition: function () {
            this.options.offset = {'top': this.element.offset().top, 'left': this.element.offset().left};
            this.tW = this.$view.width();
            FR.CheckBoxEditor.superclass.modifyPosition.apply(this, arguments);
        },

        /**
         * 添加数值,性能优化
         * @returns {*}
         */
        data2Add: function () {
            if (this.inAllSelectModel === true) {
                var data = [];
                var records = this.options.data.getRecords();
                var loadedDataCount = this.ck_el_array.length;
                for (var i = 0, len = records.length; i < this.options.limitData; i++) {
                    if (i + loadedDataCount >= len) {
                        break;
                    }
                    data[i] = records[i + loadedDataCount];
                }
                return data;
            } else {
                return this.options.data.appendData();
            }
        },

        /**
         * 全选操作
         */
        doSelectAll: function () {
            var arr = [];
            var self = this;
            if (this.isFiltering()) {
                $.each(this.ck_el_array, function (idx, it) {
                    it.setSelectedWithoutEvent(true);
                    arr.push(it.getText());
                });
            } else {
                if (!this.allRecords) {
                    this.inAllSelectModel = true;
                    var para = this.createDependencePara4Data();
                    para.parameter.startIndex = 0;
                    para.parameter.limitIndex = 0;
                    this.options.data.resetStatus(para);
                    this.allRecords = this.options.data.executeData();
                    this.options.data.records = this.allRecords;
                }
                $.each(self.allRecords, function (idx, record) {
                    arr.push(record.getShowValue());
                });
                $.each(this.ck_el_array, function (idx, it) {
                    it.setSelectedWithoutEvent(true);
                });
            }
            this._setCompText(arr);
            self.fireEvent(FR.Events.AFTEREDIT);
        },

        /**
         * 反选操作
         */
        deSelectAll: function () {
            var self = this;
            $.each(this.ck_el_array, function (idx, it) {
                it.setSelectedWithoutEvent(false);
            });
            this.inAllSelectModel = false;
            this._setCompText([]);
            self.fireEvent(FR.Events.AFTEREDIT);
        },

        /**
         * 赋值函数
         * @param {String} value 所赋值
         * @private
         */
        _dealValueWithEvents: function (value) {
            var self = this;
            var oldValue = this.getValue();
            if (value == "") {
                this._setCompText([]);
                self.options.need2BuildList = true;
                return;
            }
            var value_array;
            if (typeof value === "string") {
                if (!this.options.returnArray) {
                    if (value.startWith(this.options.startSymbol)) {
                        value = value.substring(this.options.startSymbol.length);
                    }
                    if (value.endWith(this.options.endSymbol)) {
                        value = value.substring(0, value.length - this.options.endSymbol.length);
                    }
                }
                value_array = value.split(this.options.delimiter);
            } else {
                value_array = $.makeArray(value);
            }
            var records = this.options.data.getRecords();
            var inList = false;
            if (records.length > 0) {
                $.each(value_array, function (idx, v) {
                    for (var i = 0, len = records.length; i < len; i++) {
                        if (records[i].getValue() == v) {
                            value_array[idx] = records[i].getShowValue();
                            inList = true;
                            break;
                        }
                    }

                });
            }
            if (!FR.equals(this.text, value_array)) {
                this.options.need2BuildList = true;
            }
            this._setCompText(value_array);
            if (arguments[1] !== false) {
                this.fireEvent(FR.Events.AFTEREDIT, value, oldValue);
            }
        },

        /**
         * 取值函数
         * @returns {*} 返回数组或者字符串
         */
        getValue: function () {
            var self = this;
            var text_array = this._getCompText();

            if (!this.options.data) {
                return;
            }

            var records = this.options.data.getLoadedRecords();
            var showValueMap = {};
            var allValueMap = {};
            for (var i = 0, len = records.length; i < len; i++) {
                showValueMap[records[i].getShowValue()] = records[i].getValue();
            }
            var dataSource = this.options.data.options.dataSource;
            if (!FR.isEmptyArray(text_array)) {
                $.each(text_array, function (idx, text) {
                    var res = null;
                    if (!self.isEmptyMap(allValueMap)) {
                        res = allValueMap[text];
                    } else {
                        res = showValueMap[text];
                    }
                    if (res == null && self.isEmptyMap(allValueMap) && dataSource._findAllValue) {
                        var resss = dataSource._findAllValue();
                        if (!FR.isEmpty(resss)) {
                            for (var i = 0, len = resss.length; i < len; i++) {
                                allValueMap[resss[i].text] = resss[i].value;
                            }
                            res = allValueMap[text];
                        }
                    }
                    if (self.options.singleLoad && res == null && dataSource._findShowValue) {
                        res = dataSource._findShowValue(text_array[idx], false);
                        allValueMap[text_array[idx]] = res;
                    }
                    if (FR.isEmpty(res)) {
                        if (self.options.customData) {
                            text_array[idx] = text;
                        } else if (res === undefined) {
                            //后台找不到值,说明值不在列表中,返回undefined
                            text_array = undefined;
                            return false;
                        }
                    } else {
                        text_array[idx] = res;
                    }
                });
            }
            if (text_array) {
                if (this.options.returnArray) {
                    return text_array;
                }
                var resultStr = this.options.startSymbol + text_array.join(this.options.delimiter) + this.options.endSymbol;
                return resultStr;
            }
        },
        isEmptyMap: function (o) {
            for (var item in o) {
                if (item) {
                    return false;
                }
            }
            return true;
        },

        /**
         * 获取显示值
         * @returns {*} 返回数组或者字符串
         */
        getText: function () {
            var text_array = this._getCompText();
            return this.options.returnArray ? text_array
                : this.options.startSymbol + text_array.join(this.options.delimiter) + this.options.endSymbol;
        },

        /**
         * 赋值编辑框内的文本内容
         * @param {Array} text 文本内容
         * @private
         */
        _setCompText: function (text) {
            this.text = text;
            this.editComp.val(text.join(this.options.delimiter));
        },
        /**
         * 获取编辑框内的文本内容
         * @returns {Array} 返回数组格式的结果
         * @private
         */
        _getCompText: function () {
            return this.editComp.val().split(this.options.delimiter);
        },
        rebuild: function (items) {
            this.reset();
            FR.CheckBoxEditor.superclass.rebuild.apply(this, arguments);
        },
        /**
         * 重置控件
         */
        reset: function () {
            this.ck_el_array = [];
            this.text = null;
            this.setValue('');
            this.shouldReBuildList();
            this.allRecords = null;
        }
    });
    $.shortcut("combocheckbox", FR.CheckBoxEditor);
})(jQuery);
/**
 * Tag显示的下拉复选框控件
 * @class FR.TagCheckBoxEditor
 * @extends FR.CheckBoxEditor
 */
FR.TagCheckBoxEditor = FR.extend(FR.CheckBoxEditor, /**@class FR.TagCheckBoxEditor*/{

    _defaultConfig: function () {
        return $.extend(FR.TagCheckBoxEditor.superclass._defaultConfig.apply(), {
            //标签样式的基础类
            tagBaseClass: 'fr-tageditor',
            //文本编辑框的最小宽度
            minWidth4Edit: 24,
            //标签间距
            tagMargin: 4,
            //动画速度
            animateSpeed: 100
        });
    },

    _init: function () {
        FR.TagCheckBoxEditor.superclass._init.apply(this, arguments);
        this._initTagContainer();
        this.startTagIdx = -1; //Sean: 用于标识所生成的第一个tag在this.value中的索引位置
        this.widthFix = 0;
        if (FR.Browser.isIE6Before()) {
            this.widthFix = 4;
        }
    },

    _editCompBlur: function () {
        if (this.options.watermark && this.text && this.text.length > 0) {
            //Sean: 带tag的控件需要延后处理水印，因为input在失焦后肯定是没有值的，会产生水印。
            this.removeWaterMark.defer(0, this);
        }
    },

    /**
     * 编辑框失焦后，判断是否符合规则等执行事件
     * @private
     */
    _editCompBlurValidValue: function () {
        //只需要校验是否为空即可
        if (this.options.allowBlank === false && (!this.text || this.text.length === 0)) {
            this.errorMsg = this.options.errorMsg || FR.i18nText("FR-Base_NOT_NULL_Des");
            this.invalidateCss();
        } else {
            this.validateCss();
        }
        //为啥要重新构建? 重新构建会导致69633, 第二次下拉的时候数据用了错误的缓存.
//        this.options.need2BuildList = true;
        this.searchText = "";
        var val = this.editComp.val();
        if (val != "") {
            val = this._getEditTagFullValue(val);
            this._appendTagFromInput(val);
            this.editComp.val("");
            this._editCompBlur();
        }
    },

    _doBeforeSearch: function () {
        //Sean: Override. Do Nothing.
    },

    /**
     * 初始化Tag层
     * @private
     */
    _initTagContainer: function () {
        var opts = this.options;
        opts.minWidth4Edit = Math.max(2 * opts.fontSize, opts.minWidth4Edit);
        //所有tag的容器层
        var height = this.editComp.height(),
            tagClz = opts.tagBaseClass;
        //所有tag的容器外层（限制显示宽度）
        this.tagContainer = $('<div/>').addClass(tagClz + '-container').height(height)
            .prependTo(this.triggerTextComp);
        //所有tag的容器内层（自适应内容宽度，用于左右平移显示）
        this.tagWrap = $('<span/>').addClass(tagClz + '-wrapper').appendTo(this.tagContainer);
    },

    /**
     * 绑定tag事件
     * @param {jQuery} tag tag对象
     * @private
     */
    _bindEvent2Tag: function (tag) {
        var self = this, o = this.options;
        //点击事件
        tag.click(function () {
            self._setTagSelect($(this));
        });
        //双击事件
        tag.dblclick(function () {
            if (o.directEdit !== false && o.customData !== false) {
                self._editTag($(this));
            }
        });
    },

    /**
     * 对Tag进行编辑
     * @param {jQuery} tagObj 需要编辑的Tag对象
     * @private
     */
    _editTag: function (tagObj) {
        var index = this.tagWrap.children().index(tagObj) + this.startTagIdx + 1;
        tagObj.hide();
        var tagEditComp = $("<input type='text'/>").addClass('fr-tageditor-tag-edit')
            .val(tagObj.text())
            .css({
                width: tagObj.outerWidth(),
                'font-size': this.options.fontSize
            })
            .insertAfter(tagObj);
        this.isTagEditing = true;
        var self = this;
        tagEditComp.blur(function () {
                self.collapse();
                self.isTagEditing = false;
                var value = $(this).val();
                $(this).remove();
                if (value === "") {
                    self._removeTag(tagObj);
                } else {
                    tagObj.text(value);
                    value = self._getEditTagFullValue(value);
                    self._spliceTagData(index, value);
                    tagObj.show();
                    self._loadMoreTags(self.text);
                    self._modifyTagPosition();
                    self._moveViewToShow(tagObj);
                }
                self.fireEvent(FR.Events.STOPEDIT);
            }
        );
        tagEditComp.keyup(function (e) {
            var key = e.keyCode;
            if (!FR.isNavKeyPress(e)) {
                self._spliceTagData(index, tagEditComp.val());
                self.fireEvent(FR.Events.AFTEREDIT);
            } else if (key === FR.keyCode.ENTER) {
                $(this).blur();
            }
        });
        tagEditComp.focus();
    },
    /**
     * @param {Array} text 文本内容集合
     * @private
     */
    _setCompText: function (text) {
        this.text = text;
        if (this.tagWrap) {
            // REPORT-7122 存在默认值时被联动触发，那么editComp的值需要更新
            this.editComp.val('');
            this.tagWrap.empty();
            this.startTagIdx = text.length - 1;
            this._loadMoreTags(text);
            this._modifyTagPosition();
            this._moveViewToShow();
        } else {
            FR.TagCheckBoxEditor.superclass._setCompText.apply(this, arguments);
        }
    },

    /**
     * 分步加载Tag
     * @param {Array} text 文本内容集合
     * @protected
     */
    _loadMoreTags: function (text) {
        if (this.startTagIdx >= 0) {
            var minWidth4Tags = this.element.width() - this.options.minWidth4Edit - this.btnWidth;
            while (this.tagWrap.width() < minWidth4Tags && this.startTagIdx >= 0) {
                this._createTagFromText(text[this.startTagIdx]).prependTo(this.tagWrap);
                this.startTagIdx--;
            }
        }
    },
    /**
     * 从文本内容生成一个Tag
     * @param {String} text 文本内容
     * @protected
     */
    _appendTagFromInput: function (text) {
        if (this.checkValid(text)) {
            if ($.inArray(text, this.text) === -1) {
                this._pushTagData(text);
                this._createTagFromText(text).appendTo(this.tagWrap);
                this._modifyTagPosition();
                this._moveViewToShow();
                var checkArr = $.grep(this.ck_el_array, function (ck_el) {
                    return ck_el.getText() == text;
                });
                if (checkArr && checkArr[0]) {
                    checkArr[0].changeBoxState(true);
                }
                this.fireEvent(FR.Events.AFTEREDIT);
            }
        } else {
            FR.Msg.toast(this.errorMsg);
        }
    },

    _getEditTagFullValue: function (newText) {
        return newText;
    },

    _pushTagData: function (text) {
        if (!this.text) {
            this.text = [];
        }
        this.text.push(text);
    },
    _spliceTagData: function (idx, newText) {
        if (newText == undefined) {
            this.text.splice(idx, 1);
        } else {
            this.text.splice(idx, 1, newText);
        }
    },
    /**
     * 移除一个Tag
     * @param {jQuery} tagObj tag对象
     * @param {Boolean} isLast 是否排在最后的Tag
     * @private
     */
    _removeTag: function (tagObj, isLast) {
        if (isLast) {
            this.text.pop();
        } else {
            var index = this.tagWrap.children().index(tagObj) + this.startTagIdx + 1;
            this._spliceTagData(index);
        }
        var $next = tagObj.next();
        tagObj.remove();
        this.fireEvent(FR.Events.AFTEREDIT);
        this.inAllSelectModel = false;
        this.options.need2BuildList = true;
        this._loadMoreTags(this.text);
        this._modifyTagPosition();
        this._setTagSelect($next);
    },

    _getCompText: function () {
        this.text = this.text || [];
        return this.text.slice(0);//Sean:不传递指针，所以使用slice(0)最快地clone一个数组
    },

    /**
     * 将输入的文本信息生成Tag
     * @param {String} text 文本内容
     * @returns {*|jQuery} 返回生成的Tag对象
     * @private
     */
    _createTagFromText: function (text) {
        var opts = this.options;
        var t = text;
        if ($.isArray(text)) {
            t = text[text.length - 1];
        }
        //不生成空文本的tag
        if (FR.isEmpty(t)) {
            return $('');
        }
        var height = this.editComp.height();
        var tagClz = this.options.tagBaseClass;
        //tag层
        var tagSpan = $("<span/>").addClass(tagClz + '-tag')
            .text(t)
            .css({
                'line-height': height + 'px',
                'margin': '0 ' + opts.tagMargin / 2 + 'px',
                'font-size': this.options.fontSize
            });
        //绑定事件
        this._bindEvent2Tag(tagSpan);
        return tagSpan;
    },

    /**
     * 调整结果标签以及文本框的位置和宽度
     * @protected
     */
    _modifyTagPosition: function () {
        var opts = this.options;
        var minWidth = opts.minWidth4Edit;
        var tagClz = opts.tagBaseClass;
        if (opts.isEditable) {
            //bug:92218
            this.tagContainer.appendTo(this.triggerTextComp);
        }
        var $container = $('.' + tagClz + '-container', this.triggerTextComp);
        // win8 firefox dpi 125% 下, editComp多了0.2px导致tag显示不下
        var editWidth = $.support.boxModel ? this.triggerTextComp.width() - 1 : this.triggerTextComp.width() - 2;
        var tagsWidth = this.tagWrap.width();
        if (editWidth - tagsWidth < minWidth) {
            this.editComp.outerWidth(minWidth - this.widthFix);
            $container.width(editWidth - minWidth);
        } else {
            this.editComp.outerWidth(editWidth - tagsWidth - this.widthFix);
            $container.width(tagsWidth);
        }
    },

    /**
     * 选中指定的Tag
     * @param {jQuery} tagObj tag对象
     * @private
     */
    _setTagSelect: function (tagObj) {
        var tagClz = this.options.tagBaseClass;
        var selectedId = tagClz + '-tag-select';
        $('#' + selectedId, this.tagWrap).removeAttr('id');
        if (tagObj) {
            //tag上绑定键盘操作,包括左右方向键选择和DELETE,BACKSPACE
            var self = this;
            var tagOpts = function (e) {
                if (self.isTagEditing) {
                    return;
                }
                if (e.keyCode == FR.keyCode.DELETE || e.keyCode == FR.keyCode.BACKSPACE) {
                    FR.Keys.unreg(tagOpts);
                    self._removeTag(tagObj);
                } else if (e.keyCode == FR.keyCode.LEFT) {
                    if (tagObj.prev().length > 0) {
                        self._setTagSelect(tagObj.prev());
                    }
                } else if (e.keyCode == FR.keyCode.RIGHT) {
                    self._setTagSelect(tagObj.next());
                    if (tagObj.next().length === 0) {
                        self.editComp.focus();
                    }
                }
            };
            FR.Keys.reg(tagOpts);
            $('body').bind('mousedown.tagselect', function (e) {
                if (!$(e.target).isChildAndSelfOf(self.tagWrap)) {
                    FR.Keys.unreg(tagOpts);
                    $('#' + selectedId, self.tagWrap).removeAttr('id');
                }
            });
            tagObj.attr('id', tagClz + '-tag-select');
            this._moveViewToShow(tagObj);
        } else {
            this._moveViewToShow();
        }
    },

    _editCompFocus: function () {
        var val = this.editComp.val();
        if (val != "") {
            this._setCompText(this.text);
            if (!this.isFiltering()) {
                this.editComp.val("");
            }
        } else {
            this._setTagSelect();
        }
    },
    /**
     * 将所有Tag平移使指定对象出现在可视范围
     * @param {Number|jQuery} tagObj 需要显示的元素；若为空，则表示移动到最后一个tag可显示的地方
     * @protected
     */
    _moveViewToShow: function (tagObj) {
        var o = this.options, self = this;
        var conWidth = this.tagContainer.width(), tagWidth = this.tagWrap.width();
        if (tagObj && tagObj.length > 0) {
            if (this.editComp.outerWidth() > this.options.minWidth4Edit) {
                return;
            }
            var wrapLeft = this.tagWrap.offset().left;//tagWrap层左距
            var conLeft = this.tagContainer.offset().left;//tagContainer层左距
            var conDis = wrapLeft - conLeft;
            var objWidth = tagObj.width();
            var target = conLeft + conWidth / 2 - objWidth / 2;
            while (this.startTagIdx >= 0 && tagObj.offset().left < target) {
                this._createTagFromText(this.text[this.startTagIdx]).prependTo(this.tagWrap);
                this.startTagIdx--;
            }
            var pos = tagObj.offset().left - target;
            tagWidth = this.tagWrap.width();
            if (pos < 0) {
                pos = "-=" + Math.max(pos, conDis);
            } else {
                pos = "-=" + Math.min(pos, tagWidth - conWidth + conDis);
            }
        } else {
            pos = Math.min(conWidth - tagWidth, 0);
        }
        this.tagWrap.animate({
            left: pos
        }, o.animateSpeed);
    },

    /**
     * EditComp的按键事件扩展,ENTER,LEFT,BACKSPACE
     * @private
     */
    _onKeyDown: function (e) {
        var k = e.keyCode, self = e.data;
        if (k == FR.keyCode.ENTER) {
            if (this.value == "") {
                self.collapse();
            } else {
                self._appendTagFromInput(this.value);
                self.editComp.val("");
                self._editCompBlur();
            }
            e.stopEvent();
        } else if (k == FR.keyCode.LEFT) {
            if (this.value == "" && self.tagWrap.children().length > 0) {
                var tagClz = self.options.tagBaseClass;
                self._setTagSelect($('.' + tagClz + '-tag:last', self.tagWrap));
                self.editComp.blur();
                e.stopEvent();
            }
        } else if (k == FR.keyCode.BACKSPACE) {
            if (this.value == "" && self.tagWrap.children().length > 0) {
                var tagClz = self.options.tagBaseClass;
                var $lastTag = $('.' + tagClz + '-tag:last', self.tagWrap);
                self._removeTag($lastTag, true);
                e.stopEvent();
            }
        }
        FR.CheckBoxEditor.superclass._onKeyDown.apply(this, arguments);
    },

    __makeSureInputValueInResList: function () {
        if (this.searchText == undefined) {
            return;
        }
        var t = this.searchText;
        var arr = t.split(/[,;，；]/);
        var endSymbol = t.endWith(',') || t.endWith(';') || t.endWith('，') || t.endWith('；');
        if (!endSymbol) {
            return;
        }
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] != "") {
                this._checkAndAddTag(arr[i]);
                this.fireEvent(FR.Events.AFTEREDIT);
                break;
            }
        }
    },

    _checkAndAddTag: function (text) {
        if (FR.isEmpty(text) || text == "") {
            return;
        }
        this.searchText = text;
        FR.CheckBoxEditor.superclass.__makeSureInputValueInResList.apply(this, arguments);
        if (this.inList || this.options.customData) {
            if (this.text == undefined) {
                this.text = [];
            }
            if ($.inArray(text, this.text) === -1) {
                this._pushTagData(text);
                this._addResultTag(text);
                this.searchText = null;
                this.editComp.val("");
                var checkArr = $.grep(this.ck_el_array, function (ck_el) {
                    return ck_el.getText() == text;
                })
                if (checkArr && checkArr[0]) {
                    checkArr[0].changeBoxState(true);
                }
                this.collapse();
                this.options.need2BuildList = true;
                this.editComp.focus();
            }
        } else {
            FR.Msg.toast('No custom value allowed');
            this.editComp.val(text);
        }
    },

    _addResultTag: function (txt) {
        this.tagWrap.append(this._createTagFromText(txt));
        this._modifyTagPosition();
    },

    /**
     * 移除不符合规则的提示样式
     */
    validateCss: function () {
        this.editComp.removeClass('fr-trigger-invalid');
        this.editComp.removeClass('fr-trigger-text-invalid');
        this.editComp.removeAttr('title');
    },

    /**
     * 显示不符合规则的提示样式
     */
    invalidateCss: function () {
        //fr-trigger-invalid这个class是有1px边框的,tag存在的时候宽度计算没有减去2px的边框会造成校验出错却看不到红标线（父容器被挤到下面去了）
        //应该只要给文本部分加上标线就可以了
        //this.editComp.addClass('fr-trigger-invalid');
        this.editComp.addClass('fr-trigger-text-invalid');
        this.editComp.attr('title', this.getErrorMsg());
    },

    startEditing: function () {
        FR.TagCheckBoxEditor.superclass.startEditing.apply(this, arguments);
        this._modifyTagPosition();
    },


    reset: function () {
        FR.TagCheckBoxEditor.superclass.reset.apply(this, arguments);
        this.inAllSelectModel = false;
        this.tagContainer && this.tagContainer.remove();
        delete this.tagContainer;
        this._initTagContainer();
        if (this.options.watermark) {
            this.removeWaterMark();
            this.setWaterMark();
        }
    },
    setText: function (text) {
        if (this.options.isEditable) {
            //bug92218,直接显示控件焦点离开的时候移除tag
            this.tagContainer && this.tagContainer.remove();
        }
        if (text && typeof text === 'string') {
            this.text = text.split(this.options.delimiter);
        } else {
            this.text = text;
        }
        var editWidth = $.support.boxModel ? this.triggerTextComp.width() - 1 : this.triggerTextComp.width() - 2;
        this.editComp.outerWidth(editWidth - this.widthFix);
        this.editComp.val(text);
    },
    getEditValue: function () {
        var values = this.getValue();
        if (this.options.returnArray === false) {
            values = values.split(this.options.delimiter);
            var length = values.length;
            values[0] = values[0].substring(this.options.startSymbol.length);
            values[length - 1] = values[length - 1].substring(0, values[length - 1].length - this.options.endSymbol.length);
        }
        $.each(values, function (index, value) {
            values[index] = [value];
        });
        return values;
    }
});
$.shortcut("tagcombocheckbox", FR.TagCheckBoxEditor);
;(function ($) {
    /**
     * 下拉(复选)树控件
     * @class FR.TreeComboBoxEditor
     * @extends FR.TagCheckBoxEditor
     */
    FR.TreeComboBoxEditor = FR.extend(FR.TagCheckBoxEditor, /**@class FR.TreeComboBoxEditor*/{

        _defaultConfig: function () {
            return $.extend(FR.TreeComboBoxEditor.superclass._defaultConfig.apply(), {
                width: 120,
                height: 300,
                returnArray: true,
                delimiter: ';',
                nodeDelimiter: /[;；]/,
                pathDelimiter: /[,，]/,
                startSymbol: '',
                endSymbol: '',
                cascadecheck: true,
                mutiSelection: false,
                limitData: 300,
                autoFixWidth: true
            });
        },

        _init: function () {
            FR.TreeComboBoxEditor.superclass._init.apply(this, arguments);
            this.$view.attr("id", this.options.location);
        },


        initData: function () {
            if (this.options.data) {
                return;
            }
            if (this.options.rootLoader) {
                this.options.data = new FR.TreeData({
                    treeLoader: this.options.rootLoader
                });
            } else if (this.options.widgetUrl) {
                this.options.data = new FR.TreeData({
                    url: this.options.widgetUrl
                });
            } else if (this.options.items) {
                this.options.data = new FR.ItemTreeData({
                    items: this.options.items
                });
            }
            if (this.options.controlAttr) {
                this.setSource(this.options.controlAttr);
                delete this.options.controlAttr
            }
        },


        /**
         * 设置子项内容
         * @param data {*} 数据
         * @private
         */
        _setItems: function (data) {
            this.tH = 150;
            this.$view.height(this.tH);
            var treeConfig = FR.createTreeConfig4Widget(this);
            var nodes = this.options.data.getData();
            var leaf = this.options.selectLeafOnly;
            var multi = this.options.mutiSelection;
            var initArray = [];
            this.value = this.value || [];
            this.text = this.text || [];
            if (this.options.autoMatch !== false) {
                var txt = this.searchText || this.editComp.val();
                /*去掉末尾的一个分隔符*/
                if (typeof txt === 'string') {
                    txt = FR.isEmpty(txt) ? "" : txt.replace(/[,;，；]$/, "");
                }
                if ((txt.indexOf(';') !== -1 || txt.indexOf('；') !== -1) && multi) {
                    var tmp = FR.parseString2Array4Tree(txt, this);
                    for (var i = 0; i < tmp.length; i++) {
                        var validTrace = FR.getValidTreeTrace(tmp[i], nodes, leaf);
                        if (FR.isArray(validTrace) && !FR.isEmptyArray()) {
                            initArray.push(validTrace);
                        }
                    }
                } else if (txt.indexOf(',') !== -1 || txt.indexOf('，') !== -1) {
                    initArray = FR.getValidTreeTrace(txt.split(/[,，]/), nodes, leaf);
                } else if (txt !== "") {
                    initArray = FR.getTreeTrace(txt, nodes, multi, leaf);
                }
                if (multi) {
                    initArray = this.value;
                } else {
                    this.value = FR.isEmptyArray(initArray) ? $.makeArray(txt) : initArray;
                }
            } else {
                if (multi) {
                    initArray = this.value;
                } else {
                    initArray = this.editComp.val().split(this.options.delimiter);
                }
            }
            FR.setAllNodeState(nodes, 0);
            if (FR.isArray(initArray) && !FR.isEmptyArray(initArray)) {
                if (multi) {
                    initArray = FR.parseTo2DArray(initArray);
                    for (var m = 0; m < initArray.length; m++) {
                        FR.setNodeStateByInitValue(nodes, 0, initArray[m], leaf);
                    }
                } else {
                    FR.findSelectedNode(nodes, 0, initArray, treeConfig);
                }
            }
            this._createTreeView(treeConfig);
            this.options.isInited = true;
            this.options.need2BuildList = false;
        },
        _createTreeView: function (treeConfig) {
            this.$view.treeview(treeConfig);
        },
        _editCompBlur: function () {
            if (this.options.mutiSelection) {
                FR.TreeComboBoxEditor.superclass._editCompBlur.apply(this, arguments);
            }
        },

        _editCompBlurValidValue: function () {
            //做REPORT-1993的时候发现，当删除所有路径后 this.value=['']但是this.text还能拿到值
            if (this.options.allowBlank === false && (!this.text || this.text.length === 0 || this.value.join('').length === 0)) {
                this.errorMsg = this.options.errorMsg || FR.i18nText("FR-Base_NOT_NULL_Des");
                this.invalidateCss();
                //为空时下波浪红线不显示
                this.editComp.addClass('fr-invalid');
            } else {
                this.validateCss();
                this.editComp.removeClass('fr-invalid');
            }
            if (this.options.mutiSelection) {
                var val = this.editComp.val();
                if (val !== "") {
                    val = this._getEditTagFullValue(val);
                    this.options.need2BuildList = true;
                    this.searchText = "";
                    this._appendTagFromInput(val);
                    this.editComp.val("");
                    this._editCompBlur();
                }
            }
        },

        _getEditTagFullValue: function (newText) {
            return newText.split(/[,，]/);
        },

        _pushTagData: function (value) {
            this.text.push(value);
            this.value.push(value);
        },

        _spliceTagData: function (idx, newValue) {
            if (newValue == undefined) {
                this.text.splice(idx, 1);
                this.value.splice(idx, 1);
            } else {
                //this.text显示值的完整路径[['江苏','南京'],['浙江','杭州']]
                this.text.splice(idx, 1, newValue);
                //this.value真实值的完整路径[[1,11],[2,21]]
                this.value.splice(idx, 1, newValue);
            }
        },

        /**
         * 移除一个Tag
         * @param {jQuery} tagObj tag对象
         * @param {Boolean} isLast 是否排在最后的Tag
         * @private
         */
        _removeTag: function (tagObj, isLast) {
            if (isLast) {
                this.value.pop();
                this.text.pop();
            } else {
                var index = this.tagWrap.children().index(tagObj) + this.startTagIdx + 1;
                this._spliceTagData(index);
            }
            tagObj.remove();
            this.fireEvent(FR.Events.AFTEREDIT);
            this.inAllSelectModel = false;
            this.options.need2BuildList = true;
            this._loadMoreTags(this.text);
            this._modifyTagPosition();
            this._moveViewToShow();
        },

        _onKeyDown: function (e) {
            if (e.data.options.mutiSelection) {
                FR.TreeComboBoxEditor.superclass._onKeyDown.apply(this, arguments);
            }
        },

        /**
         * 配置treeview的属性
         * @param {JSON} opts 属性配置
         */
        setOptions: function (opts) {
            this.$view.setOptions(opts);
        },

        setTraversal: function (type) {
            this.setOptions({traversal: type});
        },

        _editCompFocus: function () {
            if (this.options.mutiSelection) {
                FR.TreeComboBoxEditor.superclass._editCompFocus.apply(this, arguments);
            }
        },

        /**
         * 滚动加载 override DoNothing
         */
        checkViewScroll: function () {
        },

        /**
         * 初始化数据过滤
         */
        initFilterData: function () {
            if (!this.options.filterData) {
                this.options.data = new FR.TreeData({
                    url: this.options.widgetUrl
                });
            } else {
                this.options.data = this.options.filterData;
            }
        },

        _timer: null,
        _ajaxSearch: function () {
            //如果当前定时器存在,则重新计时
            if (this._timer) {
                clearTimeout(this._timer);
            }
            var editor = this;
            this._timer = setTimeout(function () {
                //清空_timer属性,用于下次启动
                editor._timer = null;
                if (editor.searchText || editor.searchText === 0) {
                    editor.initFilterData();
                } else {
                    editor.initData();
                }
                FR.TreeComboBoxEditor.superclass._ajaxSearch.apply(editor, arguments);
            }, 600);
        },

        _onEnterPressed: function (node, _onEnterPressed) {
            if (!this.options.mutiSelection) {
                this.text = this.$view.getTCPText();
                this.value = this.$view.getTCPValue();
                var len = this.text.length;
                this.editComp.val(len === 0 ? "" : this.text[len - 1]);
                this.collapse();
            } else if (!this.options.selectLeafOnly) {
                var tValue = node.getValuePath();
                //bug:71763 树控件的text应该统一成二维数组
                var tText = FR.parseString2Array4Tree(node.getShowValue(), this);
                if (node.getcheckstate() === 1) { // 点击选中
                    this.value.push(tValue);
                    this.text.push(tText);
                } else if (node.getcheckstate() === 0) { // 点击取消选中
                    for (var i = 0; i < this.value.length; i++) {
                        if (FR.equals(tValue, this.value[i])) {
                            this.value.remove(this.value[i]);
                            break;
                        }
                    }
                    this.text.removeWeakEqual(tText);
                }
                this._dealWithEditComp();
            } else {
                this.text = this.$view.getTCPTexts();
                this.value = this.$view.getTCPValues();
                var result = this.text;
                var arr = [];
                for (var i = 0; i < result.length; i++) {
                    arr.push(result[i][result[i].length - 1]);
                }
                this._dealWithEditComp(arr);
            }
            this.fireEvent(FR.Events.CLICK);
            if (_onEnterPressed !== false) {
                this.fireEvent(FR.Events.AFTEREDIT);
            }
        },

        _dealWithEditComp: function (eText) {
            var text = eText || this.text;
            this.editComp.val('');//先清空旧内容,包括searchtext
            // 选完了后 按enter需要关闭列表界面 需要文本框获取焦点监控
            this.editComp.focus();
            this._setCompText(text);
        },

        _dealValueWithEvents: function (value) {
            if (value === "") {
                return;
            }
            var oldValue = this.getValue();
            var value_array;
            var isStr = typeof value === "string";
            if (isStr) {
                value_array = FR.parseString2Array4Tree(value, this);
                if (FR.isEmptyArray(value_array)) {
                    value_array = value.split(this.options.delimiter);
                }
            } else {
                //null,undefined,[]都会被处理成[],满足DEC-352以及REPORT-6775的要求
                //含有length等属性的类数组对象也会处理成标准的数组
                value_array = $.makeArray(value);
            }
            var result_array = [];
            var true_value = [];
            if (!this.options.mutiSelection) {
                FR.findTrueValue(this.options.data.getData(), 0, value_array, result_array, true_value);
            } else {
                value_array = FR.parseTo2DArray(value_array);
                for (var m = 0; m < value_array.length; m++) {
                    FR.findTrueValue(this.options.data.getData(), 0,
                        $.isArray(value_array[m]) ? value_array[m] : value_array[m].split(","),
                        result_array, true_value);
                }
            }

            if (result_array.length !== 0) {
                result_array = this.options.mutiSelection ? result_array : result_array[0];
                //有对应的节点
                this.text = (this.options.returnFullPath || this.options.mutiSelection) ? result_array : [result_array[result_array.length - 1]];
                this.value = this.options.mutiSelection ? true_value : true_value[0];
            } else {
                //没有对应的节点，属于自定义值
                //REPORT-5041 要求自定义值的字符串不被处理成分层的格式，因此如果value是字符串，那么值为[value]
                //其他类型的自定义值也要处理成数组的格式
                this.text = isStr ? [value] : value_array;
                this.value = isStr ? [value] : value_array;
            }
            this._setCompText(this.text);
            if (!FR.equals(oldValue, value)) {
                this.options.need2BuildList = true;
            }
            if (arguments[1] !== false) {
                this.fireEvent(FR.Events.AFTEREDIT);
            }
        },
        //bug84620这边专门处理直接显示控件的时候显示值，实际值这些特殊对待的东西
        dealWithDisplayValue: function (showValue) {
            if (showValue == undefined || (this.options.mutiSelection && showValue === '')) {
                return;
            }
            var value_array;
            if (typeof showValue === "string") {
                value_array = FR.parseString2Array4Tree(showValue, this);
                if (FR.isEmptyArray(value_array)) {
                    value_array = showValue.split(this.options.delimiter);
                }
            } else {
                value_array = $.makeArray(showValue);
            }
            this._setCompText(value_array.slice(0));
        },

        /**
         * @param {Array} text 文本内容集合
         * @private
         */
        _setCompText: function (text) {
            if (this.options.mutiSelection) {
                FR.TreeComboBoxEditor.superclass._setCompText.apply(this, arguments);
            } else {
                FR.TagCheckBoxEditor.superclass._setCompText.apply(this, arguments);
            }
        },

        /**
         * 重写上层关于自定义输入的方法
         */
        __makeSureInputValueInResList: function () {
            //单选时，用户的自定义输入不需要检查
            if (!this.options.mutiSelection) {
                return;
            }
            FR.TreeComboBoxEditor.superclass.__makeSureInputValueInResList.apply(this, arguments);
        },
        getValue: function (isParamTemplate) {
            return FR.getTreeValueResult(this._getEditVal(), this.options.mutiSelection, this.options.returnFullPath, isParamTemplate);
        },

        getEditValue: function () {
            return this.getFullPathValue();
        },

        //获取全路径的值,
        getFullPathValue: function () {
            return FR.getTreeValueResult(this._getEditVal(), this.options.mutiSelection, true);
        },

        _getEditVal: function () {
            var res = [];
            if (this.editComp && this.editComp.val() === "" && !this.options.mutiSelection) {
                res = [];
            }
            if (this.value) {
                res = this.value;
            } else if (this.$view && this.options.isInited && $.isFunction(this.$view.getTCPValue)) {
                if (!this.options.mutiSelection) {
                    this.value = this.$view.getTCPValue()
                        || this.editComp.val().split(this.options.delimiter);
                } else {
                    this.value = this.$view.getTCPValues()
                        || this.editComp.val().split(this.options.delimiter);
                }
                res = this.value;
            }
            return res;
        },

        recoveryValue: function () {
            FR.TreeComboBoxEditor.superclass.recoveryValue.apply(this, arguments);
            this.value = this.options.oldValue;//下拉树会有value属性也要还原
        },

        getText: function () {
            var res;
            if (this.text) {
                res = this.text;
            } else {
                res = FR.parseString2Array4Tree(this.editComp.val(), this)
            }
            return FR.getTreeValueResult(res, this.options.mutiSelection, this.options.returnFullPath);
        },

        fixViewWidth: function () {
            FR.TreeComboBoxEditor.superclass.fixViewWidth.apply(this, arguments);
            this.options.oriWidth = this.$view.width();
        },

        /**
         * 判断是否是下拉树
         * @returns {Boolean} 返回是否是下拉树
         */
        isComboBoxTree: function () {
            return true;
        },

        reset: function () {
            this._dealValueWithEvents([]);
            this.shouldReBuildList();
            this.options.isInited = false;
        },

        /**
         * 获取treeview中所有选中的节点的Item数组
         * @returns {*} 返回选中节点
         */
        getValueNodes: function () {
            return this.$view.getTSNs();
        },

        /**
         * 获取treeview中指定ID的节点
         * @param {String} nodeid ID
         * @returns {*} 返回节点
         */
        getNode: function (nodeid) {
            return this.$view.getNode(nodeid);
        },

        /**
         * 获取选中的节点
         * @returns {*} 返回被选中的节点
         */
        getSelectedNodes: function () {
            this.selectedNodes = this.getValueNodes();
            this.fireEvent(FR.Events.DEALSELECTEDNODES);
            return this.selectedNodes;
        },

        /**
         * 根据ID获取节点
         * @param {String} nodeid ID
         * @param {Array} nodes 所有节点
         * @returns {*} 返回节点对象
         */
        getNodeByID: function (nodeid, nodes) {
            if (!nodes) {
                nodes = this.options.data.getData();
            }
            for (var i = 0, len = nodes.length; i < len; i++) {
                if (nodes[i].getID() === nodeid) {
                    return nodes[i];
                }
                if (nodes[i].ChildNodes || (nodes[i].data && nodes[i].data.ChildNodes)) {
                    var children = nodes[i].getChildren();
                    if (!children || (children.length === 0)) {
                        continue;
                    }
                    var resultFromChildren = this.getNodeByID(nodeid, children);
                    if (resultFromChildren) {
                        return resultFromChildren;
                    }
                }
            }
        },
        isValueInList: function (cValue) {
            if (_.isArray(cValue) && FR.isEmpty(cValue.toString())) {
                return true;//如果是[""]说明是空值这边就不做校验了.
            }
            if (this.options.data.options.treeLoader
                && this.options.data.options.treeLoader.options
                && this.options.data.options.treeLoader.options.rootSource
                && this.options.data.options.treeLoader.options.rootSource._findShowValue) {
                return this.options.data.options.treeLoader.options.rootSource._findShowValue(cValue, false) != null;
            }
            return true;
        },
        /**
         * 校验是否符合规则(下拉树比较特殊必须通过全路径值去校验)
         * @returns {Boolean} 返回是否符合规则
         */
        isValidate: function (cValue) {
            var value = cValue != null ? cValue : this.getFullPathValue();
            if (!FR.BaseComboBoxEditor.superclass.isValidate.apply(this, [value])) {
                return false;
            }
            if (!this.options.customData && !FR.isEmpty(value) && !this.isValueInList(value)) {
                this.errorMsg = FR.i18nText("FR-Engine-Not_In_List");
                this.invalidateCss();
                return false;
            }

            return true;
        }
    });
    $.shortcut('treecombobox', FR.TreeComboBoxEditor);
})(jQuery);
/*
 * Copyright (c) 2001-2014,FineReport Inc, All Rights Reserved.
 */

/**
 * 日期（时间）控件
 *
 *     @example
 *     var $div = $('<div style="position:absolute;left:20px;top:20px;width:400px;height:400px">').appendTo('body');
 *     var editor = new FR.DateTimeEditor({
 *           renderEl : $div,
 *           format : 'yyyy-MM-dd',     //日期格式
 *           startDate : "2010-08-08",  //起始日期
 *           endDate : "2010-10-10",    //结束日期
 *           editable : true,     //是否允许手动输入日期
 *           value : "2010-10-01"
 *      });
 *
 * @class FR.DateTimeEditor
 * @extends FR.BaseDateTimeEditor
 *
 * @cfg {JSON} options 属性配置
 * @cfg {String} [options.format='yyyy-MM-dd'] 日期控件值的格式
 * @cfg {Boolean} [options.directEdit=true] 是否可以直接编辑日期
 */
FR.DateTimeEditor = FR.extend(FR.BaseDateTimeEditor, /**@class FR.DateTimeEditor */{
    _defaultConfig: function () {
        return $.extend(FR.DateTimeEditor.superclass._defaultConfig.apply(), {
            format: 'yyyy-MM-dd',
            directEdit: true
        });
    },
    _init: function () {
        FR.DateTimeEditor.superclass._init.apply(this, arguments);
        this.switchArrow();
        if (this.options.widgetCss && this.options.widgetCss.length !== 0) {
            $.each(this.options.widgetCss, function (i, item) {
                FR.$import(item, 'css', true);
            });
        }
        var o = this.options;
        this.viewMode = this._initViewMode();
        this.std = this._createStartDate(o.startDate, o.format, this.viewMode);
        this.edd = this._createEndDate(o.endDate, o.format, this.viewMode);
        var self = this;
        if(!this.$view){
            this.$view = $('<div/>').appendTo(FR.$view_container).hide();
        }
        this.editComp.keydown(function (e) {
            self.editComp[0].realValue = null;
        });
        $(this.editComp).keyup(function () {
            if ($(this).val() == self.oriText) {
                return;
            }
            self.isValidateInput();
            self.oriText = $(this).val();
            self.fireEvent(FR.Events.AFTEREDIT);
        })
    },
    getArrowIconHeight : function(){
        return 17;
    },
    switchArrow:function(){
        this.arrow.switchClass('fr-trigger-center', 'fr-date-trigger-center');
    },

    _applyInvalidCss: function(title){
        this.errorMsg = title;
        this.invalidateCss();
    },

    onTriggerClick: function (e) {
        if (!this.isEnabled()) {
            return;
        }
        if (document.activeElement != this.editComp[0]) {
            this.editComp.focus();
        }
        // 点击的时候再创建calendar窗口，便于及时的修改某些属性，比如startDate
        if(this.isExpanded()){
            if (FR.Browser.isIE8() && this.$view.css('visibility') == 'hidden') {
                this.$view.css("visibility", "visible");
            } else {
                this.$view.show();
            }
        }else{
            this.$view.empty();
            this._createCalendar();
        }
    },
    _showView: function () {
        if (FR.Browser.isIE8() && this.$view.css('visibility') == 'hidden') {
            this.$view.css("visibility", "visible");
        } else {
            this.$view.show();
        }
    },
    _createStartDate: function(st, fmt, viewMode){
        if(FR.isEmpty(st)){
            return null;
        }
        var std = FR.str2Date(st, fmt);
        switch(viewMode){
            case 0:
                return new Date(std.getFullYear(), std.getMonth(), 1, 0, 0, 0);

            case 1:
                return new Date(std.getFullYear(), std.getMonth(), std.getDate(), 0, 0, 0);
            case 2:
                var today = new Date();
                today.setHours(0);
                today.setMinutes(0);
                today.setSeconds(0);
                return today;
            case 3:
                return new Date(std.getFullYear(), std.getMonth(), std.getDate(), 0, 0, 0);
            default:
                return std;
        }
    },

    _createEndDate: function(ed, fmt, viewMode){
        if(FR.isEmpty(ed)){
            return null;
        }
        var edd = FR.str2Date(ed, fmt);
        switch(viewMode){
            case 0:
                return new Date(edd.getFullYear(), edd.getMonth(), edd.getMonthDays(), 23, 59, 59);
            case 1:
                return new Date(edd.getFullYear(), edd.getMonth(), edd.getDate(), 23, 59, 59);
            case 2:
                var today = new Date();
                today.setHours(23);
                today.setMinutes(59);
                today.setSeconds(59);
                return today;
            case 3:
                return new Date(edd.getFullYear(), edd.getMonth(), edd.getDate(), 23, 59, 59);
            default:
                return edd;
        }
    },

    modifyPosition: function(){
        this.tH = this.$view.height();
        this.tW = this.$view.width();
        FR.DateTimeEditor.superclass.modifyPosition.apply(this, arguments);
    },

    _initViewMode: function(){
        var o = this.options;
        var viewMode = 1;//年月日
        if (o.format.match(/[YyDd]/) && o.format.match(/[Hh]/)) {
            viewMode = 3;//年月日时分秒
        } else if (o.format.match(/[M]/) && !o.format.match(/[Dd]/) && !o.format.match(/[Hh]/)) {
            viewMode = 0;//年月
        } else if (!o.format.match(/[YyMDd]/)) {
            viewMode = 2;//时分秒
        }
        return viewMode;
    },

    _createCalendar: function() {
        var o = this.options;
        var self = this;
        if (this.options.need2BuildConfig === true && this.options.data) {
            this.options.data.resetStatus(this.createDependencePara4Data());
            var data = this.options.data.getData();
            if (data[0].data) {
                if (data[0].data.startDate) {
                    var sd = new Date(data[0].data.startDate);
                    if (!FR.isInvalidDate(sd)) {
                        o.startDate = FR.date2Str(sd, 'yyyy-MM-dd');
                        this.std = this._createStartDate(o.startDate, o.format, this.viewMode);
                    }
                }
                if (data[0].data.endDate) {
                    var ed = new Date(data[0].data.endDate);
                    if (!FR.isInvalidDate(ed)) {
                        o.endDate = FR.date2Str(ed, 'yyyy-MM-dd');
                        this.edd = this._createEndDate(o.endDate, o.format, this.viewMode);
                    }
                }
            }
            this.options.rebuildConfig = false;
        }
        this.datepicker = new FR.DatePicker({
            renderEl: this.$view,
            viewMode: this.viewMode,
            date: FR.str2Date(this.editComp.val(), o.format),
            dateFormat: o.format,
            startDate: this.std,
            endDate: this.edd,
            onDateUpdate:function(){
                if ($(':focus').length === 0) {
                    self.editComp.focus();//控件当前没有输入框处于编辑状态,日期更新,聚焦到文本框,这时候鼠标失焦才会触发编辑结束(和其他下拉控件效果保持一致)report-1897 report-2154
                }
                self.editComp.val(FR.date2Str(this.getValue(), o.format));
                self.isValidateInput();
                self.fireEvent(FR.Events.AFTEREDIT);
            }
        });
        if (FR.Browser.isIE8() && this.$view.css('visibility') == 'hidden') {
            this.$view.css("visibility", "visible");
        } else {
            this.$view.show();
        }
        $(document).bind('mousedown', this, this.collapseIf);
        this.modifyPosition();
    },

    getValue: function () {
        var format = this.options.format;
        if (!this.options.returnDate) {
            var value = this.editComp.val();
            return FR.str2Date(value, format) == null ? "" : value;
        }
        // richer:这里是用来直接编辑日期的
        var currentValue = new Date();
        if (this.editComp[0].realValue) {
            currentValue.setTime(this.editComp[0].realValue.getTime());
        } else {
            currentValue = this.editComp.val();
        }
        //james：看看填入的值是不是正确的
        if (!currentValue) {
            return '';
        }
        var returnDate = (currentValue instanceof Date) ? currentValue : FR.str2Date(currentValue, format);
        // james：日历控件统一返回Date型的值，如果不是Date，就返回空，这里没有返回undefined
        return (returnDate == null) ? '' : returnDate;
    },

    isValidateInput: function (cValue) {
        var format = this.options.format;
        var startDate = this.std;
        var endDate = this.edd;

        // 这个自动修复输入数据要考虑个问题 正在输入的时候不应该自动修改
        // 应该做个延时处理 一段时间后如果值没变 就执行
        var self = this;
        var matchFormat = true;
        var custom = this.options.customFormat;
        var dv = cValue ? cValue : this.editComp.val();
        //REPORT-681
        if (this.options.allowBlank !== false && FR.isEmpty(dv)) {
            return;
        }
        var dt = FR.matchDateFormat(dv, format);
        if (!custom && !dt) {
            matchFormat = false;
            var reverse = function() {
                var currentDv = self.editComp.val();
                if (dv == currentDv) {
                    var arr = self.getDefaultSupportFormat();
                    for (var i=0; i<arr.length; i++) {
                        var result = FR.matchDateFormat(dv, arr[i]);
                        if (result) {
                            dt = result;
                            matchFormat = true;
                            self.editComp.val(FR.date2Str(dt, format));
                            this.isValidateInput();
                            break;
                        }
                    }
                }
            };
            reverse.defer(1000, this);
        }
        if (!custom && !matchFormat) {
            // 格式不正确的话dv是""，加上浏览器不支持的日期类型情况都在这里处理
            if (!FR.matchDateFormat(dv, format)) {
                this._applyInvalidCss(FR.i18nText("FR-Engine_Please_input_with_right_format") + ":" + format);
            }
        } else if (startDate && !FR.isInvalidDate(new Date(startDate)) && dt < new Date(startDate)) {
            this._applyInvalidCss(FR.i18nText("Err-The_number_is_less_than_the_minimum_value") + FR.date2Str(startDate, 'yyyy-MM-dd'));
        } else if (endDate && !FR.isInvalidDate(new Date(endDate)) && dt > new Date(endDate)) {
            this._applyInvalidCss(FR.i18nText("Err-The_number_is_larger_than_the_maximum_value") + FR.date2Str(endDate, 'yyyy-MM-dd'));
        } else if (dt > new Date(2999,11,31) || dt < new Date(1900,0,1)) {
            this._applyInvalidCss("out of range");
        } else {
            this.validateCss();
        }
    },

    reset: function() {
        FR.DateTimeEditor.superclass.reset.apply(this, arguments);
        this.editComp[0].realValue = null;
        this.options.currentDateTime = null;
        this.options.need2BuildConfig = true;
        if (this.options.data) {
            delete this.options.data.records;
        }
    }
});
$.shortcut("datetime", FR.DateTimeEditor);
/*
 * Copyright (c) 2001-2014,FineReport Inc, All Rights Reserved.
 */

;
(function ($) {
    /**
     * 复选按钮组。一系列的复选按钮组成的控件，可以选择其中的零个或者多个。
     *
     *     @example
     *     var editor = new FR.CheckBoxGroup({
     *          renderEl : 'body',
     *          width : 200,
     *          height : 100,
     *          columnsInRow : 1,
     *          mode : 'local',
     *          items : [
     *              {text : 'apple', value : '1'},
     *              {text : 'orange', value : '2'},
     *              {text : 'banana', value : '3'}
     *          ]
     *     });
     *
     * @class FR.CheckBoxGroup
     * @extends FR.ToggleButtonGroup
     *
     * @cfg {JSON} options 配置属性
     * @cfg {Boolean} [options.adaptive=false] 是否自使用宽度换行，如果为true，将自动计算每行放置多少个子控件
     * @cfg {Number} [options.columnsInRow=0] 每行包含子控件的个数，0表示只有一行，全部子控件都在这一行里面
     * @cfg {String} [options.delimiter=','] 返回值的分隔符，当控件返回多个值是，以指定的分隔符将每个值连接起来
     * @cfg {String} [options.startSymbol=''] 返回值的起始补充符，默认为空
     * @cfg {String} [options.endSymbol=''] 返回值的结束补充符，默认为空
     */
    FR.CheckBoxGroup = FR.extend(FR.ToggleButtonGroup, {
        lbox_class: 'fr-group-box',
        sbox_class: 'fr-group-span',

        _defaultConfig: function () {
            return $.extend(FR.CheckBoxGroup.superclass._defaultConfig.apply(), {
                delimiter: ',',
                startSymbol: '',
                endSymbol: '',
                adaptive:false
            });
        },

        _init: function () {
            FR.CheckBoxGroup.superclass._init.apply(this, arguments);
        },

        changeAllState: function (state) {
            if (this.buttonArray) {
                //全选或全不选时，按钮组中所有项先只更改前端的状态，单独拎出最后一个执行fireEvent
                for (var i = 0, len = this.buttonArray.length - 1; i < len; i++) {
                    this.buttonArray[i].setSelectedWithoutEvent(state);
                }
                this.buttonArray[this.buttonArray.length - 1].setSelected(state);
            }
        },

        _setItems: function (items) {
            var records = items || [];
            var self = this;
            if(self.buttonArray){
                self.buttonArray.clear();
            }
            $.each(records, function (idx, it) {
                if (self.options.adaptive) {
                    var outter = $("<span></span>")
                        .addClass(self.sbox_class)
                        .appendTo(self.$container);
                } else {
                    var outter = $("<span/>").addClass(self.sbox_class);
                    var gridElement = {
                        column: idx % self.gridConfig.columns,
                        row: Math.floor(idx / self.gridConfig.columns),
                        el: outter
                    };
                    self.gridConfig.items.push(gridElement);
                }
                self.buttonArray[idx] = self.initItemBox(idx, it, outter);
                self.buttonArray[idx].on(FR.Events.BEFORESTATECHANGE,
                    function () {
                        self.fireEvent(FR.Events.BEFORESTATECHANGE);
                    });
                self.buttonArray[idx].on(FR.Events.STATECHANGE, function () {
                    self.fireEvent(FR.Events.STATECHANGE, idx, this
                        .selected());

                    self._checkInnerBoxState();
                    self.fireEvent(FR.Events.AFTEREDIT);
                });
            });
            this._checkChooseAll();
        },

        initItemBox: function (idx, it, outter) {
            return new FR.CheckBox({
                renderEl: $("<div/>").appendTo(outter),
                disabled: this.options.disabled,
                text: it.getShowValue(),
                fieldValue: it.getValue(),
                sessionID: this.options.sessionID,
                widgetName: this.options.widgetName,
                fontSize: this.options.fontSize
            });
        },
        initInnerBox: function (el) {
            return new FR.CheckBox({
                renderEl: el,
                disabled: this.options.disabled,
                text: FR.i18nText('FR-Engine_Choose_All'),
                fontSize: this.options.fontSize
            });
        },
        getSelectedItems: function () {
            return $('.fr-checkbox-checkon', this.$container);
        },

        doResize: function (give) {
            FR.ToggleButtonGroup.superclass.doResize.call(this, give);
            this._checkTable();
        },

        _checkChooseAll: function () {
            if (!this.options.adaptive) {
                this.grid = new FR.GridLayout(this.gridConfig);
                this.grid.element.doLayout();
                this._checkTable();
            }
            if (this.options.chooseAll) {
                var el;
                var self = this;
                if (this.options.adaptive) {
                    var parent = this.options.form ? this.element : this.element
                        .parent();
                    this.options.form
                    || this.element.height(parseInt(parent.height()) - 19);//这边高度应该是整个全选div的高度加留白的高度
                    el = $("<span/>").addClass(this.sbox_class).appendTo(parent);
                } else {
                    el = $("<span/>").addClass(this.sbox_class);
                    var count = this.buttonArray.length;
                    var gridElement = {
                        column: count % this.gridConfig.columns,
                        row: Math.floor(count / this.gridConfig.columns),
                        el: el
                    };
                    this.gridConfig.items.push(gridElement);
                }
                this.innerCheckBox = self.initInnerBox(el);
                this.innerCheckBox.on(FR.Events.STATECHANGE, function () {
                    self.changeAllState(self.innerCheckBox.isSelected());
                });
            }
            if (!this.options.adaptive) {
                this.grid = new FR.GridLayout(this.gridConfig);
                this.grid.element.doLayout();
                this._checkTable();
            }
        },

        _checkInnerBoxState: function () {
            if (this.options.chooseAll) {
                var selectedItems = this.getSelectedItems();
                var checkonCount = selectedItems.length;
                //决策报表复选框组或者普通报表非自适应复选框组，点击全选this.getSelectedItems()获取的选中按钮总是包含全选按钮
                if (this.options.form || this.options.adaptive === false) {
                    var n = this.innerCheckBox.isSelected() ? 1 : 0;
                    checkonCount = selectedItems.length - n;
                }

                if (checkonCount === this.buttonArray.length) {
                    this.innerCheckBox.setSelectedWithoutEvent(true);

                } else {
                    this.innerCheckBox.setSelectedWithoutEvent(false);
                }
            }
        },

        getValue: function () {
            return this.getTV(false);
        },

        getText: function () {
            return this.getTV(true);
        },

        getTV: function (getText) {
            var self = this;
            var valueArray = [];
            var noSelectedObject = this.options.noSelected;
            $.each(self.buttonArray, function (idx, it) {
                if (noSelectedObject) {
                    if (it.selected()) {
                        var re = self.options.data.getRecord(idx);
                        valueArray[idx] = getText ? re.getShowValue() : re.getValue();
                    } else {
                        valueArray[idx] = noSelectedObject;
                    }
                } else if (it.selected()) {
                    var rec = self.options.data.getRecord(idx);
                    valueArray[valueArray.length] = getText ? rec.getShowValue() : rec.getValue();
                }
            });
            if (this.options.returnArray) {
                return valueArray;
            }
            var resultStr = this.options.startSymbol
                + valueArray.join(this.options.delimiter)
                + this.options.endSymbol;
            return resultStr;
        },

        _dealValueWithEvents: function (value) {
            var self = this;
            var argument = arguments[1];
            var setValueFunc = function () {
                if (self.isBoxBuild !== true) {
                    return;
                }
                clearInterval(sh);
                var oldValue = self.getValue();
                if (typeof value === "string") {
                    var value_array = value.split(self.options.delimiter);
                } else {
                    var value_array = $.makeArray(value);
                }
                if (!self.options.returnArray) {
                    value = value + "";
                    value_array = value.substring(
                            self.options.startSymbol.length,
                            value.length - self.options.endSymbol.length)
                        .split(self.options.delimiter);
                }
                for (var i = 0; i < self.buttonArray.length; i++) {
                    self.buttonArray[i].setSelectedWithoutEvent(false);
                }
                $.each(value_array, function (idx, v) {
                    for (var i = 0, len = self.buttonArray.length; i < len; i++) {
                        if (self.buttonArray[i].options.fieldValue == v || self.buttonArray[i].options.text == v) {
                            self.buttonArray[i]
                                .setSelectedWithoutEvent(true);
                            break;
                        }
                    }
                });
                //bug90443,处理完值之后检查下全选按钮的状态
                self._checkInnerBoxState();
                if (argument !== false) {
                    self.fireEvent(FR.Events.CHANGE, value, oldValue);
                }
            }
            if (this.isBoxBuild === true) {
                setValueFunc();
                return;
            }
            var sh = setInterval(setValueFunc, 100);
        }
    });
    $.shortcut("checkboxgroup", FR.CheckBoxGroup);

})(jQuery);
;(function ($) {
    /**
     * 单选按钮组
     *
     *     @example
     *     var editor = new FR.RadioGroup({
     *          renderEl : 'body',
     *          width : 200,
     *          height : 100,
     *          columnsInRow : 3,       //一行能显示的个数
     *          items : [
     *                  {text : '111', value : '1'},
     *                  {text : '222', value : '2'},
     *                  {text : '333', value : '3'},
     *                  {text : '444', value : '4'},
     *                  {text : '555', value : '5'},
     *                  {text : '666', value : '6'}
     *          ]
     *     });
     *
     * @class FR.RadioGroup
     * @extends FR.ToggleButtonGroup
     *
     * @cfg {JSON} options 配置属性
     * @cfg {Boolean} [options.adaptive=false] 是否自使用宽度换行，如果为true，将自动计算每行放置多少个子控件
     * @cfg {Number} [options.columnsInRow=0] 每行包含子控件的个数，0表示只有一行，全部子控件都在这一行里面
     */
    FR.RadioGroup = FR.extend(FR.ToggleButtonGroup, {

        lbox_class: 'fr-group-box',
        sbox_class: 'fr-group-span',

        _init: function () {
            FR.RadioGroup.superclass._init.apply(this, arguments);
        },

        initData: function () {
            if (this.options.data) {
                return;
            }

            if (this.options.controlAttr) {
                this.setSource(this.options.controlAttr);
                this._confirmEvents = function () {
                    this.fireEvent(FR.Events.AFTERINIT);
                };
                return;
            }

            if (this.options.widgetUrl) {
                this.options.data = FR.DataFactory.createSynchronJSONData(
                    this.options.widgetUrl, false);
                this.options.data.resetStatus(this.createDependencePara4Data());
            } else if (this.options.items) {
                this.options.data = FR.DataFactory
                    .createSynchronArrayData(this.options.items);
            }
            var self = this;
            this.options.data.afterRead(function (items) {
                if (self.isBoxBuild !== true) {
                    self._buildBox(items);
                }
            });
            this.options.data.loadData();
        },

        _setItems: function (items) {
            var textAlign = this.options.textalign ? this.options.textalign : "left";
            var records = items || [], len = records.length;
            var rname;
            if (this.options.widgetName) {
                rname = this.options.widgetName;
            } else {
                rname = "noNameChild";
            }
            var self = this;
            $.each(records, function (idx, it) {
                if (self.options.adaptive) {
                    var outter = $("<span></span>")
                        .addClass(self.sbox_class).css("text-align", textAlign)
                        .appendTo(self.$container);
                } else {
                    var outter = $("<span/>")
                        .addClass(self.sbox_class).css("text-align", textAlign);
                    var gridElement = {
                        column: idx % self.gridConfig.columns,
                        row: Math.floor(idx / self.gridConfig.columns),
                        el: outter
                    };
                    self.gridConfig.items.push(gridElement);
                }

                self.buttonArray[idx] = self.initItemRadio(idx,it,outter,rname);
                self.buttonArray[idx].on(
                    FR.Events.BEFORESTATECHANGE, function () {
                        self
                            .fireEvent(FR.Events.BEFORESTATECHANGE);
                    });
                self.buttonArray[idx].on(FR.Events.STATECHANGE,
                    function () {
                        self.assureOneButtonChecked(this);
                        if (this.selected() === true || self.getValue() == "") {
                            self.fireEvent(FR.Events.STATECHANGE, idx);
                            self.fireEvent(FR.Events.AFTEREDIT);
                        } else {
                            self.oriValue = self.getValue();
                        }
                    });
            });
            if (!self.options.adaptive) {
                this.grid = new FR.GridLayout(this.gridConfig);
                this.grid.element.doLayout();
                this._checkTable();
            }
        },

        initItemRadio: function(idx,it,outter,rname){
            return new FR.RadioButton({
                renderEl: $("<div/>").appendTo(outter),
                disabled: this.options.disabled,
                text: it.getShowValue(),
                fieldValue: it.getValue(),
                sessionID: this.options.sessionID,
                name: rname,
                fontSize: this.options.fontSize
            });
        },
        assureOneButtonChecked: function (radio) {
            var foundSelected = false;
            if (radio.isSelected()) {
                for (var i = 0, len = this.buttonArray.length; i < len; i++) {
                    if (this.buttonArray[i] == radio) {
                        foundSelected = true;
                        continue;
                    }
                    this.buttonArray[i].setSelectedWithoutEvent(false);
                }
            }
            if (!foundSelected && this.options.assureSelect === true) {
                radio.setSelectedWithoutEvent(true);
            }
        },

        getValue: function () {
            return this.getTV(false);
        },

        getText: function () {
            return this.getTV(true);
        },

        /**
         * 获取组件的显示值或者实际值
         * @private
         * @param forShowValue 是否返回显示值
         * @returns {String} 返回控件的值
         */
        getTV: function (forShowValue) {
            var self = this;
            var value = "";
            $.each(self.buttonArray, function (idx, it) {
                if (it.selected()) {
                    var record = self.options.data.getRecord(idx);
                    if (record) {
                        value = forShowValue ? record.getShowValue() : record.getValue();
                    }
                }
            });
            return value;
        },

        _dealValueWithEvents: function (value) {
            var self = this;
            var argument = arguments[1];
            var setValueFunc = function () {
                if (self.isBoxBuild !== true) {
                    return;
                }
                clearInterval(sh);
                var oldValue = self.options.value;

                if (typeof value == 'boolean') {
                    value = value ? 'true' : 'false';
                }

                if (!value && value !== 0 && value !== "") {
                    return;
                }

                for (var i = 0; i < self.buttonArray.length; i++) {
                    self.buttonArray[i].setSelectedWithoutEvent(false);
                }

                for (var i = 0, len = self.buttonArray.length; i < len; i++) {
                    if (self.buttonArray[i].options.fieldValue == value || self.buttonArray[i].options.text == value) {
                        if (argument !== false) {
                            self.buttonArray[i].setSelected(true);
                        } else {
                            self.buttonArray[i].setSelectedWithoutEvent(true);
                        }
                        break;
                    }
                }
            };
            if (this.isBoxBuild === true) {
                setValueFunc();
                return;
            }
            var sh = setInterval(setValueFunc, 100);
        },

        isValidate: function (cValue) {
            var validate = FR.RadioGroup.superclass.isValidate.apply(this, arguments);
            if (validate === false) {
                if (this.oriValue) {
                    this._dealValueWithEvents(this.oriValue);
                }
            }
            return validate;
        }
    });
    $.shortcut("radiogroup", FR.RadioGroup);
})(jQuery);
;
(function ($) {
    var regexArray = FR.BaseEditor.PluginRegex;
    regexArray.push({
        text: 'idcardRegex',
        regex: function (value) {
            return IdCardValidate(value);
        }
    });

    // 加权因子
    var Wi = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2, 1];
    // 身份证验证位值.10代表X
    var ValideCode = [1, 0, 10, 9, 8, 7, 6, 5, 4, 3, 2];

    function IdCardValidate(idCard) {
        idCard = idCard + "";
        if (idCard.length === 15) {
            //进行15位身份证的验证
            return isValidityBrithBy15IdCard(idCard);
        } else if (idCard.length === 18) {
            // 得到身份证数组
            var a_idCard = idCard.split("");
            //进行18位身份证的基本验证和第18位的验证
            if (isValidityBrithBy18IdCard(idCard) && isTrueValidateCodeBy18IdCard(a_idCard)) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    /**
     * 判断身份证号码为18位时最后的验证位是否正确
     * @param a_idCard 身份证号码数组
     * @return
     */
    function isTrueValidateCodeBy18IdCard(a_idCard) {
        var sum = 0;                             // 声明加权求和变量
        if (a_idCard[17].toLowerCase() == 'x') {
            a_idCard[17] = 10;                    // 将最后位为x的验证码替换为10方便后续操作
        }
        for (var i = 0; i < 17; i++) {
            sum += Wi[i] * a_idCard[i];            // 加权求和
        }
        valCodePosition = sum % 11;                // 得到验证码所位置
        if (a_idCard[17] == ValideCode[valCodePosition]) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * 验证18位数身份证号码中的生日是否是有效生日
     * @param idCard 18位书身份证字符串
     * @return
     */
    function isValidityBrithBy18IdCard(idCard18) {
        var year = idCard18.substring(6, 10);
        var month = idCard18.substring(10, 12);
        var day = idCard18.substring(12, 14);
        var temp_date = new Date(year, parseFloat(month) - 1, parseFloat(day));
        // 这里用getFullYear()获取年份，避免千年虫问题
        if (temp_date.getFullYear() != parseFloat(year)
            || temp_date.getMonth() != parseFloat(month) - 1
            || temp_date.getDate() != parseFloat(day)) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * 验证15位数身份证号码中的生日是否是有效生日
     * @param idCard15 15位书身份证字符串
     * @return
     */
    function isValidityBrithBy15IdCard(idCard15) {
        var year = idCard15.substring(6, 8);
        var month = idCard15.substring(8, 10);
        var day = idCard15.substring(10, 12);
        var temp_date = new Date(year, parseFloat(month) - 1, parseFloat(day));
        // 对于老身份证中的你年龄则不需考虑千年虫问题而使用getYear()方法
        if (temp_date.getYear() != parseFloat(year)
            || temp_date.getMonth() != parseFloat(month) - 1
            || temp_date.getDate() != parseFloat(day)) {
            return false;
        } else {
            return true;
        }
    }
})(jQuery);
/**
 * Created by yaohw on 2017/7/19.
 */
/**
 * Created by yaohw on 2017/7/16.
 * FR.ReportletList 前端控件
 */


(function ($) {

    /**
     *
     * @class FR.ReportletList
     * @extends FR.Widget
     *
     * @cfg {JSON} options 属性配置
     * @cfg {JSON} options.schedule 结果报表数据
     * @cfg {String} options.baseCls dom默认样式class
     * @cfg {Boolean} options.isExpand 列表默认是否打开
     * @cfg {Number} options.minHeight 每个条目的最小高度
     * @cfg {Number} options.maxHeight 每个条目的最大高度
     * @cfg {Number} options.totalMaxHeight 总的最大高度
     * @cfg {Number} options.top 下拉列表 top和 container top之间距离
     * @type {FR.ReportletList}
     */
    FR.ReportletList = FR.extend(FR.Widget, /**@class FR.ReportletList*/{

        /**
         *
         * @returns {void|*}
         * @private
         * @cfg baseCls 默认样式
         * @cfg isExpand 列表默认关闭
         */
        _defaultConfig: function () {
            return $.extend(FR.ReportletList.superclass._defaultConfig.apply(), {
                baseCls: "fr-reportlet-menu-list-default",
                isExpand: false,
                minHeight: 36,
                maxHeight: 60,
                totalMaxHeight: 286,
                top: 28
            });
        },

        /**
         *
         * @private
         */
        _init: function () {
            var schedule = this.options.schedule, self = this;
            //只有存在数据才显示menu
            if (schedule && schedule.others.length > 0) {
                this.options.renderEl = this._createContainer();
                FR.ReportletList.superclass._init.apply(this, arguments);
                this._createContent();
                this.reloadBind2Window = function () {
                    self.reload();
                };
                $(window).on('resize', self.reloadBind2Window);
            }

        },

        /**
         * 重新生成dom节点，实现高度动态调整
         */
        reload: function () {
            //先移除所有dom元素，然后再添加
            FR.ReportletList.superclass.destroy.apply(this, arguments);
            var schedule = this.options.schedule;
            if (schedule && schedule.others.length > 0) {
                this.options.renderEl = this._createContainer();
                FR.ReportletList.superclass._init.apply(this, arguments);
                if (this.isExpand !== undefined) {
                    this.options.isExpand = this.isExpand;
                }
                this._createContent();
            }
        },

        /**
         * 销毁所有dom，并且解除window resize事件的绑定，防止浏览器resize之后重新生成。
         */
        destroy: function () {
            var self = this;
            FR.ReportletList.superclass.destroy.apply(self, arguments);
            $(window).off('resize', self.reloadBind2Window);
        },


        /**
         * 创建 reportlet list 容器
         * 不支持自定义renderEL,控件自己初始化renderEL
         * @private
         */
        _createContainer: function () {
            $('<div id="reportlet-menu-list"></div>').css('top', this.options.top + 'px').prependTo($('body'));
            return $('div#reportlet-menu-list');
        },

        /**
         * 生成reportlet list容器内的dom元素
         * @private
         */
        _createContent: function () {
            var self = this, schedule = this.options.schedule;
            //数据是根据时间排序的，因此第一个就是当前的，剩下的是全部
            var scheduleCurrent = schedule.current;
            var scheduleOthers = schedule.others;

            //当前结果报表
            var $current = $('<div id="current-reportlet"></div>');
            var $ulContent = $('<ul class="reportlet-content"></ul>');
            this._createMenuButton().appendTo($ulContent);
            $ulContent.appendTo($current);
            var $currentContent = $current.find('ul');
            var $currentContainer = $('<li class="reportlet-current-content"></li>');

            //点击当前的就把目录收起来，不然按钮太小了操作不方便
            $currentContainer.on({
                click: function (event) {
                    self.isExpand = !self.isExpand;
                    var $button = self.element.find('div#menu-button');
                    if (self.isExpand) {
                        $button.removeClass();
                        $button.addClass('menu-close-button');
                        $currentContainer.css('border-bottom', '#D4D4D4 solid 1px');
                    } else {
                        $button.removeClass();
                        $button.addClass('menu-expand-button');
                        $currentContainer.css('border-bottom', 'none');
                    }
                    self._fadeInOrOut(FR.emptyFn());
                    event.stopPropagation();
                }
            });
            if (this.options.isExpand === false) {
                $currentContainer.css('border-bottom', 'none');
            }
            //生成具体信息
            this.otherLetHeight = 0;
            this.currentLetHeight = 0;
            this._createDetailsContent($currentContainer, scheduleCurrent, true).appendTo($currentContent);
            //当前的结果追加到页面上显示
            $current.appendTo(this.element);

            if (scheduleOthers.length > 0) {
                // 其他结果报表
                var $otherLet = $('<div id="reportlet-list"></div>');
                $('<ul class="reportlet-content"></ul>').appendTo($otherLet);
                var $allContent = $otherLet.find('ul');
                for (var i = 0; i < scheduleOthers.length; i++) {
                    var $allContainer = $('<li class="reportlet-content"></li>');
                    $allContainer.attr('current', scheduleOthers[i].currentRes);
                    $allContainer.attr('firetime', scheduleOthers[i].fireTime);
                    $allContainer.on({
                        click: function (event) {
                            window.location.href = FR.servletURL + '?op=sch&taskName=' + FR.cjkEncode(encodeURIComponent(self.options.taskName)) +
                                '&fireTime=' + $(this).attr('firetime') +
                                '&currentRes=' + FR.cjkEncode(encodeURIComponent($(this).attr('current')));
                        },
                        mousedown: function (event) {
                            $(this).css('background', '#D8E8FC');
                        }
                    });
                    this._createDetailsContent($allContainer, scheduleOthers[i], false).appendTo($allContent);
                }
                $allContent.find('li:last').css('border-bottom', 'none');
                this._makeOtherLetScrollable($otherLet);
                if (!this.options.isExpand) {
                    $otherLet.css('display', 'none');
                }
                $otherLet.appendTo(this.element);
            }
        },

        /**
         * 如果高度超出最大高度，那么出现滚动条
         * @param $otherLet
         * @private
         */
        _makeOtherLetScrollable: function ($otherLet) {
            if (this.otherLetHeight + this.currentLetHeight > this.options.totalMaxHeight) {
                $otherLet.css('overflow-y', 'scroll').css({
                    'height': this.options.totalMaxHeight - this.currentLetHeight,
                    'overflow-y': 'scroll'
                });
            } else {
                $otherLet.css('overflow-y', 'scroll').css({
                    'height': '',
                    'overflow-y': ''
                });
            }
        },

        /**
         * 创建menu按钮 并绑定事件
         * @private
         */
        _createMenuButton: function () {
            //判断当前列表是否展开
            this.isExpand = this.options.isExpand;
            var self = this;
            var $button = this.isExpand
                ? $('<div id="menu-button" class="menu-close-button"></div>')
                : $('<div id="menu-button" class="menu-expand-button"></div>');
            $button.on({
                click: function (event) {
                    var $firstLet = $('li.reportlet-current-content');
                    self.isExpand = !self.isExpand;
                    if (self.isExpand) {
                        $button.removeClass();
                        $button.addClass('menu-close-button');
                        $firstLet.css('border-bottom', '#D4D4D4 solid 1px');
                    } else {
                        $button.removeClass();
                        $button.addClass('menu-expand-button');
                        $firstLet.css('border-bottom', 'none');
                    }
                    self._fadeInOrOut(FR.emptyFn());
                    event.stopPropagation();
                }
            });
            return $button;
        },
        /**
         * 创建每一个li节点下的详细内容
         * @private
         * @param $container 容器
         * @param data 数据
         * @param hasExpandButton 是否有收起按钮
         */
        _createDetailsContent: function ($container, data, hasExpandButton) {
            var params = data.params, self = this;
            //title
            var $divTitle = $('<div class="title"></div>');
            //生成时间
            var $time = $('<span class="generated-time"></span>');
            $time.html(FR.i18nText('FR-ReportletList_Generated_Time') + ':&nbsp;&nbsp;&nbsp;&nbsp;' + data.generatedTime);
            $time.appendTo($divTitle);

            //生成分隔符
            $('<span class="tp-delimiter"></span>').appendTo($divTitle);
            $divTitle.appendTo($container);

            //param
            var $divParam = $('<div class="param"></div>');
            for (var i = 0; i < params.length; i++) {
                var $param = $('<span class="param"></span>');
                $param.html('&nbsp;&nbsp;&nbsp;&nbsp;' + params[i].key + ':&nbsp;&nbsp;' + params[i].value);
                $param.appendTo($divParam);
            }
            this._changeStyleWidth($divParam, hasExpandButton);
            $divParam.appendTo($container);
            return $container;
        },
        /**
         *
         * 显示或隐藏报表
         * @param callback 展示或隐藏列表之后的回掉函数
         * @private
         */
        _fadeInOrOut: function (callback) {
            //获取其他结果报表所在的div
            var $other = this.element.find("div#reportlet-list");
            if ($other && $other.length > 0) {
                $other.fadeToggle('fast', callback);
            }
        },
        /**
         *
         * @param $divParam div.param
         * @param hasExpandButton 是否是第一行
         * @private
         */
        _changeStyleWidth: function ($divParam, hasExpandButton) {
            var amendHeightClass = 'param-amend-height-hidden';
            if (hasExpandButton) {
                amendHeightClass = 'param-amend-height-scroll';
            }
            $divParam.appendTo('body');
            if ($divParam[0].clientHeight > this.options.minHeight) {
                if (hasExpandButton) {
                    //只有一个，不用叠加，加一是因为border
                    this.currentLetHeight = this.options.maxHeight + 1;
                } else {
                    //不断叠加，加一是因为border
                    this.otherLetHeight += this.options.maxHeight + 1;
                }
                $divParam.addClass(amendHeightClass);
            } else {
                if (hasExpandButton) {
                    //只有一个，不用叠加，加一是因为border
                    this.currentLetHeight = this.options.minHeight + 1;
                } else {
                    //不断叠加，加一是因为border
                    this.otherLetHeight += this.options.minHeight + 1;
                }
                $divParam.removeClass(amendHeightClass);
            }
        }
    });
    $.shortcut("reportletlist", FR.ReportletList);
}(jQuery));
(function () {

    FR.Picture = FR.extend(FR.Widget, {
        _defaultConfig: function () {
            return $.extend(FR.Widget.superclass._defaultConfig.apply(), {
                baseCls: 'fr-picture'
            });
        },

        _init: function () {
            FR.Picture.superclass._init.apply(this, arguments);
            var o = this.options;
            this.doResize(o);
            var th = this;
    		var link = JSON.stringify(o.link);
        	var picwidget = this.element;
        	var picid;
        	if(o.showtype === 0){
        		th._tile(o,picwidget,picid,link);//平铺
        	}else if(o.showtype === 1){
        		th._default(o,picwidget,picid,link);//默认
        	}else if(o.showtype === 2){
        		th._stretch(o,picwidget,picid,link);//拉伸
        	}else if(o.showtype === 4){
        		th._autofix(o,picwidget,picid,link);//适应
        	}
        	var timesRun = 0;
			var rf = self.setInterval(function(){
				$(window).resize();
				timesRun += 1;
				if(timesRun === 1){
					self.clearInterval(rf);
				}
			},50);
        },

        _default : function(o,picwidget,picid,link){
        	picid = $('<div id="'+o.widgetName+'" style="position:absolute;' + 'left:0px;'+'top:0px;"></div>').appendTo(picwidget);
        	var img;
        	if(link.length >2){//如果有超链接
        		var span = $('<span class="link'+o.widgetName+'"></span>').appendTo(picid);
        		span.css("cursor","pointer");
        		span.attr('onclick','FR.doHyperlink(event||window.event,'+link+',true)')
        		img = $('<img "img'+o.widgetName+'"></img>').appendTo(span);
        	}else{
        		img = $('<img "img'+o.widgetName+'"></img>').appendTo(picid);
        	}

        	picid.css("width",picwidget.width()+"px");
        	picid.css("height",picwidget.height()+"px");

        	img.attr("alt",o.name);//此处需传值
        	img.attr("src",o.src);//此处需传值
            img.css("position","absolute");
            img.defaultshow(picwidget.width(),picwidget.height());

        	$(window).resize(function() {
        		var oh = picwidget.height();
        		var ow = picwidget.width();
        		picid.css("width", ow+"px");
        		picid.css("height", oh+"px");
        		img.defaultshow(ow,oh);
        	});
        },

        _tile:function(o,picwidget,picid,link){
        	if(link.length >2){
           		var span = $('<span class="link'+o.widgetName+'"></span>').appendTo(picwidget);
        		span.css("cursor","pointer");
        		span.attr('onclick','FR.doHyperlink(event||window.event,'+link+',true)');
        		picid = $('<div id="'+o.widgetName+'" style="position:absolute;' + 'left:0px;'+'top:0px;"></div>').appendTo(span);
        	}else{
        		picid = $('<div id="'+o.widgetName+'" style="position:absolute;' + 'left:0px;'+'top:0px;"></div>').appendTo(picwidget);
        	}
        	picid.css("width",picwidget.width()+"px");
        	picid.css("height",picwidget.height()+"px");
        	//此处需要传图片的地址
        	picid.css("background-image" , "url("+o.src+")");

        	$(window).resize(function(){
        		var oh = picwidget.height();
        		var ow = picwidget.width();
        		picid.css("width", ow+"px");
        		picid.css("height",oh+"px");
        	});
        },

        _stretch:function(o,picwidget,picid,link){
        	picid = $('<div id="'+o.widgetName+'" style="position:absolute;' + 'left:0px;'+'top:0px;"></div>').appendTo(picwidget);
        	if(link.length >2){//如果有超链接
        		var span = $('<span class="link'+o.widgetName+'"></span>').appendTo(picid);
        		span.css("cursor","pointer");
        		span.attr('onclick','FR.doHyperlink(event||window.event,'+link+',true)')
        		img = $('<img "img'+o.widgetName+'"></img>').appendTo(span);
        	}else{
        		img = $('<img "img'+o.widgetName+'"></img>').appendTo(picid);
        	}

        	picid.css("width",picwidget.width()+"px");
        	picid.css("height",picwidget.height()+"px");

        	img.attr("alt",o.name);//此处需传值
        	img.attr("src",o.src);//此处需传值
            img.css("position","absolute");

            img.css("width",picwidget.width()+"px");
            img.css("height",picwidget.height()+"px");


        	$(window).resize(function() {
        		var oh = picwidget.height();
        		var ow = picwidget.width();
        		picid.css("width", ow+"px");
        		picid.css("height", oh+"px");
        		img.css("width", ow+"px");
        		img.css("height", oh+"px");
        	});
        },

        _autofix:function(o,picwidget,picid,link){
        	picid = $('<div id="'+o.widgetName+'" style="position:absolute;' + 'left:0px;'+'top:0px;"></div>').appendTo(picwidget);
        	var t = this;
        	var img;
        	if(link.length >2){//如果有超链接
        		var span = $('<span class="link'+o.widgetName+'"></span>').appendTo(picid);
        		span.css("cursor","pointer");
        		span.attr('onclick','FR.doHyperlink(event||window.event,'+link+',true)')
        		img = $('<img "img'+o.widgetName+'"></img>').appendTo(span);
        	}else{
        		img = $('<img "img'+o.widgetName+'"></img>').appendTo(picid);
        	}

        	picid.css("width",picwidget.width()+"px");
        	picid.css("height",picwidget.height()+"px");

        	img.attr("alt",o.name);//此处需传值
            img.css("position","absolute");

            var src = o.src;//此处需要传图片的url
            var maxWidth =picwidget.width();
            var maxHeight = picwidget.height();
            var imgwidth ;
            var imgheight;
         // 获取图片头尺寸数据后立即调整图片
			imgReady(src, function (width, height) {
				imgwidth = width;
				imgheight = height;
				t._setFix(img,src,maxWidth,maxHeight,width,height);
				t._setMiddle(img,maxWidth,maxHeight);
			});

        	$(window).resize(function() {
        		var oh = picwidget.height();
        		var ow = picwidget.width();
        		picid.css("width", ow+"px");
        		picid.css("height", oh+"px");
        		t._setFix(img,src,ow,oh,imgwidth,imgheight);
				t._setMiddle(img,ow,oh);
        	});
        },

        _setFix: function(img,src,maxWidth,maxHeight,width,height){
    		var tmph = height;
    		var tmpw = width;
    		if(tmpw>maxWidth || tmph>maxHeight){
    			while(tmpw>maxWidth || tmph>maxHeight){
//    				if(tmpw>=maxWidth){
//    					tmph = maxWidth / width * height,
//    					tmpw = maxWidth;
//    				}
//    				if(tmph>maxHeight){
//    					tmph = maxHeight;
//    					tmpw = maxHeight/height*width  ;
//    				}
                    if (maxWidth/ maxHeight  <= width / height) //原图片宽高比例 大于 图片框宽高比例
                    {
                    	tmpw = maxWidth;   //以框的宽度为标准
                    	tmph = maxWidth* ( height /  width);
                    }
                    else {   //原图片宽高比例 小于 图片框宽高比例
                    	tmpw = maxHeight  * ( width /  height);
                    	tmph = maxHeight  ;   //以框的高度为标准
                    }
    			}
    		}else{
//    			if(tmph<tmpw){
//    				tmph = maxHeight;
//    				tmpw =maxHeight /height*width;
//    			}else{
//    				tmph = maxWidth / width * height,
//    				tmpw = maxWidth;
//    			}
                if (maxWidth/ maxHeight  <= width / height) //原图片宽高比例 大于 图片框宽高比例
                {
                	tmpw = maxWidth;   //以框的宽度为标准
                	tmph = maxWidth* ( height /  width);
                }
                else {   //原图片宽高比例 小于 图片框宽高比例
                	tmpw = maxHeight  * ( width /  height);
                	tmph = maxHeight  ;   //以框的高度为标准
                }
    		}
        	img.css("width", tmpw+"px");
        	img.css("height", tmph+"px");
			img.attr("src",src);
        },

        _setMiddle: function(img,ow,oh){
        	var w = img.width();
        	var ml = (ow-w)/2;
        	var h = img.height();
        	var mt = (oh-h)/2;
        	img.css("margin-left", ml + "px");
        	img.css("margin-top", mt + "px");
        }

    });

    $.fn.defaultshow = function(w,h){
    	$(this).css("clip", "rect(0px "+w+"px "+h+"px 0px)");
    };

	var imgReady = (function () {
		var list = [], intervalId = null,

		// 用来执行队列
		tick = function () {
			var i = 0;
			for (; i < list.length; i++) {
				list[i].end ? list.splice(i--, 1) : list[i]();
			};
			!list.length && stop();
		},

		// 停止所有定时器队列
		stop = function () {
			clearInterval(intervalId);
			intervalId = null;
		};

		return function (url, ready, load, error) {
			var check, width, height, newWidth, newHeight,
				img = new Image();

			img.src = url;

			// 如果图片被缓存，则直接返回缓存数据
			if (img.complete) {
				ready(img.width, img.height);
				load && load(img.width, img.height);
				return;
			};

			// 检测图片大小的改变
			width = img.width;
			height = img.height;
			check = function () {
				newWidth = img.width;
				newHeight = img.height;
				if (newWidth !== width || newHeight !== height ||
					// 如果图片已经在其他地方加载可使用面积检测
					newWidth * newHeight > 1024
				) {
					ready(newWidth, newHeight);
					check.end = true;
				};
			};
			check();

			// 加载错误后的事件
			img.onerror = function () {
				error && error();
				check.end = true;
				img = img.onload = img.onerror = null;
			};

			// 完全加载完毕的事件
			img.onload = function () {
				load && load(img.width, img.height);
				!check.end && check();
				// IE gif动画会循环执行onload，置空onload即可
				img = img.onload = img.onerror = null;
			};

			// 加入队列中定期执行
			if (!check.end) {
				list.push(check);
				// 无论何时只允许出现一个定时器，减少浏览器性能损耗
				if (intervalId === null) intervalId = setInterval(tick, 40);
			};
		};
	})();

    $.shortcut("picture", FR.Picture);
})(jQuery);
/**
 * @class FR.RHIframe
 * @extends FR.BaseEditor
 */
(function($){

    FR.RHIframe = FR.extend(FR.BaseEditor, {

        _defaultConfig: function () {
            return $.extend(FR.RHIframe.superclass._defaultConfig.apply(), {
                baseName: 'rh.iframe',
                baseClass: 'rh.iframe',
                widgetName: "",
                src: "",
                width: "100%",
                height: "100%",
                showOverFlowX: true,
                showOverFlowY: true
            });
        },
        _init: function () {
            FR.RHIframe.superclass._init.apply(this, arguments);
            this.initData();
            // 控件属性
            var o = this.options;

            this.editComp = this.element.css({
                width: '100%',
                height: '100%'
            });
            o.iframeName = o.widgetName || this.createNoRepeatName();
            this.$iframe = $("<iframe  name=" + o.iframeName + " id="
                + o.iframeName + ">").addClass(o.baseClass).attr({
                width : '100%',
                height : '100%',
                frameborder: 0,
                scrolling: !o.showOverFlowX && !o.showOverFlowY
                    ? 'no'
                    : 'yes'
            }).appendTo(this.editComp);
            // 这里滚动条的设置 跟子页面的设置有关
            // 如果嵌入的是我们的报表或者表单 window的尺寸都是100%那就取了iframe的大小
            // 如果报表或表单内容尺寸超过的话 就会出现滚动条 那么就改下子元素 这时一般不跨域
            this.$iframe[0].onload = function () {
                if (!o.showOverFlowX || !o.showOverFlowY) {
                    try { // 可能跨域 那就不用管了
                        if (this.contentWindow) {
                            var doc = this.contentWindow.document;
                            var cc = $('.content-container', $(doc));

                            if (cc.length > 0) {
                                setOverflow(cc);
                            } else {
                                // 有可能是表单 html和body都要设置
                                setOverflow($(doc.documentElement));
                                setOverflow($(doc.body));
                            }
                            function setOverflow(cc) {
                                if (!o.showOverFlowX) {
                                    cc.css('overflow-x', 'hidden');
                                }
                                if (!o.showOverFlowY) {
                                    cc.css('overflow-y', 'hidden');
                                }
                            }
                        }
                    } catch (e) {
                        console && console.log("error");
                    }
                }
            }

            // IE里面需要设置rowspan为1才能正常显示....否则会跳过n行不显示，chrome应该是bug，一会儿好一会儿不好
            if ($.browser.msie && (this.$iframe.parent()).is("div")
                && (this.$iframe.parent().parent()).is("td")
                && (this.$iframe.parent().parent().attr("widget")) != null
                && (this.$iframe.parent().parent().parent()).is("tr")) {
//            this.$iframe.parent().parent().attr('rowspan', '1');
                // 上面这么搞有问题的，IE7或IE8杂项下，合并单元格中的网页框控件会只显示在第一行的，改成下面
                this.$iframe.parent().height("");
            } else {
                this.$iframe.css('overflow-x', o.showOverFlowX ? 'auto' : 'hidden');
                this.$iframe.css('overflow-y', o.showOverFlowY ? 'auto' : 'hidden');
            }

            if (o.controlAttr) {
                this.setValue(o.controlAttr);
            } else if (o.src) {
                this._loadIframeByGet();
            }
            if (o.disabled) {
                this._addDisableMask();
            }
        },

        createNoRepeatName: function () {
            return this.options.baseName + Math.random();
        },

        // richer:以get的方式获取ifram的参数
        _loadIframeByGet: function () {
            var src = this.options.src, self = this;
            // 获取参数组
            if (this.options.data) {
                var waitForInitComplete = [];

                for (var i = 0, len = this.options.data.getLength(); i < len; i++) {
                    var params = this.options.data.getRecord(i).getContent();
                    if (typeof params == 'object' && params.widgetName && this.options.form) {
                        var w = this.options.form.getWidgetByName(params.widgetName);
                        if (w) {
                            var para = {};
                            para[params.widgetName] = w.getValue();
                            src = src.appendQuery(para);
                        } else {
                            waitForInitComplete.push(params.widgetName);
                        }
                    } else {
                        src = self._appendQuery(src, params);
                    }
                }

                if (waitForInitComplete.length > 1) {
                    var form = this.options.form;
                    form.on(FR.Events.AFTERINIT, function () {
                        for (var c = 0; c < waitForInitComplete.length; c++) {
                            var name = waitForInitComplete[c];
                            var para = {};
                            para[name] = form.getWidgetByName(name).getValue();
                            src = src.appendQuery(para);
                        }
                        self._changeIframe(src);
                    });

                }
            }
            this._changeIframe(src);
        },

        /**
         * 给url加上给定的参数
         * @param {String} src 原地址
         * @param {Object} paras 参数对象，是一个键值对对象
         * @return {String} 添加了给定参数的url
         */
        _appendQuery: function (src, paras) {
            if (!paras) {
                return src;
            }
            // 没有问号说明还没有参数
            if (src.indexOf("?") === -1) {
                src += "?";
            }
            // 如果以问号结尾，说明没有其他参数
            if (src.endWith("?") !== false) {
            } else {
                src += "&";
            }
            // 模板
            $.each(paras, function (name, value) {
                if (typeof(name) === 'string') {
                    src += name + "=" + value;
                }
            });
            return src;
        },

        _prefix : function (src) {

        },

        /**
         * 添加一层遮罩层，用于屏蔽iframe内容的可用性
         * @private
         */
        _addDisableMask: function () {
            this.mask = $('<span/>').css({
                backgroundColor : '#66B9FF',
                height: this.options.height,
                width: this.options.width,
                left: this.element.offset().left
            }).appendTo(this.element);
        },

        /**
         * 设置网页框控件的地址并重新加载页面(保留原参数)
         * @param {String} v 新的地址
         */
        setValue : function(v) {
            this.options.src = v;
            this._loadIframeByGet();
        },

        /**
         * 获取网页框的src地址
         * @returns {String} 地址
         */
        getValue: function () {
            return this.$iframe.attr("src");
        },

        _dealValueWithEvents: function (src) {
            this.options.src = src;
            this._changeIframe(src);
        },

        /**
         * 改变iframe的src指向的地址
         * @param src 新的地址
         * @private
         */
        _changeIframe: function (src) {
            if (this.options.sourceType === 'url') {
                src = encodeURI(src);
            }
            this.$iframe.attr("src", src);
        },

        /**
         * 加载指定的url
         * @param url 网页地址
         */
        loadUrl : function(url) {
            this.$iframe.attr("src", url);
        },

        setEnable: function (enable) {
            FR.RHIframe.superclass.setEnable.apply(this, arguments);
            if (enable) {
                if (this.mask) {
                    this.mask.remove();
                }
            } else {
                if (this.mask) {
                    this.mask.show();
                } else {
                    this._addDisableMask();
                }
            }
        },

        doResize: function (give) {
            FR.RHIframe.superclass.doResize.apply(this, arguments);
            if (this.submitForm) {
                this.submitForm.submit();
            }
        },

        /**
         * 重置网页框控件
         */
        reload: function () {
            this.options.data.clearData();
            this._loadIframeByGet();
        }
    });
    $.shortcut('rh.iframe', FR.RHIframe);
})(jQuery);
;(function ($) {
    // FR.TreeNodeToggleButton start
    FR.TreeNodeToggleButton = FR.extend(FR.ToggleButton, {
        selected_class: 'x-treenode-expand',
        unselected_class: 'x-treenode-unexpand',
        son_array: undefined,
        expand_state: false,

        _init: function () {
            FR.TreeNodeToggleButton.superclass._init.apply(this, arguments);
            // b:ie paint special to change
            if (FR.Browser.isIE()) {
                this.$btn.css('background-position', '-1px -2px');
            }
        },

        _node_init: function () {
            var o = this.options = $.extend({
                expand: false
            }, this.options);

            if (o.sonarray && o.sonarray.length > 1) {
                if (o.sonarray[0] == -1) {
                    this.expand_mode = 0;
                } else {
                    this.expand_mode = 1;
                }

                var contentPane = _g();
                var cp = contentPane.curLGP;

                if (!contentPane.TREEMGR) {
                    contentPane.TREEMGR = [];
                    // 耦合很高，但这控件并不算是普遍空间
                    contentPane.on(FR.Events.STARTLOAD, function (pane) {
                        if (contentPane.TREEMGR && pane) {
                            contentPane.TREEMGR[pane.idx] = null;
                        }
                    });
                }

                if (!contentPane.TREEMGR[o.reportIndex]) {
                    contentPane.TREEMGR[o.reportIndex] = {};
                    contentPane.TREEMGR[o.reportIndex].nodes = [];
                    contentPane.TREEMGR[o.reportIndex].location_nodes = {};
                }

                // 不是view的特殊处理的话
                if (!this.options.parNode) {
                    for (var i = 0; i < contentPane.TREEMGR[o.reportIndex].nodes.length; i++) {
                        var treenode = contentPane.TREEMGR[o.reportIndex].nodes[i];
                        if (this.initNodeLayer(treenode)) {
                            break;
                        }
                    }

                    if (!this.parentNode) {
                        contentPane.TREEMGR[o.reportIndex].nodes[contentPane.TREEMGR[o.reportIndex].nodes.length] = this;
                    }
                } else {
                    if (this.options.parNode != 'null') {
                        this.parent = contentPane.TREEMGR[o.reportIndex].location_nodes[this.options.parNode];
                        if (this.parent) {
                            if (this.parent.sonNodes) {
                                this.parent.sonNodes[this.parent.sonNodes.length] = this;
                            } else {
                                this.parent.sonNodes = [];
                                this.parent.sonNodes[0] = this;
                            }
                        }
                    }

                    contentPane.TREEMGR[o.reportIndex].location_nodes[this.options.location] = this;
                }

                this.mgr = contentPane.TREEMGR[this.options.reportIndex];
                if (!this.mgr.row_expand_state) {
                    this.mgr.row_expand_state = [];
                    this.mgr.col_expand_state = [];

                    for (var i = 1; i < this.options.sonarray.length; i++) {
                        if (this.expand_mode === 0) {
                            this.mgr.row_expand_state[this.options.sonarray[i]] = 0;
                        } else if (this.expand_mode === 1) {
                            this.mgr.col_expand_state[this.options.sonarray[i]] = 0;
                        }
                    }
                }

                this.cells = [];
            } else {
                this.expand_mode = -1; // -1不理睬 0纵向 1横向
            }

        },

        initNodeLayer: function (treenode) {
            if (treenode.expand_mode == this.expand_mode) {
                var matchValue = this.options.sonarray[1];
                // 进行匹配，有一个在里面就是子节点了
                for (var s = 1; s < treenode.options.sonarray.length; s++) {
                    if (matchValue == treenode.options.sonarray[s]) {
                        if (treenode.sonNodes) {
                            for (var n = 0; n < treenode.sonNodes.length; n++) {
                                if (this.initNodeLayer(treenode.sonNodes[n])) {
                                    return true;
                                }
                            }

                            treenode.sonNodes[treenode.sonNodes.length] = this;
                            this.parentNode = treenode;
                        } else {
                            treenode.sonNodes = [];
                            treenode.sonNodes[0] = this;
                            this.parentNode = treenode;
                        }

                        return true;
                    } else if (matchValue < treenode.options.sonarray[s]) {
                        return false;
                    }
                }
            }

            return false;
        },

        onNodeClick: function () {
            this.treeNodeClick();
        },
        // 树节点的点击
        treeNodeClick: function () {
            if (!this.options.sonarray) {
                // nothing
            } else {
                this.TreeNodeAction(!this.expand_state);
            }

            this.fireEvent(FR.Events.CLICK);
            // 这里这个事件主要用于移动平台重新计算滚动区域
            _g().fireEvent("refresh");
        },

        /**
         * ie9下隐藏行设置 bug:55354,ie9下点击节点按钮，由于计算格子边框导致浏览器崩溃，这样处理下
         */
        hideTr: function (element) {
            if (FR.Browser.isIE9()) {
                var table = null;
                var obj = $(element);
                for (; !obj.is('BODY'); obj = obj.parent()) {
                    if (obj.is('TABLE')) {
                        table = obj;
                        break;
                    }
                }
                if (table == null) {
                    return;
                }
                var initValue = table.css("border-collapse");
                table.css("border-collapse", "separate");
                $(element).css("display", this.expand_state ? "none" : "");
                table.css("border-collapse", initValue);
            } else {
                $(element).css("display", this.expand_state ? "none" : "");
            }
        },

        // 把子节点控制的行列在自身中去除
        dealwithSelfSonArray: function () {
            var self = this;
            if (!this.options.isSonLoaded && this.expand_mode === 0) {
                var boundTr = self.options.$tr;//异步加载的子行的插入边界,正常情况下就是当前td的父tr 但是如果td的rowspan大于1就要往下找了REPORT-6720
                var tdSpan = parseInt(this.options.$td.attr('rowspan'));
                if (tdSpan > 1) {
                    boundTr = self.mgr.tr_array[parseInt(boundTr.attr('tridx')) + tdSpan - 1];
                }
                FR.ajax({
                    url: FR.servletURL + "?op=fr_view&cmd=read_t_content&sessionID=" + _g().currentSessionID,
                    type: "POST",
                    data: {'son': this.options.sonarray},
                    timeout: 600000,
                    async: false,
                    complete: function (res, status) {
                        if (status == 'success') {
                            self.options.isSonLoaded = true;
                            var sonTrs = FR.jsonDecode(res.responseText);
                            for (var i = sonTrs.length - 1; i > -1; i--) {
                                var $sonTr = $(sonTrs[i]);
                                boundTr.after($sonTr);
                                self.mgr.tr_array[self.options.sonarray[i + 1]] = $sonTr;
                            }
                            $.each(self.mgr.tr_array, function (idx, tr) {
                                if (tr) {
                                    $.each(tr.children("td[tdcol]"), function (iidx, td) {
                                        td = $(td);
                                        var col = parseInt(td.attr("tdcol"));
                                        if (!self.mgr.td_table) {
                                            self.mgr.td_table = [];
                                        }
                                        if (!self.mgr.td_table[col]) {
                                            self.mgr.td_table[col] = [];
                                        }
                                        if (!self.mgr.td_table[col][idx]) {
                                            self.mgr.td_table[col][idx] = td;
                                            if (self.mgr.col_expand_state[col] === 1) {
                                                td.css("display", "");
                                            }
                                        }
                                    });
                                }
                            });
                        }
                    }
                });
            }
            if (this.options.needInit === false) {
                this.result_son_array = this.options.sonarray;
            } else if (this.sonNodes) {
                for (var i = 0; i < this.sonNodes.length; i++) {
                    var n = 1;
                    for (var j = 1; j < this.sonNodes[i].options.sonarray.length
                    && n < this.options.sonarray.length; j++) {
                        if (this.options.sonarray[n] == -1
                            || this.sonNodes[i].options.sonarray[j] > this.options.sonarray[n]) {
                            j--;
                            n++;
                            continue;
                        } else if (this.sonNodes[i].options.sonarray[j] == this.options.sonarray[n]) {
                            this.options.sonarray[n] = -1;
                            n++;
                            continue;
                        }
                    }
                }

                this.result_son_array = [];
                this.result_son_array[0] = this.options.sonarray[0];
                for (var i = 1; i < this.options.sonarray.length; i++) {
                    if (this.options.sonarray[i] >= 0) {
                        this.result_son_array[this.result_son_array.length] = this.options.sonarray[i];
                    }
                }
            } else {
                this.result_son_array = this.options.sonarray;
            }

            // 表示是纵向收缩的
            if (this.expand_mode === 0) {
                var tr;
                for (var i = this.result_son_array.length - 1; i > 0; i--) {
                    tr = this.mgr.tr_array[this.result_son_array[i]];
                    if (!tr.hasClass('tntr')) {
                        this.result_son_array.splice(i, 1); // 没有就不是控制下的
                    }
                }
            }
        },

        // 伸缩处理
        TreeNodeAction: function (expand) {
            if (expand == this.expand_state) {
                return;
            }
            var self = this;
            if (!this.mgr) {
                this.mgr = _g().TREEMGR[this.options.reportIndex];
            }
            if (!this.mgr.tr_array) {
                var contentPane = _g().curLGP;
                this.mgr.tr_array = [];
                var tr;
                var $center = $('.frozen-center', contentPane.$container);
                var $west = $('.frozen-west', contentPane.$container);
                var $north = $('.frozen-north', contentPane.$container);
                var targetDomElement = $center;
                // 说明是west区域包含折叠树控件
                if ($west.length > 0 && $west[0].contains(this.$btn[0])) {
                    targetDomElement = $west;
                } else if ($north.length > 0 && $north[0].contains(this.$btn[0])) {
                    targetDomElement = $north;
                }
                // 与655不同，如果冻结$container下面还有个tbody的,并且没有把frozen-center放在第一个。
                var $table = $("table:eq(0)", targetDomElement.length > 0
                    ? targetDomElement
                    : contentPane.$container);
                $.each(($table.children("tbody")).children("tr[tridx]"), function (idx, item) {
                    tr = $(item);
                    self.mgr.tr_array[parseInt(tr.attr("tridx"))] = tr;
                });
            }
            if (!this.result_son_array) {
                this.dealwithSelfSonArray();
            }
            this.selected(expand);

            // 表示是纵向收缩的
            if (this.expand_mode === 0) {
                var curTD = this.options.$td;
                if (curTD.attr('relatedPar')) {
                    var tdID = curTD.attr('id');
                    var splitIdx = tdID.indexOf('-');
                    if (splitIdx > 0) {
                        //-1的原因是要减去自身
                        var change = this.expand_state ? -(this.result_son_array.length - 1) : (this.result_son_array.length - 1);
                        var relatedPar = curTD.attr('relatedPar').split(',');
                        $.each(relatedPar, function (index, item) {
                            var spanID = item + tdID.substr(splitIdx);
                            var $relationTD = $('#' + spanID);
                            if ($relationTD.length > 0) {
                                $relationTD.attr('rowspan', parseInt($relationTD.attr('rowspan')) + change);
                            }
                        });
                    }
                }
                var tr;
                for (var i = 1; i < this.result_son_array.length; i++) {
                    tr = this.mgr.tr_array[this.result_son_array[i]];
                    if (tr) {
                        this.hideTr(tr);
                        // ie 不但要弄tr td也需要弄
                        if (FR.Browser.isIE()) {
                            if (!this.cells[this.result_son_array[i]]) {
                                this.cells[this.result_son_array[i]] = [];
                                var td;
                                $.each(tr.children("td[tdcol]"), function (index, item) {
                                    td = $(item);
                                    self.cells[self.result_son_array[i]][parseInt(td.attr("tdcol"))] = td;
                                });
                            }

                            $.each(this.cells[this.result_son_array[i]], function (index, td) {
                                if (!td || (!self.expand_state && (self.mgr.col_expand_state[index] === 0
                                    || (self.mgr.col_expand_state[index] == null && td.attr("realhd") != null)))) {
                                    return;
                                }
                                td.css("display", self.expand_state ? "none" : "");
                            });
                        }

                        this.mgr.row_expand_state[this.result_son_array[i]] = this.expand_state
                            ? 0
                            : 1;
                    }
                }
                // 横向
            } else if (this.expand_mode === 1) {
                var rowcount = this.result_son_array[0];
                var td;
                var col;
                if (!this.mgr.td_table) {
                    this.mgr.td_table = [];
                    $.each(self.mgr.tr_array, function (idx, tr) {
                        if (tr) {
                            $.each(tr.children("td[tdcol]"), function (iidx, td) {
                                td = $(td);
                                col = parseInt(td.attr("tdcol"));
                                if (!self.mgr.td_table[col]) {
                                    self.mgr.td_table[col] = [];
                                }
                                self.mgr.td_table[col][idx] = td;
                            });
                        }
                    });
                }

                var td_array;
                for (var i = 1; i < self.result_son_array.length; i++) {
                    td_array = self.mgr.td_table[self.result_son_array[i]];
                    if (td_array) {
                        $.each(td_array, function (idx, td) {
                            if (td) {
                                if (!self.expand_state && self.mgr.row_expand_state[idx] === 0) {
                                    if (FR.Browser.isIE()) {
                                        return;
                                    }
                                }
                                td.css("display", self.expand_state ? "none" : "");
                            }
                        });
                    }
                }

                for (var i = 1; i < this.result_son_array.length; i++) {
                    this.mgr.col_expand_state[this.result_son_array[i]] = this.expand_state
                        ? 0
                        : 1;
                }
            }

            if (this.sonNodes) {
                if (this.expand_state) {
                    this.last_son_state = [];
                    for (var i = 0; i < this.sonNodes.length; i++) {
                        this.last_son_state[i] = this.sonNodes[i].selected();
                        this.sonNodes[i].TreeNodeAction(false);
                    }
                } else if (this.last_son_state) {
                    for (var i = 0; i < this.sonNodes.length; i++) {
                        this.sonNodes[i].TreeNodeAction(this.last_son_state[i]);
                    }
                }
            }

            this.expand_state = !this.expand_state;
        }
    });
    $.shortcut("treenode", FR.TreeNodeToggleButton);
})(jQuery);
/**
 * Created by richie on 15/11/12.
 */
;(function($){
    /**
     * 分页预览页面对象
     * @type {void|*}
     */
    FR.PagePane = FR.extend(FR.BasePane, {
        rtype: "page",
        doAfterCollapse: function () {
            var $frozen = $(".frozen-page", contentPane.$contentPane);
            if ($frozen && $frozen.length > 0) {
                FR.layoutFrozen($frozen, contentPane.$contentPane.offset().top);
            }
        }
    });
    FR.PagePane.exetendPara = {};
    $.shortcut("page", FR.PagePane);

    FR.PreviewPane = FR.extend(FR.BasePane, {
        rtype: "preview"
    });
    $.shortcut("preview", FR.PreviewPane);

    FR.SimpleSheetPane = FR.extend(FR.BasePane, {
        rtype: "simplesheet",

        loadReportPane: function (options) {
        }
    });
    $.shortcut("simplesheet", FR.SimpleSheetPane);

})(jQuery);
/**
 * Created by richie on 15/11/12.
 */
;(function($){
    /**
     * 数据分析
     * @type {void|*}
     */
    FR.ViewPane = FR.extend(FR.BasePane, {
        rtype: "view",
        doAfterCollapse: function () {
            var $frozen = $('.frozen-center', this.$container);
            if ($frozen && $frozen.length > 0) {
                FR.layoutFrozen(contentPane.curLGP.$sheet_container, contentPane.curLGP.$sheet_container.offset().top);
            }
        }
    });
    $.shortcut("view", FR.ViewPane);
})(jQuery);
/**
 * Created by richie on 15/11/12.
 */
;(function($){
    FR.AnalysisPane = FR.extend(FR.BasePane, {
        rtype: "analysis"
    });
    $.shortcut("analysis", FR.AnalysisPane);
})(jQuery);
/**
 * Created by richie on 15/11/12.
 */
;(function($){
    FR.EditPane = FR.extend(FR.BasePane, {
        rtype: "edit"
    });
    $.shortcut("edit", FR.EditPane)
})(jQuery);
/**
 * Created by richie on 15/11/12.
 */
;(function($){
    /**
     * 填报预览
     * @type {void|*}
     */
    FR.WritePane = FR.extend(FR.BasePane, {
        rtype: "write",
        doAfterCollapse: function () {
            if (contentPane.curLGP && contentPane.curLGP.$sheet_container && contentPane.curLGP.isFrozen()) {
                FR.layoutFrozen(contentPane.curLGP.$sheet_container, contentPane.curLGP.$sheet_container.offset().top);
            }
        }
    });
    $.shortcut("write", FR.WritePane);
})(jQuery);
FR.YearPicker = FR.extend(FR.Widget, {
    CONSTS : {
        MINYEAR : 1900,
        MAXYEAR : 2999,
        NAV : {
            title : 4,
            clear : 5,
            thisyear : 6,
            yok : 7,
            prevy : 8,
            nexty : 9,
            cancel : 10,
            current : 15,
            tyear : 300
        }
    },
    _TT : {
        CLEAR : FR.i18nText("FR-Basic_Clear"),
        OK : FR.i18nText("FR-Basic_OK"),
        THISYEAR: FR.i18nText("FR-Engine-Year_ThisYear")
    },
    _defaultConfig : function() {
        return $.extend(FR.YearPicker.superclass._defaultConfig.apply(this, arguments), {
            widgetName : "datepicker",
            endYear : null,
            startYear : null,
            year : null,
            onYearUpdate : null,
            onClear : function() {
                this._hideView();
            },
            onOK : function() {
                this._hideView();
            },
            onClose : function() {
                this._hideView();
            },
            onThisYear : function() {
                this._hideView();
            }
        });
    },
    _hideView : function() {
        if (FR.Browser.isIE8()) {
            this.element.css("visibility", "hidden");
        } else {
            this.element.hide();
        }
    },
    _init : function() {
        FR.YearPicker.superclass._init.apply(this, arguments);
        if(this.options.year==""){
            this.options.year=new Date().getFullYear();
        }
        this._resetRangeYear(this.options.year);
        this.element.addClass("fr-datepicker");
        if(!this.options.year || this.options.year == null){
            this.options.year = new Date().getFullYear();
        }

        this.cache = {
            showYear : null
        };
        this._initTables();
        this._bindEvts();
    },

    _bindEvts : function(){
        this.element.unbind();
        var a = this, g = this.options, d = this.CONSTS.NAV;
        var c = this.$yeartable;
        var b = function(l){
            var m = l.target;
            var k = l.type;
            var j = $(m).data("nav");
            if ($(m).data("disabled") || m.tagName !== "TD" || !j) {
                return;
            }
            if (!a.options.year) {
                a.options.year = new Date().getFullYear();
            }
            if (k === "mouseover") {
                $(m).addClass("hover");
            }else {
                if (k === "mouseup") {
                    switch(j) {
                        case d.prevy:
                            a._toPrevDecade();
                            a._loadYearData(c,a.options.year);
                            FR.applyFunc(a, g.onDateUpdate, arguments);
                            break;
                        case d.nexty:
                            a._toNextDecade();
                            a._loadYearData(c, a.options.year);
                            FR.applyFunc(a, g.onDateUpdate, arguments);
                            break;
                        case d.tyear:
                            a.cache.selectedYear && a.cache.selectedYear.removeClass("selected");
                            a.cache.selectedYear = $(m).addClass("selected");
                            var i = $(m).text();
                            a.setValue(i);
                            FR.applyFunc(a, g.onYearUpdate, arguments);
                            FR.applyFunc(a, g.onClose, arguments);
                            break;
                        case d.thisyear:
                            var h = new Date().getFullYear();

                            if ((a.options.startYear && h < a.options.startYear) || (a.options.endYear && h > a.options.endYear)) {
                                return;
                            } else {
                                a.options.Year = h;
                                a.setValue(h);
                                //alert(a.options.Year+","+h);
                            }
                            FR.applyFunc(a, g.onYearUpdate, arguments);
                            FR.applyFunc(a, g.onThisYear, arguments);
                            break;
                        case d.yok:
                            FR.applyFunc(a, g.onYearUpdate, arguments);
                            FR.applyFunc(a, g.onOK, arguments);
                            break;
                        case d.clear:
                            a.options.year = null;
                            a.cache.selectedYear && a.cache.selectedYear.removeClass("selected");
                            FR.applyFunc(a, g.onYearUpdate, arguments);
                            FR.applyFunc(a, g.onClear, arguments);
                            break;
                        case d.current:
                            a.options.year = new Date().getFullYear();
                            FR.applyFunc(a, g.onYearUpdate, arguments);
                    }
                }else {
                    if (k === "mouseout") {
                        $(m).removeClass("hover");
                    }
                }
            }
        };
        this.element.bind("mousedown", b).bind("mouseover", b).bind("mouseup", b).bind("mouseout", b);
    },
    _toPrevDecade : function() {
        var e = this.rangetMaxYear, a = this.rangetMinYear;
        this.rangetMaxYear = e-20;
        this.rangetMinYear = a-20;
    },
    _toNextDecade : function() {
        var e = this.rangetMaxYear, a = this.rangetMinYear;
        this.rangetMaxYear = e+20;
        this.rangetMinYear = a+20;
    },
    _resetRangeYear : function(y){
        var d = parseInt(y)
        var x = d%20;
        if(x==0){
            this.rangetMinYear = d-20+1;
            this.rangetMaxYear = d;
        }else{
            this.rangetMinYear = d-x+1;
            this.rangetMaxYear = d+(20-x);
        }
    },
    _initTables : function() {
        var a = this.options;
        this.$yeartable = this._createYearPicker();
        this._loadYearData(this.$yeartable, this.options.year);
        this.$yeartable.appendTo(this.element).show();
    },
    _createYearPicker : function() {
        var j = $('<table cellspacing = "0" cellpadding = "0" class="dt"/>');
        var a = this.CONSTS.NAV;
        var f = $("<thead/>").appendTo(j);
        k = $('<tr class = "mainhead"/>');
        j.$prevy = this._createCell(k, "&lsaquo;", 1, a.prevy, "prevy");
        j.$title = $('<td class="title" colspan="2"/>').data("nav", a.title).appendTo(k);
        j.$nexty = this._createCell(k, "&rsaquo;", 1, a.nexty, "nexty");
        k.appendTo(f);
        var d = $('<tbody onselectstart="return false"/>').appendTo(j);
        for ( c = 5; c > 0; c--) {
            var k = $("<tr/>").appendTo(d);
            for (var h = 0; h < 4; h++) {
                $("<td/>").appendTo(k);
            }
        }
        var g = $("<tfoot/>").appendTo(j);
        var k = $('<tr class = "optbtns"/>');
        this._createCell(k, this._TT.CLEAR, 1, a.clear, "clear");
        this._createCell(k, this._TT.THISYEAR, 2, a.thisyear, "thisyear");
        this._createCell(k, this._TT.OK, 1, a.yok, "ok");
        k.appendTo(g);
        return j;
    },

    _loadYearData : function(s, u) {
        if (!u) {
            return;
        }
        this.cache.showYear = u;
        var x = this.options.startYear, r = this.options.endYear;
        s.$title.text(this.rangetMinYear+"--"+this.rangetMaxYear);
        s.$title.removeClass("hover").data("disabled", true);
        var b = this.rangetMaxYear;

        if ((r && b > r) || b > this.CONSTS.MAXYEAR) {
            s.$nexty.addClass("disabled").removeClass("hover").data("disabled", true);
        } else {
            s.$nexty.removeClass("disabled").data("disabled", false);
        }
        var o = this.rangetMinYear;
        if ((x && o < x) || o < this.CONSTS.MINYEAR) {
            s.$prevy.addClass("disabled").removeClass("hover").data("disabled", true);
        } else {
            s.$prevy.removeClass("disabled").data("disabled", false);
        }
        var m = s.find("tbody").children().eq(0);
        var w ;
        for (var q = 0; q < 5; q++) {
            if (!m.length) {
                break;
            }
            var d = m.children().eq(0);
            w = o+q*4;
            var e;
            for (var n = 0; n < 4; ++n) {
                d.removeClass().data("nav", this.CONSTS.NAV.tyear);
                if (!d.length) {
                    break;
                }
                e = w+n;
                d.text(e);
                var c = false;
                if ((x != null && x > e) || (r != null && r < e)) {
                    d.addClass("tyear disabled");
                    c = true;
                } else {
                    d.addClass("tyear");
                }
                d.data("disabled", c);
                if (!c) {
                    if (e == u) {
                        this.cache.selectedYear && this.cache.selectedYear.removeClass("selected");
                        d.addClass("selected");
                        this.cache.selectedYear = d;
                    }
                    if ( e == u) {
                        d.addClass("thisyear");
                    }
                }
                d = d.next();
            }
            m = m.next();
        }
    },
    _createCell : function(c, e, f, d, a) {
        var b = $("<td class/>").attr("colSpan", f).html(e).appendTo(c);
        if (d) {
            b.data("nav", d);
        }
        a = a ? "btn " + a : "btn";
        b.addClass(a);
        return b
    },
    getValue : function() {
        return this.options.year;
    },
    setValue : function(a) {
        this.options.year = a;
    },
    getText : function() {
        return this.getValue();
    },
    setText : function(a) {
        this.setValue(a);
    }
});
$.shortcut("yearpicker", FR.YearPicker);
FR.BaseYearEditor = FR.extend(FR.TriggerEditor, {
	_defaultConfig : function() {
		return $.extend(FR.BaseYearEditor.superclass._defaultConfig.apply(), {});
	},
	_init : function() {
		FR.BaseYearEditor.superclass._init.apply(this, arguments);
		if (this.options.value) {
			this._dealValueWithEvents(this.options.value);
		}
	},
	_dealValueWithEvents : function(f){
		if (FR.isEmpty(f)) {
			this.reset();
			return;
		}
		var h = f || "";
		if (h.year) {
			h = h.year;
		}
		if (h == "Invalid Date" || h == "NaN" || h === false) {
			h="";
		}
		this.setText(h);
		this.options.currentYear = h;
		var d = this.options.value;
		this.options.value = f;
		if (arguments[1] !== false) {
			this.fireEvent(FR.Events.CHANGE, f, d);
		}
	},
	setText : function(b) {
		this.editComp.val(b);
	},
	setStartOrEndYear : function(c, b) {
		if (!b) {
			return;
		}
		if (c == "startYear") {
			this.options.startYear = b;
			this.sty = b;
		} else {
			if (c == "endYear") {
				this.options.startYear = b;
				this.edy = b;
			}
		}
	},
	setStartYear : function(b) {
		this.setStartOrEndYear("startYear", b);
	},
	setEndYear : function(b) {
		this.setStartOrEndYear("endYear", b);
	},
	setText : function(b) {
		this.editComp.val(b);
	},
	recoveryValue : function() {
		this.editComp.val(this.options.oldValue);
	},
	isValidate : function(d) {
		var c = this.options.allowBlank !== false;
		var b = this.sty;
		var h = this.edy;
		var g = this.editComp.val();
		if ((!g) ||  g.length === 0) {
			if (c) {
				return true;
			} else {
				this.errorMsg = this.options.errorMsg || FR.i18nText("FR-Engine-Not_NULL");
				return false;
			}
		}
		if((/^[1-9][0-9]*$/.test(g)) && g>0 ){

		}else{
			this.errorMsg = FR.i18nText("FR-Engine-Year_Value_Not_Match");
			return false;
		}
		if(g != null){
			if (b && g < b) {
				this.errorMsg = this.options.errorMsg || FR.i18nText("FR-Engine-Err-The_Number_Is_Less_Than_The_Minimum_Value") + b;
				return false;
			}
			if (h && g > h) {
				this.errorMsg = this.options.errorMsg || FR.i18nText("FR-Engine-Err-The_Number_Is_Larger_Than_The_Maximum_Value") + h;
				return false;
			}
			if (g > 2999 || g < 1900) {
				this.errorMsg = "out of range";
				return false;
			}
		}
		return true;
	},
	reset : function() {
		this.setText("");
	}
});
$.shortcut('baseyeareditor', FR.BaseYearEditor);
FR.Year = FR.extend(FR.BaseYearEditor, {
    _defaultConfig : function() {
        return $.extend(FR.Year.superclass._defaultConfig.apply(), {
            directEdit : true
        });
    },
    _init : function() {
        FR.Year.superclass._init.apply(this, arguments);
        this.switchArrow();
        if (this.options.widgetCss && this.options.widgetCss.length !== 0) {
            $.each(this.options.widgetCss, function(c, d) {
                FR.$import(d, "css", true)
            })
        }
        var b = this.options;
        this.sty= this._createStartYear(b.startYear);
        this.edy = this._createEndYear(b.endYear);
        var a = this;
        if (!this.$view) {
            this.$view = $("<div/>").appendTo(FR.$view_container).hide()
        }
        this.editComp.keydown(function(c) {
            a.editComp[0].realValue = null
        });
        $(this.editComp).keyup(function() {
            if ($(this).val() == a.oriText) {
                return
            }
            a.isValidateInput();
            a.oriText = $(this).val();
            a.fireEvent(FR.Events.AFTEREDIT)
        });
    },
    getArrowIconHeight : function() {
        return 17;
    },
    switchArrow : function() {
        this.arrow.switchClass("fr-trigger-center", "fr-date-trigger-center");
    },
    _applyInvalidCss : function(a) {
        this.errorMsg = a;
        this.invalidateCss();
    },
    onTriggerClick : function(a) {
        if (!this.isEnabled()) {
            return;
        }
        if (document.activeElement != this.editComp[0]) {
            this.editComp.focus();
        }
        if (this.isExpanded()) {
            if (FR.Browser.isIE8() && this.$view.css("visibility") == "hidden") {
                this.$view.css("visibility", "visible");
            } else {
                this.$view.show();
            }
        } else {
            this.$view.empty();
            this._createCalendar();
        }
    },
    _showView : function() {
        if (FR.Browser.isIE8() && this.$view.css("visibility") == "hidden") {
            this.$view.css("visibility", "visible");
        } else {
            this.$view.show();
        }
    },
    _createStartYear : function(d) {
        if (FR.isEmpty(d)) {
            return null
        }
        var a = d;
        return a
    },
    _createEndYear : function(c) {
        if (FR.isEmpty(c)) {
            return null
        }
        var d = c;
        return d;

    },
    modifyPosition : function() {
        this.tH = this.$view.height();
        this.tW = this.$view.width();
        FR.Year.superclass.modifyPosition.apply(this, arguments);
    },
    _createCalendar : function() {
        var e = this.options;
        var b = this;
        if (this.options.need2BuildConfig === true && this.options.data) {
            this.options.data.resetStatus(this.createDependencePara4Data());
            var c = this.options.data.getData();
            if (c[0].data) {
                if (c[0].data.startYear) {
                    this.sty = this._createStartYear(e.startYear);
                }
                if (c[0].data.endYear) {
                    this.edy = this._createEndYear(e.endYear);
                }
            }
            this.options.rebuildConfig = false;
        }
        this.yearpicker = new FR.YearPicker({
            renderEl : this.$view,
            year : b.editComp.val(),
            startYear : this.sty,
            endYear : this.edy,
            onYearUpdate : function() {
                b.editComp.val(this.getValue());
                b.isValidateInput();
                b.fireEvent(FR.Events.AFTEREDIT);
            }
        });
        if (FR.Browser.isIE8() && this.$view.css("visibility") == "hidden") {
            this.$view.css("visibility", "visible");
        } else {
            this.$view.show();
        }
        $(document).bind("mousedown", this, this.collapseIf);
        this.modifyPosition();
    },
    getValue : function() {
        var a = this.editComp.val();
        return  a;
    },
    isValidateInput : function(j) {
        var e = this.sty;
        var f = this.edy;
        var i = this;
        var a = true;
        var c = j ? j : this.editComp.val().year;
        if(c != null){
            if (e && c && c <e ){
                this._applyInvalidCss(FR.i18nText("Err-The_number_is_less_than_the_minimum_value") + e);
            } else {
                if (f && c && c > f) {
                    this._applyInvalidCss(FR.i18nText("Err-The_number_is_larger_than_the_maximum_value") + f);
                } else {
                    if (c > 2999 || c < 1900) {
                        this._applyInvalidCss("out of range");
                    } else {
                        this.validateCss();
                    }
                }
            }
        }
    },
    reset : function() {
        FR.Year.superclass.reset.apply(this, arguments);
        this.editComp[0].realValue = null;
        this.options.currentYear = null;
        this.options.need2BuildConfig = true;
        if (this.options.data) {
            delete this.options.data.records;
        }
    }
});
$.shortcut('year', FR.Year);
FR.CusForm = FR.extend(FR.Form, {
    /**
     * 上传到服务器
     * @param {JSON} o 配置属性
     * @param {JSON} target 目标对象
     */
    serverCommit: function (o, target) {
        var self = this;
        if (_g().saveReport) {
            _g().saveReport((function () {
                this.formSubmit({
                    url: FR.servletURL + "?op=customcommit",
                    data: {
                        cmd: o.cmd,
                        location: target
                            ? target.options.location
                            : null,
                        sheetNum: _g().selectedIndex,
                        xmlconf: o.xmlconf,
                        sessionID: _g().currentSessionID || _g().sessionID
                    },
                    callback: function (res) {
                        self.showResult(res);
                    }
                });
            }).createDelegate(this));
        } else {
            this.formSubmit({
                url: FR.servletURL + "?op=customcommit",
                data: {
                    xmlconf: o.xmlconf,
                    cmd: o.cmd,
                    sessionID: _g().currentSessionID || _g().sessionID

                },
                callback: function (res) {
                    self.showResult(res);
                }
            });
        }
    },
    /**
     * 上传FTP
     * @param o
     * @param target
     */
    ftpCommit: function (o, target) {
        var self = this;
        if (_g().saveReport) {
            _g().saveReport((function () {
                this.formSubmit({
                    url: FR.servletURL + "?op=customcommit",
                    data: {
                        cmd: o.cmd,
                        location: target ? target.options.location : null,
                        sheetNum: _g().selectedIndex,
                        xmlconf: o.xmlconf,
                        sessionID: _g().currentSessionID || _g().sessionID
                    },
                    callback: function (res) {
                        self.showResult(res);
                    }
                });
            }).createDelegate(this));
        } else {
            this.formSubmit({
                url: FR.servletURL + "?op=customcommit",
                data: {
                    xmlconf: o.xmlconf,
                    cmd: o.cmd,
                    sessionID: _g().currentSessionID || _g().sessionID

                },
                callback: function (res) {
                    self.showResult(res);
                }
            });
        }
    },

    showResult: function (res) {
        var submitInfo;
        var json_array = FR.jsonDecode(res.responseText);
        if (json_array.length > 0) {
            $.each(json_array, function (idx, item) {
                if (item.fr_submitinfo) {
                    submitInfo = item.fr_submitinfo;
                }
            });
        }
        var success = submitInfo.success;
        if (success !== true && success !== false) {
            FR.Msg.toast(FR.i18nText("FR-Engine_Report") + FR.i18nText("FR-Engine-Report-Write_Attributes_Msg"));
        } else if (success === true) {
            FR.Msg.toast(FR.i18nText("FR-Engine_Successfully"));
        } else if (success === false) {
            FR.Msg.toast(FR.i18nText("FR-Engine_Failed") + ":" + submitInfo.failinfo);
        }
    }
});
$.extend(FR, {
    doHyperlinkByDownload: function (path, encode) {
        if (arguments.length < 1) {
            return;
        }
        var options = arguments[0];
        if (typeof options === 'object') {
            path = options.fid || '';
            encode = options.encode || '';
        }
        this.ajax({
            url: FR.servletURL + '?op=customcommit&cmd=checkfile',
            async: true,
            data: {
                fid: encodeURIComponent(path),
                sessionID: FR.SessionMgr.getSessionID()
            },
            type: 'post',
            complete: function (res, status) {
                var o = FR.jsonDecode(res.responseText);
                if (o.fid) {
                    window.location = FR.servletURL + "?op=customcommit&cmd=downloadfile&fid=" + o.fid + "&encode=" + encode + "&sessionID=" + FR.SessionMgr.getSessionID();
                } else {
                    FR.Msg.toast(FR.i18nText('FR-Plugin-Designer_Msg_Wrong_Path'));
                }
            }.createDelegate(this)
        });
    }
});
